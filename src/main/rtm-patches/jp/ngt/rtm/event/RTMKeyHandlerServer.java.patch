--- a/jp/ngt/rtm/event/RTMKeyHandlerServer.java
+++ b/jp/ngt/rtm/event/RTMKeyHandlerServer.java
@@ -10,14 +10,14 @@
    public static final RTMKeyHandlerServer INSTANCE = new RTMKeyHandlerServer();
 
    public void onKeyDown(EntityPlayer player, byte keyCode, String sound) {
       switch(keyCode) {
       case 2:
-         this.playSound(player, sound, 10000.0F);
+         this.playSound(player, sound, 10000.0F, false);
          break;
       case 3:
-         this.playSound(player, sound, 1.0F);
+         this.playSound(player, sound, 1.0F, true);
          break;
       case 4:
          RTMCore rtmcore = RTMCore.instance;
          player.openGui(RTMCore.instance, RTMCore.guiIdTrainControlPanel, player.world, player.getRidingEntity().getEntityId(), 0, 0);
          break;
@@ -47,14 +47,21 @@
          entityvehicle.setUpDown(updown);
       }
 
    }
 
-   private void playSound(EntityPlayer player, String sound, float vol) {
+   private void playSound(EntityPlayer player, String sound, float vol, boolean allCar) {
       EntityTrainBase entitytrainbase = this.getRidingTrain(player);
       if (entitytrainbase != null && sound != null) {
-         RTMCore.proxy.playSound(entitytrainbase, sound, vol, 1.0F);
+         if (allCar && entitytrainbase.getFormation() != null) {
+            java.util.Arrays.stream(entitytrainbase.getFormation().entries)
+               .map(formationEntry -> formationEntry.train)
+               .filter(java.util.Objects::nonNull)
+               .forEach(entryTrain -> RTMCore.proxy.playSound(entryTrain, sound, vol, 1.0F));
+         } else {
+            RTMCore.proxy.playSound(entitytrainbase, sound, vol, 1.0F);
+         }
       }
 
    }
 
    private void setATS(EntityPlayer player) {
