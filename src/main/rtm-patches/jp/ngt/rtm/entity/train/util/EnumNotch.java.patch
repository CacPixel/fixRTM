--- a/jp/ngt/rtm/entity/train/util/EnumNotch.java
+++ b/jp/ngt/rtm/entity/train/util/EnumNotch.java
@@ -86,18 +86,39 @@
 
          return inertia;
       }
    }
 
-   public static float getAcceleration(int notch, float prevSpeed, TrainConfig cfg) {
+   public static float getAcceleration(int notch, float prevSpeed, TrainConfig cfg, jp.ngt.rtm.entity.train.EntityTrainBase train) {
       if (notch == 0) {
          return 0.0F;
       } else if (notch > 0) {
          --notch;
-         return prevSpeed >= cfg.maxSpeed[notch] ? 0.0F : cfg.accelerateion;
+         if (prevSpeed >= cfg.maxSpeed[notch])
+            return 0.0F;
+         if (cfg.useVariableAcceleration) {
+            Object obj = jp.ngt.ngtlib.io.ScriptUtil.doScriptIgnoreError(
+               train.getResourceState().getResourceSet().serverSE,
+               "getAcceleration",
+               train,
+               prevSpeed);
+            return obj != null ? Float.parseFloat(obj.toString()) : 0.0f;
+         } else {
+            return cfg.accelerateions[Math.min(cfg.accelerateions.length - 1, notch)];
+         }
       } else {
-         float f = getNotch(notch).acceleration;
+         float deceleration;
+         if (cfg.useVariableDeceleration) {
+            Object obj = jp.ngt.ngtlib.io.ScriptUtil.doScriptIgnoreError(
+               train.getResourceState().getResourceSet().serverSE,
+               "getDeceleration",
+               train,
+               prevSpeed);
+            deceleration = obj != null ? Float.parseFloat(obj.toString()) : 0.0f;
+         } else {
+            deceleration = cfg.deccelerations[Math.min(cfg.deccelerations.length - 1, -notch)];
+         }
          float f1 = Math.abs(prevSpeed);
-         return f1 + f < 0.0F ? -f1 : f;
+         return f1 + deceleration < 0.0F ? -f1 : deceleration;
       }
    }
 }
