--- a/jp/ngt/rtm/entity/train/EntityTrainBase.java
+++ b/jp/ngt/rtm/entity/train/EntityTrainBase.java
@@ -72,18 +72,19 @@
    private static final int[] PANTO_POS_ZERO = new int[]{0, 0};
    private Ticket ticket;
    private final Set<ChunkPos> loadedChunks;
    private int prevChunkCoordX;
    private int prevChunkCoordZ;
+   private int prevChunkLoaderRadius;
 
    public EntityTrainBase(World world) {
       super(world);
       this.bogieController = new BogieController();
       this.brakeCount = 72;
       this.onRail = true;
       this.brakeAirCount = 2880;
-      this.loadedChunks = new HashSet<ChunkPos>();
+      this.loadedChunks = new java.util.LinkedHashSet<ChunkPos>();
       this.setSize(2.75F, 1.1875F);
       this.noClip = true;
    }
 
    public EntityTrainBase(World world, String s) {
@@ -448,11 +449,20 @@
             }
          }
 
          if (this.isControlCar() && flag && !this.world.isRemote) {
             ModelSetTrain modelsettrain = (ModelSetTrain)this.getResourceState().getResourceSet();
-            float f1 = EnumNotch.getAcceleration(i, f, (TrainConfig)modelsettrain.getConfig());
+            float f1 = EnumNotch.getAcceleration(i, Math.abs(f), (TrainConfig)modelsettrain.getConfig());
+            // f: speed
+            // f1: acceleration
+            byte dir = this.getVehicleState(TrainState.TrainStateType.Role);
+            if ((dir == TrainState.Role_Back.data && f > 0) || (dir == TrainState.Role_Front.data && f < 0)) {
+               f1 = Math.abs(f1);
+            }
+            if (dir == TrainState.Role_Back.data) {
+               f1 *= -1;
+            }
             if (i >= 0) {
                float f2;
                if (this.rotationPitch == 0.0F) {
                   float f3 = 2.0E-4F;
                   f2 = f > 0.0F ? f3 : (f < 0.0F ? -f3 : 0.0F);
@@ -462,11 +472,11 @@
                   f2 = NGTMath.sin(this.rotationPitch) * f4;
                }
 
                f = f + (f1 - f2);
             } else {
-               f = f + (f > 0.0F ? f1 : (f < 0.0F ? -f1 : 0.0F));
+               f = f + f1;
             }
 
             this.setSpeed(f);
          }
 
@@ -706,11 +716,12 @@
       }
 
    }
 
    public boolean isControlCar() {
-      return this.getVehicleState(TrainState.TrainStateType.Role) == TrainState.Role_Front.data;
+      byte role = this.getVehicleState(TrainState.TrainStateType.Role);
+      return role == TrainState.Role_Front.data || role == TrainState.Role_Back.data;
    }
 
    public boolean existBogies() {
       return this.getBogie(0) != null && this.getBogie(1) != null;
    }
@@ -890,10 +901,11 @@
          this.releaseTicket();
       }
 
       this.prevChunkCoordX = this.chunkCoordX;
       this.prevChunkCoordZ = this.chunkCoordZ;
+      this.prevChunkLoaderRadius = this.getVehicleState(TrainState.TrainStateType.ChunkLoader);
    }
 
    public boolean isChunkLoaderEnable() {
       return this.getVehicleState(TrainState.TrainStateType.ChunkLoader) > 0;
    }
@@ -910,11 +922,10 @@
    private boolean requestTicket() {
       Ticket ticket = RTMChunkManager.INSTANCE.getNewTicket(this.world, Type.ENTITY);
       if (ticket != null) {
          int i = this.getVehicleState(TrainState.TrainStateType.ChunkLoader);
          ticket.getModData();
-         ticket.setChunkListDepth(i);
          ticket.bindEntity(this);
          this.setChunkTicket(ticket);
          return true;
       } else {
          NGTLog.debug("[RTM] Failed to get ticket (Chunk Loader)");
@@ -938,20 +949,26 @@
       if (!this.world.isRemote) {
          if (this.ticket == null && !this.requestTicket()) {
             return;
          }
 
-         if (x != this.prevChunkCoordX || z != this.prevChunkCoordZ) {
+         if (this.getVehicleState(TrainState.TrainStateType.ChunkLoader) != this.prevChunkLoaderRadius
+                  || x != this.prevChunkCoordX || z != this.prevChunkCoordZ) {
             this.setupChunks(x, z);
          }
 
+         int chunkLoadSquareRadius = this.getVehicleState(TrainState.TrainStateType.ChunkLoader) * 2 + 1;
+         this.ticket.setChunkListDepth(Math.min(chunkLoadSquareRadius * chunkLoadSquareRadius, ForgeChunkManager.getMaxChunkDepthFor("rtm")));
+
          for(ChunkPos chunkpos : this.loadedChunks) {
             ForgeChunkManager.forceChunk(this.ticket, chunkpos);
+            ForgeChunkManager.reorderChunk(this.ticket, chunkpos);
          }
 
          ChunkPos chunkpos1 = new ChunkPos(x, z);
          ForgeChunkManager.forceChunk(this.ticket, chunkpos1);
+         ForgeChunkManager.reorderChunk(this.ticket, chunkpos1);
       }
 
    }
 
    private void setupChunks(int xChunk, int zChunk) {
