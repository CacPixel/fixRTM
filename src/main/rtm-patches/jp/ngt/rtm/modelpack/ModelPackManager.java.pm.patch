--- a/jp/ngt/rtm/modelpack/ModelPackManager.java
+++ b/jp/ngt/rtm/modelpack/ModelPackManager.java
@@ -48,32 +48,33 @@
 public final class ModelPackManager {
    public static final ModelPackManager INSTANCE = new ModelPackManager();
    private static final Pattern SC_INCLUDE = Pattern.compile("//include <(.+)>");
    private static final String[] ENCODING = new String[]{"UTF-8", "SJIS"};
    private final Map<String, ResourceType> typeMap = new HashMap<String, ResourceType>(32);
-   private final Map<ResourceType, Map<String, ResourceSet>> allModelSetMap = new HashMap<ResourceType, Map<String, ResourceSet>>(256);
-   private final Map<ResourceType, Map<String, ResourceSet>> smpModelSetMap = new HashMap<ResourceType, Map<String, ResourceSet>>(256);
-   private final Map<String, ResourceSet> dummyMap = new HashMap<String, ResourceSet>(32);
+   public final Map<ResourceType, Map<String, ResourceSet>> allModelSetMap = new HashMap<ResourceType, Map<String, ResourceSet>>(256);
+   public final Map<ResourceType, Map<String, ResourceSet>> smpModelSetMap = new HashMap<ResourceType, Map<String, ResourceSet>>(256);
+   public final Map<String, ResourceSet> dummyMap = new HashMap<String, ResourceSet>(32);
+   public final java.util.concurrent.locks.ReadWriteLock modelSetMapLock = new java.util.concurrent.locks.ReentrantReadWriteLock();
    public final List<ResourceSet> unconstructSets = new ArrayList<ResourceSet>(256);
    private final Map<String, IModelNGT> modelCache = new HashMap<String, IModelNGT>(128);
    private final Map<String, Map<String, ResourceLocation>> resourceCache = new HashMap<String, Map<String, ResourceLocation>>(256);
    private final Map<String, String> scriptCache = new HashMap<String, String>(64);
    public final List<File> fileCache = new ArrayList<File>(1024);
    public boolean modelLoaded;
    private static final String DEFAULT_DOMAIN = "minecraft";
 
    public void load(ModelPackLoadThread par1) {
-      List<File> list = NGTFileLoader.findFile((filex) -> {
+      List<File> list = NGTFileLoader.findFile((file) -> {
          String s2 = file.getAbsolutePath();
          String s3 = file.getName();
          return !s2.contains("block") && !s2.contains("item") && !s3.endsWith(".json");
       });
       this.fileCache.addAll(list);
       NGTLog.debug("[ModelPack] Start searching json");
       par1.setBarValue(0, ProgressStateHolder.ProgressState.SEARCHING_MODEL);
       par1.setBarMaxValue(1, 0, "Searching...");
-      List<File> list1 = NGTFileLoader.findFile((filex) -> {
+      List<File> list1 = NGTFileLoader.findFile((file) -> {
          String s2 = file.getAbsolutePath();
          String s3 = file.getName();
          return !s2.contains("block") && !s2.contains("item") && s3.endsWith(".json");
       });
       NGTLog.debug("[ModelPack] Find %d json", new Object[]{list1.size()});
@@ -103,11 +104,11 @@
       }
 
       NGTLog.debug("[ModelPack] Register %d json", new Object[]{i});
       par1.setBarValue(0, ProgressStateHolder.ProgressState.SEARCHING_RRS);
       par1.setBarMaxValue(1, 0, "Loading...");
-      List<File> list2 = NGTFileLoader.findFile((filex) -> {
+      List<File> list2 = NGTFileLoader.findFile((file) -> {
          return file.getName().startsWith("rrs_") && file.getName().endsWith(".png");
       });
       par1.setBarValue(0, ProgressStateHolder.ProgressState.LOADING_RRS);
       par1.setBarMaxValue(1, list2.size(), "");
       i = 0;
@@ -115,10 +116,11 @@
       for(File file2 : list2) {
          ++i;
          String s1 = file2.getName();
          par1.setBarValue(1, i, s1);
          RRSConfig rrsconfig = new RRSConfig(s1);
+         rrsconfig.file = file2;
          this.registerResourceSet(RTMResource.RRS, rrsconfig, "dummy_str");
       }
 
       TimeTableManager.INSTANCE.load();
       par1.loadFinished = true;
@@ -148,10 +150,11 @@
    public String registerResourceSet(ResourceType type, File file) throws IOException {
       for(String s2 : ENCODING) {
          try {
             String s3 = NGTText.readText(file, false, s2);
             ResourceConfig resourceconfig = (ResourceConfig)NGTJson.getObjectFromJson(s3, type.cfgClass);
+            resourceconfig.file = file;
             return this.registerResourceSet(type, resourceconfig, s3);
          } catch (IOException ioexception) {
             ioexception.printStackTrace();
          }
       }
@@ -161,12 +164,21 @@
 
    public String registerResourceSet(ResourceType type, ResourceConfig cfg, String origJson) {
       cfg.init();
       ResourceSet resourceset = this.getNewModelSet(type, new Class[]{type.cfgClass}, cfg);
       if (resourceset != null) {
+         com.anatawa12.fixRtm.asm.Preprocessor.ifDisabled("reduceConstructModelLog");
          NGTLog.debug("Registr resource : %s (%s)", new Object[]{cfg.getName(), type.name});
+         com.anatawa12.fixRtm.asm.Preprocessor.ifEnabled("reduceConstructModelLog");
+         NGTLog.trace("Registr resource : %s (%s)", new Object[]{cfg.getName(), type.name});
+         com.anatawa12.fixRtm.asm.Preprocessor.whatever("reduceConstructModelLog");
+         modelSetMapLock.writeLock().lock();
+         try {
          (this.allModelSetMap.get(type)).put(cfg.getName(), resourceset);
+         } finally {
+            modelSetMapLock.writeLock().unlock();
+         }
          this.unconstructSets.add(resourceset);
          resourceset.md5 = EncryptedModel.getMD5(EncryptedModel.formatJson(origJson));
          return cfg.getName();
       } else {
          throw new ModelPackException("Failed to create ResourceSet", cfg.getName());
@@ -183,10 +195,11 @@
             NGTLog.debug("[RTM] Send model to client : " + resourceconfig.getName());
             ++j;
          }
       }
 
+      com.anatawa12.fixRtm.network.NetworkHandler.sendPacketEPM(new com.anatawa12.fixRtm.network.SentAllModels(), player);
    }
 
    public void addModelSetName(int count, String typeName, String name) {
       assert NGTUtil.isSMP() && !NGTUtil.isServer();
 
@@ -228,16 +241,13 @@
          resourcetype1 = type.parent;
       }
 
       boolean flag = NGTUtil.isSMP() && !NGTUtil.isServer();
       Map<ResourceType, Map<String, ResourceSet>> map = flag ? this.smpModelSetMap : this.allModelSetMap;
-      T t = ((Map)map.get(resourcetype1)).get(name);
+      T t = (T)(map.get(resourcetype1)).get(name);
       if (t == null) {
-         t = this.dummyMap.get(type.hasSubType ? type.subType : type.name);
-         if (t == null) {
-            throw new ModelPackException("Default model is not registered.", name);
-         }
+         return (T)com.anatawa12.fixRtm.DummyModelPackManager.getSet(type, name);
       }
 
       return t;
    }
 
