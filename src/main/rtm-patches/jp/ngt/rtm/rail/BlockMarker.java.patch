--- a/jp/ngt/rtm/rail/BlockMarker.java
+++ b/jp/ngt/rtm/rail/BlockMarker.java
@@ -141,29 +141,34 @@
          return createRail(world, x, y, z, list, resourcestaterail, makeRail, flag);
       }
    }
 
    private List<RailPosition> searchAllMarker(World world, int x, int y, int z) {
-      List<RailPosition> list = new ArrayList<>();
       int i = RTMCore.railGeneratingDistance;
       int j = i * 2;
       int k = RTMCore.railGeneratingHeight;
-      int l = k * 2;
+      int xMin = x - i;
+      int xMax = x + i;
+      int yMin = y - i;
+      int yMax = y + i;
+      int zMin = z - i;
+      int zMax = z + i;
 
-      for(int i1 = 0; i1 < j; ++i1) {
-         for(int j1 = 0; j1 < l; ++j1) {
-            for(int k1 = 0; k1 < j; ++k1) {
-               int l1 = x - i + i1;
-               int i2 = y - k + j1;
-               int j2 = z - i + k1;
-               RailPosition railposition = this.getRailPosition(world, l1, i2, j2);
-               if (railposition != null) {
-                  list.add(railposition);
-               }
-            }
-         }
-      }
+      //noinspection FuseStreamOperations
+      List<RailPosition> list = world.loadedTileEntityList.stream()
+         .filter(TileEntityMarker.class::isInstance)
+         .map(TileEntityMarker.class::cast)
+         .filter(tile -> xMin <= tile.getX() && tile.getX() <= xMax
+            && yMin <= tile.getY() && tile.getY() <= yMax
+            && zMin <= tile.getZ() && tile.getZ() <= zMax)
+         .filter(tile -> Math.abs(tile.getY() - y) < k)
+         .sorted(java.util.Comparator.<TileEntity>comparingInt(v -> v.getPos().getX())
+            .thenComparingInt(v -> v.getPos().getY())
+            .thenComparingInt(v -> v.getPos().getZ()))
+         .map(TileEntityMarker::getMarkerRP)
+         .filter(java.util.Objects::nonNull)
+         .collect(java.util.stream.Collectors.toCollection(ArrayList::new));
 
       list.sort((arg0, arg1) -> {
          if (arg0.switchType != arg1.switchType) {
             return arg1.switchType - arg0.switchType;
          } else {
@@ -171,11 +176,16 @@
          }
       });
       return list;
    }
 
+   // signature compatibility
    public static boolean createRail(World world, int x, int y, int z, List<RailPosition> rps, ResourceStateRail state, boolean makeRail, boolean isCreative) {
+      return createRail(world, x, y, z, rps, state, makeRail, isCreative, null);
+   }
+
+   private static boolean createRail(World world, int x, int y, int z, List<RailPosition> rps, ResourceStateRail state, boolean makeRail, boolean isCreative, EntityPlayer player) {
       if (rps.size() == 1) {
          RailPosition railposition = rps.get(0);
          if (railposition.hasScript()) {
             createCustomRail(world, railposition, state, makeRail, isCreative);
          }
@@ -188,11 +198,11 @@
             RailPosition railposition2 = railposition1.blockY >= railposition4.blockY ? railposition4 : railposition1;
             RailPosition railposition3 = railposition1.blockY >= railposition4.blockY ? railposition1 : railposition4;
             createNormalRail(world, railposition2, railposition3, state, makeRail, isCreative);
          }
       } else if (rps.size() > 2) {
-         createSwitchRail(world, x, y, z, rps, state, makeRail, isCreative);
+         createSwitchRail(world, x, y, z, rps, state, makeRail, isCreative, player);
       }
 
       return false;
    }
 
@@ -247,14 +257,16 @@
 
          return false;
       }
    }
 
-   private static boolean createSwitchRail(World world, int x, int y, int z, List<RailPosition> list, ResourceStateRail prop, boolean makeRail, boolean isCreative) {
+   private static boolean createSwitchRail(World world, int x, int y, int z, List<RailPosition> list, ResourceStateRail prop, boolean makeRail, boolean isCreative, EntityPlayer player) {
       RailMaker railmaker = new RailMaker(world, list);
       SwitchType switchtype = railmaker.getSwitch();
       if (switchtype == null) {
+         if (world != null && !world.isRemote)
+            player.sendMessage(new net.minecraft.util.text.TextComponentTranslation("message.rail.switch_type", list.get(0).blockX, list.get(0).blockY, list.get(0).blockZ));
          return false;
       } else {
          RailMap[] arailmap = switchtype.getAllRailMap();
          if (arailmap == null) {
             return false;
@@ -292,18 +304,18 @@
                tileentitylargerailswitchcore.sendPacket();
                return true;
             } else {
                TileEntity tileentity = BlockUtil.getTileEntity(world, x, y, z);
                if (tileentity instanceof TileEntityMarker) {
-                  List<BlockPos> list = new ArrayList();
+                  List<BlockPos> list1 = new ArrayList();
 
                   for(int i = 0; i < list.size(); ++i) {
                      RailPosition railposition2 = list.get(i);
-                     list.add(new BlockPos(railposition2.blockX, railposition2.blockY, railposition2.blockZ));
+                     list1.add(new BlockPos(railposition2.blockX, railposition2.blockY, railposition2.blockZ));
                   }
 
-                  ((TileEntityMarker)tileentity).setMarkersPos(list);
+                  ((TileEntityMarker)tileentity).setMarkersPos(list1);
                }
 
                return false;
             }
          }
