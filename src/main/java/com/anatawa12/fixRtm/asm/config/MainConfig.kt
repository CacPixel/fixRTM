package com.anatawa12.fixRtm.asm.config

import com.anatawa12.fixRtm.Loggers
import net.minecraftforge.common.config.Config
import net.minecraftforge.common.config.Configuration
import net.minecraftforge.fml.common.FMLLog
import net.minecraftforge.fml.common.Loader

object MainConfig {
    private val configFile = Loader.instance().configDir.resolve("fix-rtm.cfg")
    private val config = Configuration(configFile)

    private const val categoryModelLoading = "model_loading"
    private const val categoryBetterRtm = "better_rtm"
    private const val categoryBetterNgtLib = "better_ngtlib"

    @JvmField
    val multiThreadModelConstructEnabled = config.getBoolean(
            "multiThreadConstructEnabled", categoryModelLoading,
            true,
            "constructs models using a thread with a number of logical cores")

    @JvmField
    val cachedPolygonModel = config.getBoolean(
            "cachedPolygonModelEnabled", categoryModelLoading,
            true,
            "caches obj, mqo model.")

    private val scriptingModeStr = config.getString(
            "scriptingMode", categoryModelLoading,
            "use-default",
            "scripting mode. the value is one of the list below:\n" +
                    "cache-with-rhino    : the fastest mode but not stable. some script may make error.\n" +
                    "better-with-nashorn : same runtime as RTM but a little faster than RTM.\n" +
                    "use-rtm-normal      : same as RTM. this is the slowest mode.\n" +
                    "use-default         : use default mode.\n")

    val scriptingMode: ScriptingMode

    init {
        val cachedScriptsEnabled = config.getCategory(categoryModelLoading).remove("cachedScriptsEnabled")
        if (cachedScriptsEnabled != null) { // cachedScriptsEnabledがある
            val categoryModelLoadingProp = config.getCategory(categoryModelLoading).get("scriptingMode")!!
            if (categoryModelLoadingProp.string.toLowerCase() == ScriptingMode.defaultConfigValue) { // scriptingModeがuse default
                if (!cachedScriptsEnabled.boolean) { // cached scriptがdisable
                    categoryModelLoadingProp.setValue(ScriptingMode.BetterWithNashorn.configValue)
                }
            }
        }
        var scriptingMode = ScriptingMode.getByConfigValue(scriptingModeStr.toLowerCase())
        if (scriptingMode == null) {
            if (scriptingModeStr.toLowerCase() == ScriptingMode.defaultConfigValue) {
                scriptingMode = ScriptingMode.default
            } else {
                Loggers.getLogger("Config").fatal("your scriptingMode is not valid so we use default.")
                scriptingMode = ScriptingMode.default
            }
        }
        this.scriptingMode = scriptingMode
    }

    @JvmField
    val useOurScripting = scriptingMode != ScriptingMode.UseRtmNormal

    @JvmField
    val reduceConstructModelLog = config.getBoolean(
            "reduceConstructModelLog", categoryModelLoading,
            true,
            "reduce 'Construct Model' and 'Registr resource' logs.")

    @JvmField
    val dummyModelPackEnabled = config.getBoolean(
            "dummyModelPackEnabled", categoryBetterRtm,
            true,
            "use dummy ModelPack generated by fixRTM for not loaded models")

    @JvmField
    val markerDistanceMoreRealPosition = config.getBoolean(
            "markerDistancesMoreRealPosition", categoryBetterRtm,
            true,
            "shows distance signs of marker at more real position")

    @JvmField
    val changeTestTrainTextureEnabled = config.getBoolean(
            "changeTestTrainTexture", categoryBetterRtm,
            true,
            "change texture for test train to make easy to identify test train and electric train")

    @JvmField
    val addAllowAllPermissionEnabled = config.getBoolean(
            "addAllowAllPermission", categoryBetterNgtLib,
            true,
            "adds a permission meaning all permissions are approved")

    @JvmField
    val addNegativePermissionEnabled = config.getBoolean(
            "addNegativePermission", categoryBetterNgtLib,
            true,
            "adds permissions to disallow some permission. this overrides op and 'fixrtm.all_permit'.")

    init {
        if (config.hasChanged()) {
            config.save()
        }
    }

    enum class ScriptingMode(val configValue: String) {
        CacheWithRhino("cache-with-rhino"),
        BetterWithNashorn("better-with-nashorn"),
        UseRtmNormal("use-rtm-normal"),
        ;

        companion object {
            private val byConfigValue = values().associateBy { it.configValue }

            fun getByConfigValue(value: String) = byConfigValue[value]

            val default = CacheWithRhino

            const val defaultConfigValue = "use-default"
        }
    }
}
