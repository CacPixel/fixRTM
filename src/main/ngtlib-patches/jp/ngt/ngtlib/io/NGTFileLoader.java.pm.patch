--- a/jp/ngt/ngtlib/io/NGTFileLoader.java
+++ b/jp/ngt/ngtlib/io/NGTFileLoader.java
@@ -40,11 +40,11 @@
       }
 
    }
 
    public static List<File> findFile(FileMatcher matcher) {
-      ScanResult scanresult = findFile(matcher);
+      ScanResult scanresult = findFile(new FileMatcher[] { matcher });
       return scanresult.asList();
    }
 
    public static ScanResult findFile(FileMatcher... matchers) {
       ScanResult scanresult = new ScanResult();
@@ -98,11 +98,11 @@
       try {
          ZipFile zipfile = getArchive(archive, encoding);
          zipfile.stream().filter((x) -> {
             return !x.isDirectory();
          }).forEach((entry) -> {
-            File file2 = new File(zip.getName(), entry.getName());
+            File file2 = new File(zipfile.getName(), entry.getName());
 
             for(FileMatcher filematcher : matchers) {
                if (filematcher.match(file2)) {
                   result.add(archive.getName(), filematcher, file2);
                }
@@ -157,24 +157,26 @@
       if (MODS_DIR != null) {
          return MODS_DIR;
       } else {
          MODS_DIR = new ArrayList<File>();
 
+         boolean dev = false;
          try {
             File file1 = new File(Thread.currentThread().getContextClassLoader().getResource("").getPath());
             if (!file1.getAbsolutePath().contains("mods")) {
                MODS_DIR.add(file1);
                NGTLog.debug("[NGTFL] Add mods dir : " + file1.getAbsolutePath());
+               dev = true;
             }
          } catch (NullPointerException var2) {
             ;
          }
 
          File file2 = NGTCore.proxy.getMinecraftDirectory("mods");
          String s = file2.getAbsolutePath();
-         if (s.contains(".") && !s.contains(".minecraft")) {
-            s = s.replace("\\.", "");
+         if (dev) {
+            s = s.replaceAll("\\\\.\\\\mods$", "\\\\mods");
          }
 
          MODS_DIR.add(new File(s));
          NGTLog.debug("[NGTFL] Add mods dir : " + s);
          return MODS_DIR;
@@ -240,16 +242,16 @@
    public static InputStream getInputStream(ResourceLocation par1) throws IOException {
       if (!NGTCore.proxy.isServer()) {
          return NGTUtilClient.getMinecraft().getResourceManager().getResource(par1).getInputStream();
       } else {
          int i = par1.getPath().lastIndexOf("/");
-         String s = par1.getPath().substring(i + 1);
-         List<File> list = findFile((filex) -> {
+         String fileName = par1.getPath().substring(i + 1);
+         List<File> list = findFile((file) -> {
             return file.getName().equals(fileName);
          });
          if (list.isEmpty()) {
-            throw new FileNotFoundException("On get stream : " + s);
+            throw new FileNotFoundException("On get stream : " + fileName);
          } else {
             File file1 = list.get(0);
             return getInputStreamFromFile(file1);
          }
       }
