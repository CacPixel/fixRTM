diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/NGTCore.java b/src/main/ngtlib/jp/ngt/ngtlib/NGTCore.java
index 7e30300..e302cb1 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/NGTCore.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/NGTCore.java
@@ -93,7 +93,7 @@ public class NGTCore {
         } finally {
             cfg.save();
         }
-        protection_key = NGTRegHandler.<ItemProtectionKey>register(new ItemProtectionKey(), "protection_key", "protection_key", (CreativeTabs)null, "ngtlib");
+        protection_key = NGTRegHandler.<ItemProtectionKey>register(new ItemProtectionKey(), "protection_key", "protection_key", null, "ngtlib");
         proxy.preInit();
         NETWORK_WRAPPER.registerMessage(PacketNoticeHandlerClient.class, PacketNotice.class, 0, Side.CLIENT);
         NETWORK_WRAPPER.registerMessage(PacketNoticeHandlerServer.class, PacketNotice.class, 1, Side.SERVER);
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/BlockArgHolder.java b/src/main/ngtlib/jp/ngt/ngtlib/block/BlockArgHolder.java
index 75376c7..63f0211 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/BlockArgHolder.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/block/BlockArgHolder.java
@@ -15,6 +15,7 @@ public class BlockArgHolder extends ItemArgHolderBase<BlockArgHolder> {
 
     public BlockArgHolder setBlockState(IBlockState par1) {
         this.state = par1;
+        return this;
     }
 
     public IBlockAccess getBlockAccess() {
@@ -23,5 +24,6 @@ public class BlockArgHolder extends ItemArgHolderBase<BlockArgHolder> {
 
     public BlockArgHolder setBlockAccess(IBlockAccess par1) {
         this.access = par1;
+        return this;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/NGTObject.java b/src/main/ngtlib/jp/ngt/ngtlib/block/NGTObject.java
index cc1ae59..a8cda71 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/NGTObject.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/block/NGTObject.java
@@ -158,7 +158,6 @@ public class NGTObject {
     }
 
     public static NGTObject readFromNBT(NBTTagCompound data) {
-        int[] ids;
         if (data.hasKey("ByteData"))
             data = decompress(data);
         Map<Integer, BlockSet> idMap = new HashMap<>();
@@ -170,6 +169,7 @@ public class NGTObject {
             int id = tag.getInteger("Id");
             idMap.put(Integer.valueOf(id), set);
         }
+        int[] ids;
         List<BlockSet> list = new ArrayList<>();
         if (data.hasKey("IData") || data.hasKey("Blocks")) {
             ids = data.hasKey("IData") ? data.getIntArray("IData") : data.getIntArray("Blocks");
@@ -248,8 +248,8 @@ public class NGTObject {
     }
 
     public static NGTObject load(InputStream stream) {
-        NBTTagCompound data;
         DataInputStream dis = new DataInputStream(new BufferedInputStream(stream));
+        NBTTagCompound data;
         try {
             data = CompressedStreamTools.read(dis);
         } catch (IOException e) {
@@ -267,7 +267,7 @@ public class NGTObject {
     }
 
     @SideOnly(Side.CLIENT)
-    public static void addInformation(List<String> list, NBTTagCompound data, float scale) {
+    public static void addInformation(List list, NBTTagCompound data, float scale) {
         if (data.hasKey("ByteData"))
             data = decompress(data);
         int x = data.getInteger("SizeX");
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/event/NGTEventHandlerClient.java b/src/main/ngtlib/jp/ngt/ngtlib/event/NGTEventHandlerClient.java
index ca6c7c0..0cd86d5 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/event/NGTEventHandlerClient.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/event/NGTEventHandlerClient.java
@@ -11,6 +11,9 @@ import net.minecraftforge.fml.relauncher.SideOnly;
 public final class NGTEventHandlerClient {
     public static final NGTEventHandlerClient INSTANCE = new NGTEventHandlerClient();
 
+    private NGTEventHandlerClient() {
+    }
+
     @SubscribeEvent
     public void onChangeTexture(TextureStitchEvent.Post event) {
         GLHelper.initGLList();
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/event/TickProcessQueue.java b/src/main/ngtlib/jp/ngt/ngtlib/event/TickProcessQueue.java
index 57536e4..23f2c86 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/event/TickProcessQueue.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/event/TickProcessQueue.java
@@ -17,6 +17,9 @@ public final class TickProcessQueue {
 
     private final List<TickProcessEntry> newEntries = new ArrayList<>();
 
+    private TickProcessQueue() {
+    }
+
     public static TickProcessQueue getInstance(Side side) {
         return (side == Side.SERVER) ? INSTANCE_SERVER : INSTANCE_CLIENT;
     }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiButtonCustom.java b/src/main/ngtlib/jp/ngt/ngtlib/gui/GuiButtonCustom.java
index 99d7e14..97d44b4 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiButtonCustom.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/gui/GuiButtonCustom.java
@@ -28,5 +28,6 @@ public class GuiButtonCustom extends GuiButton {
     public GuiButtonCustom addTips(String par1) {
         if (par1 != null)
             this.tips.add(par1);
+        return this;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiSelect.java b/src/main/ngtlib/jp/ngt/ngtlib/gui/GuiSelect.java
index 8e5cb44..d5e9217 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiSelect.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/gui/GuiSelect.java
@@ -88,7 +88,7 @@ public class GuiSelect extends GuiScreenCustom {
         }
 
         public void draw(Minecraft par1, int par2, int par3, float par4) {
-            blitSlotIcon(par1, par2 + 1, par3 + 1, 0, 0, par4);
+            this.blitSlotIcon(par1, par2 + 1, par3 + 1, 0, 0, par4);
             GL11.glEnable(32826);
             RenderHelper.enableGUIStandardItemLighting();
             par1.getRenderItem().renderItemIntoGUI(this.iconItem, par2 + 2, par3 + 2);
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiSlotCustom.java b/src/main/ngtlib/jp/ngt/ngtlib/gui/GuiSlotCustom.java
index 5b360d8..35da796 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiSlotCustom.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/gui/GuiSlotCustom.java
@@ -164,7 +164,7 @@ public class GuiSlotCustom {
     }
 
     public int getMaxScroll() {
-        return getContentHeight() - this.bottom - this.top - 4;
+        return getContentHeight() - ((this.bottom - this.top) - 4);
     }
 
     public int getAmountScrolled() {
@@ -201,15 +201,19 @@ public class GuiSlotCustom {
         int k = getSize();
         int l = getScrollBarX();
         int i1 = l + 6;
+        int i;
+        int k2;
         if (p_148128_1_ > this.left && p_148128_1_ < this.right && p_148128_2_ > this.top && p_148128_2_ < this.bottom)
             if (Mouse.isButtonDown(0) && getEnabled()) {
                 if (this.initialClickY == -1.0F) {
+                    int j;
                     boolean flag1 = true;
                     if (p_148128_2_ >= this.top && p_148128_2_ <= this.bottom) {
-                        int i = p_148128_2_ - this.top - this.headerPadding + (int)this.amountScrolled - 4;
+                        i = p_148128_2_ - this.top - this.headerPadding + (int)this.amountScrolled - 4;
                         int j2 = i / this.slotHeight;
+                        boolean flag;
                         if (p_148128_1_ >= this.left && p_148128_1_ <= this.right && j2 >= 0 && i >= 0 && j2 < k) {
-                            boolean flag = (j2 == this.selectedElement && Minecraft.getSystemTime() - this.lastClicked < 250L);
+                            flag = (j2 == this.selectedElement && Minecraft.getSystemTime() - this.lastClicked < 250L);
                             elementClicked(j2, flag, p_148128_1_, p_148128_2_);
                             this.selectedElement = j2;
                             this.lastClicked = Minecraft.getSystemTime();
@@ -219,15 +223,15 @@ public class GuiSlotCustom {
                         }
                         if (p_148128_1_ >= l && p_148128_1_ <= i1) {
                             this.scrollMultiplier = -1.0F;
-                            int j = getMaxScroll();
+                            j = getMaxScroll(); // 12
                             if (j < 1)
                                 j = 1;
-                            int k2 = (int)(((this.bottom - this.top) * (this.bottom - this.top)) / getContentHeight());
+                            k2 = (int)(((this.bottom - this.top) * (this.bottom - this.top)) / (float)getContentHeight());
                             if (k2 < 32)
                                 k2 = 32;
                             if (k2 > this.bottom - this.top - 8)
                                 k2 = this.bottom - this.top - 8;
-                            this.scrollMultiplier /= (this.bottom - this.top - k2) / j;
+                            this.scrollMultiplier /= (this.bottom - this.top - k2) / (float)j;
                         } else {
                             this.scrollMultiplier = 1.0F;
                         }
@@ -301,7 +305,7 @@ public class GuiSlotCustom {
         tessellator.draw();
         int i3 = getMaxScroll();
         if (i3 > 0) {
-            int k2 = (this.bottom - this.top) * (this.bottom - this.top) / getContentHeight();
+            k2 = (this.bottom - this.top) * (this.bottom - this.top) / getContentHeight();
             if (k2 < 32)
                 k2 = 32;
             if (k2 > this.bottom - this.top - 8)
@@ -345,7 +349,7 @@ public class GuiSlotCustom {
             int l1 = this.slotHeight - 4;
             if (k1 <= this.bottom && k1 + l1 >= this.top) {
                 if (this.showSelectionBox && isSelected(j1)) {
-                    int i2 = this.left + this.width / 2 - this.slotWidth / 2;
+                    int i2 = this.left + (this.width / 2 - this.slotWidth / 2);
                     int j2 = this.left + this.width / 2 + this.slotWidth / 2;
                     float z = 0.0F;
                     GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiTextFieldCustom.java b/src/main/ngtlib/jp/ngt/ngtlib/gui/GuiTextFieldCustom.java
index 4f42d09..03e3c94 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiTextFieldCustom.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/gui/GuiTextFieldCustom.java
@@ -95,13 +95,13 @@ public class GuiTextFieldCustom extends GuiTextField {
     }
 
     public void writeText(String par1) {
-        int l;
         String s1 = "";
         String s2 = ChatAllowedCharacters.filterAllowedCharacters(par1);
         int i = (this.cursorPosition < this.selectionEnd) ? this.cursorPosition : this.selectionEnd;
         int j = (this.cursorPosition < this.selectionEnd) ? this.selectionEnd : this.cursorPosition;
-        int k = this.maxStringLength - this.text.length() - i - this.selectionEnd;
-        boolean flag = false;
+        int k = this.maxStringLength - this.text.length() - (i - this.selectionEnd);
+        int l1 = 0;
+        int l;
         if (this.text.length() > 0)
             s1 = s1 + this.text.substring(0, i);
         if (k < s2.length()) {
@@ -356,13 +356,14 @@ public class GuiTextFieldCustom extends GuiTextField {
     }
 
     private void drawCursorVertical(int par1, int par2, int par3, int par4) {
+        int i1;
         if (par1 < par3) {
-            int i1 = par1;
+            i1 = par1;
             par1 = par3;
             par3 = i1;
         }
         if (par2 < par4) {
-            int i1 = par2;
+            i1 = par2;
             par2 = par4;
             par4 = i1;
         }
@@ -480,6 +481,7 @@ public class GuiTextFieldCustom extends GuiTextField {
 
     public GuiTextFieldCustom addTips(String par1) {
         this.tips.add(par1);
+        return this;
     }
 
     public static interface TextFieldListner {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/NGTFileLoader.java b/src/main/ngtlib/jp/ngt/ngtlib/io/NGTFileLoader.java
index e42d9e5..a96c6da 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/NGTFileLoader.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/io/NGTFileLoader.java
@@ -173,7 +173,7 @@ public final class NGTFileLoader {
             FileFilter filter = new FileNameExtensionFilter(type.getDescription(), new String[] { type.getExtension() });
             chooser.addChoosableFileFilter(filter);
         }
-        int state = chooser.showOpenDialog((Component)null);
+        int state = chooser.showOpenDialog(null);
         if (state == 0) {
             File file = chooser.getSelectedFile();
             PREV_OPENED_FOLDER = file.getParentFile();
@@ -189,7 +189,7 @@ public final class NGTFileLoader {
             FileFilter filter = new FileNameExtensionFilter(type.getDescription(), new String[] { type.getExtension() });
             chooser.addChoosableFileFilter(filter);
         }
-        int state = chooser.showSaveDialog((Component)null);
+        int state = chooser.showSaveDialog(null);
         if (state == 0) {
             File file = chooser.getSelectedFile();
             PREV_OPENED_FOLDER = file.getParentFile();
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/NGTText.java b/src/main/ngtlib/jp/ngt/ngtlib/io/NGTText.java
index 14cf896..69f07e5 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/NGTText.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/io/NGTText.java
@@ -57,8 +57,8 @@ public final class NGTText {
     }
 
     public static List<String> readTextL(InputStream is, String encoding) {
-        InputStreamReader isr;
         List<String> list = new ArrayList<>();
+        InputStreamReader isr;
         if (encoding == null || encoding.isEmpty()) {
             isr = new InputStreamReader(is);
         } else {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/TwitterUtil.java b/src/main/ngtlib/jp/ngt/ngtlib/io/TwitterUtil.java
index db91bf3..a5d1549 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/TwitterUtil.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/io/TwitterUtil.java
@@ -41,6 +41,9 @@ public class TwitterUtil {
 
     private boolean waitingAuth;
 
+    private TwitterUtil() {
+    }
+
     @Nullable
     public static TwitterUtil getInstance() {
         if (INSTANCE.twitter == null) {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/VirtualFileManager.java b/src/main/ngtlib/jp/ngt/ngtlib/io/VirtualFileManager.java
index b4966bc..f24160d 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/VirtualFileManager.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/io/VirtualFileManager.java
@@ -48,7 +48,7 @@ public class VirtualFileManager extends ForwardingJavaFileManager<JavaFileManage
             Class<?> c = co.getDefinedClass();
             if (c == null) {
                 byte[] b = co.getBytes();
-                c = defineClass(name, b, 0, b.length);
+                c = super.defineClass(name, b, 0, b.length);
                 co.setDefinedClass(c);
             }
             return c;
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemArgHolderBase.java b/src/main/ngtlib/jp/ngt/ngtlib/item/ItemArgHolderBase.java
index 733a8fe..b7f8132 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemArgHolderBase.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/item/ItemArgHolderBase.java
@@ -24,6 +24,7 @@ public abstract class ItemArgHolderBase<T extends ItemArgHolderBase> {
 
     public T setWorld(World par1) {
         this.world = par1;
+        return (T)this;
     }
 
     public BlockPos getBlockPos() {
@@ -32,6 +33,7 @@ public abstract class ItemArgHolderBase<T extends ItemArgHolderBase> {
 
     public T setBlockPos(BlockPos par1) {
         this.pos = par1;
+        return (T)this;
     }
 
     public EntityPlayer getPlayer() {
@@ -40,6 +42,7 @@ public abstract class ItemArgHolderBase<T extends ItemArgHolderBase> {
 
     public T setPlayer(EntityPlayer par1) {
         this.player = par1;
+        return (T)this;
     }
 
     public EnumFacing getFacing() {
@@ -48,6 +51,7 @@ public abstract class ItemArgHolderBase<T extends ItemArgHolderBase> {
 
     public T setFacing(EnumFacing par1) {
         this.facing = par1;
+        return (T)this;
     }
 
     public static class ItemArgHolder extends ItemArgHolderBase<ItemArgHolder> {
@@ -63,6 +67,7 @@ public abstract class ItemArgHolderBase<T extends ItemArgHolderBase> {
 
         public ItemArgHolder setItemStack(ItemStack par1) {
             this.itemStack = par1;
+            return this;
         }
 
         public EnumHand getHand() {
@@ -71,6 +76,7 @@ public abstract class ItemArgHolderBase<T extends ItemArgHolderBase> {
 
         public ItemArgHolder setHand(EnumHand par1) {
             this.hand = par1;
+            return this;
         }
 
         public ActionResult<ItemStack> pass() {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemBlockCustom.java b/src/main/ngtlib/jp/ngt/ngtlib/item/ItemBlockCustom.java
index e93d15f..c8a55ff 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemBlockCustom.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/item/ItemBlockCustom.java
@@ -15,6 +15,6 @@ public class ItemBlockCustom extends ItemBlock {
     }
 
     public String getTranslationKey(ItemStack par1) {
-        return getTranslationKey() + "." + par1.getItemDamage();
+        return super.getTranslationKey() + "." + par1.getItemDamage();
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemMultiIcon.java b/src/main/ngtlib/jp/ngt/ngtlib/item/ItemMultiIcon.java
index 8dc719a..3fa394f 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemMultiIcon.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/item/ItemMultiIcon.java
@@ -15,7 +15,7 @@ public class ItemMultiIcon extends ItemCustom {
     }
 
     public String getTranslationKey(ItemStack par1) {
-        return getTranslationKey() + "." + par1.getItemDamage();
+        return super.getTranslationKey() + "." + par1.getItemDamage();
     }
 
     @SideOnly(Side.CLIENT)
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemRenderHandler.java b/src/main/ngtlib/jp/ngt/ngtlib/item/ItemRenderHandler.java
index 91c8a98..17b15ff 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemRenderHandler.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/item/ItemRenderHandler.java
@@ -18,6 +18,7 @@ public class ItemRenderHandler extends TileEntityItemStackRenderer {
 
     private ItemRenderHandler(TileEntityItemStackRenderer renderer) {
         this.parentRenderer = renderer;
+        TileEntityItemStackRenderer.instance = this;
     }
 
     public void renderByItem(ItemStack itemStack) {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemUtil.java b/src/main/ngtlib/jp/ngt/ngtlib/item/ItemUtil.java
index c582ee7..fdbfd72 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemUtil.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/item/ItemUtil.java
@@ -83,7 +83,7 @@ public final class ItemUtil {
 
     public static ItemStack[] getEmptyArray(int cap) {
         ItemStack[] array = new ItemStack[cap];
-        Arrays.fill((Object[])array, ItemStack.EMPTY);
+        Arrays.fill(array, ItemStack.EMPTY);
         return array;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/craft/RecipeManager.java b/src/main/ngtlib/jp/ngt/ngtlib/item/craft/RecipeManager.java
index fe6a272..be25c88 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/craft/RecipeManager.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/item/craft/RecipeManager.java
@@ -27,10 +27,13 @@ public final class RecipeManager {
 
     private List<IRecipe> recipes = new ArrayList<>();
 
+    private RecipeManager() {
+    }
+
     @SubscribeEvent
     public void registerRecipes(RegistryEvent.Register<IRecipe> event) {
         IRecipe[] array = this.recipes.<IRecipe>toArray(new IRecipe[this.recipes.size()]);
-        event.getRegistry().registerAll((IForgeRegistryEntry[])array);
+        event.getRegistry().registerAll(array);
     }
 
     public static ShapedRecipes55 addRecipe(ItemStack output, Object... objs) {
@@ -39,7 +42,7 @@ public final class RecipeManager {
         int w = 0;
         int h = 0;
         if (objs[i] instanceof String[]) {
-            String[] astring = (String[])objs[i++];
+            String[] astring = (String[])(String[])objs[i++];
             for (int l = 0; l < astring.length; l++) {
                 String s1 = astring[l];
                 h++;
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/craft/RepairRecipe.java b/src/main/ngtlib/jp/ngt/ngtlib/item/craft/RepairRecipe.java
index 6a0501d..f69fac2 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/craft/RepairRecipe.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/item/craft/RepairRecipe.java
@@ -82,6 +82,7 @@ public class RepairRecipe implements IRecipe {
 
     public IRecipe setRegistryName(ResourceLocation name) {
         this.name = name;
+        return this;
     }
 
     public ResourceLocation getRegistryName() {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/craft/ShapedRecipes55.java b/src/main/ngtlib/jp/ngt/ngtlib/item/craft/ShapedRecipes55.java
index dbbad77..df00c77 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/craft/ShapedRecipes55.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/item/craft/ShapedRecipes55.java
@@ -124,6 +124,7 @@ public class ShapedRecipes55 implements IRecipe {
 
     public IRecipe setRegistryName(ResourceLocation name) {
         this.name = name;
+        return this;
     }
 
     public ResourceLocation getRegistryName() {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/PerlinNoise.java b/src/main/ngtlib/jp/ngt/ngtlib/math/PerlinNoise.java
index 0c8bb3c..af2079c 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/PerlinNoise.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/math/PerlinNoise.java
@@ -84,8 +84,7 @@ public final class PerlinNoise {
 
     static {
         for (int i = 0; i < 256; i++) {
-            p[i] = permutation[i];
-            p[256 + i] = permutation[i];
+            p[256 + i] = p[i] = permutation[i];
         }
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/StraightLine.java b/src/main/ngtlib/jp/ngt/ngtlib/math/StraightLine.java
index 9461718..f631d17 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/StraightLine.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/math/StraightLine.java
@@ -37,7 +37,7 @@ public final class StraightLine implements ILine {
 
     public double[] getPoint(int par1, int par2) {
         int i0 = (par2 < 0) ? 0 : ((par2 > par1) ? par1 : par2);
-        double d0 = i0 / par1;
+        double d0 = (double)i0 / (double)par1;
         double x = this.startX + (this.endX - this.startX) * d0;
         double y = this.startY + (this.endY - this.startY) * d0;
         return LinePosPool.get(x, y);
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/Vec3.java b/src/main/ngtlib/jp/ngt/ngtlib/math/Vec3.java
index 9349552..20e618c 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/Vec3.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/math/Vec3.java
@@ -124,7 +124,7 @@ public class Vec3 {
     }
 
     public double getAngle(Vec3 v2) {
-        double d0 = (getX() * v2.getX() + getY() * v2.getY() + getZ() * v2.getZ()) / length() * v2.length();
+        double d0 = (getX() * v2.getX() + getY() * v2.getY() + getZ() * v2.getZ()) / (length() * v2.length());
         return Math.acos(d0);
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/network/PacketNBT.java b/src/main/ngtlib/jp/ngt/ngtlib/network/PacketNBT.java
index 259cd55..fa1cf16 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/network/PacketNBT.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/network/PacketNBT.java
@@ -82,13 +82,15 @@ public class PacketNBT extends PacketCustom {
         byte type = this.nbtData.getByte("DataType");
         if (type == 0) {
             Entity entity = getEntity(world);
-            if (entity != null) {
+            if (entity == null) {
+            } else {
                 entity.readFromNBT(this.nbtData);
                 return true;
             }
         } else if (type == 1) {
             TileEntity tileEntity = getTileEntity(world);
-            if (tileEntity != null) {
+            if (tileEntity == null) {
+            } else {
                 tileEntity.readFromNBT(this.nbtData);
                 if (!world.isRemote)
                     tileEntity.markDirty();
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/protection/ProtectionManager.java b/src/main/ngtlib/jp/ngt/ngtlib/protection/ProtectionManager.java
index afe69fd..2caf993 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/protection/ProtectionManager.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/protection/ProtectionManager.java
@@ -31,6 +31,9 @@ public class ProtectionManager {
 
     private ProtectionData lockObjs;
 
+    private ProtectionManager() {
+    }
+
     public ProtectionData getLockObj() {
         if (this.lockObjs == null)
             this.lockObjs = new ProtectionData("ProtectedObjects");
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/GLHelper.java b/src/main/ngtlib/jp/ngt/ngtlib/renderer/GLHelper.java
index 3a9fbc0..d199267 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/GLHelper.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/renderer/GLHelper.java
@@ -37,6 +37,9 @@ public final class GLHelper {
 
     private List<GLObject> deleteGLLists = new ArrayList<>();
 
+    private GLHelper() {
+    }
+
     public static void checkGLError(String par1) {
         checkGLError(par1, false);
     }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTObjectRenderer.java b/src/main/ngtlib/jp/ngt/ngtlib/renderer/NGTObjectRenderer.java
index 305fb83..f01d4e8 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTObjectRenderer.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/renderer/NGTObjectRenderer.java
@@ -38,6 +38,9 @@ import org.lwjgl.opengl.GL11;
 public class NGTObjectRenderer {
     public static final NGTObjectRenderer INSTANCE = new NGTObjectRenderer();
 
+    private NGTObjectRenderer() {
+    }
+
     public void renderNGTObject(IBlockAccessNGT par1, NGTObject par2, boolean changeLightting, int mode, int pass) {
         GL11.glPushMatrix();
         if (changeLightting)
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTParticle.java b/src/main/ngtlib/jp/ngt/ngtlib/renderer/NGTParticle.java
index 99fec0c..f7a0d0b 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTParticle.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/renderer/NGTParticle.java
@@ -13,6 +13,9 @@ public final class NGTParticle {
 
     private final Map<String, EnumParticleTypes> nameMap = new HashMap<>();
 
+    private NGTParticle() {
+    }
+
     public static EnumParticleTypes getParticle(String name) {
         if (INSTANCE.nameMap.isEmpty())
             INSTANCE.init();
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTRenderHelper.java b/src/main/ngtlib/jp/ngt/ngtlib/renderer/NGTRenderHelper.java
index 88c53c7..22412a5 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTRenderHelper.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/renderer/NGTRenderHelper.java
@@ -17,8 +17,11 @@ public final class NGTRenderHelper {
     }
 
     public static FloatBuffer rotate(FloatBuffer buffer, float angle, char coordinate) {
-        float fa0[][], fa1[][], fa2[][], sin = NGTMath.getSin(angle);
+        float sin = NGTMath.getSin(angle);
         float cos = NGTMath.getCos(angle);
+        float[][] fa0;
+        float[][] fa1;
+        float[][] fa2;
         switch (coordinate) {
             case 'X':
                 fa0 = new float[][] { { 1.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, cos, sin, 0.0F }, { 0.0F, -sin, cos, 0.0F }, { 0.0F, 0.0F, 0.0F, 1.0F } };
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTRenderer.java b/src/main/ngtlib/jp/ngt/ngtlib/renderer/NGTRenderer.java
index 6562cfc..64ea131 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTRenderer.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/renderer/NGTRenderer.java
@@ -24,14 +24,18 @@ public final class NGTRenderer {
     private static final float FIRE_LEN_DIV = 0.24169186F;
 
     public static void renderPole(NGTTessellator tessellator, float r, float length, boolean useTexture) {
+        float minU;
+        float maxU;
+        float minV;
+        float maxV;
         float[][] sp = ModelSolid.SPHERE;
         int l0 = (int)(length * 16.0D);
         for (int l = 0; l < l0; l++) {
             for (int i1 = 0; i1 < 16; i1++) {
-                float minU = i1 * 0.0625F;
-                float maxU = (i1 + 1) * 0.0625F;
-                float minV = l * 0.0625F;
-                float maxV = (l + 1) * 0.0625F;
+                minU = i1 * 0.0625F;
+                maxU = (i1 + 1) * 0.0625F;
+                minV = l * 0.0625F;
+                maxV = (l + 1) * 0.0625F;
                 float l1 = l * 0.0625F;
                 int ii0 = 64 + i1;
                 int ii1 = 64 + i1;
@@ -139,7 +143,7 @@ public final class NGTRenderer {
         NGTTessellator tessellator = NGTTessellator.instance;
         for (int i = 0; i < rep; i++) {
             GL11.glPushMatrix();
-            float f0 = i / rep;
+            float f0 = (float)i / (float)rep;
             float scres = 1.0F - f0;
             GL11.glScalef(scres * scaleXY, scres * scaleXY, scres * scaleZ);
             tessellator.startDrawing(4);
@@ -229,8 +233,8 @@ public final class NGTRenderer {
     }
 
     private static void showLibInstallertion() {
-        TextComponentTranslation textComponentTranslation1 = new TextComponentTranslation(TextFormatting.RED + "Please install library. ->", new Object[0]);
-        TextComponentTranslation textComponentTranslation2 = new TextComponentTranslation("  §6§nDownload here", new Object[0]);
+        ITextComponent textComponentTranslation1 = new TextComponentTranslation(TextFormatting.RED + "Please install library. ->", new Object[0]);
+        ITextComponent textComponentTranslation2 = new TextComponentTranslation("  §6§nDownload here", new Object[0]);
         textComponentTranslation2.setStyle((new Style()).setClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL, "https://dl.dropboxusercontent.com/s/nqjqg4qur7jriwz/lib_installation.txt")));
         textComponentTranslation1.appendSibling((ITextComponent)textComponentTranslation2);
         NGTLog.showChatMessage((ITextComponent)textComponentTranslation1);
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTTessellator.java b/src/main/ngtlib/jp/ngt/ngtlib/renderer/NGTTessellator.java
index dc00524..a647875 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTTessellator.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/renderer/NGTTessellator.java
@@ -65,6 +65,9 @@ public final class NGTTessellator implements IRenderer {
 
     private boolean isDrawing;
 
+    private NGTTessellator(){
+    }
+
     public int draw() {
         if (!this.isDrawing)
             throw new IllegalStateException("Not tesselating!");
@@ -72,35 +75,35 @@ public final class NGTTessellator implements IRenderer {
         int offs = 0;
         while (offs < this.vertexCount) {
             int vtc = Math.min(this.vertexCount - offs, 196608);
-            intBuffer.clear();
-            intBuffer.put(this.rawBuffer, offs << 3, vtc << 3);
-            byteBuffer.position(0);
-            byteBuffer.limit(vtc << 5);
+            this.intBuffer.clear();
+            this.intBuffer.put(this.rawBuffer, offs << 3, vtc << 3);
+            this.byteBuffer.position(0);
+            this.byteBuffer.limit(vtc << 5);
             offs += vtc;
             if (this.hasTexture) {
-                floatBuffer.position(3);
-                GL11.glTexCoordPointer(2, 32, floatBuffer);
+                this.floatBuffer.position(3);
+                GL11.glTexCoordPointer(2, 32, this.floatBuffer);
                 GL11.glEnableClientState(32888);
             }
             if (this.hasBrightness) {
                 OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
-                shortBuffer.position(14);
-                GL11.glTexCoordPointer(2, 32, shortBuffer);
+                this.shortBuffer.position(14);
+                GL11.glTexCoordPointer(2, 32, this.shortBuffer);
                 GL11.glEnableClientState(32888);
                 OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
             }
             if (this.hasColor) {
-                byteBuffer.position(20);
-                GL11.glColorPointer(4, true, 32, byteBuffer);
+                this.byteBuffer.position(20);
+                GL11.glColorPointer(4, true, 32, this.byteBuffer);
                 GL11.glEnableClientState(32886);
             }
             if (this.hasNormals) {
-                byteBuffer.position(24);
-                GL11.glNormalPointer(32, byteBuffer);
+                this.byteBuffer.position(24);
+                GL11.glNormalPointer(32, this.byteBuffer);
                 GL11.glEnableClientState(32885);
             }
-            floatBuffer.position(0);
-            GL11.glVertexPointer(3, 32, floatBuffer);
+            this.floatBuffer.position(0);
+            GL11.glVertexPointer(3, 32, this.floatBuffer);
             GL11.glEnableClientState(32884);
             GL11.glDrawArrays(this.drawMode, 0, vtc);
             GL11.glDisableClientState(32884);
@@ -157,7 +160,7 @@ public final class NGTTessellator implements IRenderer {
 
     private void reset() {
         this.vertexCount = 0;
-        byteBuffer.clear();
+        this.byteBuffer.clear();
         this.rawBufferIndex = 0;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/PolygonRenderer.java b/src/main/ngtlib/jp/ngt/ngtlib/renderer/PolygonRenderer.java
index 229686e..70ffca1 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/PolygonRenderer.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/renderer/PolygonRenderer.java
@@ -10,6 +10,9 @@ public final class PolygonRenderer implements IRenderer {
 
     public static final float DIV_15 = 0.06666667F;
 
+    private PolygonRenderer() {
+    }
+
     public void startDrawing(int par1) {
         GL11.glBegin(par1);
     }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/VBO.java b/src/main/ngtlib/jp/ngt/ngtlib/renderer/VBO.java
index f5f66b3..543b136 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/VBO.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/renderer/VBO.java
@@ -104,10 +104,10 @@ public class VBO extends GLObject implements IRenderer {
         if (!this.isDrawing)
             throw new IllegalStateException("Not tesselating!");
         this.isDrawing = false;
-        intBuffer.clear();
-        intBuffer.put(this.rawBuffer, 0, this.vertexCount * 8);
-        byteBuffer.position(0);
-        byteBuffer.limit(this.vertexCount * 8 * 4);
+        this.intBuffer.clear();
+        this.intBuffer.put(this.rawBuffer, 0, this.vertexCount * 8);
+        this.byteBuffer.position(0);
+        this.byteBuffer.limit(this.vertexCount * 8 * 4);
         ByteBuffer vIndexByte = GLAllocation.createDirectByteBuffer(this.vertexCount * 4);
         IntBuffer vIndexInt = vIndexByte.asIntBuffer();
         int[] vIndex = new int[this.vertexCount];
@@ -118,7 +118,7 @@ public class VBO extends GLObject implements IRenderer {
         this.vboId = GL15.glGenBuffers();
         this.vioId = GL15.glGenBuffers();
         GL15.glBindBuffer(34962, this.vboId);
-        GL15.glBufferData(34962, intBuffer, 35044);
+        GL15.glBufferData(34962, this.intBuffer, 35044);
         GL15.glBindBuffer(34962, 0);
         GL15.glBindBuffer(34963, this.vioId);
         GL15.glBufferData(34963, vIndexInt, 35044);
@@ -128,7 +128,7 @@ public class VBO extends GLObject implements IRenderer {
 
     private void reset() {
         this.vertexCount = 0;
-        byteBuffer.clear();
+        this.byteBuffer.clear();
         this.rawBufferIndex = 0;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/Camera.java b/src/main/ngtlib/jp/ngt/ngtlib/renderer/media/Camera.java
index 9fc80dd..82b513c 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/Camera.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/renderer/media/Camera.java
@@ -14,6 +14,9 @@ public class Camera extends ImageBase {
 
     private int texId = -1;
 
+    private Camera() {
+    }
+
     public static Camera create(int cameraId) {
         Camera camera = new Camera();
         List<Webcam> list = Webcam.getWebcams();
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/ElectricBulletinBoard.java b/src/main/ngtlib/jp/ngt/ngtlib/renderer/media/ElectricBulletinBoard.java
index fbd84e6..77eb08e 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/ElectricBulletinBoard.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/renderer/media/ElectricBulletinBoard.java
@@ -47,8 +47,9 @@ public class ElectricBulletinBoard extends MediaBase {
             BufferedImage img = gif.getImage(i);
             for (int w = 0; w < gif.width; w++) {
                 for (int h = 0; h < gif.height; h++) {
-                    int colorIndex, rawColor = img.getRGB(w, h);
+                    int rawColor = img.getRGB(w, h);
                     int color = rawColor & 0xFFFFFF;
+                    int colorIndex;
                     if (list.contains(Integer.valueOf(color))) {
                         colorIndex = list.indexOf(Integer.valueOf(color));
                     } else {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/GIF.java b/src/main/ngtlib/jp/ngt/ngtlib/renderer/media/GIF.java
index 68ef366..9adadf1 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/GIF.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/renderer/media/GIF.java
@@ -26,6 +26,9 @@ public class GIF {
 
     protected int frameRate;
 
+    private GIF() {
+    }
+
     public static GIF load(String source) {
         InputStream stream = null;
         if (source.startsWith("http")) {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/TweetState.java b/src/main/ngtlib/jp/ngt/ngtlib/renderer/media/TweetState.java
index 541dd1e..597454d 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/TweetState.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/renderer/media/TweetState.java
@@ -94,17 +94,18 @@ public class TweetState extends MediaBase {
         int maxLen = 19;
         for (String s : sa) {
             s = s.replaceAll("\\s", "");
-            if (!s.isEmpty()) {
-                int strIndex = 0;
-                while (strIndex < s.length()) {
-                    int endIndex = strIndex + maxLen;
-                    if (endIndex > s.length())
-                        endIndex = s.length();
-                    String s2 = s.substring(strIndex, endIndex);
-                    strIndex += maxLen;
-                    (NGTUtilClient.getMinecraft()).fontRenderer.drawString(s2, posXText, posYText, 16777215, false);
-                    posYText += strSize;
-                }
+            if (s.isEmpty()) {
+                continue;
+            }
+            int strIndex = 0;
+            while (strIndex < s.length()) {
+                int endIndex = strIndex + maxLen;
+                if (endIndex > s.length())
+                    endIndex = s.length();
+                String s2 = s.substring(strIndex, endIndex);
+                strIndex += maxLen;
+                (NGTUtilClient.getMinecraft()).fontRenderer.drawString(s2, posXText, posYText, 16777215, false);
+                posYText += strSize;
             }
         }
     }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/EncryptedModel.java b/src/main/ngtlib/jp/ngt/ngtlib/renderer/model/EncryptedModel.java
index 3e0a82c..2506c24 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/EncryptedModel.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/renderer/model/EncryptedModel.java
@@ -177,8 +177,8 @@ public class EncryptedModel {
             ByteArrayOutputStream baos = new ByteArrayOutputStream();
             ByteArrayInputStream bais = new ByteArrayInputStream(decData);
             GZIPInputStream gis = new GZIPInputStream(bais);
-            byte[] buffer = new byte[1024];
             int len;
+            byte[] buffer = new byte[1024];
             while ((len = gis.read(buffer)) > 0)
                 baos.write(buffer, 0, len);
             gis.close();
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/Face.java b/src/main/ngtlib/jp/ngt/ngtlib/renderer/model/Face.java
index c4efb4a..335b034 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/Face.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/renderer/model/Face.java
@@ -85,7 +85,8 @@ public class Face {
         int size = this.vertices.length;
         Face face = new Face(size, this.materialId);
         for (int i = 0; i < size; i++) {
-            Vertex vtx2, vtx = this.vertices[i];
+            Vertex vtx = this.vertices[i];
+            Vertex vtx2;
             int index = (i > 0) ? (size - i) : 0;
             if (mirrorVertex.containsKey(vtx)) {
                 vtx2 = mirrorVertex.get(vtx);
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/ObjModel.java b/src/main/ngtlib/jp/ngt/ngtlib/renderer/model/ObjModel.java
index 8d5e70b..cc46c4d 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/ObjModel.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/renderer/model/ObjModel.java
@@ -80,7 +80,7 @@ public final class ObjModel extends PolygonModel {
             Vertex vertex = parseVertexNormal(currentLine, lineCount);
             if (vertex != null)
                 this.vertexNormals.add(vertex);
-        } else if ((currentLine.startsWith("g ") | currentLine.startsWith("o ")) != 0) {
+        } else if ((currentLine.startsWith("g ") | currentLine.startsWith("o "))) {
             GroupObject group = parseGroupObject(currentLine, lineCount);
             if (group != null)
                 if (this.currentGroupObject != null)
@@ -97,7 +97,7 @@ public final class ObjModel extends PolygonModel {
     }
 
     private Vertex parseVertex(String line, int lineCount) throws ModelFormatException {
-        if (isValidVertexLine(line)) {
+        if (this.isValidVertexLine(line)) {
             line = line.substring(line.indexOf(' ') + 1);
             String[] tokens = split(line, ' ');
             try {
@@ -115,7 +115,7 @@ public final class ObjModel extends PolygonModel {
     }
 
     private Vertex parseVertexNormal(String line, int lineCount) throws ModelFormatException {
-        if (isValidVertexNormalLine(line)) {
+        if (this.isValidVertexNormalLine(line)) {
             line = line.substring(line.indexOf(' ') + 1);
             String[] tokens = split(line, ' ');
             try {
@@ -131,7 +131,7 @@ public final class ObjModel extends PolygonModel {
     }
 
     private TextureCoordinate parseTextureCoordinate(String line, int lineCount) throws ModelFormatException {
-        if (isValidTextureCoordinateLine(line)) {
+        if (this.isValidTextureCoordinateLine(line)) {
             line = line.substring(line.indexOf(' ') + 1);
             String[] tokens = split(line, ' ');
             try {
@@ -144,7 +144,7 @@ public final class ObjModel extends PolygonModel {
     }
 
     private Face parseFace(String line, int lineCount) throws ModelFormatException {
-        if (isValidFaceLine(line)) {
+        if (this.isValidFaceLine(line)) {
             String trimmedLine = line.substring(line.indexOf(' ') + 1);
             String[] tokens = split(trimmedLine, ' ');
             if (tokens.length > 2)
@@ -156,7 +156,7 @@ public final class ObjModel extends PolygonModel {
     }
 
     private Face parsePolygon(String line, String[] tokens, int lineCount) {
-        byte type = getValidType(line);
+        byte type = this.getValidType(line);
         if (type >= 0) {
             int size = (tokens.length - 2) * 3;
             Face face = new Face(size, this.currentMaterial);
@@ -188,7 +188,7 @@ public final class ObjModel extends PolygonModel {
     }
 
     private GroupObject parseGroupObject(String line, int lineCount) throws ModelFormatException {
-        if (isValidGroupObjectLine(line)) {
+        if (this.isValidGroupObjectLine(line)) {
             String trimmedLine = line.substring(line.indexOf(' ') + 1);
             if (trimmedLine.length() > 0)
                 return new GroupObject(trimmedLine, 4);
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/Vertex.java b/src/main/ngtlib/jp/ngt/ngtlib/renderer/model/Vertex.java
index 520d079..58b2143 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/Vertex.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/renderer/model/Vertex.java
@@ -18,10 +18,12 @@ public abstract class Vertex implements Comparable<Vertex> {
 
     public Vertex add(Vertex vertex) {
         setVec(getX() + vertex.getX(), getY() + vertex.getY(), getZ() + vertex.getZ());
+        return this;
     }
 
     public Vertex expand(float par1) {
         setVec(getX() * par1, getY() * par1, getZ() * par1);
+        return this;
     }
 
     public void normalize() {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/VoxelUtil.java b/src/main/ngtlib/jp/ngt/ngtlib/renderer/model/VoxelUtil.java
index 049d4a0..f65c11f 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/VoxelUtil.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/renderer/model/VoxelUtil.java
@@ -185,8 +185,10 @@ public final class VoxelUtil {
     public static NGTObject toVoxel(PolygonModel model, float scale) {
         int maxFace = 0;
         int faceCount = 0;
-        float minZ = Float.MAX_VALUE, minY = minZ, minX = minY;
-        float maxZ = Float.MIN_VALUE, maxY = maxZ, maxX = maxY;
+        float minX, minY, minZ;
+        float maxX, maxY, maxZ;
+        minX = minY = minZ = Float.MAX_VALUE;
+        maxX = maxY = maxZ = Float.MIN_VALUE;
         for (GroupObject go : model.groupObjects) {
             for (Face face : go.faces) {
                 maxFace++;
@@ -257,9 +259,9 @@ public final class VoxelUtil {
         double lenBC = vecBC.length();
         int lenI = NGTMath.floor(((lenAB > lenBC) ? lenAB : lenBC) * 2.0D);
         for (int i = 0; i < lenI; i++) {
-            double di = i / lenI;
+            double di = (double)i / (double)lenI;
             for (int j = 0; j < i; j++) {
-                double dj = j / lenI;
+                double dj = (double)j / (double)lenI;
                 int ix = NGTMath.floor(vecA.getX() + vecAB.getX() * di + vecBC.getX() * dj + offsetX * scale);
                 int iy = NGTMath.floor(vecA.getY() + vecAB.getY() * di + vecBC.getY() * dj + offsetY * scale);
                 int iz = NGTMath.floor(vecA.getZ() + vecAB.getZ() * di + vecBC.getZ() * dj + offsetZ * scale);
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/NGTRegHandler.java b/src/main/ngtlib/jp/ngt/ngtlib/util/NGTRegHandler.java
index 57db5f3..afd48b8 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/NGTRegHandler.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/util/NGTRegHandler.java
@@ -20,6 +20,9 @@ public class NGTRegHandler {
 
     private final List<Item> items = new ArrayList<>();
 
+    private NGTRegHandler() {
+    }
+
     private static void checkName(String name) {
         if (name.contains(":"))
             throw new IllegalArgumentException("Name contains ':' -> " + name);
@@ -51,8 +54,8 @@ public class NGTRegHandler {
         } else {
             item = new ItemBlock((Block)block);
         }
-        ForgeRegistries.BLOCKS.register((IForgeRegistryEntry)block);
-        register(item, name, unlocalizedName, (CreativeTabs)null, modID);
+        ForgeRegistries.BLOCKS.register(block);
+        register(item, name, unlocalizedName, null, modID);
         return block;
     }
 
@@ -63,7 +66,7 @@ public class NGTRegHandler {
         item.setTranslationKey(unlocalizedName);
         if (tab != null)
             item.setCreativeTab(tab);
-        ForgeRegistries.ITEMS.register((IForgeRegistryEntry)item);
+        ForgeRegistries.ITEMS.register(item);
         return item;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/PermissionManager.java b/src/main/ngtlib/jp/ngt/ngtlib/util/PermissionManager.java
index 31a91e2..b7cbf19 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/PermissionManager.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/util/PermissionManager.java
@@ -22,6 +22,9 @@ public final class PermissionManager {
 
     private Map<String, List<String>> permissionMap = new HashMap<>();
 
+    private PermissionManager() {
+    }
+
     public void save() {
         String[] sa = new String[this.permissionMap.size()];
         int i = 0;
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/Usage.java b/src/main/ngtlib/jp/ngt/ngtlib/util/Usage.java
index bb083fd..710bf55 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/Usage.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/util/Usage.java
@@ -17,6 +17,9 @@ public final class Usage {
 
     private final Map<UsageKey, UsageEntry> usages = new HashMap<>();
 
+    private Usage() {
+    }
+
     public void requestUsage(EntityPlayer player) {
         for (Map.Entry<UsageKey, UsageEntry> entry : this.usages.entrySet()) {
             if (((UsageEntry)entry.getValue()).pattern.match(player)) {
@@ -74,7 +77,7 @@ public final class Usage {
                             return true;
                         return false;
                     }
-                }par2);
+                }, par2);
         this.usages.put(new UsageKey(clazz, 0), entry);
         return entry;
     }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/VersionChecker.java b/src/main/ngtlib/jp/ngt/ngtlib/util/VersionChecker.java
index 0bce2c5..8884291 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/VersionChecker.java
+++ b/src/main/ngtlib/jp/ngt/ngtlib/util/VersionChecker.java
@@ -30,18 +30,17 @@ public class VersionChecker {
     }
 
     public static void checkVersion() {
-        checker.getClass();
-        Thread thread = new VersionCheckThread();
+        Thread thread = checker.new VersionCheckThread();
         thread.start();
     }
 
     public static void showUpdateMessage(INetHandlerPlayClient handler) {
         if (checker.finished)
             for (String[] sa : checker.updateList) {
-                TextComponentTranslation textComponentTranslation = new TextComponentTranslation("message.version", new Object[] { TextFormatting.AQUA + sa[0] });
+                ITextComponent textComponentTranslation = new TextComponentTranslation("message.version", new Object[] { TextFormatting.AQUA + sa[0] });
                 textComponentTranslation.appendText(" : " + TextFormatting.GREEN + sa[1]);
                 if (sa[2] != null && !sa[2].isEmpty()) {
-                    TextComponentTranslation textComponentTranslation1 = new TextComponentTranslation("  §6§nDownload here", new Object[0]);
+                    ITextComponent textComponentTranslation1 = new TextComponentTranslation("  §6§nDownload here", new Object[0]);
                     textComponentTranslation1.setStyle((new Style()).setClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL, sa[2])));
                     textComponentTranslation.appendSibling((ITextComponent)textComponentTranslation1);
                 }
