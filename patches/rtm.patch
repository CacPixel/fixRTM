diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMBlock.java b/src/api/rtm/jp/ngt/rtm/RTMBlock.java
index 04dc2b5..7c86f6c 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMBlock.java
+++ b/src/api/rtm/jp/ngt/rtm/RTMBlock.java
@@ -355,16 +355,16 @@ public final class RTMBlock {
                     int meta = BlockUtil.getMetadata(world, pos);
                     int c0 = meta << 4 & 0xFF;
                     return 16777215 - (c0 << 8) - c0;
-                }new Block[] { hotStoveBrick });
+                }, new Block[] { hotStoveBrick });
         colors.registerBlockColorHandler((state, world, pos, tintIndex) -> {
                     BlockMarker block = (BlockMarker)state.getBlock();
                     return block.markerType.color;
-                }new Block[] { (Block)marker, (Block)markerSwitch });
+                }, new Block[] { (Block)marker, (Block)markerSwitch });
         colors.registerBlockColorHandler((state, world, pos, tintIndex) -> {
                     int meta = BlockUtil.getMetadata(world, pos);
                     int c0 = meta << 4 & 0xFF;
                     return 16777215 - (c0 << 8) - c0;
-                }new Block[] { steelSlab });
+                }, new Block[] { steelSlab });
     }
 
     @SideOnly(Side.CLIENT)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMItem.java b/src/api/rtm/jp/ngt/rtm/RTMItem.java
index 07664e4..eecf42e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMItem.java
+++ b/src/api/rtm/jp/ngt/rtm/RTMItem.java
@@ -249,7 +249,7 @@ public final class RTMItem {
         colors.registerItemColorHandler((stack, tintIndex) -> {
                     BlockMarker block = (BlockMarker)Block.getBlockFromItem(stack.getItem());
                     return block.markerType.color;
-                }new Block[] { (Block)RTMBlock.marker, (Block)RTMBlock.markerSwitch });
+                }, new Block[] { (Block)RTMBlock.marker, (Block)RTMBlock.markerSwitch });
         colors.registerItemColorHandler((stack, tintIndex) -> 0, new Block[] { RTMBlock.steelSlab });
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockSlot.java b/src/api/rtm/jp/ngt/rtm/block/BlockSlot.java
index a451f8f..1422cc1 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockSlot.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockSlot.java
@@ -137,7 +137,7 @@ public class BlockSlot extends BlockContainerCustom implements IPipeConnectable
 
     public boolean rotateBlock(World world, BlockPos pos, EnumFacing axis) {
         IBlockState state = world.getBlockState(pos);
-        for (UnmodifiableIterator<IProperty> unmodifiableIterator = state.getProperties().keySet().iterator(); unmodifiableIterator.hasNext(); ) {
+        for (UnmodifiableIterator<? extends IProperty> unmodifiableIterator = state.getProperties().keySet().iterator(); unmodifiableIterator.hasNext(); ) {
             IProperty<?> prop = unmodifiableIterator.next();
             if (prop.getName().equals("facing")) {
                 world.setBlockState(pos, state.cycleProperty(prop));
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/decoration/Face.java b/src/api/rtm/jp/ngt/rtm/block/decoration/Face.java
index 700ae6b..fc359ac 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/decoration/Face.java
+++ b/src/api/rtm/jp/ngt/rtm/block/decoration/Face.java
@@ -59,19 +59,15 @@ public class Face implements Cloneable {
     }
 
     public enum FaceType {
-        TOP, BOTTOM, LEFT, RIGHT, FRONT, BACK;
+        TOP((x, y, z) -> new float[] { 1.0F - z, x }),
+        BOTTOM((x, y, z) -> new float[] { z, x }),
+        LEFT((x, y, z) -> new float[] { 1.0F - z, 1.0F - y }),
+        RIGHT((x, y, z) -> new float[] { z, 1.0F - y }),
+        FRONT((x, y, z) -> new float[] { x, 1.0F - y }),
+        BACK((x, y, z) -> new float[] { 1.0F - x, 1.0F - y });
 
         public final Face.UVFunc func;
 
-        static {
-            TOP = new FaceType("TOP", 0, (x, y, z) -> new float[] { 1.0F - z, x });
-            BOTTOM = new FaceType("BOTTOM", 1, (x, y, z) -> new float[] { z, x });
-            LEFT = new FaceType("LEFT", 2, (x, y, z) -> new float[] { 1.0F - z, 1.0F - y });
-            RIGHT = new FaceType("RIGHT", 3, (x, y, z) -> new float[] { z, 1.0F - y });
-            FRONT = new FaceType("FRONT", 4, (x, y, z) -> new float[] { x, 1.0F - y });
-            BACK = new FaceType("BACK", 5, (x, y, z) -> new float[] { 1.0F - x, 1.0F - y });
-        }
-
         FaceType(Face.UVFunc par1) {
             this.func = par1;
         }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/ModelCtrl.java b/src/api/rtm/jp/ngt/rtm/command/ModelCtrl.java
index 8b96477..2731efb 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/ModelCtrl.java
+++ b/src/api/rtm/jp/ngt/rtm/command/ModelCtrl.java
@@ -12,43 +12,25 @@ import jp.ngt.rtm.modelpack.modelset.ModelSetFirearm;
 import net.minecraft.command.ICommandSender;
 
 public enum ModelCtrl {
-    NO_FUNC(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    FIRE(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    V_ADD_PITCH(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    V_ADD_YAW(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    V_MOV_DIST(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    VEHICLE_STATE(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    DATA_MAP(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    DIR(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    NOTCH(s -> false, obj -> false, (target, player, order, value) -> false, "");
-
-    public final String discription;
-
-    public final CommandExecutor executor;
-
-    public final TargetFilter filter;
-
-    public final CommandMatcher matcher;
-
-    static {
-        NOTCH = new ModelCtrl("NOTCH", 0, s -> s.equals("notch"), obj -> obj instanceof EntityTrainBase, (target, player, order, value) -> {
+    //@formatter:off
+        NOTCH(s -> s.equals("notch"), obj -> obj instanceof EntityTrainBase, (target, player, order, value) -> {
                     int notch = Integer.valueOf(value).intValue();
                     return ((EntityTrainBase)target).setNotch(notch);
-                }"mctrl <train> notch <-8 ~ 5>");
-        DIR = new ModelCtrl("DIR", 1, s -> s.equals("dir"), obj -> obj instanceof EntityTrainBase, (target, player, order, value) -> {
+                }, "mctrl <train> notch <-8 ~ 5>"),
+        DIR(s -> s.equals("dir"), obj -> obj instanceof EntityTrainBase, (target, player, order, value) -> {
                     int dir = Integer.valueOf(value).intValue();
                     ((EntityTrainBase)target).setTrainDirection(dir);
                     return true;
-                }"mctrl <train> dir <0 or 1>");
-        DATA_MAP = new ModelCtrl("DATA_MAP", 2, s -> s.startsWith("dm:"), obj -> obj instanceof IResourceSelector, (target, player, order, value) -> {
+                }, "mctrl <train> dir <0 or 1>"),
+        DATA_MAP(s -> s.startsWith("dm:"), obj -> obj instanceof IResourceSelector, (target, player, order, value) -> {
                     String dataName = order.replace("dm:", "");
                     if (!((IResourceSelector)target).getResourceState().getDataMap().set(dataName, value, 3)) {
                         NGTLog.sendChatMessage(player, "[" + dataName + "] is not key.", new Object[0]);
                         return false;
                     }
                     return true;
-                }"mctrl <?> dm:<data name> <(type)value>");
-        VEHICLE_STATE = new ModelCtrl("VEHICLE_STATE", 3, s -> s.startsWith("state:"), obj -> obj instanceof EntityVehicleBase, (target, player, order, value) -> {
+                }, "mctrl <?> dm:<data name> <(type)value>"),
+        VEHICLE_STATE(s -> s.startsWith("state:"), obj -> obj instanceof EntityVehicleBase, (target, player, order, value) -> {
                     String dataName = order.replace("state:", "");
                     try {
                         TrainState state = TrainState.valueOf(value);
@@ -60,14 +42,14 @@ public enum ModelCtrl {
                         NGTLog.sendChatMessage(player, "Illegal argument.", new Object[0]);
                         return false;
                     }
-                }"mctrl <vehicle> state:<data name> <value>");
-        V_MOV_DIST = new ModelCtrl("V_MOV_DIST", 4, s -> s.equals("move"), obj -> obj instanceof EntityVehicle, (target, player, order, value) -> {
+                }, "mctrl <vehicle> state:<data name> <value>"),
+        V_MOV_DIST(s -> s.equals("move"), obj -> obj instanceof EntityVehicle, (target, player, order, value) -> {
                     EntityVehicle vehicle = (EntityVehicle)target;
                     double dist = Double.valueOf(value).doubleValue();
                     vehicle.controller.setMoveDistance(vehicle, dist);
                     return true;
-                }"mctrl <vehicle> move <distance>");
-        V_ADD_YAW = new ModelCtrl("V_ADD_YAW", 5, s -> s.equals("addYaw"), obj -> (obj instanceof EntityVehicle || obj instanceof EntityArtillery), (target, player, order, value) -> {
+                }, "mctrl <vehicle> move <distance>"),
+        V_ADD_YAW(s -> s.equals("addYaw"), obj -> (obj instanceof EntityVehicle || obj instanceof EntityArtillery), (target, player, order, value) -> {
                     if (target instanceof EntityArtillery) {
                         EntityArtillery firearm = (EntityArtillery)target;
                         float yaw = Float.valueOf(value).floatValue();
@@ -78,23 +60,33 @@ public enum ModelCtrl {
                         vehicle.controller.addYaw(vehicle, yaw);
                     }
                     return true;
-                }"mctrl <vehicle or artillery> addYaw <value>");
-        V_ADD_PITCH = new ModelCtrl("V_ADD_PITCH", 6, s -> s.equals("addPitch"), obj -> (obj instanceof EntityVehicle || obj instanceof EntityArtillery), (target, player, order, value) -> {
+                }, "mctrl <vehicle or artillery> addYaw <value>"),
+        V_ADD_PITCH(s -> s.equals("addPitch"), obj -> (obj instanceof EntityVehicle || obj instanceof EntityArtillery), (target, player, order, value) -> {
                     if (target instanceof EntityArtillery) {
                         EntityArtillery firearm = (EntityArtillery)target;
                         float yaw = Float.valueOf(value).floatValue();
                         firearm.controller.addPitch(firearm, -yaw);
                     }
                     return true;
-                }"mctrl <artillery> addPitch <value>");
-        FIRE = new ModelCtrl("FIRE", 7, s -> s.equals("fire"), obj -> obj instanceof EntityArtillery, (target, player, order, value) -> {
+                }, "mctrl <artillery> addPitch <value>"),
+        FIRE(s -> s.equals("fire"), obj -> obj instanceof EntityArtillery, (target, player, order, value) -> {
                     EntityArtillery firearm = (EntityArtillery)target;
                     ItemAmmunition.BulletType type = ItemAmmunition.BulletType.getBulletType((((ModelSetFirearm)firearm.getResourceState().getResourceSet()).getConfig()).ammoType);
                     int count = Integer.valueOf(value).intValue();
                     firearm.fire(null, type, count);
                     return true;
-                }"mctrl <artillery> fire <number of bullet>");
-    }
+                }, "mctrl <artillery> fire <number of bullet>"),
+    //@formatter:on
+
+    NO_FUNC(s -> false, obj -> false, (target, player, order, value) -> false, "");
+
+    public final String discription;
+
+    public final CommandExecutor executor;
+
+    public final TargetFilter filter;
+
+    public final CommandMatcher matcher;
 
     ModelCtrl(CommandMatcher par1, TargetFilter par2, CommandExecutor par3, String par4) {
         this.matcher = par1;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntitySignalConverter.java b/src/api/rtm/jp/ngt/rtm/electric/TileEntitySignalConverter.java
index d1cee01..8bdf998 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntitySignalConverter.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/TileEntitySignalConverter.java
@@ -76,15 +76,15 @@ public abstract class TileEntitySignalConverter extends TileEntityCustom impleme
 
     public static TileEntitySignalConverter createTileEntity(int par1) {
         switch (SignalConverterType.getType(par1)) {
-            case EQUAL:
+            case RSIn:
                 return new TileEntitySC_RSIn();
-            case GREATER_EQUAL:
+            case RSOut:
                 return new TileEntitySC_RSOut();
-            case GREATER_THAN:
+            case Increment:
                 return new TileEntitySC_Increment();
-            case LESS_EQUAL:
+            case Decrement:
                 return new TileEntitySC_Decrement();
-            case LESS_THAN:
+            case Wireless:
                 return new TileEntitySC_Wireless();
         }
         return new TileEntitySC_RSIn();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/RenderBullet.java b/src/api/rtm/jp/ngt/rtm/entity/RenderBullet.java
index 3bab73a..c237e55 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/RenderBullet.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/RenderBullet.java
@@ -230,7 +230,7 @@ public class RenderBullet extends Render<EntityBullet> {
         RenderManager renMg = NGTUtilClient.getMinecraft().getRenderManager();
         float partialTicks = 0.0F;
         GlStateManager.rotate(-entity.rotationYaw, 0.0F, 1.0F, 0.0F);
-        GlStateManager.rotate(((renMg.options.thirdPersonView == 2) ? -1 : true) * -entity.rotationPitch, 1.0F, 0.0F, 0.0F);
+        GlStateManager.rotate(((renMg.options.thirdPersonView == 2) ? -1 : 1) * -entity.rotationPitch, 1.0F, 0.0F, 0.0F);
         int k = (entity.getPrimaryHand() == EnumHandSide.RIGHT) ? 1 : -1;
         float f7 = entity.getSwingProgress(partialTicks);
         float f8 = MathHelper.sin((float)NGTMath.firstSqrt(f7) * 3.1415927F);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/RenderNPC.java b/src/api/rtm/jp/ngt/rtm/entity/npc/RenderNPC.java
index fac20ad..e50b8ed 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/RenderNPC.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/npc/RenderNPC.java
@@ -47,7 +47,7 @@ public class RenderNPC extends RenderBiped<EntityNPC> {
             boolean usingGun = (hasGun && entity.isUsingItem());
             if (usingGun)
                 ((ModelBiped)this.mainModel).rightArmPose = ModelBiped.ArmPose.BOW_AND_ARROW;
-            super.doRender((EntityLiving)entity, x, y, z, par8, partialTick);
+            super.doRender(entity, x, y, z, par8, partialTick);
         } else {
             renderCustomModel(entity, x, y, z, par8, partialTick);
         }
@@ -101,7 +101,7 @@ public class RenderNPC extends RenderBiped<EntityNPC> {
             GlStateManager.enableLighting();
             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
             this.parentRenderer.getMainModel().render((Entity)entity, par2, par3, par5, par6, par7, scale);
-            this.parentRenderer.setLightmap((EntityLiving)entity);
+            this.parentRenderer.setLightmap(entity);
             GlStateManager.depthMask(true);
             GlStateManager.disableBlend();
             GlStateManager.enableAlpha();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/EntityTrainBase.java b/src/api/rtm/jp/ngt/rtm/entity/train/EntityTrainBase.java
index 0344c6d..9e2bdfd 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/EntityTrainBase.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/EntityTrainBase.java
@@ -556,10 +556,9 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
     }
 
     protected void removePassengerFromVehicle(Entity passenger) {
-        EntityTrainBase entityTrainBase;
         Entity riding = getBogie(getTrainDirection());
         if (riding == null || getDistanceSq(riding) > 225.0D)
-        fixRiderPosOnDismount(passenger, (Entity)entityTrainBase);
+        fixRiderPosOnDismount(passenger, riding);
     }
 
     public boolean processInitialInteract(EntityPlayer player, EnumHand hand) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityCargoWithModel.java b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityCargoWithModel.java
index e1d489e..8a9f12b 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityCargoWithModel.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityCargoWithModel.java
@@ -18,7 +18,7 @@ import net.minecraft.util.EnumHand;
 import net.minecraft.world.World;
 
 public abstract class EntityCargoWithModel<T extends ModelSetBase> extends EntityCargo implements IResourceSelector {
-    private final ResourceState<T> state = (ResourceState)new ResourceState<>(getSubType(), this);
+    private final ResourceState state = (ResourceState)new ResourceState<>(getSubType(), this);
 
     public EntityCargoWithModel(World par1) {
         super(par1);
@@ -58,7 +58,7 @@ public abstract class EntityCargoWithModel<T extends ModelSetBase> extends Entit
         return false;
     }
 
-    public ResourceState<T> getResourceState() {
+    public ResourceState<? extends T> getResourceState() {
         return this.state;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityContainer.java b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityContainer.java
index 0e883fa..3caf4fc 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityContainer.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityContainer.java
@@ -100,6 +100,7 @@ public class EntityContainer extends EntityCargoWithModel<ModelSetContainer> imp
                 double d0 = 1.5D;
                 double d1 = 256.0D;
                 List<Entity> list = getEntityWorld().getEntitiesWithinAABBExcludingEntity((Entity)player, new AxisAlignedBB(this.posX - d0, this.posY, this.posZ - d0, this.posX + d0, this.posY + d1, this.posZ + d0));
+                EntityContainer topEntity = this;
                 for (Entity entity : list) {
                     if (entity instanceof EntityContainer && entity.posY > topEntity.posY)
                         topEntity = (EntityContainer)entity;
@@ -110,7 +111,7 @@ public class EntityContainer extends EntityCargoWithModel<ModelSetContainer> imp
                 cargo.readCargoFromItem();
                 if (!this.world.isRemote) {
                     this.world.spawnEntity((Entity)cargo);
-                    ResourceState<T> st2 = ((ItemCargo)itemstack.getItem()).getModelState(itemstack);
+                    ResourceState st2 = ((ItemCargo)itemstack.getItem()).getModelState(itemstack);
                     cargo.getResourceState().readFromNBT(st2.writeToNBT());
                     cargo.updateResourceState();
                 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/Formation.java b/src/api/rtm/jp/ngt/rtm/entity/train/util/Formation.java
index d82ae47..74901a0 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/Formation.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/util/Formation.java
@@ -111,15 +111,15 @@ public final class Formation {
     }
 
     private void reverse() {
-        NGTUtil.reverse((Object[])this.entries);
+        NGTUtil.reverse(this.entries);
         for (FormationEntry entry : this.entries)
             entry.dir = (byte)(entry.dir ^ 0x1);
     }
 
     private void addAll(FormationEntry[] par1) {
         List<FormationEntry> list = new ArrayList<>();
-        NGTUtil.addArray(list, (Object[])this.entries);
-        NGTUtil.addArray(list, (Object[])par1);
+        NGTUtil.addArray(list, this.entries);
+        NGTUtil.addArray(list, par1);
         this.entries = list.<FormationEntry>toArray(new FormationEntry[list.size()]);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/util/CollisionObj.java b/src/api/rtm/jp/ngt/rtm/entity/util/CollisionObj.java
index b593f4e..fa7dd7e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/util/CollisionObj.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/util/CollisionObj.java
@@ -78,7 +78,7 @@ public final class CollisionObj {
         boolean addAll = false;
         List<String> nameList = new ArrayList<>();
         if (names != null) {
-            NGTUtil.addArray(nameList, (Object[])names);
+            NGTUtil.addArray(nameList, names);
             addAll = names[0].equals("-all");
         }
         for (GroupObject go : model.getGroupObjects()) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/EntityVehicleBase.java b/src/api/rtm/jp/ngt/rtm/entity/vehicle/EntityVehicleBase.java
index 04f131a..e324a8b 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/EntityVehicleBase.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/vehicle/EntityVehicleBase.java
@@ -34,7 +34,7 @@ import net.minecraftforge.fml.common.network.simpleimpl.IMessage;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends EntityCustom implements IResourceSelector {
+public abstract class EntityVehicleBase<T extends ModelSetVehicleBase<?>> extends EntityCustom implements IResourceSelector<T> {
     public static final int MAX_SEAT_ROTATION = 45;
 
     public static final int MAX_DOOR_MOVE = 60;
@@ -182,7 +182,7 @@ public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends E
     public final void onUpdate() {
         if (!this.world.isRemote || this.ignoreUpdate)
             onVehicleUpdate();
-        this.ignoreUpdate ^= 0x1;
+        this.ignoreUpdate ^= true;
     }
 
     protected void onVehicleUpdate() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/RenderVehicleBase.java b/src/api/rtm/jp/ngt/rtm/entity/vehicle/RenderVehicleBase.java
index 5b9a8ef..f889fb3 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/RenderVehicleBase.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/vehicle/RenderVehicleBase.java
@@ -47,7 +47,7 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
         super(renderManager);
     }
 
-    protected void renderVehicleBase(EntityVehicleBase<ModelSetVehicleBase> vehicle, double par2, double par4, double par6, float par8, float par9) {
+    protected void renderVehicleBase(EntityVehicleBase<? extends ModelSetVehicleBase> vehicle, double par2, double par4, double par6, float par8, float par9) {
         GL11.glPushMatrix();
         GL11.glEnable(32826);
         double x = par2;
@@ -408,7 +408,7 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
         return false;
     }
 
-    private void debugCollision(EntityVehicleBase<ModelSetVehicleBase> vehicle) {
+    private void debugCollision(EntityVehicleBase<? extends ModelSetVehicleBase> vehicle) {
         if (MinecraftForgeClient.getRenderPass() == 1) {
             ModelSetVehicleBase modelSet = vehicle.getResourceState().getResourceSet();
             if (modelSet != null)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/VehicleTrackerEntry.java b/src/api/rtm/jp/ngt/rtm/entity/vehicle/VehicleTrackerEntry.java
index 8a72d61..d5bcfff 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/VehicleTrackerEntry.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/vehicle/VehicleTrackerEntry.java
@@ -161,7 +161,7 @@ public final class VehicleTrackerEntry extends EntityTrackerEntry {
             if (trackedEntities != null) {
                 VehicleTrackerEntry tte = new VehicleTrackerEntry(par1);
                 EntityTrackerEntry trackerEntry = null;
-                Iterator<EntityTrackerEntry> iterator = trackedEntities.iterator();
+                Iterator<? extends EntityTrackerEntry> iterator = trackedEntities.iterator();
                 while (iterator.hasNext()) {
                     EntityTrackerEntry entry = iterator.next();
                     if (entry != null && entry.equals(tte)) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerItemContainer.java b/src/api/rtm/jp/ngt/rtm/gui/ContainerItemContainer.java
index c6750f9..c85a12c 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerItemContainer.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/ContainerItemContainer.java
@@ -210,15 +210,14 @@ public class ContainerItemContainer extends Container {
         } else if (clickTypeIn == ClickType.SWAP && dragType >= 0 && dragType < 9) {
             Slot slot2 = this.inventorySlots.get(slotId);
             if (slot2.canTakeStack(player)) {
-                int i;
                 ItemStack itemstack3 = invPlayer.getStackInSlot(dragType);
                 boolean flag = (itemstack3 == ItemStack.EMPTY || (slot2.inventory == invPlayer && slot2.isItemValid(itemstack3)));
                 int l1 = -1;
                 if (!flag) {
                     l1 = invPlayer.getFirstEmptyStack();
-                    i = flag | ((l1 > -1) ? 1 : 0);
+                    flag |= (l1 > -1);
                 }
-                if (slot2.getHasStack() && i != 0) {
+                if (slot2.getHasStack() && flag) {
                     ItemStack itemstack5 = slot2.getStack();
                     invPlayer.setInventorySlotContents(dragType, itemstack5.copy());
                     if ((slot2.inventory != invPlayer || !slot2.isItemValid(itemstack3)) && itemstack3 != ItemStack.EMPTY) {
@@ -279,17 +278,16 @@ public class ContainerItemContainer extends Container {
     }
 
     public static boolean canAddItemToSlot(Slot slot, ItemStack itemStack, boolean par2) {
-        int i;
         boolean flag1 = (slot == null || !slot.getHasStack());
         if (slot != null && slot.getHasStack() && itemStack != null && itemStack.isItemEqual(slot.getStack()) && ItemStack.areItemStackTagsEqual(slot.getStack(), itemStack)) {
             int j = par2 ? 0 : itemStack.getCount();
             if (slot.slotNumber <= 53) {
-                i = flag1 | ((slot.getStack().getCount() + j <= slot.getSlotStackLimit()) ? 1 : 0);
+                flag1 |= slot.getStack().getCount() + j <= slot.getSlotStackLimit();
             } else {
-                i |= (slot.getStack().getCount() + j <= itemStack.getMaxStackSize()) ? 1 : 0;
+                flag1 |= slot.getStack().getCount() + j <= itemStack.getMaxStackSize();
             }
         }
-        return i;
+        return flag1;
     }
 
     protected boolean mergeItemStack(ItemStack itemStack, int par2, int par3, boolean par4) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerNPC.java b/src/api/rtm/jp/ngt/rtm/gui/ContainerNPC.java
index 9dc329b..4d31d76 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerNPC.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/ContainerNPC.java
@@ -90,6 +90,7 @@ public final class ContainerNPC extends Container {
         public boolean isItemValid(ItemStack item) {
             if (item == null)
                 return false;
+            EntityEquipmentSlot slot = EntityEquipmentSlot.HEAD;
             switch (this.index) {
                 case 0:
                     slot = EntityEquipmentSlot.FEET;
@@ -104,7 +105,6 @@ public final class ContainerNPC extends Container {
                     slot = EntityEquipmentSlot.HEAD;
                     return item.getItem().isValidArmor(item, slot, (Entity)ContainerNPC.this.npc);
             }
-            EntityEquipmentSlot slot = EntityEquipmentSlot.HEAD;
             return item.getItem().isValidArmor(item, slot, (Entity)ContainerNPC.this.npc);
         }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerTrainControlPanel.java b/src/api/rtm/jp/ngt/rtm/gui/ContainerTrainControlPanel.java
index cbf8d61..4c4cdd2 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerTrainControlPanel.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/ContainerTrainControlPanel.java
@@ -9,7 +9,7 @@ import net.minecraft.inventory.IInventory;
 import net.minecraft.inventory.Slot;
 
 public class ContainerTrainControlPanel extends ContainerPlayer {
-    public final EntityVehicleBase vehicle;
+    public final EntityVehicleBase<?> vehicle;
 
     public final EntityPlayer player;
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/DataMapEditor.java b/src/api/rtm/jp/ngt/rtm/gui/DataMapEditor.java
index 05ccbdd..4551d3f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/DataMapEditor.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/DataMapEditor.java
@@ -86,7 +86,7 @@ public class DataMapEditor extends JFrame {
 
     public class DMEditorTable extends JTable {
         public DMEditorTable(Font font, int fontSize, String[][] rowData, String[] columnNames) {
-            super(new DefaultTableModel((Object[][])rowData, (Object[])columnNames, DataMapEditor.this, rowData) {
+            super(new DefaultTableModel((Object[][])rowData, (Object[])columnNames) {
                         public boolean isCellEditable(int row, int column) {
                             return (column == 2);
                         }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiDecorationBlock.java b/src/api/rtm/jp/ngt/rtm/gui/GuiDecorationBlock.java
index fd807e4..9ef2f9d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiDecorationBlock.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiDecorationBlock.java
@@ -260,7 +260,7 @@ public class GuiDecorationBlock extends GuiScreenCustom {
         if (par1 == 0 || par1 == 1) {
             Element newElement;
             List<Element> list = new ArrayList<>();
-            NGTUtil.addArray(list, (Object[])this.model.elements);
+            NGTUtil.addArray(list, this.model.elements);
             if (par1 == 0) {
                 newElement = Element.getDefaultElement();
             } else {
@@ -271,7 +271,7 @@ public class GuiDecorationBlock extends GuiScreenCustom {
             this.model.elements = list.<Element>toArray(new Element[list.size()]);
         } else if (this.model.elements.length >= 2) {
             List<Element> list = new ArrayList<>();
-            NGTUtil.addArray(list, (Object[])this.model.elements);
+            NGTUtil.addArray(list, this.model.elements);
             list.remove(this.selectedElemnt);
             this.model.elements = list.<Element>toArray(new Element[list.size()]);
         }
@@ -283,7 +283,7 @@ public class GuiDecorationBlock extends GuiScreenCustom {
         if (par1 == 0 || par1 == 1) {
             Face newFace;
             List<Face> list = new ArrayList<>();
-            NGTUtil.addArray(list, (Object[])this.selectedElemnt.faces);
+            NGTUtil.addArray(list, this.selectedElemnt.faces);
             if (par1 == 0) {
                 newFace = Face.getDefaultFace();
             } else {
@@ -294,7 +294,7 @@ public class GuiDecorationBlock extends GuiScreenCustom {
             this.selectedElemnt.faces = list.<Face>toArray(new Face[list.size()]);
         } else if (this.selectedElemnt.faces.length >= 2) {
             List<Face> list = new ArrayList<>();
-            NGTUtil.addArray(list, (Object[])this.selectedElemnt.faces);
+            NGTUtil.addArray(list, this.selectedElemnt.faces);
             list.remove(this.selectedFace);
             this.selectedElemnt.faces = list.<Face>toArray(new Face[list.size()]);
         }
@@ -354,7 +354,7 @@ public class GuiDecorationBlock extends GuiScreenCustom {
             moveObject();
             initGui();
         } else if (button.id == 211) {
-            this.lockUV ^= 0x1;
+            this.lockUV ^= true;
             button.displayString = "lock UV : " + this.lockUV;
         }
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiIngameCustom.java b/src/api/rtm/jp/ngt/rtm/gui/GuiIngameCustom.java
index 812061d..a6188ff 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiIngameCustom.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiIngameCustom.java
@@ -69,7 +69,7 @@ public class GuiIngameCustom extends GuiScreen {
         }
     }
 
-    private void renderVehicleGui(EntityVehicleBase<ModelSetVehicleBase> vehicle) {
+    private void renderVehicleGui(EntityVehicleBase<? extends ModelSetVehicleBase> vehicle) {
         ModelSetVehicleBase modelSet = vehicle.getResourceState().getResourceSet();
         if (modelSet != null && !((VehicleBaseConfig)modelSet.getConfig()).notDisplayCab) {
             NGTUtilClient.bindTexture((modelSet.guiTexture != null) ? modelSet.guiTexture : TEX_CAB);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiMotorman.java b/src/api/rtm/jp/ngt/rtm/gui/GuiMotorman.java
index a2244a9..f587e27 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiMotorman.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiMotorman.java
@@ -35,7 +35,7 @@ public class GuiMotorman extends GuiSelect {
                         } catch (IOException e) {
                             e.printStackTrace();
                         }
-                    }file, file.getName(), icon);
+                    }, file, file.getName(), icon);
         }
         return new GuiMotorman(entity, elements);
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiMovingMachine.java b/src/api/rtm/jp/ngt/rtm/gui/GuiMovingMachine.java
index 9d99bde..002928d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiMovingMachine.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiMovingMachine.java
@@ -96,7 +96,7 @@ public class GuiMovingMachine extends GuiScreenCustom {
         } else if (button.id == 1) {
             this.mc.displayGuiScreen(null);
         } else if (button.id == 100) {
-            this.guideVisibility ^= 0x1;
+            this.guideVisibility ^= true;
             this.buttonV.displayString = "GuideVisibility : " + this.guideVisibility;
         } else if (button.id == 101) {
             this.type = (this.type + 1) % VEHICLE_TYPE.length;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSelectModel.java b/src/api/rtm/jp/ngt/rtm/gui/GuiSelectModel.java
index b18d63b..7ba5859 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSelectModel.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiSelectModel.java
@@ -69,7 +69,7 @@ public class GuiSelectModel extends GuiScreenCustom {
             String subType = state.type.subType;
             List<ResourceSet> list = ModelPackManager.INSTANCE.getModelList(state.type);
             this.modelListAll = new ArrayList<>();
-            for (ResourceSet<IConfigWithType> modelSet : list) {
+            for (ResourceSet<? extends IConfigWithType> modelSet : list) {
                 if (((IConfigWithType)modelSet.getConfig()).getSubType().equals(subType))
                     this.modelListAll.add(modelSet);
             }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSignboard.java b/src/api/rtm/jp/ngt/rtm/gui/GuiSignboard.java
index 6f28121..51c4ecc 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSignboard.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiSignboard.java
@@ -441,6 +441,7 @@ public class GuiSignboard extends GuiScreenCustom {
                 setForeground(Color.black);
                 setBackground(Color.white);
             }
+            return this;
         }
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiVehicleControlPanel.java b/src/api/rtm/jp/ngt/rtm/gui/GuiVehicleControlPanel.java
index e81591b..1818cfc 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiVehicleControlPanel.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiVehicleControlPanel.java
@@ -61,7 +61,7 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
 
     protected final EntityPlayer player;
 
-    protected final ModelSetVehicleBase<VehicleBaseConfig> modelset;
+    protected final ModelSetVehicleBase<? extends VehicleBaseConfig> modelset;
 
     private GuiButton buttonChunkLoader;
 
@@ -494,7 +494,7 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
             }
         }
         if (button.id == 300 || button.id == 301) {
-            ((GuiButtonDoor)button).opened ^= 0x1;
+            ((GuiButtonDoor)button).opened ^= true;
             int r = (this.buttonDoor[0]).opened ? 1 : 0;
             int l = (this.buttonDoor[1]).opened ? 1 : 0;
             int state = r << 1 | l;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/InternalButton.java b/src/api/rtm/jp/ngt/rtm/gui/InternalButton.java
index dc145b9..7c175d2 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/InternalButton.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/InternalButton.java
@@ -42,14 +42,17 @@ public class InternalButton {
         this.text = text;
         this.textColor = color;
         this.textScale = scale;
+        return this;
     }
 
     public InternalButton setColor(int par1) {
         this.color = par1;
+        return this;
     }
 
     public InternalButton setListner(ButtonListner par1) {
         this.listner = par1;
+        return this;
     }
 
     public ButtonListner getListner() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/InternalGUI.java b/src/api/rtm/jp/ngt/rtm/gui/InternalGUI.java
index fcaa35f..79a5476 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/InternalGUI.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/InternalGUI.java
@@ -37,6 +37,7 @@ public class InternalGUI {
 
     public InternalGUI setColor(int par1) {
         this.color = par1;
+        return this;
     }
 
     public InternalButton addButton(InternalButton button) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemGun.java b/src/api/rtm/jp/ngt/rtm/item/ItemGun.java
index 2f87f4b..87a2e3c 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemGun.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemGun.java
@@ -145,13 +145,13 @@ public class ItemGun extends ItemCustom {
     }
 
     public enum GunType {
-        handgun((String)ItemAmmunition.BulletType.handgun_9mm, 10, 16, 4.5F, false),
-        rifle((String)ItemAmmunition.BulletType.rifle_7_62mm, 5, 16, 7.5F, false),
-        autoloading_rifle((String)ItemAmmunition.BulletType.rifle_7_62mm, 30, 6, 7.5F, true),
-        sniper_rifle((String)ItemAmmunition.BulletType.rifle_7_62mm, 10, 20, 7.5F, false),
-        smg((String)ItemAmmunition.BulletType.handgun_9mm, 30, 6, 4.5F, true),
-        amr((String)ItemAmmunition.BulletType.rifle_12_7mm, 10, 24, 9.0F, false),
-        razer_gun((String)ItemAmmunition.BulletType.rifle_12_7mm, 10, 60, 150.0F, false);
+        handgun(ItemAmmunition.BulletType.handgun_9mm, 10, 16, 4.5F, false),
+        rifle(ItemAmmunition.BulletType.rifle_7_62mm, 5, 16, 7.5F, false),
+        autoloading_rifle(ItemAmmunition.BulletType.rifle_7_62mm, 30, 6, 7.5F, true),
+        sniper_rifle(ItemAmmunition.BulletType.rifle_7_62mm, 10, 20, 7.5F, false),
+        smg(ItemAmmunition.BulletType.handgun_9mm, 30, 6, 4.5F, true),
+        amr(ItemAmmunition.BulletType.rifle_12_7mm, 10, 24, 9.0F, false),
+        razer_gun(ItemAmmunition.BulletType.rifle_12_7mm, 10, 60, 150.0F, false);
 
         public final ItemAmmunition.BulletType bulletType;
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemRail.java b/src/api/rtm/jp/ngt/rtm/item/ItemRail.java
index d63634e..2d6a7dd 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemRail.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemRail.java
@@ -13,6 +13,7 @@ import jp.ngt.rtm.RTMResource;
 import jp.ngt.rtm.modelpack.ModelPackManager;
 import jp.ngt.rtm.modelpack.ResourceType;
 import jp.ngt.rtm.modelpack.cfg.RailConfig;
+import jp.ngt.rtm.modelpack.modelset.ModelSetRail;
 import jp.ngt.rtm.modelpack.modelset.ResourceSet;
 import jp.ngt.rtm.modelpack.state.ResourceState;
 import jp.ngt.rtm.modelpack.state.ResourceStateRail;
@@ -40,7 +41,7 @@ import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class ItemRail extends ItemWithModel {
+public class ItemRail extends ItemWithModel<ModelSetRail> {
     public ItemRail() {
         setMaxStackSize(1);
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemTrain.java b/src/api/rtm/jp/ngt/rtm/item/ItemTrain.java
index f60184b..be8196b 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemTrain.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemTrain.java
@@ -45,7 +45,7 @@ import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public final class ItemTrain extends ItemWithModel {
+public final class ItemTrain extends ItemWithModel<ModelSetTrain> {
     private static final int SPLIT = 128;
 
     protected ActionResult<ItemStack> onItemRightClick(ItemArgHolderBase.ItemArgHolder holder) {
@@ -205,7 +205,7 @@ public final class ItemTrain extends ItemWithModel {
     }
 
     public static ItemStack convertFormationAsItem(EntityTrainBase train) {
-        ItemStack stack = getItem((train.getResourceState()).type);
+        ItemStack stack = getItem((ResourceType<TrainConfig, ModelSetTrain>) (train.getResourceState()).type);
         NBTTagList tagList = new NBTTagList();
         for (FormationEntry entry : (train.getFormation()).entries) {
             if (entry != null) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemWithModel.java b/src/api/rtm/jp/ngt/rtm/item/ItemWithModel.java
index fcd837d..a92f573 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemWithModel.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemWithModel.java
@@ -19,7 +19,7 @@ import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.ActionResult;
 import net.minecraft.util.text.TextFormatting;
 
-public abstract class ItemWithModel<T extends ResourceSet> extends ItemCustom implements IResourceSelector {
+public abstract class ItemWithModel<T extends ResourceSet<?>> extends ItemCustom implements IResourceSelector<T> {
     private ItemStack selectedItem;
 
     private EntityPlayer selectedPlayer;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/IResourceSelector.java b/src/api/rtm/jp/ngt/rtm/modelpack/IResourceSelector.java
index 20f1cf6..60e76a4 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/IResourceSelector.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/IResourceSelector.java
@@ -4,7 +4,7 @@ import jp.ngt.rtm.modelpack.state.ResourceState;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public interface IResourceSelector<T extends jp.ngt.rtm.modelpack.modelset.ResourceSet> {
+public interface IResourceSelector<T extends jp.ngt.rtm.modelpack.modelset.ResourceSet<?>> {
     ResourceState<T> getResourceState();
 
     void updateResourceState();
@@ -12,5 +12,5 @@ public interface IResourceSelector<T extends jp.ngt.rtm.modelpack.modelset.Resou
     int[] getSelectorPos();
 
     @SideOnly(Side.CLIENT)
-    boolean closeGui(ResourceState paramResourceState);
+    boolean closeGui(ResourceState<T> paramResourceState);
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ModelPackManager.java b/src/api/rtm/jp/ngt/rtm/modelpack/ModelPackManager.java
index 5bb1855..d1f52a4 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ModelPackManager.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/ModelPackManager.java
@@ -241,7 +241,6 @@ public final class ModelPackManager {
 
     @SideOnly(Side.CLIENT)
     public IModelNGT loadModel(String modelName, int drawMode, boolean addModelMap, ModelConfig cfg, byte[] md5) {
-        PolygonModel polygonModel;
         if (addModelMap && this.modelCache.containsKey(modelName))
             return this.modelCache.get(modelName);
         VecAccuracy accuracy = (cfg.accuracy == null || cfg.accuracy.equals(VecAccuracy.MEDIUM.toString())) ? VecAccuracy.MEDIUM : VecAccuracy.LOW;
@@ -249,22 +248,22 @@ public final class ModelPackManager {
         IModelNGT model = null;
         try {
             if (FileType.CLASS.match(modelName)) {
-                MCModel mCModel = RTMClassModels.getModel(modelName);
+                model = RTMClassModels.getModel(modelName);
             } else if (FileType.NGTO.match(modelName)) {
-                NGTOModel nGTOModel = new NGTOModel((ResourceLocation)new ResourceLocationCustom("minecraft", resource), cfg.scale);
+                model = new NGTOModel((ResourceLocation)new ResourceLocationCustom("minecraft", resource), cfg.scale);
             } else if (FileType.NGTZ.match(modelName)) {
-                NGTZModel nGTZModel = new NGTZModel((ResourceLocation)new ResourceLocationCustom("minecraft", resource), cfg.scale);
+                model = new NGTZModel((ResourceLocation)new ResourceLocationCustom("minecraft", resource), cfg.scale);
             } else {
-                polygonModel = ModelLoader.loadModel(resource, accuracy, new Object[] { Integer.valueOf(drawMode), md5 });
+                model = ModelLoader.loadModel(resource, accuracy, new Object[] { Integer.valueOf(drawMode), md5 });
             }
         } catch (ModelFormatException e) {
             throw new ModelFormatException("Can't load model : " + modelName, e);
         }
-        if (polygonModel == null)
+        if (model == null)
             throw new ModelPackException("Can't find model file", cfg.getName());
         if (addModelMap)
-            this.modelCache.put(modelName, polygonModel);
-        return (IModelNGT)polygonModel;
+            this.modelCache.put(modelName, model);
+        return (IModelNGT)model;
     }
 
     public ResourceLocation getResource(String path) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/RTMResourceManager.java b/src/api/rtm/jp/ngt/rtm/modelpack/RTMResourceManager.java
index 3c913b9..f52c056 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/RTMResourceManager.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/RTMResourceManager.java
@@ -79,7 +79,7 @@ public final class RTMResourceManager implements IResourceManager {
     }
 
     public List getAllResources(ResourceLocation par1) throws IOException {
-        List<?> list = Lists.newArrayList();
+        List list = Lists.newArrayList();
         list.add(getResource(par1));
         if (!list.isEmpty())
             return list;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ResourceType.java b/src/api/rtm/jp/ngt/rtm/modelpack/ResourceType.java
index e02115f..42f0f39 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ResourceType.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/ResourceType.java
@@ -3,7 +3,7 @@ package jp.ngt.rtm.modelpack;
 import jp.ngt.rtm.modelpack.cfg.ResourceConfig;
 import jp.ngt.rtm.modelpack.modelset.ResourceSet;
 
-public class ResourceType<C extends ResourceConfig, S extends ResourceSet> implements Cloneable, Comparable<ResourceType> {
+public class ResourceType<C extends ResourceConfig, S extends ResourceSet<C>> implements Cloneable, Comparable<ResourceType<C, S>> {
     public final String name;
 
     public final Class<C> cfgClass;
@@ -30,10 +30,12 @@ public class ResourceType<C extends ResourceConfig, S extends ResourceSet> imple
 
     public ResourceType<C, S> setDefault(String s) {
         this.defaultName = s;
+        return this;
     }
 
     public ResourceType<C, S> setCustomLoading(boolean par1) {
         this.useCustomLoading = par1;
+        return this;
     }
 
     public ResourceType<C, S> getSubType(String s) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ScriptExecuter.java b/src/api/rtm/jp/ngt/rtm/modelpack/ScriptExecuter.java
index 23a127e..1b2b982 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ScriptExecuter.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/ScriptExecuter.java
@@ -22,7 +22,7 @@ public class ScriptExecuter implements ICommandSender {
 
     public long count;
 
-    protected Object callMethod(IResourceSelector<ModelSetBase> selector, String name, Object... args) {
+    protected Object callMethod(IResourceSelector<ModelSetBase<?>> selector, String name, Object... args) {
         ModelSetBase set = selector.getResourceState().getResourceSet();
         if (set.serverSE != null)
             return ScriptUtil.doScriptIgnoreError(set.serverSE, name, args);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/ContainerConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/ContainerConfig.java
index 96ade8a..bda5693 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/ContainerConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/ContainerConfig.java
@@ -20,7 +20,7 @@ public class ContainerConfig extends ModelConfig {
     public void init() {
         super.init();
         if (this.model == null) {
-            this.model = new ModelConfig.ModelSource(this);
+            this.model = new ModelConfig.ModelSource();
             this.model.modelFile = this.containerModel;
             this.model.textures = new String[][] { { "default", this.containerTexture } };
             this.model.rendererPath = null;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/FirearmConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/FirearmConfig.java
index bb9bc77..4779020 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/FirearmConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/FirearmConfig.java
@@ -46,20 +46,20 @@ public class FirearmConfig extends ModelConfig {
     public void init() {
         super.init();
         if (this.model == null) {
-            this.model = new ModelConfig.ModelSource(this);
+            this.model = new ModelConfig.ModelSource();
             this.model.modelFile = this.firearmModel;
             this.model.textures = new String[][] { { "default", this.firearmTexture } };
             this.model.rendererPath = null;
             this.useOldSystem = true;
         }
         if (this.modelPartsN == null)
-            this.modelPartsN = new ModelConfig.Parts(this);
+            this.modelPartsN = new ModelConfig.Parts();
         if (this.modelPartsY == null)
-            this.modelPartsY = new ModelConfig.Parts(this);
+            this.modelPartsY = new ModelConfig.Parts();
         if (this.modelPartsX == null)
-            this.modelPartsX = new ModelConfig.Parts(this);
+            this.modelPartsX = new ModelConfig.Parts();
         if (this.modelPartsBarrel == null)
-            this.modelPartsBarrel = new ModelConfig.Parts(this);
+            this.modelPartsBarrel = new ModelConfig.Parts();
         this.modelPartsN.initParts();
         this.modelPartsY.initParts();
         this.modelPartsX.initParts();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/RailConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/RailConfig.java
index 243247c..84dab9e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/RailConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/RailConfig.java
@@ -20,7 +20,7 @@ public class RailConfig extends ModelConfig {
     public void init() {
         super.init();
         if (this.model == null) {
-            this.model = new ModelConfig.ModelSource(this);
+            this.model = new ModelConfig.ModelSource();
             this.model.modelFile = this.railModel;
             this.model.textures = new String[][] { { "default", this.railTexture } };
             this.model.rendererPath = null;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/SignalConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/SignalConfig.java
index a70f8b0..d74f9e6 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/SignalConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/SignalConfig.java
@@ -32,14 +32,14 @@ public class SignalConfig extends ModelConfig {
     public void init() {
         super.init();
         if (this.model == null) {
-            this.model = new ModelConfig.ModelSource(this);
+            this.model = new ModelConfig.ModelSource();
             this.model.modelFile = this.signalModel;
             this.model.textures = new String[][] { { "default", this.signalTexture, "Light", this.lightTexture } };
         }
         if (this.modelPartsFixture == null)
-            this.modelPartsFixture = new ModelConfig.Parts(this);
+            this.modelPartsFixture = new ModelConfig.Parts();
         if (this.modelPartsBody == null)
-            this.modelPartsBody = new ModelConfig.Parts(this);
+            this.modelPartsBody = new ModelConfig.Parts();
         this.modelPartsFixture.initParts();
         this.modelPartsBody.initParts();
         if (this.maxSignalLevel == 0 && this.lights != null) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/TrainConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/TrainConfig.java
index d75c2a4..f0ddad1 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/TrainConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/TrainConfig.java
@@ -55,7 +55,7 @@ public class TrainConfig extends VehicleBaseConfig implements IConfigWithType {
     public void init() {
         super.init();
         if (this.trainModel2 == null) {
-            this.trainModel2 = new ModelConfig.ModelSource(this);
+            this.trainModel2 = new ModelConfig.ModelSource();
             this.trainModel2.modelFile = this.trainModel;
             this.trainModel2.textures = new String[][] { { "default", this.trainTexture } };
         }
@@ -65,7 +65,7 @@ public class TrainConfig extends VehicleBaseConfig implements IConfigWithType {
                 this.bogieModel3[1] = this.bogieModel2;
                 this.bogieModel3[0] = this.bogieModel2;
             } else {
-                ModelConfig.ModelSource model = new ModelConfig.ModelSource(this);
+                ModelConfig.ModelSource model = new ModelConfig.ModelSource();
                 model.modelFile = this.bogieModel;
                 model.textures = new String[][] { { "default", this.bogieTexture } };
                 this.bogieModel3[1] = model;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/MPLAdButton.java b/src/api/rtm/jp/ngt/rtm/modelpack/init/MPLAdButton.java
index 7155768..16ce18d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/MPLAdButton.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/init/MPLAdButton.java
@@ -78,7 +78,7 @@ public final class MPLAdButton extends JButton {
 
     private void shuffleAds() {
         List<Advertisement> list = new ArrayList<>();
-        NGTUtil.addArray(list, (Object[])this.ads);
+        NGTUtil.addArray(list, this.ads);
         Collections.shuffle(list);
         this.ads = list.<Advertisement>toArray(new Advertisement[list.size()]);
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/ResourceState.java b/src/api/rtm/jp/ngt/rtm/modelpack/state/ResourceState.java
index 4a2b9b0..04aa86d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/ResourceState.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/state/ResourceState.java
@@ -13,8 +13,8 @@ import net.minecraft.nbt.NBTBase;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.math.AxisAlignedBB;
 
-public class ResourceState<T extends ResourceSet> {
-    public final ResourceType type;
+public class ResourceState<T extends ResourceSet<?>> {
+    public final ResourceType<?, T> type;
 
     public final DataMap dataMap = new DataMap();
 
@@ -30,7 +30,7 @@ public class ResourceState<T extends ResourceSet> {
 
     public int color = 16777215;
 
-    public ResourceState(ResourceType type, @Nullable Object entity) {
+    public ResourceState(ResourceType<?, T> type, @Nullable Object entity) {
         this.type = type;
         this.modelName = type.defaultName;
         this.dataMap.setEntity(entity);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/ResourceStateWithBlock.java b/src/api/rtm/jp/ngt/rtm/modelpack/state/ResourceStateWithBlock.java
index bdf5927..95dbfc0 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/ResourceStateWithBlock.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/state/ResourceStateWithBlock.java
@@ -10,7 +10,7 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.ResourceLocation;
 
-public class ResourceStateWithBlock<T extends ModelSetBase> extends ResourceState<T> {
+public class ResourceStateWithBlock<T extends ModelSetBase<?>> extends ResourceState<T> {
     public Block block = Blocks.AIR;
 
     public byte meta;
@@ -19,7 +19,7 @@ public class ResourceStateWithBlock<T extends ModelSetBase> extends ResourceStat
 
     private IBlockState state;
 
-    public ResourceStateWithBlock(ResourceType type, Object entity) {
+    public ResourceStateWithBlock(ResourceType<?, T> type, Object entity) {
         super(type, entity);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketLargeRailBase.java b/src/api/rtm/jp/ngt/rtm/network/PacketLargeRailBase.java
index bce2e3e..9c8d045 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketLargeRailBase.java
+++ b/src/api/rtm/jp/ngt/rtm/network/PacketLargeRailBase.java
@@ -61,6 +61,6 @@ public class PacketLargeRailBase extends PacketCustom implements IMessageHandler
                         }
                         return false;
                     }
-                }50, 5);
+                }, 50, 5);
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketLargeRailCore.java b/src/api/rtm/jp/ngt/rtm/network/PacketLargeRailCore.java
index 40f8126..e6c3f7c 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketLargeRailCore.java
+++ b/src/api/rtm/jp/ngt/rtm/network/PacketLargeRailCore.java
@@ -107,8 +107,9 @@ public class PacketLargeRailCore extends PacketCustom implements IMessageHandler
             tile0.getResourceState().readFromNBT(message.property);
             tile0.setRailPositions(message.railPositions);
             if (message.dataType != 0 || !(tile instanceof jp.ngt.rtm.rail.TileEntityLargeRailNormalCore))
-                if (message.dataType == 2 && tile instanceof TileEntityLargeRailSwitchCore)
-                    TileEntityLargeRailSwitchCore tileEntityLargeRailSwitchCore = (TileEntityLargeRailSwitchCore)tile;
+                if (message.dataType == 2 && tile instanceof TileEntityLargeRailSwitchCore) {
+                    TileEntityLargeRailSwitchCore tileEntityLargeRailSwitchCore = (TileEntityLargeRailSwitchCore) tile;
+                }
             tile0.updateResourceState();
             return true;
         }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/RenderMarkerBlock.java b/src/api/rtm/jp/ngt/rtm/rail/RenderMarkerBlock.java
index 62c9477..2764446 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/RenderMarkerBlock.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/RenderMarkerBlock.java
@@ -84,7 +84,7 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
             marker.gui.addButton(new InternalButton(-2.4F, startY, 4.8F, 0.5F))
                 .setColor(buttonColor).setText("Anchor mode 2-1 : " + marker.displayLine, 16777215, 0.05F)
                 .setListner(button -> {
-                        marker.anchor21 ^= 0x1;
+                        marker.anchor21 ^= true;
                         if (marker.getCoreMarker() != null)
                             (marker.getCoreMarker()).anchor21 = marker.anchor21;
                         button.setText("Anchor mode 2-1 : " + marker.anchor21, 16777215, 0.05F);
@@ -93,7 +93,7 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
             marker.gui.addButton(new InternalButton(-2.4F, startY, 4.8F, 0.5F))
                 .setColor(buttonColor).setText("Display line : " + marker.displayLine, 16777215, 0.05F)
                 .setListner(button -> {
-                        marker.displayLine ^= 0x1;
+                        marker.displayLine ^= true;
                         if (marker.getCoreMarker() != null)
                             (marker.getCoreMarker()).displayLine = marker.displayLine;
                         button.setText("Display line : " + marker.displayLine, 16777215, 0.05F);
@@ -104,7 +104,7 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
             marker.gui.addButton(new InternalButton(-2.4F, startY, 4.8F, 0.5F))
                 .setColor(buttonColor).setText("Display grid : " + marker.displayGrid, 16777215, 0.05F)
                 .setListner(button -> {
-                        marker.displayGrid ^= 0x1;
+                        marker.displayGrid ^= true;
                         if (marker.getCoreMarker() != null)
                             (marker.getCoreMarker()).displayGrid = marker.displayGrid;
                         button.setText("Display grid : " + marker.displayGrid, 16777215, 0.05F);
@@ -115,7 +115,7 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
             marker.gui.addButton(new InternalButton(-2.4F, startY, 4.8F, 0.5F))
                 .setColor(buttonColor).setText("Display distance : " + marker.displayDistance, 16777215, 0.05F)
                 .setListner(button -> {
-                        marker.displayDistance ^= 0x1;
+                        marker.displayDistance ^= true;
                         button.setText("Display distance : " + marker.displayDistance, 16777215, 0.05F);
                     });
         }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityLargeRailCore.java b/src/api/rtm/jp/ngt/rtm/rail/TileEntityLargeRailCore.java
index c28a0d3..d00a0af 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityLargeRailCore.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/TileEntityLargeRailCore.java
@@ -114,6 +114,7 @@ public abstract class TileEntityLargeRailCore extends TileEntityLargeRailBase im
     }
 
     public TileEntityLargeRailCore getRailCore() {
+        return this;
     }
 
     public void sendPacket() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/RailMapSwitch.java b/src/api/rtm/jp/ngt/rtm/rail/util/RailMapSwitch.java
index 7e5bc38..3e944e3 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/RailMapSwitch.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/util/RailMapSwitch.java
@@ -16,5 +16,6 @@ public final class RailMapSwitch extends RailMap {
     @Deprecated
     public RailMapSwitch setState(boolean par1) {
         this.isOpen = par1;
+        return this;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/BasicVehiclePartsRenderer.java b/src/api/rtm/jp/ngt/rtm/render/BasicVehiclePartsRenderer.java
index ccc0dac..c2c99da 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/BasicVehiclePartsRenderer.java
+++ b/src/api/rtm/jp/ngt/rtm/render/BasicVehiclePartsRenderer.java
@@ -29,7 +29,7 @@ public class BasicVehiclePartsRenderer extends VehiclePartsRenderer {
         super(par1);
     }
 
-    public void init(ModelSetVehicleBase<VehicleBaseConfig> par1, ModelObject par2) {
+    public void init(ModelSetVehicleBase<? extends VehicleBaseConfig> par1, ModelObject par2) {
         VehicleBaseConfig cfg = par1.getConfig();
         List<String> list = new ArrayList<>();
         this.doorLeft = (cfg.door_left != null) ? getParts(list, cfg.door_left) : new PartsWithChildren[0];
@@ -57,9 +57,9 @@ public class BasicVehiclePartsRenderer extends VehiclePartsRenderer {
         PartsWithChildren[] array = new PartsWithChildren[parts.length];
         for (int i = 0; i < parts.length; i++) {
             array[i] = new PartsWithChildren((parts[i]).objects);
-            NGTUtil.addArray(list, (Object[])(parts[i]).objects);
+            NGTUtil.addArray(list, (parts[i]).objects);
             if ((parts[i]).childParts != null)
-                NGTUtil.addArray((array[i]).childParts, (Object[])getParts(list, (parts[i]).childParts));
+                NGTUtil.addArray((array[i]).childParts, getParts(list, (parts[i]).childParts));
         }
         return array;
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/ModelObject.java b/src/api/rtm/jp/ngt/rtm/render/ModelObject.java
index 2fa2c34..0ba8cee 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/ModelObject.java
+++ b/src/api/rtm/jp/ngt/rtm/render/ModelObject.java
@@ -48,7 +48,7 @@ public class ModelObject {
 
     private int program;
 
-    public ModelObject(ModelConfig.ModelSource par1, ModelSetBase<ModelConfig> par2, PartsRenderer par3, Object... args) {
+    public ModelObject(ModelConfig.ModelSource par1, ModelSetBase<? extends ModelConfig> par2, PartsRenderer par3, Object... args) {
         String filePath = par1.modelFile;
         this.model = ModelPackManager.INSTANCE.loadModel(filePath, 4, true, par2.getConfig(), par2.md5);
         Material[] materials = getMaterials(getTextureMap(par1.textures));
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/VehiclePartsRenderer.java b/src/api/rtm/jp/ngt/rtm/render/VehiclePartsRenderer.java
index 0bd2a40..1f1312a 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/VehiclePartsRenderer.java
+++ b/src/api/rtm/jp/ngt/rtm/render/VehiclePartsRenderer.java
@@ -24,7 +24,7 @@ public class VehiclePartsRenderer extends EntityPartsRenderer<ModelSetVehicleBas
             }
     }
 
-    public void init(ModelSetVehicleBase par1, ModelObject par2) {
+    public void init(ModelSetVehicleBase<?> par1, ModelObject par2) {
         super.init(par1, par2);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/MovingSoundMaker.java b/src/api/rtm/jp/ngt/rtm/sound/MovingSoundMaker.java
index 8d9356a..8d7866b 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/MovingSoundMaker.java
+++ b/src/api/rtm/jp/ngt/rtm/sound/MovingSoundMaker.java
@@ -49,6 +49,7 @@ public final class MovingSoundMaker {
         String domain;
         if (sound.contains("ogg"))
             return sound;
+        String path;
         if (sound.contains(":")) {
             String[] sa = sound.split(":");
             domain = sa[0];
@@ -62,7 +63,7 @@ public final class MovingSoundMaker {
         Map<String, String> map = NAME_COMPATIBLE_MAP.get(domain);
         if (map.containsKey(sound))
             return map.get(sound);
-        String path = path.replace('.', '/');
+        path = path.replace('.', '/');
         return domain + ":sounds/" + path + ".ogg";
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SoundObj.java b/src/api/rtm/jp/ngt/rtm/sound/SoundObj.java
index 13a39e6..d58f64e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SoundObj.java
+++ b/src/api/rtm/jp/ngt/rtm/sound/SoundObj.java
@@ -17,13 +17,13 @@ public class SoundObj {
     public SoundObj(String par1) {
         this.name = par1;
         String[] sa = par1.split(":");
-        this.location = (ResourceLocation)new ResourceLocationCustom(sa[0], sa[1]);
+        this.location = new ResourceLocationCustom(sa[0], sa[1]);
         this.sound = new SoundEvent(this.location);
     }
 
     public void init() {
         this.sound.setRegistryName(this.location);
-        ForgeRegistries.SOUND_EVENTS.register((IForgeRegistryEntry)this.sound);
+        ForgeRegistries.SOUND_EVENTS.register(this.sound);
     }
 
     public SoundEvent getSound() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SoundUpdaterVehicle.java b/src/api/rtm/jp/ngt/rtm/sound/SoundUpdaterVehicle.java
index 89e2c6a..51e9db2 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SoundUpdaterVehicle.java
+++ b/src/api/rtm/jp/ngt/rtm/sound/SoundUpdaterVehicle.java
@@ -19,7 +19,7 @@ import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class SoundUpdaterVehicle<T extends EntityVehicleBase> implements IUpdateVehicle {
+public class SoundUpdaterVehicle<T extends EntityVehicleBase<?>> implements IUpdateVehicle {
     protected final SoundHandler soundHandler;
 
     protected final T vehicle;
