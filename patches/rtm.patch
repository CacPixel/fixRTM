diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/ClientProxy.java b/src/api/rtm/jp/ngt/rtm/ClientProxy.java
index 2b0b5cd..1ba0bb6 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/ClientProxy.java
+++ b/src/api/rtm/jp/ngt/rtm/ClientProxy.java
@@ -80,18 +80,18 @@ public class ClientProxy extends CommonProxy {
 
     private void versionCheck() {
         if (!RTMCore.versionCheck)
-            return;
+            return; 
         List<File> fileList = NGTFileLoader.findFile(file -> (file.getName().startsWith("pack") && file.getName().endsWith(".json")));
         for (File file : fileList) {
             try {
                 String json = NGTText.readText(file, false, "UTF-8");
                 PackInfo info = (PackInfo)NGTJson.getObjectFromJson(json, PackInfo.class);
                 if (info != null)
-                    VersionChecker.addToCheckList(info);
+                    VersionChecker.addToCheckList(info); 
             } catch (IOException e) {
                 e.printStackTrace();
-            }
-        }
+            } 
+        } 
         VersionChecker.addToCheckList(new PackInfo(RTMCore.metadata.name, RTMCore.metadata.url, RTMCore.metadata.updateUrl, RTMCore.metadata.version));
     }
 
@@ -112,9 +112,9 @@ public class ClientProxy extends CommonProxy {
 
     public IUpdateVehicle getSoundUpdater(EntityVehicleBase vehicle) {
         if (vehicle instanceof EntityTrainBase)
-            return new SoundUpdaterTrain(NGTUtilClient.getMinecraft().getSoundHandler(), (EntityTrainBase)vehicle);
+            return new SoundUpdaterTrain(NGTUtilClient.getMinecraft().getSoundHandler(), (EntityTrainBase)vehicle); 
         if (vehicle instanceof EntityVehicle)
-            return new SoundUpdaterVehicle<>(NGTUtilClient.getMinecraft().getSoundHandler(), (EntityVehicle)vehicle);
+            return new SoundUpdaterVehicle<>(NGTUtilClient.getMinecraft().getSoundHandler(), (EntityVehicle)vehicle); 
         return null;
     }
 
@@ -146,7 +146,7 @@ public class ClientProxy extends CommonProxy {
                 return 0.25F;
             case 2:
                 return 0.1F;
-        }
+        } 
         return fov;
     }
 
@@ -154,18 +154,18 @@ public class ClientProxy extends CommonProxy {
         if ((NGTUtilClient.getMinecraft()).gameSettings.thirdPersonView == 0) {
             ItemStack helmet = (NGTUtilClient.getMinecraft()).player.inventory.armorItemInSlot(3);
             if (helmet.getItem() == RTMItem.nvd)
-                return 3;
+                return 3; 
             if (player.isRiding() && player.getRidingEntity() instanceof EntityArtillery) {
                 ModelSetFirearm set = ((EntityArtillery)player.getRidingEntity()).getResourceState().getResourceSet();
                 if ((set.getConfig()).fpvMode)
-                    return 0;
-            }
+                    return 0; 
+            } 
             ItemStack stack = player.getHeldItemMainhand();
             if (stack.getItem() == RTMItem.sniper_rifle)
-                return 1;
+                return 1; 
             if (stack.getItem() == RTMItem.amr)
-                return 2;
-        }
+                return 2; 
+        } 
         return -1;
     }
 
@@ -173,30 +173,30 @@ public class ClientProxy extends CommonProxy {
         if (sound == null) {
             NGTLog.debug("Proxy:Sound is null");
             return;
-        }
+        } 
         if (NGTUtil.isServer()) {
             super.playSound(entity, sound, vol, pitch);
         } else {
             MovingSoundCustom ms = MovingSoundMaker.create(entity, sound, false);
             if (ms != null) {
                 playSound(ms, vol, pitch);
-            }
-        }
+            } 
+        } 
     }
 
     public void playSound(TileEntity entity, String sound, float vol, float pitch) {
         if (sound == null) {
             NGTLog.debug("Proxy:Sound is null");
             return;
-        }
+        } 
         if (NGTUtil.isServer()) {
             super.playSound(entity, sound, vol, pitch);
         } else {
             MovingSoundCustom ms = MovingSoundMaker.create(entity, sound, false);
             if (ms != null) {
                 playSound(ms, vol, pitch);
-            }
-        }
+            } 
+        } 
     }
 
     public static void playSound(MovingSoundCustom sound, float vol, float pitch) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/CommonProxy.java b/src/api/rtm/jp/ngt/rtm/CommonProxy.java
index ae7960c..5d24093 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/CommonProxy.java
+++ b/src/api/rtm/jp/ngt/rtm/CommonProxy.java
@@ -44,12 +44,12 @@ public class CommonProxy {
 
     public void playSound(Entity entity, String sound, float vol, float pitch) {
         if (sound != null)
-            RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)new PacketPlaySound(entity, sound, vol, pitch));
+            RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)new PacketPlaySound(entity, sound, vol, pitch)); 
     }
 
     public void playSound(TileEntity entity, String sound, float vol, float pitch) {
         if (sound != null)
-            RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)new PacketPlaySound(entity, sound, vol, pitch));
+            RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)new PacketPlaySound(entity, sound, vol, pitch)); 
     }
 
     public FormationManager getFormationManager() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/CreativeTabRTM.java b/src/api/rtm/jp/ngt/rtm/CreativeTabRTM.java
index dfc55bb..c256d62 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/CreativeTabRTM.java
+++ b/src/api/rtm/jp/ngt/rtm/CreativeTabRTM.java
@@ -19,11 +19,11 @@ public class CreativeTabRTM extends CreativeTabs {
     @SideOnly(Side.CLIENT)
     public ItemStack createIcon() {
         if (this == RAILWAY)
-            return new ItemStack(RTMItem.itemtrain);
+            return new ItemStack(RTMItem.itemtrain); 
         if (this == INDUSTRY)
-            return new ItemStack(RTMItem.steel_ingot);
+            return new ItemStack(RTMItem.steel_ingot); 
         if (this == TOOLS)
-            return new ItemStack(RTMItem.crowbar);
+            return new ItemStack(RTMItem.crowbar); 
         return new ItemStack(RTMItem.crowbar);
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMBlock.java b/src/api/rtm/jp/ngt/rtm/RTMBlock.java
index 04dc2b5..94affbe 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMBlock.java
+++ b/src/api/rtm/jp/ngt/rtm/RTMBlock.java
@@ -355,16 +355,16 @@ public final class RTMBlock {
                     int meta = BlockUtil.getMetadata(world, pos);
                     int c0 = meta << 4 & 0xFF;
                     return 16777215 - (c0 << 8) - c0;
-                }new Block[] { hotStoveBrick });
+                }, new Block[] { hotStoveBrick });
         colors.registerBlockColorHandler((state, world, pos, tintIndex) -> {
                     BlockMarker block = (BlockMarker)state.getBlock();
                     return block.markerType.color;
-                }new Block[] { (Block)marker, (Block)markerSwitch });
+                }, new Block[] { (Block)marker, (Block)markerSwitch });
         colors.registerBlockColorHandler((state, world, pos, tintIndex) -> {
                     int meta = BlockUtil.getMetadata(world, pos);
                     int c0 = meta << 4 & 0xFF;
                     return 16777215 - (c0 << 8) - c0;
-                }new Block[] { steelSlab });
+                }, new Block[] { steelSlab });
     }
 
     @SideOnly(Side.CLIENT)
@@ -375,6 +375,6 @@ public final class RTMBlock {
     @SideOnly(Side.CLIENT)
     public static void registerBlockModels(Block block, String name, int... metas) {
         for (int i : metas)
-            RTMItem.registerItemModel(Item.getItemFromBlock(block), i, name + i);
+            RTMItem.registerItemModel(Item.getItemFromBlock(block), i, name + i); 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMCore.java b/src/api/rtm/jp/ngt/rtm/RTMCore.java
index 24576cc..4708870 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMCore.java
+++ b/src/api/rtm/jp/ngt/rtm/RTMCore.java
@@ -199,7 +199,7 @@ public final class RTMCore implements IMod {
             FMLLog.log(Level.ERROR, e, "Error Message", new Object[0]);
         } finally {
             cfg.save();
-        }
+        } 
         RTMResource.init();
         RTMBlock.init();
         RTMItem.init();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMItem.java b/src/api/rtm/jp/ngt/rtm/RTMItem.java
index 07664e4..dd56faf 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMItem.java
+++ b/src/api/rtm/jp/ngt/rtm/RTMItem.java
@@ -204,7 +204,7 @@ public final class RTMItem {
         registerItemModel(ticket, 0, "ticket");
         registerItemModel(ticket, 1, "ticket");
         for (int i = 0; i < 12; i++)
-            registerItemModel(ticketBook, i, "ticket_book");
+            registerItemModel(ticketBook, i, "ticket_book"); 
         registerItemModel(icCard, 0, "ic_card");
         registerItemModels(money, "money_", (SerializableItemType[])MoneyType.values());
         registerItemModel(steel_ingot, 0, "ingot_steel");
@@ -232,14 +232,14 @@ public final class RTMItem {
                     default:
                         suffix = "cannonball";
                         break;
-                }
+                } 
                 registerItemModel(bullet, i0, "ammo_" + suffix);
                 registerItemModel(bullet, i0 + 1, "bullet_" + suffix);
                 registerItemModel(bullet, i0 + 2, "case_" + suffix);
-            }
-        }
+            } 
+        } 
         for (MirrorType type : MirrorType.values())
-            registerItemModel(mirror, type.getId(), "mirror_" + type.getId());
+            registerItemModel(mirror, type.getId(), "mirror_" + type.getId()); 
     }
 
     @SideOnly(Side.CLIENT)
@@ -249,7 +249,7 @@ public final class RTMItem {
         colors.registerItemColorHandler((stack, tintIndex) -> {
                     BlockMarker block = (BlockMarker)Block.getBlockFromItem(stack.getItem());
                     return block.markerType.color;
-                }new Block[] { (Block)RTMBlock.marker, (Block)RTMBlock.markerSwitch });
+                }, new Block[] { (Block)RTMBlock.marker, (Block)RTMBlock.markerSwitch });
         colors.registerItemColorHandler((stack, tintIndex) -> 0, new Block[] { RTMBlock.steelSlab });
     }
 
@@ -259,8 +259,8 @@ public final class RTMItem {
             if (type.getId() >= 0) {
                 String model = prefix + type.getId();
                 registerItemModel(item, type.getId(), model);
-            }
-        }
+            } 
+        } 
     }
 
     @SideOnly(Side.CLIENT)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMRecipe.java b/src/api/rtm/jp/ngt/rtm/RTMRecipe.java
index aab87ac..b6b8f60 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMRecipe.java
+++ b/src/api/rtm/jp/ngt/rtm/RTMRecipe.java
@@ -28,271 +28,271 @@ public final class RTMRecipe {
         ItemStack sheetSteel = new ItemStack(RTMItem.material, 1, RTMItem.MaterialType.STEEL_SHEET.getId());
         ItemStack motor = new ItemStack(RTMItem.material, 1, RTMItem.MaterialType.MOTOR.getId());
         ItemStack gunpowder = new ItemStack(RTMItem.material, 1, RTMItem.MaterialType.POWDER.getId());
-        RecipeManager.addRecipe(new ItemStack(RTMBlock.trainWorkBench, 1, 0), new Object[] { "III", "ICI", "III",
+        RecipeManager.addRecipe(new ItemStack(RTMBlock.trainWorkBench, 1, 0), new Object[] { "III", "ICI", "III", 
 
-                    Character.valueOf('S'), ingotSteel,
+                    Character.valueOf('S'), ingotSteel, 
                     Character.valueOf('C'), Blocks.CRAFTING_TABLE }).setRegistryName(new ResourceLocation("rtm", "rtm_work_bench"));
-        RecipeManager.addRecipe(new ItemStack(RTMBlock.trainWorkBench, 1, 1), new Object[] { "ISI", "SCS", "ISI",
+        RecipeManager.addRecipe(new ItemStack(RTMBlock.trainWorkBench, 1, 1), new Object[] { "ISI", "SCS", "ISI", 
 
-                    Character.valueOf('I'), ingotSteel,
-                    Character.valueOf('S'), sheetSteel,
+                    Character.valueOf('I'), ingotSteel, 
+                    Character.valueOf('S'), sheetSteel, 
                     Character.valueOf('C'), Blocks.CRAFTING_TABLE }).setRegistryName(new ResourceLocation("rtm", "rail_work_bench"));
-        RecipeManager.addRecipe(new ItemStack(RTMBlock.fireBrick, 6, 0), new Object[] { "NDN", "DCD", "NDN",
+        RecipeManager.addRecipe(new ItemStack(RTMBlock.fireBrick, 6, 0), new Object[] { "NDN", "DCD", "NDN", 
 
-                    Character.valueOf('N'), Items.NETHERBRICK,
-                    Character.valueOf('D'), Blocks.DIRT,
+                    Character.valueOf('N'), Items.NETHERBRICK, 
+                    Character.valueOf('D'), Blocks.DIRT, 
                     Character.valueOf('C'), Items.CLAY_BALL }).setRegistryName(new ResourceLocation("rtm", "fire_brick"));
-        RecipeManager.addRecipe(new ItemStack(RTMBlock.hotStoveBrick, 6, 0), new Object[] { "NDN", "DCD", "NDN",
+        RecipeManager.addRecipe(new ItemStack(RTMBlock.hotStoveBrick, 6, 0), new Object[] { "NDN", "DCD", "NDN", 
 
-                    Character.valueOf('N'), Items.NETHERBRICK,
-                    Character.valueOf('D'), Blocks.SOUL_SAND,
+                    Character.valueOf('N'), Items.NETHERBRICK, 
+                    Character.valueOf('D'), Blocks.SOUL_SAND, 
                     Character.valueOf('C'), Items.CLAY_BALL }).setRegistryName(new ResourceLocation("rtm", "hot_stove_brick"));
-        RecipeManager.addRecipe(new ItemStack(RTMBlock.slot, 2, 0), new Object[] { "SSS", "SDS", "SSS",
+        RecipeManager.addRecipe(new ItemStack(RTMBlock.slot, 2, 0), new Object[] { "SSS", "SDS", "SSS", 
 
-                    Character.valueOf('S'), Blocks.COBBLESTONE,
+                    Character.valueOf('S'), Blocks.COBBLESTONE, 
                     Character.valueOf('D'), Blocks.DISPENSER }).setRegistryName(new ResourceLocation("rtm", "slot"));
-        RecipeManager.addRecipe(new ItemStack(RTMBlock.steelMaterial, 2, 0), new Object[] { "II", "II",
+        RecipeManager.addRecipe(new ItemStack(RTMBlock.steelMaterial, 2, 0), new Object[] { "II", "II", 
 
                     Character.valueOf('I'), sheetSteel }).setRegistryName(new ResourceLocation("rtm", "steel_material"));
-        RecipeManager.addRecipe(new ItemStack(RTMBlock.framework, 6, 0), new Object[] { " I ", "III", " I ",
+        RecipeManager.addRecipe(new ItemStack(RTMBlock.framework, 6, 0), new Object[] { " I ", "III", " I ", 
 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "framework"));
-        RecipeManager.addRecipe(new ItemStack(RTMBlock.scaffold, 6, 0), new Object[] { "S S", "S S", "III",
+        RecipeManager.addRecipe(new ItemStack(RTMBlock.scaffold, 6, 0), new Object[] { "S S", "S S", "III", 
 
-                    Character.valueOf('S'), shaft,
+                    Character.valueOf('S'), shaft, 
                     Character.valueOf('I'), sheetSteel }).setRegistryName(new ResourceLocation("rtm", "scaffold"));
-        RecipeManager.addRecipe(new ItemStack(RTMBlock.scaffoldStairs, 6, 0), new Object[] { "  I", " I ", "I  ",
+        RecipeManager.addRecipe(new ItemStack(RTMBlock.scaffoldStairs, 6, 0), new Object[] { "  I", " I ", "I  ", 
 
                     Character.valueOf('I'), sheetSteel }).setRegistryName(new ResourceLocation("rtm", "scaffold_stairs"));
-        RecipeManager.addRecipe(new ItemStack(RTMBlock.ironPillar, 25, 0), new Object[] { "IIIII", "II II", "I I I", "II II", "IIIII",
+        RecipeManager.addRecipe(new ItemStack(RTMBlock.ironPillar, 25, 0), new Object[] { "IIIII", "II II", "I I I", "II II", "IIIII", 
 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "iron_pillor"));
-        RecipeManager.addRecipe(new ItemStack((Block)RTMBlock.marker, 16, 0), new Object[] { "GGGGG", "G D G", "G D G", "G D G", "GGGGG",
+        RecipeManager.addRecipe(new ItemStack((Block)RTMBlock.marker, 16, 0), new Object[] { "GGGGG", "G D G", "G D G", "G D G", "GGGGG", 
 
-                    Character.valueOf('D'), dyeRed,
+                    Character.valueOf('D'), dyeRed, 
                     Character.valueOf('G'), Blocks.GLASS }).setRegistryName(new ResourceLocation("rtm", "rail_marker"));
-        RecipeManager.addRecipe(new ItemStack((Block)RTMBlock.marker, 16, 4), new Object[] { "GGGGG", "G  DG", "G D G", "GD  G", "GGGGG",
+        RecipeManager.addRecipe(new ItemStack((Block)RTMBlock.marker, 16, 4), new Object[] { "GGGGG", "G  DG", "G D G", "GD  G", "GGGGG", 
 
-                    Character.valueOf('D'), dyeRed,
+                    Character.valueOf('D'), dyeRed, 
                     Character.valueOf('G'), Blocks.GLASS }).setRegistryName(new ResourceLocation("rtm", "rail_marker2"));
-        RecipeManager.addRecipe(new ItemStack((Block)RTMBlock.markerSwitch, 16, 0), new Object[] { "GGGGG", "G D G", "G D G", "G D G", "GGGGG",
+        RecipeManager.addRecipe(new ItemStack((Block)RTMBlock.markerSwitch, 16, 0), new Object[] { "GGGGG", "G D G", "G D G", "G D G", "GGGGG", 
 
-                    Character.valueOf('D'), dyeBlue,
+                    Character.valueOf('D'), dyeBlue, 
                     Character.valueOf('G'), Blocks.GLASS }).setRegistryName(new ResourceLocation("rtm", "rail_marker_switch"));
-        RecipeManager.addRecipe(new ItemStack((Block)RTMBlock.markerSwitch, 16, 4), new Object[] { "GGGGG", "G  DG", "G D G", "GD  G", "GGGGG",
+        RecipeManager.addRecipe(new ItemStack((Block)RTMBlock.markerSwitch, 16, 4), new Object[] { "GGGGG", "G  DG", "G D G", "GD  G", "GGGGG", 
 
-                    Character.valueOf('D'), dyeBlue,
+                    Character.valueOf('D'), dyeBlue, 
                     Character.valueOf('G'), Blocks.GLASS }).setRegistryName(new ResourceLocation("rtm", "rail_marker2_switch"));
-        RecipeManager.addRecipe(new ItemStack(RTMBlock.signalConverter, 1, 0), new Object[] {
-                    "SSSSS", "SWWWS", "SRIRS", "SWWWS", "SSSSS",
+        RecipeManager.addRecipe(new ItemStack(RTMBlock.signalConverter, 1, 0), new Object[] { 
+                    "SSSSS", "SWWWS", "SRIRS", "SWWWS", "SSSSS", 
 
-                    Character.valueOf('R'), Items.REDSTONE,
-                    Character.valueOf('S'), sheetSteel,
-                    Character.valueOf('W'),
-                    wire,
+                    Character.valueOf('R'), Items.REDSTONE, 
+                    Character.valueOf('S'), sheetSteel, 
+                    Character.valueOf('W'), 
+                    wire, 
                     Character.valueOf('I'), shaft }).setRegistryName(new ResourceLocation("rtm", "signal_converter_s"));
-        RecipeManager.addRecipe(new ItemStack(RTMBlock.signalConverter, 1, 1), new Object[] {
-                    "SSSSS", "SWWWS", "SRIRS", "SWWWS", "SSSSS",
+        RecipeManager.addRecipe(new ItemStack(RTMBlock.signalConverter, 1, 1), new Object[] { 
+                    "SSSSS", "SWWWS", "SRIRS", "SWWWS", "SSSSS", 
 
-                    Character.valueOf('R'), Blocks.REDSTONE_TORCH,
-                    Character.valueOf('S'), sheetSteel,
-                    Character.valueOf('W'),
-                    wire,
+                    Character.valueOf('R'), Blocks.REDSTONE_TORCH, 
+                    Character.valueOf('S'), sheetSteel, 
+                    Character.valueOf('W'), 
+                    wire, 
                     Character.valueOf('I'), shaft }).setRegistryName(new ResourceLocation("rtm", "signal_converter_rs"));
-        RecipeManager.addRecipe(new ItemStack(RTMBlock.signalConverter, 1, 2), new Object[] {
-                    "SSSSS", "SWIWS", "SWIWS", "SWIWS", "SSSSS",
+        RecipeManager.addRecipe(new ItemStack(RTMBlock.signalConverter, 1, 2), new Object[] { 
+                    "SSSSS", "SWIWS", "SWIWS", "SWIWS", "SSSSS", 
 
-                    Character.valueOf('S'), sheetSteel,
-                    Character.valueOf('W'), wire,
-                    Character.valueOf('I'),
+                    Character.valueOf('S'), sheetSteel, 
+                    Character.valueOf('W'), wire, 
+                    Character.valueOf('I'), 
                     shaft }).setRegistryName(new ResourceLocation("rtm", "signal_converter_increment"));
-        RecipeManager.addRecipe(new ItemStack(RTMBlock.signalConverter, 1, 3), new Object[] {
-                    "SSSSS", "SWWWS", "SIIIS", "SWWWS", "SSSSS",
+        RecipeManager.addRecipe(new ItemStack(RTMBlock.signalConverter, 1, 3), new Object[] { 
+                    "SSSSS", "SWWWS", "SIIIS", "SWWWS", "SSSSS", 
 
-                    Character.valueOf('S'), sheetSteel,
-                    Character.valueOf('W'), wire,
-                    Character.valueOf('I'),
+                    Character.valueOf('S'), sheetSteel, 
+                    Character.valueOf('W'), wire, 
+                    Character.valueOf('I'), 
                     shaft }).setRegistryName(new ResourceLocation("rtm", "signal_converter_decrement"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.bogie, 1, 0), new Object[] {
-                    " W W ", "PPPPP", " S S ", "PPPPP", " W W ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.bogie, 1, 0), new Object[] { 
+                    " W W ", "PPPPP", " S S ", "PPPPP", " W W ", 
 
-                    Character.valueOf('W'), new ItemStack(RTMItem.material, 1, RTMItem.MaterialType.WHEEL.getId()),
-                    Character.valueOf('P'), sheetSteel,
-                    Character.valueOf('S'),
+                    Character.valueOf('W'), new ItemStack(RTMItem.material, 1, RTMItem.MaterialType.WHEEL.getId()), 
+                    Character.valueOf('P'), sheetSteel, 
+                    Character.valueOf('S'), 
                     shaft }).setRegistryName(new ResourceLocation("rtm", "bogie"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 6, 0), new Object[] { "GGG", "ILI", "GGG",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 6, 0), new Object[] { "GGG", "ILI", "GGG", 
 
-                    Character.valueOf('I'), Items.IRON_INGOT,
-                    Character.valueOf('L'), Items.GLOWSTONE_DUST,
+                    Character.valueOf('I'), Items.IRON_INGOT, 
+                    Character.valueOf('L'), Items.GLOWSTONE_DUST, 
                     Character.valueOf('G'), Blocks.GLASS_PANE }).setRegistryName(new ResourceLocation("rtm", "fruorescent"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 2, ItemInstalledObject.IstlObjType.INSULATOR.id), new Object[] { "   ", " R ", " I ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 2, ItemInstalledObject.IstlObjType.INSULATOR.id), new Object[] { "   ", " R ", " I ", 
 
-                    Character.valueOf('R'), Blocks.SANDSTONE,
+                    Character.valueOf('R'), Blocks.SANDSTONE, 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "insulator"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 2, ItemInstalledObject.IstlObjType.CONNECTOR_IN.id), new Object[] { "   ", " RD", " I ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 2, ItemInstalledObject.IstlObjType.CONNECTOR_IN.id), new Object[] { "   ", " RD", " I ", 
 
-                    Character.valueOf('R'), Blocks.SANDSTONE,
-                    Character.valueOf('D'), new ItemStack(Items.DYE, 1, 4),
+                    Character.valueOf('R'), Blocks.SANDSTONE, 
+                    Character.valueOf('D'), new ItemStack(Items.DYE, 1, 4), 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "connector_in"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 2, ItemInstalledObject.IstlObjType.CONNECTOR_OUT.id), new Object[] { "   ", " RD", " I ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 2, ItemInstalledObject.IstlObjType.CONNECTOR_OUT.id), new Object[] { "   ", " RD", " I ", 
 
-                    Character.valueOf('R'), Blocks.SANDSTONE,
-                    Character.valueOf('D'), dyeRed,
+                    Character.valueOf('R'), Blocks.SANDSTONE, 
+                    Character.valueOf('D'), dyeRed, 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "conector_out"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 6, ItemInstalledObject.IstlObjType.LINEPOLE.id), new Object[] { "ISI", "ISI", " S ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 6, ItemInstalledObject.IstlObjType.LINEPOLE.id), new Object[] { "ISI", "ISI", " S ", 
 
-                    Character.valueOf('S'), Blocks.STONE,
+                    Character.valueOf('S'), Blocks.STONE, 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "wire_pillor"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 1, 5), new Object[] {
-                    " YIY ", " RIR ", " BIB ", "  I  ", "  I  ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 1, 5), new Object[] { 
+                    " YIY ", " RIR ", " BIB ", "  I  ", "  I  ", 
 
-                    Character.valueOf('R'), Items.REDSTONE,
-                    Character.valueOf('Y'), dyeYellow,
-                    Character.valueOf('B'),
-                    new ItemStack(Items.DYE, 1, 0),
+                    Character.valueOf('R'), Items.REDSTONE, 
+                    Character.valueOf('Y'), dyeYellow, 
+                    Character.valueOf('B'), 
+                    new ItemStack(Items.DYE, 1, 0), 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "crossing_gate"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 3, ItemInstalledObject.IstlObjType.ATC.id), new Object[] { "   ", "PPP", "IRI",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 3, ItemInstalledObject.IstlObjType.ATC.id), new Object[] { "   ", "PPP", "IRI", 
 
-                    Character.valueOf('R'), Blocks.REDSTONE_TORCH,
-                    Character.valueOf('P'), Blocks.STONE_PRESSURE_PLATE,
+                    Character.valueOf('R'), Blocks.REDSTONE_TORCH, 
+                    Character.valueOf('P'), Blocks.STONE_PRESSURE_PLATE, 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "atc"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 3, ItemInstalledObject.IstlObjType.TRAIN_DETECTOR.id), new Object[] { "   ", "PPP", "IRI",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 3, ItemInstalledObject.IstlObjType.TRAIN_DETECTOR.id), new Object[] { "   ", "PPP", "IRI", 
 
-                    Character.valueOf('R'), Items.REDSTONE,
-                    Character.valueOf('P'), Blocks.STONE_PRESSURE_PLATE,
+                    Character.valueOf('R'), Items.REDSTONE, 
+                    Character.valueOf('P'), Blocks.STONE_PRESSURE_PLATE, 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "train_detector"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 2, 12), new Object[] { "SFS", "SRS", "SRS",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 2, 12), new Object[] { "SFS", "SRS", "SRS", 
 
-                    Character.valueOf('S'), sheetSteel,
-                    Character.valueOf('F'), ingotSteel,
+                    Character.valueOf('S'), sheetSteel, 
+                    Character.valueOf('F'), ingotSteel, 
                     Character.valueOf('R'), Items.REDSTONE }).setRegistryName(new ResourceLocation("rtm", "turnstile"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 1, 13), new Object[] { "ISI", "I I", "I I",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 1, 13), new Object[] { "ISI", "I I", "I I", 
 
-                    Character.valueOf('S'), sheetSteel,
+                    Character.valueOf('S'), sheetSteel, 
                     Character.valueOf('I'), shaft }).setRegistryName(new ResourceLocation("rtm", "bumping_post"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 1, ItemInstalledObject.IstlObjType.POINT.id), new Object[] {
-                    "     ", "  M  ", "IISI ", "  S  ", "IISI ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 1, ItemInstalledObject.IstlObjType.POINT.id), new Object[] { 
+                    "     ", "  M  ", "IISI ", "  S  ", "IISI ", 
 
-                    Character.valueOf('S'), sheetSteel,
-                    Character.valueOf('I'), shaft,
-                    Character.valueOf('M'),
+                    Character.valueOf('S'), sheetSteel, 
+                    Character.valueOf('I'), shaft, 
+                    Character.valueOf('M'), 
                     Blocks.LEVER }).setRegistryName(new ResourceLocation("rtm", "point"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 2, ItemInstalledObject.IstlObjType.SIGNAL.id), new Object[] {
-                    "IGI", "IYI", "IRI", "IYI", "IGI",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 2, ItemInstalledObject.IstlObjType.SIGNAL.id), new Object[] { 
+                    "IGI", "IYI", "IRI", "IYI", "IGI", 
 
-                    Character.valueOf('R'), dyeRed,
-                    Character.valueOf('Y'), dyeYellow,
-                    Character.valueOf('G'),
-                    new ItemStack(Items.DYE, 1, 2),
+                    Character.valueOf('R'), dyeRed, 
+                    Character.valueOf('Y'), dyeYellow, 
+                    Character.valueOf('G'), 
+                    new ItemStack(Items.DYE, 1, 2), 
                     Character.valueOf('I'), sheetSteel }).setRegistryName(new ResourceLocation("rtm", "signal"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.material, 3, 0), new Object[] { "I  ", "I  ", "I  ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.material, 3, 0), new Object[] { "I  ", "I  ", "I  ", 
 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "shaft"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.material, 4, 1), new Object[] { " III ", "IIIII", "II II", "IIIII", " III ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.material, 4, 1), new Object[] { " III ", "IIIII", "II II", "IIIII", " III ", 
 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "sheel"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.material, 2, 2), new Object[] {
-                    "SSSSS", "SPPRS", "SFFAA", "SPPRS", "SSSSS",
-
-                    Character.valueOf('R'), Items.REDSTONE,
-                    Character.valueOf('P'), Blocks.PISTON,
-                    Character.valueOf('A'),
-                    shaft,
-                    Character.valueOf('S'), sheetSteel,
+        RecipeManager.addRecipe(new ItemStack(RTMItem.material, 2, 2), new Object[] { 
+                    "SSSSS", "SPPRS", "SFFAA", "SPPRS", "SSSSS", 
+
+                    Character.valueOf('R'), Items.REDSTONE, 
+                    Character.valueOf('P'), Blocks.PISTON, 
+                    Character.valueOf('A'), 
+                    shaft, 
+                    Character.valueOf('S'), sheetSteel, 
                     Character.valueOf('F'), Blocks.FURNACE }).setRegistryName(new ResourceLocation("rtm", "engine"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.material, 2, 3), new Object[] {
-                    "SSSSS", "SWWRS", "SIIAA", "SWWRS", "SSSSS",
-
-                    Character.valueOf('I'), ingotSteel,
-                    Character.valueOf('W'), wire,
-                    Character.valueOf('R'),
-                    Items.REDSTONE,
-                    Character.valueOf('A'), shaft,
+        RecipeManager.addRecipe(new ItemStack(RTMItem.material, 2, 3), new Object[] { 
+                    "SSSSS", "SWWRS", "SIIAA", "SWWRS", "SSSSS", 
+
+                    Character.valueOf('I'), ingotSteel, 
+                    Character.valueOf('W'), wire, 
+                    Character.valueOf('R'), 
+                    Items.REDSTONE, 
+                    Character.valueOf('A'), shaft, 
                     Character.valueOf('S'), sheetSteel }).setRegistryName(new ResourceLocation("rtm", "motor"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.itemWire, 5, 0), new Object[] { "     ", "RRRRR", "IIIII", "RRRRR", "     ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.itemWire, 5, 0), new Object[] { "     ", "RRRRR", "IIIII", "RRRRR", "     ", 
 
-                    Character.valueOf('R'), Items.REDSTONE,
+                    Character.valueOf('R'), Items.REDSTONE, 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "wire"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.itemLargeRail, 1, 5), new Object[] { "WIWIW", " I I ", "WIWIW", " I I ", "WIWIW",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.itemLargeRail, 1, 5), new Object[] { "WIWIW", " I I ", "WIWIW", " I I ", "WIWIW", 
 
-                    Character.valueOf('I'), ingotSteel,
+                    Character.valueOf('I'), ingotSteel, 
                     Character.valueOf('W'), Blocks.PLANKS }).setRegistryName(new ResourceLocation("rtm", "rail"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.material, 5, 8), new Object[] { "     ", "     ", "     ", "     ", "IIIII",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.material, 5, 8), new Object[] { "     ", "     ", "     ", "     ", "IIIII", 
 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "steel_slab"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.crowbar, 1), new Object[] { " II  ", "  I  ", "  I  ", "  I  ", "  I  ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.crowbar, 1), new Object[] { " II  ", "  I  ", "  I  ", "  I  ", "  I  ", 
 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "crowbar"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.wrench, 1), new Object[] { " I I ", " III ", "  I  ", "  I  ", "  I  ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.wrench, 1), new Object[] { " I I ", " III ", "  I  ", "  I  ", "  I  ", 
 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "wrench"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.itemtrain, 1, 0), new Object[] {
-                    "FGFGF", "BE EB", "FGFGF",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.itemtrain, 1, 0), new Object[] { 
+                    "FGFGF", "BE EB", "FGFGF", 
 
-                    Character.valueOf('F'), Blocks.IRON_BLOCK,
-                    Character.valueOf('G'), Blocks.GLASS,
-                    Character.valueOf('B'), new ItemStack(RTMItem.bogie, 1, 0),
-                    Character.valueOf('E'),
+                    Character.valueOf('F'), Blocks.IRON_BLOCK, 
+                    Character.valueOf('G'), Blocks.GLASS, 
+                    Character.valueOf('B'), new ItemStack(RTMItem.bogie, 1, 0), 
+                    Character.valueOf('E'), 
                     new ItemStack(RTMItem.material, 1, 2) }).setRegistryName(new ResourceLocation("rtm", "diesel_car"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.itemtrain, 1, 1), new Object[] {
-                    "FGFGF", "BE EB", "FGFGF",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.itemtrain, 1, 1), new Object[] { 
+                    "FGFGF", "BE EB", "FGFGF", 
 
-                    Character.valueOf('F'), Blocks.IRON_BLOCK,
-                    Character.valueOf('G'), Blocks.GLASS,
-                    Character.valueOf('B'), new ItemStack(RTMItem.bogie, 1, 0),
-                    Character.valueOf('E'),
+                    Character.valueOf('F'), Blocks.IRON_BLOCK, 
+                    Character.valueOf('G'), Blocks.GLASS, 
+                    Character.valueOf('B'), new ItemStack(RTMItem.bogie, 1, 0), 
+                    Character.valueOf('E'), 
                     motor }).setRegistryName(new ResourceLocation("rtm", "electric_car"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.itemtrain, 1, 2), new Object[] {
-                    "FGFGF", "BE EB", "FGFGF",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.itemtrain, 1, 2), new Object[] { 
+                    "FGFGF", "BE EB", "FGFGF", 
 
-                    Character.valueOf('F'), Blocks.IRON_BLOCK,
-                    Character.valueOf('G'), Blocks.GLASS,
-                    Character.valueOf('B'), new ItemStack(RTMItem.bogie, 1, 0),
-                    Character.valueOf('E'),
+                    Character.valueOf('F'), Blocks.IRON_BLOCK, 
+                    Character.valueOf('G'), Blocks.GLASS, 
+                    Character.valueOf('B'), new ItemStack(RTMItem.bogie, 1, 0), 
+                    Character.valueOf('E'), 
                     shaft }).setRegistryName(new ResourceLocation("rtm", "freight_car"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.itemMotorman, 1, 0), new Object[] { "  W  ", "IIIII", "  I  ", " I I ", " I I ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.itemMotorman, 1, 0), new Object[] { "  W  ", "IIIII", "  I  ", " I I ", " I I ", 
 
-                    Character.valueOf('W'), new ItemStack(Items.SKULL, 1, 1),
+                    Character.valueOf('W'), new ItemStack(Items.SKULL, 1, 1), 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "motorman"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.itemCargo, 1, 0), new Object[] { "SSSSS", "S   S", "S   S", "S   S", "IIIII",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.itemCargo, 1, 0), new Object[] { "SSSSS", "S   S", "S   S", "S   S", "IIIII", 
 
-                    Character.valueOf('S'), sheetSteel,
+                    Character.valueOf('S'), sheetSteel, 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "container"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.itemCargo, 1, 1), new Object[] { "SSSSS", "    S", "SSSSS", " III ", " III ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.itemCargo, 1, 1), new Object[] { "SSSSS", "    S", "SSSSS", " III ", " III ", 
 
-                    Character.valueOf('S'), sheetSteel,
+                    Character.valueOf('S'), sheetSteel, 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "artillery"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 2, ItemInstalledObject.IstlObjType.RAILLOAD_SIGN.id), new Object[] { "   ", " S ", " I ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 2, ItemInstalledObject.IstlObjType.RAILLOAD_SIGN.id), new Object[] { "   ", " S ", " I ", 
 
-                    Character.valueOf('S'), sheetSteel,
+                    Character.valueOf('S'), sheetSteel, 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "rail_road_sign"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.ticket, 9, 1), new Object[] { "   ", "OBO", "PPP",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.ticket, 9, 1), new Object[] { "   ", "OBO", "PPP", 
 
-                    Character.valueOf('O'), new ItemStack(Items.DYE, 1, 14),
-                    Character.valueOf('B'), new ItemStack(Items.DYE, 1, 0),
+                    Character.valueOf('O'), new ItemStack(Items.DYE, 1, 14), 
+                    Character.valueOf('B'), new ItemStack(Items.DYE, 1, 0), 
                     Character.valueOf('P'), Items.PAPER }).setRegistryName(new ResourceLocation("rtm", "ticket"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.iron_hacksaw), new Object[] { "   ", "IIS", "II ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.iron_hacksaw), new Object[] { "   ", "IIS", "II ", 
 
-                    Character.valueOf('S'), Items.STICK,
+                    Character.valueOf('S'), Items.STICK, 
                     Character.valueOf('I'), Items.IRON_INGOT }).setRegistryName(new ResourceLocation("rtm", "iron_hacksaw"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.paddle), new Object[] { " II", " II", "I  ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.paddle), new Object[] { " II", " II", "I  ", 
 
                     Character.valueOf('I'), Items.IRON_INGOT }).setRegistryName(new ResourceLocation("rtm", "paddle"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.bellows), new Object[] { "SL ", " LG", "SL ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.bellows), new Object[] { "SL ", " LG", "SL ", 
 
-                    Character.valueOf('S'), Items.STICK,
-                    Character.valueOf('L'), Items.LEATHER,
+                    Character.valueOf('S'), Items.STICK, 
+                    Character.valueOf('L'), Items.LEATHER, 
                     Character.valueOf('G'), Items.GOLD_INGOT }).setRegistryName(new ResourceLocation("rtm", "bellows"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 4, ItemInstalledObject.IstlObjType.PIPE.id), new Object[] { "SSSSS", "S   S", "S   S", "S   S", "SSSSS",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 4, ItemInstalledObject.IstlObjType.PIPE.id), new Object[] { "SSSSS", "S   S", "S   S", "S   S", "SSSSS", 
 
                     Character.valueOf('S'), sheetSteel }).setRegistryName(new ResourceLocation("rtm", "pipe"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 2, 17), new Object[] { "     ", "SSSSS", "SFFFS", "SFFFS", "SSSSS",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.installedObject, 2, 17), new Object[] { "     ", "SSSSS", "SFFFS", "SFFFS", "SSSSS", 
 
-                    Character.valueOf('F'), new ItemStack(RTMItem.installedObject, 1, 0),
+                    Character.valueOf('F'), new ItemStack(RTMItem.installedObject, 1, 0), 
                     Character.valueOf('S'), sheetSteel }).setRegistryName(new ResourceLocation("rtm", "signboard"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.mirror, 9, 0), new Object[] { "GGGGG", "GSSSG", "GSSSG", "GSSSG", "GGGGG",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.mirror, 9, 0), new Object[] { "GGGGG", "GSSSG", "GSSSG", "GSSSG", "GGGGG", 
 
-                    Character.valueOf('G'), new ItemStack(Blocks.GLASS_PANE, 1, 0),
+                    Character.valueOf('G'), new ItemStack(Blocks.GLASS_PANE, 1, 0), 
                     Character.valueOf('S'), sheetSteel }).setRegistryName(new ResourceLocation("rtm", "mirror"));
         int i;
         for (i = 1; i < 16; i += 2) {
@@ -300,141 +300,141 @@ public final class RTMRecipe {
             String s0 = (i == 1) ? " M   " : ((i == 3) ? " MM  " : " MMM ");
             String s1 = (i <= 5) ? "  G  " : ((i <= 13) ? "  GM " : " MGM ");
             String s2 = (i <= 7) ? "     " : ((i == 9) ? "   M " : ((i == 11) ? "  MM " : " MMM "));
-            RecipeManager.addRecipe(new ItemStack(RTMItem.mirror, 1, meta), new Object[] { "     ", s0, s1, s2, "     ",
+            RecipeManager.addRecipe(new ItemStack(RTMItem.mirror, 1, meta), new Object[] { "     ", s0, s1, s2, "     ", 
 
-                        Character.valueOf('M'), new ItemStack(RTMItem.mirror, 1, 0),
+                        Character.valueOf('M'), new ItemStack(RTMItem.mirror, 1, 0), 
                         Character.valueOf('G'), new ItemStack(Blocks.GLASS, 1, 0) }).setRegistryName(new ResourceLocation("rtm", "mirror_" + i));
-        }
-        RecipeManager.addRecipe(new ItemStack(RTMBlock.movingMachine, 1, 0), new Object[] { "SSS", "SMS", "SSS",
+        } 
+        RecipeManager.addRecipe(new ItemStack(RTMBlock.movingMachine, 1, 0), new Object[] { "SSS", "SMS", "SSS", 
 
-                    Character.valueOf('S'), RTMBlock.steelMaterial,
+                    Character.valueOf('S'), RTMBlock.steelMaterial, 
                     Character.valueOf('M'), motor }).setRegistryName(new ResourceLocation("rtm", "moving_machine"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 3, 1), new Object[] { "  S  ", " STS ", "SSTSS", "SSTSS", "SSSSS",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 3, 1), new Object[] { "  S  ", " STS ", "SSTSS", "SSTSS", "SSSSS", 
 
-                    Character.valueOf('S'), sheetSteel,
+                    Character.valueOf('S'), sheetSteel, 
                     Character.valueOf('T'), Blocks.TNT }).setRegistryName(new ResourceLocation("rtm", "bullet_1"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 64, 5), new Object[] { " S   ", "SSS  ", "SSS  ", "     ", "     ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 64, 5), new Object[] { " S   ", "SSS  ", "SSS  ", "     ", "     ", 
 
                     Character.valueOf('S'), sheetSteel }).setRegistryName(new ResourceLocation("rtm", "bullet_2"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 64, 13), new Object[] { " S   ", "SSS  ", "SSS  ", "SSS  ", "     ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 64, 13), new Object[] { " S   ", "SSS  ", "SSS  ", "SSS  ", "     ", 
 
                     Character.valueOf('S'), sheetSteel }).setRegistryName(new ResourceLocation("rtm", "bullet_3"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 64, 17), new Object[] { " S   ", "SSS  ", "SSS  ", "SSS  ", "SSS  ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 64, 17), new Object[] { " S   ", "SSS  ", "SSS  ", "SSS  ", "SSS  ", 
 
                     Character.valueOf('S'), sheetSteel }).setRegistryName(new ResourceLocation("rtm", "bullet_4"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 5, 2), new Object[] { "S   S", "S   S", "S   S", "S   S", "SSISS",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 5, 2), new Object[] { "S   S", "S   S", "S   S", "S   S", "SSISS", 
 
-                    Character.valueOf('S'), sheetSteel,
+                    Character.valueOf('S'), sheetSteel, 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "case_1"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 64, 6), new Object[] { "S S  ", "S S  ", "SSS  ", "     ", "     ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 64, 6), new Object[] { "S S  ", "S S  ", "SSS  ", "     ", "     ", 
 
                     Character.valueOf('S'), sheetSteel }).setRegistryName(new ResourceLocation("rtm", "case_2"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 64, 14), new Object[] { "S S  ", "S S  ", "S S  ", "SSS  ", "     ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 64, 14), new Object[] { "S S  ", "S S  ", "S S  ", "SSS  ", "     ", 
 
                     Character.valueOf('S'), sheetSteel }).setRegistryName(new ResourceLocation("rtm", "case_3"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 64, 18), new Object[] { "S S  ", "S S  ", "S S  ", "S S  ", "SSS  ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 64, 18), new Object[] { "S S  ", "S S  ", "S S  ", "S S  ", "SSS  ", 
 
                     Character.valueOf('S'), sheetSteel }).setRegistryName(new ResourceLocation("rtm", "case_4"));
         for (i = 0; i < (ItemAmmunition.BulletType.values()).length; i++) {
             if (i != 2) {
                 int i0 = i * 4;
                 if (i == 0) {
-                    RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 1, i0), new Object[] {
-                                " B   ", " T   ", " C   ", "     ", "     ",
+                    RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 1, i0), new Object[] { 
+                                " B   ", " T   ", " C   ", "     ", "     ", 
 
-                                Character.valueOf('B'), new ItemStack(RTMItem.bullet, 1, i0 + 1),
-                                Character.valueOf('C'), new ItemStack(RTMItem.bullet, 1, i0 + 2),
-                                Character.valueOf('T'),
+                                Character.valueOf('B'), new ItemStack(RTMItem.bullet, 1, i0 + 1), 
+                                Character.valueOf('C'), new ItemStack(RTMItem.bullet, 1, i0 + 2), 
+                                Character.valueOf('T'), 
                                 Blocks.TNT }).setRegistryName(new ResourceLocation("rtm", "ammo_1"));
                 } else if (i == 3) {
-                    RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 1, i0), new Object[] {
-                                " B   ", " PP  ", " C   ", "     ", "     ",
+                    RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 1, i0), new Object[] { 
+                                " B   ", " PP  ", " C   ", "     ", "     ", 
 
-                                Character.valueOf('B'), new ItemStack(RTMItem.bullet, 1, i0 + 1),
-                                Character.valueOf('C'), new ItemStack(RTMItem.bullet, 1, i0 + 2),
-                                Character.valueOf('P'),
+                                Character.valueOf('B'), new ItemStack(RTMItem.bullet, 1, i0 + 1), 
+                                Character.valueOf('C'), new ItemStack(RTMItem.bullet, 1, i0 + 2), 
+                                Character.valueOf('P'), 
                                 gunpowder }).setRegistryName(new ResourceLocation("rtm", "ammo_2"));
                 } else if (i == 4) {
-                    RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 1, i0), new Object[] {
-                                " B   ", "PPP  ", " C   ", "     ", "     ",
+                    RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 1, i0), new Object[] { 
+                                " B   ", "PPP  ", " C   ", "     ", "     ", 
 
-                                Character.valueOf('B'), new ItemStack(RTMItem.bullet, 1, i0 + 1),
-                                Character.valueOf('C'), new ItemStack(RTMItem.bullet, 1, i0 + 2),
-                                Character.valueOf('P'),
+                                Character.valueOf('B'), new ItemStack(RTMItem.bullet, 1, i0 + 1), 
+                                Character.valueOf('C'), new ItemStack(RTMItem.bullet, 1, i0 + 2), 
+                                Character.valueOf('P'), 
                                 gunpowder }).setRegistryName(new ResourceLocation("rtm", "ammo_3"));
                 } else if (i != 5) {
-                    RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 1, i0), new Object[] {
-                                " B   ", " P   ", " C   ", "     ", "     ",
+                    RecipeManager.addRecipe(new ItemStack(RTMItem.bullet, 1, i0), new Object[] { 
+                                " B   ", " P   ", " C   ", "     ", "     ", 
 
-                                Character.valueOf('B'), new ItemStack(RTMItem.bullet, 1, i0 + 1),
-                                Character.valueOf('C'), new ItemStack(RTMItem.bullet, 1, i0 + 2),
-                                Character.valueOf('P'),
+                                Character.valueOf('B'), new ItemStack(RTMItem.bullet, 1, i0 + 1), 
+                                Character.valueOf('C'), new ItemStack(RTMItem.bullet, 1, i0 + 2), 
+                                Character.valueOf('P'), 
                                 gunpowder }).setRegistryName(new ResourceLocation("rtm", "ammo_4"));
-                }
-            }
-        }
-        RecipeManager.addRecipe(new ItemStack(RTMItem.magazine_handgun, 3, ItemGun.GunType.handgun.maxSize), new Object[] { "S S  ", "S S  ", "SIS  ", "     ", "     ",
+                } 
+            } 
+        } 
+        RecipeManager.addRecipe(new ItemStack(RTMItem.magazine_handgun, 3, ItemGun.GunType.handgun.maxSize), new Object[] { "S S  ", "S S  ", "SIS  ", "     ", "     ", 
 
-                    Character.valueOf('S'), sheetSteel,
+                    Character.valueOf('S'), sheetSteel, 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "magazine_handgun"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.magazine_rifle, 3, ItemGun.GunType.rifle.maxSize), new Object[] { "  S  ", "  S  ", "  S  ", "     ", "     ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.magazine_rifle, 3, ItemGun.GunType.rifle.maxSize), new Object[] { "  S  ", "  S  ", "  S  ", "     ", "     ", 
 
-                    Character.valueOf('S'), sheetSteel,
+                    Character.valueOf('S'), sheetSteel, 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "magazine_rifle"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.magazine_alr, 3, ItemGun.GunType.autoloading_rifle.maxSize), new Object[] { " S  S", " S  S", " S  S", " SIIS", "     ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.magazine_alr, 3, ItemGun.GunType.autoloading_rifle.maxSize), new Object[] { " S  S", " S  S", " S  S", " SIIS", "     ", 
 
-                    Character.valueOf('S'), sheetSteel,
+                    Character.valueOf('S'), sheetSteel, 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "magazine_autoloading_rifle"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.magazine_sr, 3, ItemGun.GunType.sniper_rifle.maxSize), new Object[] { " S  S", " S  S", " SIIS", "     ", "     ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.magazine_sr, 3, ItemGun.GunType.sniper_rifle.maxSize), new Object[] { " S  S", " S  S", " SIIS", "     ", "     ", 
 
-                    Character.valueOf('S'), sheetSteel,
+                    Character.valueOf('S'), sheetSteel, 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "magazine_sniper_rifle"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.magazine_smg, 3, ItemGun.GunType.smg.maxSize), new Object[] { " S S ", " S S ", " S S ", " SIS ", "     ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.magazine_smg, 3, ItemGun.GunType.smg.maxSize), new Object[] { " S S ", " S S ", " S S ", " SIS ", "     ", 
 
-                    Character.valueOf('S'), sheetSteel,
+                    Character.valueOf('S'), sheetSteel, 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "magazine_smg"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.magazine_amr, 3, ItemGun.GunType.amr.maxSize), new Object[] { "S   S", "S   S", "SIIIS", "     ", "     ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.magazine_amr, 3, ItemGun.GunType.amr.maxSize), new Object[] { "S   S", "S   S", "SIIIS", "     ", "     ", 
 
-                    Character.valueOf('S'), sheetSteel,
+                    Character.valueOf('S'), sheetSteel, 
                     Character.valueOf('I'), ingotSteel }).setRegistryName(new ResourceLocation("rtm", "magazine_amr"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.handgun, 1, 0), new Object[] { "SSS  ", "  M  ", "     ", "     ", "     ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.handgun, 1, 0), new Object[] { "SSS  ", "  M  ", "     ", "     ", "     ", 
 
-                    Character.valueOf('S'), sheetSteel,
+                    Character.valueOf('S'), sheetSteel, 
                     Character.valueOf('M'), new ItemStack(RTMItem.magazine_handgun, 1, 0) }).setRegistryName(new ResourceLocation("rtm", "handgun"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.rifle, 1, 0), new Object[] {
-                    "SSSM ", "   WW", "     ", "     ", "     ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.rifle, 1, 0), new Object[] { 
+                    "SSSM ", "   WW", "     ", "     ", "     ", 
 
-                    Character.valueOf('S'), sheetSteel,
-                    Character.valueOf('W'), Blocks.PLANKS,
-                    Character.valueOf('M'),
+                    Character.valueOf('S'), sheetSteel, 
+                    Character.valueOf('W'), Blocks.PLANKS, 
+                    Character.valueOf('M'), 
                     new ItemStack(RTMItem.magazine_rifle, 1, 0) }).setRegistryName(new ResourceLocation("rtm", "rifle"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.autoloading_rifle, 1, 0), new Object[] {
-                    "SSSS ", " M II", "     ", "     ", "     ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.autoloading_rifle, 1, 0), new Object[] { 
+                    "SSSS ", " M II", "     ", "     ", "     ", 
 
-                    Character.valueOf('S'), sheetSteel,
-                    Character.valueOf('I'), ingotSteel,
-                    Character.valueOf('M'),
+                    Character.valueOf('S'), sheetSteel, 
+                    Character.valueOf('I'), ingotSteel, 
+                    Character.valueOf('M'), 
                     new ItemStack(RTMItem.magazine_alr, 1, 0) }).setRegistryName(new ResourceLocation("rtm", "autoloading_rifle"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.sniper_rifle, 1, 0), new Object[] {
-                    " SS  ", "SSSS ", " M II", "     ", "     ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.sniper_rifle, 1, 0), new Object[] { 
+                    " SS  ", "SSSS ", " M II", "     ", "     ", 
 
-                    Character.valueOf('S'), sheetSteel,
-                    Character.valueOf('I'), ingotSteel,
-                    Character.valueOf('M'),
+                    Character.valueOf('S'), sheetSteel, 
+                    Character.valueOf('I'), ingotSteel, 
+                    Character.valueOf('M'), 
                     new ItemStack(RTMItem.magazine_sr, 1, 0) }).setRegistryName(new ResourceLocation("rtm", "sniper_rifle"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.smg, 1, 0), new Object[] {
-                    "SSSS ", " M II", "     ", "     ", "     ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.smg, 1, 0), new Object[] { 
+                    "SSSS ", " M II", "     ", "     ", "     ", 
 
-                    Character.valueOf('S'), sheetSteel,
-                    Character.valueOf('I'), ingotSteel,
-                    Character.valueOf('M'),
+                    Character.valueOf('S'), sheetSteel, 
+                    Character.valueOf('I'), ingotSteel, 
+                    Character.valueOf('M'), 
                     new ItemStack(RTMItem.magazine_smg, 1, 0) }).setRegistryName(new ResourceLocation("rtm", "smg"));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.amr, 1, 0), new Object[] {
-                    " SS  ", "SSSS ", " M II", "     ", "     ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.amr, 1, 0), new Object[] { 
+                    " SS  ", "SSSS ", " M II", "     ", "     ", 
 
-                    Character.valueOf('S'), sheetSteel,
-                    Character.valueOf('I'), ingotSteel,
-                    Character.valueOf('M'),
+                    Character.valueOf('S'), sheetSteel, 
+                    Character.valueOf('I'), ingotSteel, 
+                    Character.valueOf('M'), 
                     new ItemStack(RTMItem.magazine_amr, 1, 0) }).setRegistryName(new ResourceLocation("rtm", "amr"));
         RecipeManager.INSTANCE.addRecipeToManager((IRecipe)new RepairRecipe(RTMItem.magazine_handgun, new ItemStack(RTMItem.bullet, 1, 4)));
         RecipeManager.INSTANCE.addRecipeToManager((IRecipe)new RepairRecipe(RTMItem.magazine_rifle, new ItemStack(RTMItem.bullet, 1, 12)));
@@ -442,9 +442,9 @@ public final class RTMRecipe {
         RecipeManager.INSTANCE.addRecipeToManager((IRecipe)new RepairRecipe(RTMItem.magazine_sr, new ItemStack(RTMItem.bullet, 1, 12)));
         RecipeManager.INSTANCE.addRecipeToManager((IRecipe)new RepairRecipe(RTMItem.magazine_smg, new ItemStack(RTMItem.bullet, 1, 4)));
         RecipeManager.INSTANCE.addRecipeToManager((IRecipe)new RepairRecipe(RTMItem.magazine_amr, new ItemStack(RTMItem.bullet, 1, 16)));
-        RecipeManager.addRecipe(new ItemStack(RTMItem.material, 64, 4), new Object[] { "RG   ", "GG   ", "     ", "     ", "     ",
+        RecipeManager.addRecipe(new ItemStack(RTMItem.material, 64, 4), new Object[] { "RG   ", "GG   ", "     ", "     ", "     ", 
 
-                    Character.valueOf('R'), new ItemStack(Items.REDSTONE),
+                    Character.valueOf('R'), new ItemStack(Items.REDSTONE), 
                     Character.valueOf('G'), new ItemStack(Items.GUNPOWDER) }).setRegistryName(new ResourceLocation("rtm", "gun_powder"));
         GameRegistry.addSmelting(new ItemStack(Items.COAL, 1, 0), new ItemStack(RTMItem.coke), 0.25F);
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMSound.java b/src/api/rtm/jp/ngt/rtm/RTMSound.java
index 5d56405..d66bec6 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMSound.java
+++ b/src/api/rtm/jp/ngt/rtm/RTMSound.java
@@ -62,25 +62,25 @@ public final class RTMSound {
             if (!domains.contains(domain.getName())) {
                 newDomains.add(domain);
                 domains.add(domain.getName());
-            }
+            } 
             String path = file.getAbsolutePath();
             String name = path.substring(path.indexOf(domain.getName()) + domain.getName().length() + 1);
             name = name.replace("\\", "/");
             ALL_OGG_FILES.add(domain.getName() + ":" + name);
-        }
+        } 
         Map<String, RTMResourceManager> rmMap = getDomainResourceManagers(rm);
         for (File domain : newDomains) {
             RTMResourceManager rrm = new RTMResourceManager(getMetadataSerializer(rm), domain);
             rmMap.put(domain.getName(), rrm);
             NGTLog.debug("[RTMSound] Add new domain : " + domain.getName());
-        }
+        } 
     }
 
     private static File getDomain(File file) {
         if (!file.getAbsolutePath().contains("sounds"))
-            throw new IllegalArgumentException("It is not sound file.");
+            throw new IllegalArgumentException("It is not sound file."); 
         while (!file.getName().equals("sounds"))
-            file = file.getParentFile();
+            file = file.getParentFile(); 
         return file.getParentFile();
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockConverter.java b/src/api/rtm/jp/ngt/rtm/block/BlockConverter.java
index 17c59f1..a2cfd5f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockConverter.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockConverter.java
@@ -18,17 +18,17 @@ import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
 public class BlockConverter extends BlockContainerCustom {
-    private static int[][] pos_iron = new int[][] {
-            { -3, 0, -1 }, { -3, 0, 0 }, { -3, 0, 1 }, { 3, 0, -1 }, { 3, 0, 0 }, { 3, 0, 1 }, { -3, 1, -1 }, { -3, 1, 0 }, { -3, 1, 1 }, { -1, 1, -1 },
-            { -1, 1, 0 }, { -1, 1, 1 }, { 0, 1, -1 }, { 0, 1, 0 }, { 0, 1, 1 }, { 1, 1, -1 }, { 1, 1, 0 }, { 1, 1, 1 }, { 3, 1, -1 }, { 3, 1, 0 },
-            { 3, 1, 1 }, { -3, 2, -1 }, { -3, 2, 0 }, { -3, 2, 1 }, { -2, 2, -1 }, { -2, 2, 0 }, { -2, 2, 1 }, { -1, 2, -2 }, { -1, 2, 2 }, { 0, 2, -2 },
-            { 0, 2, 2 }, { 1, 2, -2 }, { 1, 2, 2 }, { 2, 2, -1 }, { 2, 2, 0 }, { 2, 2, 1 }, { 3, 2, -1 }, { 3, 2, 0 }, { 3, 2, 1 }, { -3, 3, -1 },
-            { -3, 3, 0 }, { -3, 3, 1 }, { -2, 3, -1 }, { -2, 3, 0 }, { -2, 3, 1 }, { -1, 3, -2 }, { -1, 3, 2 }, { 0, 3, -2 }, { 0, 3, 2 }, { 1, 3, -2 },
-            { 1, 3, 2 }, { 2, 3, -1 }, { 2, 3, 0 }, { 2, 3, 1 }, { 3, 3, -1 }, { 3, 3, 0 }, { 3, 3, 1 }, { -3, 4, 0 }, { -2, 4, -1 }, { -2, 4, 0 },
-            { -2, 4, 1 }, { -1, 4, -2 }, { -1, 4, 2 }, { 0, 4, -2 }, { 0, 4, 2 }, { 1, 4, -2 }, { 1, 4, 2 }, { 2, 4, -1 }, { 2, 4, 0 }, { 2, 4, 1 },
-            { 3, 4, 0 }, { -2, 5, -1 }, { -2, 5, 0 }, { -2, 5, 1 }, { -1, 5, -2 }, { -1, 5, 2 }, { 0, 5, -2 }, { 0, 5, 2 }, { 0, 5, 3 }, { 1, 5, -2 },
-            { 1, 5, 2 }, { 2, 5, -1 }, { 2, 5, 0 }, { 2, 5, 1 }, { -2, 6, -1 }, { -2, 6, 0 }, { -2, 6, 1 }, { -1, 6, -2 }, { -1, 6, 2 }, { 0, 6, -2 },
-            { 0, 6, 2 }, { 1, 6, -2 }, { 1, 6, 2 }, { 2, 6, -1 }, { 2, 6, 0 }, { 2, 6, 1 }, { -1, 7, -1 }, { -1, 7, 0 }, { -1, 7, 1 }, { 0, 7, -1 },
+    private static int[][] pos_iron = new int[][] { 
+            { -3, 0, -1 }, { -3, 0, 0 }, { -3, 0, 1 }, { 3, 0, -1 }, { 3, 0, 0 }, { 3, 0, 1 }, { -3, 1, -1 }, { -3, 1, 0 }, { -3, 1, 1 }, { -1, 1, -1 }, 
+            { -1, 1, 0 }, { -1, 1, 1 }, { 0, 1, -1 }, { 0, 1, 0 }, { 0, 1, 1 }, { 1, 1, -1 }, { 1, 1, 0 }, { 1, 1, 1 }, { 3, 1, -1 }, { 3, 1, 0 }, 
+            { 3, 1, 1 }, { -3, 2, -1 }, { -3, 2, 0 }, { -3, 2, 1 }, { -2, 2, -1 }, { -2, 2, 0 }, { -2, 2, 1 }, { -1, 2, -2 }, { -1, 2, 2 }, { 0, 2, -2 }, 
+            { 0, 2, 2 }, { 1, 2, -2 }, { 1, 2, 2 }, { 2, 2, -1 }, { 2, 2, 0 }, { 2, 2, 1 }, { 3, 2, -1 }, { 3, 2, 0 }, { 3, 2, 1 }, { -3, 3, -1 }, 
+            { -3, 3, 0 }, { -3, 3, 1 }, { -2, 3, -1 }, { -2, 3, 0 }, { -2, 3, 1 }, { -1, 3, -2 }, { -1, 3, 2 }, { 0, 3, -2 }, { 0, 3, 2 }, { 1, 3, -2 }, 
+            { 1, 3, 2 }, { 2, 3, -1 }, { 2, 3, 0 }, { 2, 3, 1 }, { 3, 3, -1 }, { 3, 3, 0 }, { 3, 3, 1 }, { -3, 4, 0 }, { -2, 4, -1 }, { -2, 4, 0 }, 
+            { -2, 4, 1 }, { -1, 4, -2 }, { -1, 4, 2 }, { 0, 4, -2 }, { 0, 4, 2 }, { 1, 4, -2 }, { 1, 4, 2 }, { 2, 4, -1 }, { 2, 4, 0 }, { 2, 4, 1 }, 
+            { 3, 4, 0 }, { -2, 5, -1 }, { -2, 5, 0 }, { -2, 5, 1 }, { -1, 5, -2 }, { -1, 5, 2 }, { 0, 5, -2 }, { 0, 5, 2 }, { 0, 5, 3 }, { 1, 5, -2 }, 
+            { 1, 5, 2 }, { 2, 5, -1 }, { 2, 5, 0 }, { 2, 5, 1 }, { -2, 6, -1 }, { -2, 6, 0 }, { -2, 6, 1 }, { -1, 6, -2 }, { -1, 6, 2 }, { 0, 6, -2 }, 
+            { 0, 6, 2 }, { 1, 6, -2 }, { 1, 6, 2 }, { 2, 6, -1 }, { 2, 6, 0 }, { 2, 6, 1 }, { -1, 7, -1 }, { -1, 7, 0 }, { -1, 7, 1 }, { 0, 7, -1 }, 
             { 0, 7, 1 }, { 1, 7, -1 }, { 1, 7, 0 }, { 1, 7, 1 } };
 
     private static int[][] pos_brick = new int[][] { { -1, 0, -1 }, { -1, 0, 0 }, { -1, 0, 1 }, { 0, 0, -1 }, { 0, 0, 1 }, { 1, 0, -1 }, { 1, 0, 0 }, { 1, 0, 1 } };
@@ -40,14 +40,14 @@ public class BlockConverter extends BlockContainerCustom {
         this.isCore = par1;
         setLightLevel(par1 ? 1.0F : 0.0F);
         if (par1)
-            setAABB(new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.9375D, 1.0D));
+            setAABB(new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.9375D, 1.0D)); 
         setHardness(2.0F);
         setResistance(10.0F);
     }
 
     public TileEntity createNewTileEntity(World world, int p_149915_2_) {
         if (this.isCore)
-            return (TileEntity)new TileEntityConverterCore();
+            return (TileEntity)new TileEntityConverterCore(); 
         return (TileEntity)new TileEntityConverter();
     }
 
@@ -55,7 +55,7 @@ public class BlockConverter extends BlockContainerCustom {
         if (this == RTMBlock.converterCore) {
             entity.attackEntityFrom(DamageSource.LAVA, 1.0F);
             entity.setFire(1);
-        }
+        } 
     }
 
     public void breakBlock(World world, BlockPos pos, IBlockState state) {
@@ -72,30 +72,30 @@ public class BlockConverter extends BlockContainerCustom {
                     spawnAsEntity(world, new BlockPos(tx, ty - 4, tz), new ItemStack(RTMItem.steel_ingot, 64, 0));
                     spawnAsEntity(world, new BlockPos(tx, ty - 4, tz), new ItemStack(RTMItem.steel_ingot, 64, 0));
                     spawnAsEntity(world, new BlockPos(tx, ty - 4, tz), new ItemStack(RTMItem.steel_ingot, 16, 0));
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     public static byte shouldCreateConverter(World world, int x, int y, int z) {
         if (BlockUtil.getBlock((IBlockAccess)world, x, y + 2, z) != RTMBlock.fireBrick)
-            return -1;
+            return -1; 
         for (int i = 2; i < 7; i++) {
             for (int k = 0; k < pos_brick.length; k++) {
                 if (BlockUtil.getBlock((IBlockAccess)world, x + pos_brick[k][0], y + i, z + pos_brick[k][2]) != RTMBlock.fireBrick)
-                    return -1;
-            }
-        }
+                    return -1; 
+            } 
+        } 
         for (int j = 0; j < 4; j++) {
             boolean flag = true;
             for (int k = 0; k < pos_iron.length; k++) {
                 int[] p0 = BlockUtil.rotateBlockPos((byte)j, pos_iron[k][0], pos_iron[k][1], pos_iron[k][2]);
                 if (BlockUtil.getBlock((IBlockAccess)world, x + p0[0], y + p0[1], z + p0[2]) != RTMBlock.steelMaterial)
-                    flag = false;
-            }
+                    flag = false; 
+            } 
             if (flag)
-                return (byte)j;
-        }
+                return (byte)j; 
+        } 
         return -1;
     }
 
@@ -108,24 +108,24 @@ public class BlockConverter extends BlockContainerCustom {
             TileEntityConverterCore tile = (TileEntityConverterCore)BlockUtil.getTileEntity((IBlockAccess)world, x, y + 4, z);
             tile.setDirection(dir);
             setConverterBlock(world, x, y + 2, z, x, y + 4, z);
-        }
+        } 
         for (int i = 2; i < 7; i++) {
             for (int k = 0; k < pos_brick.length; k++) {
                 if (setAir) {
                     BlockUtil.setAir(world, x + pos_brick[k][0], y + i, z + pos_brick[k][2]);
                 } else {
                     setConverterBlock(world, x + pos_brick[k][0], y + i, z + pos_brick[k][2], x, y + 4, z);
-                }
-            }
-        }
+                } 
+            } 
+        } 
         for (int j = 0; j < pos_iron.length; j++) {
             int[] p0 = BlockUtil.rotateBlockPos(dir, pos_iron[j][0], pos_iron[j][1], pos_iron[j][2]);
             if (setAir) {
                 BlockUtil.setAir(world, x + p0[0], y + p0[1], z + p0[2]);
             } else {
                 setConverterBlock(world, x + p0[0], y + p0[1], z + p0[2], x, y + 4, z);
-            }
-        }
+            } 
+        } 
     }
 
     private static void setConverterBlock(World world, int x, int y, int z, int coreX, int coreY, int coreZ) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockCrossingGate.java b/src/api/rtm/jp/ngt/rtm/block/BlockCrossingGate.java
index f638eb2..8177a86 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockCrossingGate.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockCrossingGate.java
@@ -29,7 +29,7 @@ public class BlockCrossingGate extends BlockMachineBase {
 
     public void dropBlockAsItemWithChance(World world, BlockPos pos, IBlockState state, float chance, int fortune) {
         if (!world.isRemote)
-            spawnAsEntity(world, pos, new ItemStack(RTMItem.installedObject, 1, ItemInstalledObject.IstlObjType.CROSSING.id));
+            spawnAsEntity(world, pos, new ItemStack(RTMItem.installedObject, 1, ItemInstalledObject.IstlObjType.CROSSING.id)); 
     }
 
     protected void neighborChanged(BlockArgHolder holder) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockFireBrick.java b/src/api/rtm/jp/ngt/rtm/block/BlockFireBrick.java
index 9cb9b25..24364b9 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockFireBrick.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockFireBrick.java
@@ -47,7 +47,7 @@ public class BlockFireBrick extends BlockCustomWithMeta {
         super.onBlockPlacedBy(world, pos, state, placer, stack);
         if (!world.isRemote && placer instanceof net.minecraft.entity.player.EntityPlayer)
             if (this != RTMBlock.fireBrick)
-                if (this == RTMBlock.hotStoveBrick);
+                if (this == RTMBlock.hotStoveBrick);  
     }
 
     public void updateTick(World world, BlockPos pos, IBlockState state, Random rand) {
@@ -68,22 +68,22 @@ public class BlockFireBrick extends BlockCustomWithMeta {
                             BlockUtil.setBlock(world, x0, y0, z0, (Block)RTMFluid.furnaceFire, 15, 2);
                             BlockUtil.setBlock(world, x, y, z, (Block)this, 0, 2);
                             break;
-                        }
+                        } 
                     } else if (block == RTMFluid.exhaustGas) {
                         int m0 = BlockUtil.getMetadata((IBlockAccess)world, x0, y0, z0);
                         if (meta < 15 && m0 > 0) {
                             BlockUtil.setBlock(world, x, y, z, (Block)this, meta + 1, 2);
                             BlockUtil.setBlock(world, x0, y0, z0, (Block)RTMFluid.exhaustGas, m0 - 1, 2);
                             break;
-                        }
+                        } 
                     } else if (block == Blocks.LAVA) {
                         if (meta < 15) {
                             BlockUtil.setBlock(world, x, y, z, (Block)this, meta + 1, 2);
                             break;
-                        }
-                    }
-                }
-            }
+                        } 
+                    } 
+                } 
+            }  
     }
 
     public String getHarvestTool(IBlockState state) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockFlag.java b/src/api/rtm/jp/ngt/rtm/block/BlockFlag.java
index cc4ccc4..7f899fe 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockFlag.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockFlag.java
@@ -26,7 +26,7 @@ public class BlockFlag extends BlockContainerCustom {
             int y = holder.getBlockPos().getY();
             int z = holder.getBlockPos().getZ();
             holder.getPlayer().openGui(RTMCore.instance, RTMCore.guiIdSelectTileEntityTexture, holder.getWorld(), x, y, z);
-        }
+        } 
         return true;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockFluorescent.java b/src/api/rtm/jp/ngt/rtm/block/BlockFluorescent.java
index cd60a6a..2e026d3 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockFluorescent.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockFluorescent.java
@@ -49,7 +49,7 @@ public class BlockFluorescent extends BlockContainerCustomWithMeta {
                     return 8;
                 case 3:
                     return 12;
-            }
+            }  
         return 15;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockFurnaceFire.java b/src/api/rtm/jp/ngt/rtm/block/BlockFurnaceFire.java
index 88855d8..61afa60 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockFurnaceFire.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockFurnaceFire.java
@@ -55,8 +55,8 @@ public class BlockFurnaceFire extends BlockLiquidBase {
                     IBlockState state2 = BlockUtil.getBlockState((IBlockAccess)world, x, y - 1, z);
                     Block block = state2.getBlock();
                     if (block != RTMBlock.fireBrick && block != RTMBlock.hotStoveBrick && state2.isNormalCube())
-                        BlockUtil.setBlock(world, x, y, z, (Block)Blocks.FIRE, 0, 2);
-                }
+                        BlockUtil.setBlock(world, x, y, z, (Block)Blocks.FIRE, 0, 2); 
+                } 
             } else if (this == RTMFluid.exhaustGas) {
                 if (BlockUtil.getBlock((IBlockAccess)world, x, y + 1, z) == RTMFluid.furnaceFire) {
                     int m1 = BlockUtil.getMetadata((IBlockAccess)world, x, y + 1, z);
@@ -69,10 +69,10 @@ public class BlockFurnaceFire extends BlockLiquidBase {
                             BlockUtil.setBlock(world, x, y, z, (Block)RTMFluid.exhaustGas, meta - 1, 2);
                         } else {
                             BlockUtil.setBlock(world, x, y, z, Blocks.AIR, 0, 2);
-                        }
-                }
-            }
-        }
+                        }  
+                } 
+            } 
+        } 
     }
 
     public void onEntityCollision(World world, BlockPos pos, IBlockState state, Entity entity) {
@@ -98,7 +98,7 @@ public class BlockFurnaceFire extends BlockLiquidBase {
                 isIron = true;
                 entity.setInWeb();
                 flag1 = false;
-            }
+            } 
             if (sizeCoke > 0 || sizeIron > 0)
                 if (!world.isRemote) {
                     List<EntityItem> list = world.getEntitiesWithinAABB(EntityItem.class, new AxisAlignedBB(x, y, z, x + 1.0D, y + 1.0D, z + 1.0D));
@@ -113,7 +113,7 @@ public class BlockFurnaceFire extends BlockLiquidBase {
                                 i2 = itemstack1.getCount() / 8;
                             } else {
                                 i2 = 0;
-                            }
+                            } 
                             if (i2 > 0)
                                 if (sizeCoke + i2 > sizeIron) {
                                     itemstack1.setCount(sizeCoke + i2 - sizeIron);
@@ -122,43 +122,43 @@ public class BlockFurnaceFire extends BlockLiquidBase {
                                 } else {
                                     sizeCoke += i2;
                                     entityItem.setDead();
-                                }
-                        }
-                    }
+                                }  
+                        } 
+                    } 
                     if (isIron) {
                         if (sizeCoke == 0)
-                            return;
+                            return; 
                         if (sizeCoke < sizeIron) {
                             itemstack0.shrink(sizeCoke);
                             ((EntityItem)entity).setItem(itemstack0);
                             sizeIron = sizeCoke;
                         } else {
                             entity.setDead();
-                        }
+                        } 
                     } else {
                         if (sizeIron == 0)
-                            return;
+                            return; 
                         if (sizeCoke > sizeIron) {
                             itemstack0.shrink(sizeIron);
                             ((EntityItem)entity).setItem(itemstack0);
                             sizeCoke = sizeIron;
                         } else {
                             entity.setDead();
-                        }
-                    }
+                        } 
+                    } 
                     onCollidedIronOre(world, x, y, z, sizeIron);
-                }
+                }  
             if (flag1) {
                 entity.motionY = 0.20000000298023224D;
                 entity.motionX = ((world.rand.nextFloat() - world.rand.nextFloat()) * 0.2F);
                 entity.motionZ = ((world.rand.nextFloat() - world.rand.nextFloat()) * 0.2F);
                 entity.playSound(SoundEvents.BLOCK_LAVA_EXTINGUISH, 0.4F, 2.0F + world.rand.nextFloat() * 0.4F);
-            }
-        }
+            } 
+        } 
         if (flag1) {
             entity.attackEntityFrom(DamageSource.LAVA, 1.0F);
             entity.setFire(5);
-        }
+        } 
     }
 
     protected void onCollidedIronOre(World world, int x, int y, int z, int amount) {
@@ -167,18 +167,18 @@ public class BlockFurnaceFire extends BlockLiquidBase {
                 int meta = BlockUtil.getMetadata((IBlockAccess)world, x, y, z);
                 amount += world.rand.nextInt(meta + 1);
                 if (world.rand.nextInt(5) == 0)
-                    BlockUtil.setBlock(world, x, y, z, (Block)RTMFluid.exhaustGas, 15, 2);
-            }
+                    BlockUtil.setBlock(world, x, y, z, (Block)RTMFluid.exhaustGas, 15, 2); 
+            } 
             onCollidedIronOre(world, x, y - 1, z, amount);
         } else {
             while (amount > 0) {
                 if (!(BlockUtil.getBlock((IBlockAccess)world, x, y, z) instanceof BlockFurnaceFire))
-                    break;
+                    break; 
                 BlockUtil.setAir(world, x, y, z);
                 amount = BlockLiquidBase.addLiquid(world, x, y, z, (Block)RTMFluid.liquefiedPigIron, amount, true);
                 y++;
-            }
-        }
+            } 
+        } 
     }
 
     @SideOnly(Side.CLIENT)
@@ -191,13 +191,13 @@ public class BlockFurnaceFire extends BlockLiquidBase {
                 double d7 = (z + random.nextFloat());
                 world.spawnParticle(EnumParticleTypes.EXPLOSION_NORMAL, d5, d6, d7, 0.0D, 0.0D, 0.0D, new int[0]);
                 if (random.nextInt(200) == 0)
-                    world.playSound(x, y, z, SoundEvents.BLOCK_LAVA_AMBIENT, SoundCategory.BLOCKS, 0.2F + random.nextFloat() * 0.2F, 0.9F + random.nextFloat() * 0.15F, false);
-            }
-        }
+                    world.playSound(x, y, z, SoundEvents.BLOCK_LAVA_AMBIENT, SoundCategory.BLOCKS, 0.2F + random.nextFloat() * 0.2F, 0.9F + random.nextFloat() * 0.15F, false); 
+            } 
+        } 
     }
 
     protected void meltBlock(World world, int x, int y, int z) {
         if (this == RTMFluid.furnaceFire)
-            super.meltBlock(world, x, y, z);
+            super.meltBlock(world, x, y, z); 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockLinePole.java b/src/api/rtm/jp/ngt/rtm/block/BlockLinePole.java
index 1dd417b..17833d9 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockLinePole.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockLinePole.java
@@ -33,7 +33,7 @@ public class BlockLinePole extends BlockContainerCustomWithMeta {
 
     protected ItemStack getItem(int damage) {
         if (this == RTMBlock.linePole)
-            return new ItemStack(RTMItem.installedObject, 1, ItemInstalledObject.IstlObjType.LINEPOLE.id);
+            return new ItemStack(RTMItem.installedObject, 1, ItemInstalledObject.IstlObjType.LINEPOLE.id); 
         return new ItemStack(RTMBlock.framework, 1, damage);
     }
 
@@ -42,13 +42,13 @@ public class BlockLinePole extends BlockContainerCustomWithMeta {
         Block block = state.getBlock();
         boolean isPole = (block == RTMBlock.linePole || block == RTMBlock.framework || block == RTMBlock.signal);
         if (type == 0)
-            return isPole;
+            return isPole; 
         if (type == 1)
-            return (isPole || state.isOpaqueCube());
+            return (isPole || state.isOpaqueCube()); 
         if (type == 2) {
             Material material = state.getMaterial();
             return (material != Material.AIR && !material.isLiquid());
-        }
+        } 
         return true;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockMachineBase.java b/src/api/rtm/jp/ngt/rtm/block/BlockMachineBase.java
index 95b39aa..c298af0 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockMachineBase.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockMachineBase.java
@@ -26,16 +26,16 @@ public abstract class BlockMachineBase extends BlockContainerCustomWithMeta {
     protected boolean clickMachine(World world, int x, int y, int z, EntityPlayer player) {
         if (player.isSneaking()) {
             if (world.isRemote)
-                player.openGui(RTMCore.instance, RTMCore.guiIdSelectTileEntityModel, player.getEntityWorld(), x, y, z);
+                player.openGui(RTMCore.instance, RTMCore.guiIdSelectTileEntityModel, player.getEntityWorld(), x, y, z); 
             return true;
-        }
+        } 
         return false;
     }
 
     public int getLightValue(IBlockState state, IBlockAccess world, BlockPos pos) {
         TileEntityMachineBase tile = (TileEntityMachineBase)world.getTileEntity(pos);
         if (tile == null)
-            return 0;
+            return 0; 
         MachineConfig cfg = ((ModelSetMachine)tile.getResourceState().getResourceSet()).getConfig();
         return tile.isGettingPower ? cfg.brightness[1] : cfg.brightness[0];
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockMeltedMetal.java b/src/api/rtm/jp/ngt/rtm/block/BlockMeltedMetal.java
index da9b56c..e4ac347 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockMeltedMetal.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockMeltedMetal.java
@@ -43,19 +43,19 @@ public class BlockMeltedMetal extends BlockLiquidBase {
                         int z0 = z + BlockUtil.facing[i][2];
                         Block block1 = BlockUtil.getBlock((IBlockAccess)world, x0, y0, z0);
                         if (block1 == Blocks.AIR)
-                            flag0 = true;
+                            flag0 = true; 
                         if (block1 instanceof BlockLiquidBase && BlockUtil.getMetadata((IBlockAccess)world, x0, y0, z0) > 0)
-                            flag1 = false;
-                    }
+                            flag1 = false; 
+                    } 
                     if (flag0 && flag1 && random.nextInt(5) == 0)
-                        BlockUtil.setBlock(world, x, y, z, RTMBlock.steelSlab, 15, 2);
-                }
+                        BlockUtil.setBlock(world, x, y, z, RTMBlock.steelSlab, 15, 2); 
+                }   
     }
 
     protected int canFlowLiquid(World world, int x, int y, int z) {
         Block block = BlockUtil.getBlock((IBlockAccess)world, x, y, z);
         if (block == RTMFluid.furnaceFire || block == RTMFluid.exhaustGas)
-            return 15;
+            return 15; 
         return super.canFlowLiquid(world, x, y, z);
     }
 
@@ -73,9 +73,9 @@ public class BlockMeltedMetal extends BlockLiquidBase {
                     BlockUtil.setAir(world, x0, y0, z0);
                     BlockUtil.setAir(world, x, y, z);
                     world.createExplosion(null, x + 0.5D, y + 0.5D, z + 0.5D, 8.0F, true);
-                }
-            }
-        }
+                } 
+            } 
+        } 
         super.neighborChanged(state, world, pos, block, fromPos);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockMetalSlab.java b/src/api/rtm/jp/ngt/rtm/block/BlockMetalSlab.java
index 4f5b2b3..b582563 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockMetalSlab.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockMetalSlab.java
@@ -30,15 +30,15 @@ public class BlockMetalSlab extends BlockCustomWithMeta {
         if (BlockUtil.getMetadata((IBlockAccess)world, pos) > 0) {
             entity.attackEntityFrom(DamageSource.LAVA, 1.0F);
             entity.setFire(1);
-        }
+        } 
     }
 
     public void updateTick(World world, BlockPos pos, IBlockState state, Random rand) {
         if (!world.isRemote) {
             int meta = BlockUtil.getMetadata((IBlockAccess)world, pos);
             if (meta > 0)
-                BlockUtil.setBlock(world, pos, (Block)this, --meta, 2);
-        }
+                BlockUtil.setBlock(world, pos, (Block)this, --meta, 2); 
+        } 
     }
 
     public String getHarvestTool(IBlockState state) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockMirror.java b/src/api/rtm/jp/ngt/rtm/block/BlockMirror.java
index e835597..3f293c7 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockMirror.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockMirror.java
@@ -41,8 +41,8 @@ public class BlockMirror extends BlockContainerCustomWithMeta {
                     return new AxisAlignedBB(0.9375D, 0.0D, 0.0D, 1.0D, 1.0D, 1.0D);
                 case 5:
                     return new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0625D, 1.0D, 1.0D);
-            }
-        }
+            } 
+        } 
         return FULL_BLOCK_AABB;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockMovingMachine.java b/src/api/rtm/jp/ngt/rtm/block/BlockMovingMachine.java
index ad9e4e2..ecee553 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockMovingMachine.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockMovingMachine.java
@@ -51,14 +51,14 @@ public class BlockMovingMachine extends BlockContainerCustomWithMeta {
             if (!world.isRemote)
                 if (meta == 0) {
                     if (!tile.hasPair())
-                        tile.searchMM(pos.getX(), pos.getY(), pos.getZ());
+                        tile.searchMM(pos.getX(), pos.getY(), pos.getZ()); 
                 } else if (meta == 1) {
                     tile.generateVehicle(player);
-                }
+                }  
         } else if (world.isRemote) {
             TileEntityMovingMachine core = tile.getCore();
             player.openGui(RTMCore.instance, RTMCore.guiIdMovingMachine, world, core.getPos().getX(), core.getPos().getY(), core.getPos().getZ());
-        }
+        } 
         return true;
     }
 
@@ -69,8 +69,8 @@ public class BlockMovingMachine extends BlockContainerCustomWithMeta {
             TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)world, pos);
             int meta = BlockUtil.getMetadata((IBlockAccess)world, pos);
             if (meta == 0)
-                ((TileEntityMovingMachine)tile).onBlockChanged();
-        }
+                ((TileEntityMovingMachine)tile).onBlockChanged(); 
+        } 
     }
 
     public boolean removedByPlayer(BlockArgHolder holder, boolean willHarvest) {
@@ -80,8 +80,8 @@ public class BlockMovingMachine extends BlockContainerCustomWithMeta {
             TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)world, pos);
             int meta = BlockUtil.getMetadata((IBlockAccess)world, pos);
             if (meta == 0)
-                ((TileEntityMovingMachine)tile).reset(true);
-        }
+                ((TileEntityMovingMachine)tile).reset(true); 
+        } 
         return super.removedByPlayer(holder, willHarvest);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockPipe.java b/src/api/rtm/jp/ngt/rtm/block/BlockPipe.java
index 9c5006c..0f3d71b 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockPipe.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockPipe.java
@@ -38,7 +38,7 @@ public class BlockPipe extends BlockContainerCustomWithMeta {
 
     public List<BlockSet> setLiquid(World world, int x, int y, int z, int fromX, int fromY, int fromZ, List<BlockSet> list, int count) {
         if (count > 255)
-            return list;
+            return list; 
         TileEntityPipe tile = (TileEntityPipe)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
         for (int i = 0; i < 6; i++) {
             int x0 = x + BlockUtil.facing[i][0];
@@ -50,11 +50,11 @@ public class BlockPipe extends BlockContainerCustomWithMeta {
                     int m0 = BlockUtil.getMetadata((IBlockAccess)world, x0, y0, z0);
                     BlockSet bs = new BlockSet(x0, y0, z0, block, m0);
                     if (!list.contains(bs))
-                        list.add(bs);
+                        list.add(bs); 
                 } else if (tile.connection[i] == 2) {
                     setLiquid(world, x0, y0, z0, x, y, z, list, ++count);
-                }
-        }
+                }  
+        } 
         return list;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockPoint.java b/src/api/rtm/jp/ngt/rtm/block/BlockPoint.java
index 8e426f3..35eb1bc 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockPoint.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockPoint.java
@@ -40,17 +40,17 @@ public class BlockPoint extends BlockMachineBase {
                     if (!world.isRemote) {
                         float f0 = point.getMove();
                         point.setMove(-f0);
-                    }
+                    } 
                 } else if (!world.isRemote) {
                     boolean b0 = point.isActivated();
                     point.setActivated(!b0);
                     world.notifyNeighborsOfStateChange(pos, (Block)this, true);
                     world.notifyNeighborsOfStateChange(pos.down(), (Block)this, true);
-                }
+                } 
                 point.onActivate();
                 return true;
-            }
-        }
+            } 
+        } 
         return true;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockRailroadSign.java b/src/api/rtm/jp/ngt/rtm/block/BlockRailroadSign.java
index 2d339a5..20c141e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockRailroadSign.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockRailroadSign.java
@@ -30,7 +30,7 @@ public class BlockRailroadSign extends BlockContainerCustomWithMeta {
 
     public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess world, BlockPos pos) {
         if (BlockUtil.getBlock(world, pos.up()) != Blocks.AIR)
-            return new AxisAlignedBB(0.4375D, -0.5D, 0.4375D, 0.5625D, 1.0D, 0.5625D);
+            return new AxisAlignedBB(0.4375D, -0.5D, 0.4375D, 0.5625D, 1.0D, 0.5625D); 
         return new AxisAlignedBB(0.4375D, 0.0D, 0.4375D, 0.5625D, 1.5D, 0.5625D);
     }
 
@@ -40,7 +40,7 @@ public class BlockRailroadSign extends BlockContainerCustomWithMeta {
             int y = holder.getBlockPos().getY();
             int z = holder.getBlockPos().getZ();
             holder.getPlayer().openGui(RTMCore.instance, RTMCore.guiIdSelectTileEntityTexture, holder.getWorld(), x, y, z);
-        }
+        } 
         return true;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockScaffold.java b/src/api/rtm/jp/ngt/rtm/block/BlockScaffold.java
index 16d0631..08c2977 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockScaffold.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockScaffold.java
@@ -42,7 +42,7 @@ public class BlockScaffold extends BlockContainerCustomWithMeta {
         int i0 = NGTMath.floor(NGTMath.normalizeAngle(placer.rotationYaw + 180.0D) / 90.0D + 0.5D) & 0x3;
         TileEntity tile = world.getTileEntity(pos);
         if (tile instanceof TileEntityScaffold)
-            ((TileEntityScaffold)tile).setDir((byte)i0);
+            ((TileEntityScaffold)tile).setDir((byte)i0); 
     }
 
     public void addCollisionBoxToList(IBlockState state, World world, BlockPos pos, AxisAlignedBB entityBox, List<AxisAlignedBB> collidingBoxes, @Nullable Entity entity, boolean isActualState) {
@@ -65,19 +65,19 @@ public class BlockScaffold extends BlockContainerCustomWithMeta {
         if (flagXP) {
             setAABB(new AxisAlignedBB(0.9375D, 0.0D, 0.0D, 1.0D, 1.5D, 1.0D));
             super.addCollisionBoxToList(state, world, pos, entityBox, collidingBoxes, entity, isActualState);
-        }
+        } 
         if (flagXN) {
             setAABB(new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0625D, 1.5D, 1.0D));
             super.addCollisionBoxToList(state, world, pos, entityBox, collidingBoxes, entity, isActualState);
-        }
+        } 
         if (flagZP) {
             setAABB(new AxisAlignedBB(0.0D, 0.0D, 0.9375D, 1.0D, 1.5D, 1.0D));
             super.addCollisionBoxToList(state, world, pos, entityBox, collidingBoxes, entity, isActualState);
-        }
+        } 
         if (flagZN) {
             setAABB(new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 1.5D, 0.0625D));
             super.addCollisionBoxToList(state, world, pos, entityBox, collidingBoxes, entity, isActualState);
-        }
+        } 
         setAABB(FULL_BLOCK_AABB);
     }
 
@@ -91,29 +91,29 @@ public class BlockScaffold extends BlockContainerCustomWithMeta {
                 byte dir2 = ((TileEntityScaffold)tile).getDir();
                 boolean b0 = (dir2 == 0 || dir2 == 2);
                 return (byte)(b0 ? 1 : 2);
-            }
+            } 
             return 0;
-        }
+        } 
         if (block0 == RTMBlock.scaffoldStairs) {
             TileEntity tile = BlockUtil.getTileEntity(world, x, y, z);
             if (tile instanceof TileEntityScaffoldStairs) {
                 byte dir2 = ((TileEntityScaffoldStairs)tile).getDir();
                 boolean flag = ((dir == 1 && (dir2 == 1 || dir2 == 3)) || (dir == 0 && (dir2 == 0 || dir2 == 2)));
                 return (byte)(flag ? 3 : 0);
-            }
+            } 
             return 0;
-        }
+        } 
         if (block1 == RTMBlock.scaffoldStairs) {
             TileEntity tile = BlockUtil.getTileEntity(world, x, y - 1, z);
             if (tile instanceof TileEntityScaffoldStairs) {
                 byte dir2 = ((TileEntityScaffoldStairs)tile).getDir();
                 boolean flag = ((dir == 1 && (dir2 == 1 || dir2 == 3)) || (dir == 0 && (dir2 == 0 || dir2 == 2)));
                 return (byte)(flag ? 3 : 0);
-            }
+            } 
             return 0;
-        }
+        } 
         if (state.isOpaqueCube())
-            return 4;
+            return 4; 
         return 0;
     }
 
@@ -124,7 +124,7 @@ public class BlockScaffold extends BlockContainerCustomWithMeta {
     public static float getSpeed(IBlockAccess world, BlockPos pos) {
         TileEntity tile = world.getTileEntity(pos);
         if (tile instanceof TileEntityScaffold)
-            return (((ModelSetOrnament)((TileEntityScaffold)tile).getResourceState().getResourceSet()).getConfig()).conveyorSpeed;
+            return (((ModelSetOrnament)((TileEntityScaffold)tile).getResourceState().getResourceSet()).getConfig()).conveyorSpeed; 
         return 0.0F;
     }
 
@@ -137,7 +137,7 @@ public class BlockScaffold extends BlockContainerCustomWithMeta {
         if (tile instanceof TileEntityScaffold) {
             Vec3 vec = ((TileEntityScaffold)tile).getMotionVec();
             addVecToEntity(entity, vec);
-        }
+        } 
         return motion;
     }
 
@@ -147,6 +147,6 @@ public class BlockScaffold extends BlockContainerCustomWithMeta {
             entity.motionX += vec.getX() * d1;
             entity.motionY += vec.getY() * d1;
             entity.motionZ += vec.getZ() * d1;
-        }
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockScaffoldStairs.java b/src/api/rtm/jp/ngt/rtm/block/BlockScaffoldStairs.java
index e21fc70..6b89cec 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockScaffoldStairs.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockScaffoldStairs.java
@@ -40,7 +40,7 @@ public class BlockScaffoldStairs extends BlockContainerCustomWithMeta {
         int facing = NGTMath.floor(NGTMath.normalizeAngle(placer.rotationYaw + 180.0D) / 90.0D + 0.5D) & 0x3;
         TileEntity tile = world.getTileEntity(pos);
         if (tile instanceof TileEntityScaffold)
-            ((TileEntityScaffold)tile).setDir((byte)facing);
+            ((TileEntityScaffold)tile).setDir((byte)facing); 
     }
 
     public void addCollisionBoxToList(IBlockState state, World world, BlockPos pos, AxisAlignedBB entityBox, List<AxisAlignedBB> collidingBoxes, @Nullable Entity entity, boolean isActualState) {
@@ -58,38 +58,38 @@ public class BlockScaffoldStairs extends BlockContainerCustomWithMeta {
                 if (flag1 != 3) {
                     setAABB(new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0625D, 2.0D, 1.0D));
                     super.addCollisionBoxToList(state, world, pos, entityBox, collidingBoxes, entity, isActualState);
-                }
+                } 
                 if (flag0 != 3) {
                     setAABB(new AxisAlignedBB(0.9375D, 0.0D, 0.0D, 1.0D, 2.0D, 1.0D));
                     super.addCollisionBoxToList(state, world, pos, entityBox, collidingBoxes, entity, isActualState);
-                }
+                } 
                 for (int i = 0; i < 4; i++) {
                     float f0 = i * 0.25F;
                     float f1 = (dir == 2) ? f0 : (0.75F - f0);
                     setAABB(new AxisAlignedBB(0.0D, (0.0F + f0), f1, 1.0D, (0.25F + f0), (0.25F + f1)));
                     super.addCollisionBoxToList(state, world, pos, entityBox, collidingBoxes, entity, isActualState);
-                }
+                } 
             } else {
                 if (flag3 != 3) {
                     setAABB(new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 2.0D, 0.0625D));
                     super.addCollisionBoxToList(state, world, pos, entityBox, collidingBoxes, entity, isActualState);
-                }
+                } 
                 if (flag2 != 3) {
                     setAABB(new AxisAlignedBB(0.0D, 0.0D, 0.9375D, 1.0D, 2.0D, 1.0D));
                     super.addCollisionBoxToList(state, world, pos, entityBox, collidingBoxes, entity, isActualState);
-                }
+                } 
                 for (int i = 0; i < 4; i++) {
                     float f0 = i * 0.25F;
                     float f1 = (dir == 1) ? f0 : (0.75F - f0);
                     setAABB(new AxisAlignedBB(f1, (0.0F + f0), 0.0D, (0.25F + f1), (0.25F + f0), 1.0D));
                     super.addCollisionBoxToList(state, world, pos, entityBox, collidingBoxes, entity, isActualState);
-                }
-            }
+                } 
+            } 
             setAABB(FULL_BLOCK_AABB);
         } else {
             setAABB(FULL_BLOCK_AABB);
             super.addCollisionBoxToList(state, world, pos, entityBox, collidingBoxes, entity, isActualState);
-        }
+        } 
     }
 
     public static byte getConnectionType(IBlockAccess world, int x, int y, int z, byte dir) {
@@ -103,38 +103,38 @@ public class BlockScaffoldStairs extends BlockContainerCustomWithMeta {
                 byte dir2 = ((TileEntityScaffold)tile).getDir();
                 boolean b0 = (dir2 == 0 || dir2 == 2);
                 return (byte)(b0 ? 1 : 2);
-            }
+            } 
             return 0;
-        }
+        } 
         if (block == RTMBlock.scaffoldStairs) {
             TileEntity tile = BlockUtil.getTileEntity(world, x, y, z);
             if (tile instanceof TileEntityScaffoldStairs)
                 if (((TileEntityScaffoldStairs)tile).getDir() == dir)
-                    return 3;
+                    return 3;  
             return 0;
-        }
+        } 
         if (blockD == RTMBlock.scaffoldStairs) {
             TileEntity tile = BlockUtil.getTileEntity(world, x, y - 1, z);
             if (tile instanceof TileEntityScaffoldStairs)
                 if (((TileEntityScaffoldStairs)tile).getDir() == dir)
-                    return 3;
+                    return 3;  
             return 0;
-        }
+        } 
         if (blockU == RTMBlock.scaffoldStairs) {
             TileEntity tile = BlockUtil.getTileEntity(world, x, y + 1, z);
             if (tile instanceof TileEntityScaffoldStairs)
                 if (((TileEntityScaffoldStairs)tile).getDir() == dir)
-                    return 3;
+                    return 3;  
             return 0;
-        }
+        } 
         if (state.isOpaqueCube())
-            return 4;
+            return 4; 
         return 0;
     }
 
     public void dropBlockAsItemWithChance(World world, BlockPos pos, IBlockState state, float chance, int fortune) {
         if (!world.isRemote)
-            spawnAsEntity(world, pos, getItem(state.getBlock().getMetaFromState(state)));
+            spawnAsEntity(world, pos, getItem(state.getBlock().getMetaFromState(state))); 
     }
 
     protected ItemStack getItem(int damage) {
@@ -150,7 +150,7 @@ public class BlockScaffoldStairs extends BlockContainerCustomWithMeta {
         if (tile instanceof TileEntityScaffoldStairs) {
             Vec3 vec = ((TileEntityScaffoldStairs)tile).getMotionVec();
             BlockScaffold.addVecToEntity(entity, vec);
-        }
+        } 
         return motion;
     }
 
@@ -159,7 +159,7 @@ public class BlockScaffoldStairs extends BlockContainerCustomWithMeta {
         if (tile instanceof TileEntityScaffoldStairs) {
             Vec3 vec = ((TileEntityScaffoldStairs)tile).getMotionVec();
             BlockScaffold.addVecToEntity(entity, vec);
-        }
+        } 
     }
 
     public void onEntityCollision(World world, BlockPos pos, IBlockState state, Entity entity) {}
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockSignBoard.java b/src/api/rtm/jp/ngt/rtm/block/BlockSignBoard.java
index 98a6c30..94bbeaf 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockSignBoard.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockSignBoard.java
@@ -35,7 +35,7 @@ public class BlockSignBoard extends BlockContainerCustomWithMeta {
             int y = holder.getBlockPos().getY();
             int z = holder.getBlockPos().getZ();
             holder.getPlayer().openGui(RTMCore.instance, RTMCore.guiIdSignboard, holder.getWorld(), x, y, z);
-        }
+        } 
         return true;
     }
 
@@ -44,12 +44,12 @@ public class BlockSignBoard extends BlockContainerCustomWithMeta {
         if (tile != null) {
             int value = (tile.getResourceState().getResourceSet().getConfig()).lightValue;
             if (value >= 0)
-                return value;
+                return value; 
             if (value == -16)
-                return NGTMath.RANDOM.nextInt(6) * 3;
+                return NGTMath.RANDOM.nextInt(6) * 3; 
             if (tile.isGettingPower)
-                return -value;
-        }
+                return -value; 
+        } 
         return 0;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockSlot.java b/src/api/rtm/jp/ngt/rtm/block/BlockSlot.java
index a451f8f..c1c7395 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockSlot.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockSlot.java
@@ -55,7 +55,7 @@ public class BlockSlot extends BlockContainerCustom implements IPipeConnectable
         int meta = BlockUtil.getMetadata((IBlockAccess)world, x0, y0, z0);
         if (target instanceof net.minecraft.block.BlockLiquid)
             if (addLiquid(world, x, y, z, target, meta))
-                world.setBlockToAir(new BlockPos(x0, y0, z0));
+                world.setBlockToAir(new BlockPos(x0, y0, z0));  
     }
 
     public boolean addLiquid(World world, int x, int y, int z, Block block, int metadata) {
@@ -69,11 +69,11 @@ public class BlockSlot extends BlockContainerCustom implements IPipeConnectable
             while (!list.isEmpty()) {
                 BlockSet bs = list.get(world.rand.nextInt(list.size()));
                 if (setLiquid(world, bs.x, bs.y, bs.z, block, metadata))
-                    return true;
+                    return true; 
                 list.remove(bs);
-            }
+            } 
             return false;
-        }
+        } 
         return setLiquid(world, x1, y1, z1, block, metadata);
     }
 
@@ -85,14 +85,14 @@ public class BlockSlot extends BlockContainerCustom implements IPipeConnectable
         if (BlockUtil.isAir((IBlockAccess)world, x0, y0, z0)) {
             BlockUtil.setBlock(world, x0, y0, z0, block, metadata, 3);
             return true;
-        }
+        } 
         if (block instanceof jp.ngt.ngtlib.block.BlockLiquidBase)
             for (int y1 = 1; y1 < 16; y1++) {
                 if (BlockUtil.getBlock((IBlockAccess)world, x0, y0 + y1 - 1, z0) == block && BlockUtil.isAir((IBlockAccess)world, x0, y0 + y1, z0)) {
                     BlockUtil.setBlock(world, x0, y0 + y1, z0, block, metadata, 3);
                     return true;
-                }
-            }
+                } 
+            }  
         return false;
     }
 
@@ -114,7 +114,7 @@ public class BlockSlot extends BlockContainerCustom implements IPipeConnectable
             case 5:
                 iblockstate = iblockstate.withProperty((IProperty)FACING, (Comparable)EnumFacing.DOWN);
                 return iblockstate;
-        }
+        } 
         iblockstate = iblockstate.withProperty((IProperty)FACING, (Comparable)EnumFacing.UP);
         return iblockstate;
     }
@@ -137,13 +137,13 @@ public class BlockSlot extends BlockContainerCustom implements IPipeConnectable
 
     public boolean rotateBlock(World world, BlockPos pos, EnumFacing axis) {
         IBlockState state = world.getBlockState(pos);
-        for (UnmodifiableIterator<IProperty> unmodifiableIterator = state.getProperties().keySet().iterator(); unmodifiableIterator.hasNext(); ) {
+        for (UnmodifiableIterator<? extends IProperty> unmodifiableIterator = state.getProperties().keySet().iterator(); unmodifiableIterator.hasNext(); ) {
             IProperty<?> prop = unmodifiableIterator.next();
             if (prop.getName().equals("facing")) {
                 world.setBlockState(pos, state.cycleProperty(prop));
                 return true;
-            }
-        }
+            } 
+        } 
         return false;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockStation.java b/src/api/rtm/jp/ngt/rtm/block/BlockStation.java
index 2855bce..7c72005 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockStation.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockStation.java
@@ -31,7 +31,7 @@ public class BlockStation extends BlockContainerCustom {
 
     public boolean canPlaceBlockAt(World world, BlockPos pos) {
         if (StationManager.INSTANCE.stationCollection.getStation(pos.getX(), pos.getY(), pos.getZ()) == null)
-            return super.canPlaceBlockAt(world, pos);
+            return super.canPlaceBlockAt(world, pos); 
         return false;
     }
 
@@ -41,7 +41,7 @@ public class BlockStation extends BlockContainerCustom {
             int y = holder.getBlockPos().getY();
             int z = holder.getBlockPos().getZ();
             holder.getPlayer().openGui(RTMCore.instance, RTMCore.guiIdStation, holder.getWorld(), x, y, z);
-        }
+        } 
         return true;
     }
 
@@ -52,7 +52,7 @@ public class BlockStation extends BlockContainerCustom {
             int y = pos.getY();
             int z = pos.getZ();
             StationManager.INSTANCE.stationCollection.add(x, y, z);
-        }
+        } 
     }
 
     public void breakBlock(World world, BlockPos pos, IBlockState state) {
@@ -62,6 +62,6 @@ public class BlockStation extends BlockContainerCustom {
             int y = pos.getY();
             int z = pos.getZ();
             StationManager.INSTANCE.stationCollection.remove(x, y, z);
-        }
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockTrainWorkBench.java b/src/api/rtm/jp/ngt/rtm/block/BlockTrainWorkBench.java
index 3df27e2..e122e01 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockTrainWorkBench.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockTrainWorkBench.java
@@ -40,7 +40,7 @@ public class BlockTrainWorkBench extends BlockContainerCustomWithMeta {
             int y = holder.getBlockPos().getY();
             int z = holder.getBlockPos().getZ();
             holder.getPlayer().openGui(RTMCore.instance, RTMCore.guiIdTrainWorkBench, holder.getWorld(), x, y, z);
-        }
+        } 
         return true;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockTurnstile.java b/src/api/rtm/jp/ngt/rtm/block/BlockTurnstile.java
index 480c508..05fe42a 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockTurnstile.java
+++ b/src/api/rtm/jp/ngt/rtm/block/BlockTurnstile.java
@@ -54,16 +54,16 @@ public class BlockTurnstile extends BlockMachineBase {
     public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess world, BlockPos pos) {
         int meta = BlockUtil.getMetadata(world, pos) & 0x3;
         if (meta != 2 && meta != 0)
-            return new AxisAlignedBB(0.375D, 0.0D, 0.0D, 0.625D, 1.0D, 1.0D);
+            return new AxisAlignedBB(0.375D, 0.0D, 0.0D, 0.625D, 1.0D, 1.0D); 
         return new AxisAlignedBB(0.0D, 0.0D, 0.375D, 1.0D, 1.0D, 0.625D);
     }
 
     public boolean isSideSolid(IBlockState base_state, IBlockAccess world, BlockPos pos, EnumFacing side) {
         if (side == EnumFacing.UP || side == EnumFacing.DOWN)
-            return false;
+            return false; 
         int meta = BlockUtil.getMetadata(world, pos) & 0x3;
         if (meta != 2 && meta != 0)
-            return (side == EnumFacing.NORTH || side == EnumFacing.SOUTH);
+            return (side == EnumFacing.NORTH || side == EnumFacing.SOUTH); 
         return (side == EnumFacing.EAST || side == EnumFacing.WEST);
     }
 
@@ -85,10 +85,10 @@ public class BlockTurnstile extends BlockMachineBase {
                 if (((ItemTicket)itemStack.getItem()).ticketType != 2) {
                     ItemStack itemStack2 = ItemTicket.consumeTicket(itemStack);
                     if (!world.isRemote && itemStack2 != null)
-                        spawnAsEntity(world, new BlockPos(x, y + 1, z), itemStack2);
-                }
-            }
-        }
+                        spawnAsEntity(world, new BlockPos(x, y + 1, z), itemStack2); 
+                } 
+            } 
+        } 
         return true;
     }
 
@@ -97,7 +97,7 @@ public class BlockTurnstile extends BlockMachineBase {
         if (!tile.canThrough()) {
             tile.setCount(30);
             tile.onActivate();
-        }
+        } 
     }
 
     public static boolean canThrough(IBlockAccess world, BlockPos pos) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/ParticleSpark.java b/src/api/rtm/jp/ngt/rtm/block/ParticleSpark.java
index fbdddaa..5e16173 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/ParticleSpark.java
+++ b/src/api/rtm/jp/ngt/rtm/block/ParticleSpark.java
@@ -55,8 +55,8 @@ public class ParticleSpark extends Particle {
             float vz = MathHelper.sin(rad * 0.5F) * (float)cameraViewDir.z;
             Vec3d vec3d = new Vec3d(vx, vy, vz);
             for (int l = 0; l < 4; l++)
-                vecs[l] = vec3d.scale(2.0D * vecs[l].dotProduct(vec3d)).add(vecs[l].scale((f9 * f9) - vec3d.dotProduct(vec3d))).add(vec3d.crossProduct(vecs[l]).scale((2.0F * f9)));
-        }
+                vecs[l] = vec3d.scale(2.0D * vecs[l].dotProduct(vec3d)).add(vecs[l].scale((f9 * f9) - vec3d.dotProduct(vec3d))).add(vec3d.crossProduct(vecs[l]).scale((2.0F * f9))); 
+        } 
         buffer.pos(px + (vecs[0]).x, py + (vecs[0]).y, pz + (vecs[0]).z).tex(maxU, maxV).color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha).lightmap(j, k).endVertex();
         buffer.pos(px + (vecs[1]).x, py + (vecs[1]).y, pz + (vecs[1]).z).tex(maxU, minV).color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha).lightmap(j, k).endVertex();
         buffer.pos(px + (vecs[2]).x, py + (vecs[2]).y, pz + (vecs[2]).z).tex(minU, minV).color(this.particleRed, this.particleGreen, this.particleBlue, this.particleAlpha).lightmap(j, k).endVertex();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/decoration/DecorationModel.java b/src/api/rtm/jp/ngt/rtm/block/decoration/DecorationModel.java
index cbe36ca..19195e8 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/decoration/DecorationModel.java
+++ b/src/api/rtm/jp/ngt/rtm/block/decoration/DecorationModel.java
@@ -14,7 +14,7 @@ public class DecorationModel implements Cloneable {
         DecorationModel model = new DecorationModel();
         model.elements = new Element[this.elements.length];
         for (int i = 0; i < model.elements.length; i++)
-            model.elements[i] = this.elements[i].clone();
+            model.elements[i] = this.elements[i].clone(); 
         this.name += "_copy";
         return model;
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/decoration/DecorationStore.java b/src/api/rtm/jp/ngt/rtm/block/decoration/DecorationStore.java
index d2c0c2b..d614be7 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/decoration/DecorationStore.java
+++ b/src/api/rtm/jp/ngt/rtm/block/decoration/DecorationStore.java
@@ -54,7 +54,7 @@ public final class DecorationStore {
             this.modelMap.put(model.name, model);
         } catch (IOException e) {
             e.printStackTrace();
-        }
+        } 
     }
 
     public void registerModel(String json, World world) {
@@ -63,7 +63,7 @@ public final class DecorationStore {
             registerModel(model, world);
         } catch (IOException e) {
             e.printStackTrace();
-        }
+        } 
     }
 
     public void registerModel(DecorationModel model, World world) {
@@ -88,15 +88,15 @@ public final class DecorationStore {
                     registerModel(model, world);
                 } catch (IOException e) {
                     e.printStackTrace();
-                }
-        }
+                }  
+        } 
     }
 
     public File getSaveFolder(World world) {
         File worldFolder = world.getSaveHandler().getWorldDirectory();
         File saveFolder = new File(worldFolder, "ngt/rtm/decoration");
         if (!saveFolder.exists())
-            saveFolder.mkdirs();
+            saveFolder.mkdirs(); 
         return saveFolder;
     }
 
@@ -107,7 +107,7 @@ public final class DecorationStore {
     public List<DecorationModel> getModels() {
         List<DecorationModel> list = new ArrayList<>();
         for (Map.Entry<String, DecorationModel> entry : this.modelMap.entrySet())
-            list.add(entry.getValue());
+            list.add(entry.getValue()); 
         list.sort(new Comparator<DecorationModel>() {
                     public int compare(DecorationModel o1, DecorationModel o2) {
                         return o1.name.compareTo(o2.name);
@@ -119,7 +119,7 @@ public final class DecorationStore {
     public void onTextureStitch(TextureMap map) {
         loadTexture();
         for (ResourceLocation rl : this.unregisteredIcons)
-            map.registerSprite(rl);
+            map.registerSprite(rl); 
     }
 
     private void loadTexture() {
@@ -133,7 +133,7 @@ public final class DecorationStore {
             s = s.replaceAll("/textures/", ":");
             s = s.replaceAll(".png", "");
             this.unregisteredIcons.add(new ResourceLocation(s));
-        }
+        } 
         this.icons.addAll(this.unregisteredIcons);
     }
 
@@ -142,14 +142,14 @@ public final class DecorationStore {
             TextureMap texturemap = Minecraft.getMinecraft().getTextureMapBlocks();
             Map<String, TextureAtlasSprite> iconMap = (Map<String, TextureAtlasSprite>)NGTUtil.getField(TextureMap.class, texturemap, new String[] { "mapUploadedSprites", "field_94252_e" });
             for (Map.Entry<String, TextureAtlasSprite> entry : iconMap.entrySet())
-                this.icons.add(new ResourceLocation(entry.getKey()));
+                this.icons.add(new ResourceLocation(entry.getKey())); 
             this.icons.sort(new Comparator<ResourceLocation>() {
                         public int compare(ResourceLocation o1, ResourceLocation o2) {
                             return o1.toString().compareTo(o2.toString());
                         }
                     });
             this.needReloadTexture = false;
-        }
+        } 
     }
 
     public List<ResourceLocation> getAllIcon() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/decoration/Element.java b/src/api/rtm/jp/ngt/rtm/block/decoration/Element.java
index 8f29284..9633e27 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/decoration/Element.java
+++ b/src/api/rtm/jp/ngt/rtm/block/decoration/Element.java
@@ -10,13 +10,13 @@ public class Element implements Cloneable {
         element.name = this.name;
         element.faces = new Face[this.faces.length];
         for (int i = 0; i < element.faces.length; i++)
-            element.faces[i] = this.faces[i].clone();
+            element.faces[i] = this.faces[i].clone(); 
         return element;
     }
 
     public void addVec(float[] vec3, boolean lockUV) {
         for (Face face : this.faces)
-            face.addVec(vec3, lockUV);
+            face.addVec(vec3, lockUV); 
     }
 
     public static Element getDefaultElement() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/decoration/Face.java b/src/api/rtm/jp/ngt/rtm/block/decoration/Face.java
index 700ae6b..2c0c356 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/decoration/Face.java
+++ b/src/api/rtm/jp/ngt/rtm/block/decoration/Face.java
@@ -21,24 +21,24 @@ public class Face implements Cloneable {
         for (int i = 0; i < face.vertex.length; i++) {
             face.vertex[i] = new float[(this.vertex[i]).length];
             for (int j = 0; j < (face.vertex[i]).length; j++)
-                face.vertex[i][j] = this.vertex[i][j];
-        }
+                face.vertex[i][j] = this.vertex[i][j]; 
+        } 
         return face;
     }
 
     public void addVec(float[] vec3, boolean lockUV) {
         for (float[] vtx : this.vertex)
-            addVecToVertex(vtx, this.type, vec3, lockUV);
+            addVecToVertex(vtx, this.type, vec3, lockUV); 
     }
 
     public static void addVecToVertex(float[] vtx, FaceType faceType, float[] vec3, boolean lockUV) {
         for (int i = 0; i < 3; i++)
-            vtx[i] = vtx[i] + vec3[i];
+            vtx[i] = vtx[i] + vec3[i]; 
         if (lockUV) {
             float[] uv = faceType.func.vertexToUV(vtx[0], vtx[1], vtx[2]);
             vtx[3] = uv[0];
             vtx[4] = uv[1];
-        }
+        } 
     }
 
     public static Face getDefaultFace() {
@@ -59,19 +59,15 @@ public class Face implements Cloneable {
     }
 
     public enum FaceType {
-        TOP, BOTTOM, LEFT, RIGHT, FRONT, BACK;
+        TOP((x, y, z) -> new float[] { 1.0F - z, x }),
+        BOTTOM((x, y, z) -> new float[] { z, x }),
+        LEFT((x, y, z) -> new float[] { 1.0F - z, 1.0F - y }),
+        RIGHT((x, y, z) -> new float[] { z, 1.0F - y }),
+        FRONT((x, y, z) -> new float[] { x, 1.0F - y }),
+        BACK((x, y, z) -> new float[] { 1.0F - x, 1.0F - y });
 
         public final Face.UVFunc func;
 
-        static {
-            TOP = new FaceType("TOP", 0, (x, y, z) -> new float[] { 1.0F - z, x });
-            BOTTOM = new FaceType("BOTTOM", 1, (x, y, z) -> new float[] { z, x });
-            LEFT = new FaceType("LEFT", 2, (x, y, z) -> new float[] { 1.0F - z, 1.0F - y });
-            RIGHT = new FaceType("RIGHT", 3, (x, y, z) -> new float[] { z, 1.0F - y });
-            FRONT = new FaceType("FRONT", 4, (x, y, z) -> new float[] { x, 1.0F - y });
-            BACK = new FaceType("BACK", 5, (x, y, z) -> new float[] { 1.0F - x, 1.0F - y });
-        }
-
         FaceType(Face.UVFunc par1) {
             this.func = par1;
         }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderDecoration.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderDecoration.java
index 5aef29a..216f52b 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderDecoration.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderDecoration.java
@@ -43,12 +43,12 @@ public class RenderDecoration extends TileEntitySpecialRenderer<TileEntityDecora
                 addVertex(tessellator, icon, face.vertex[1]);
                 addVertex(tessellator, icon, face.vertex[2]);
                 addVertex(tessellator, icon, face.vertex[3]);
-            }
-        }
+            } 
+        } 
         tessellator.draw();
         GLHelper.enableLighting();
         if (onWorld)
-            (NGTUtilClient.getMinecraft()).entityRenderer.enableLightmap();
+            (NGTUtilClient.getMinecraft()).entityRenderer.enableLightmap(); 
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderEffect.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderEffect.java
index 7f12e18..0e1f451 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderEffect.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderEffect.java
@@ -44,7 +44,7 @@ public class RenderEffect extends TileEntitySpecialRenderer<TileEntityEffect> {
 
     private final void render(TileEntityEffect par1, double par2, double par3, double par4, float par5) {
         if (!this.finishLoading)
-            return;
+            return; 
         GL11.glPushMatrix();
         GL11.glEnable(32826);
         GL11.glTranslatef((float)par2 + 0.5F, (float)par3 + 0.5F, (float)par4 + 0.5F);
@@ -130,7 +130,7 @@ public class RenderEffect extends TileEntitySpecialRenderer<TileEntityEffect> {
                 GL11.glColor4f(color, color, color, color2);
                 this.ring.renderPart(RTMCore.smoothing, partNames[i]);
                 color2 *= 0.75F;
-            }
+            } 
             GL11.glPopMatrix();
             GL11.glMatrixMode(5890);
             GL11.glLoadIdentity();
@@ -138,7 +138,7 @@ public class RenderEffect extends TileEntitySpecialRenderer<TileEntityEffect> {
             GL11.glDisable(3042);
             GL11.glEnable(3008);
             GL11.glDepthMask(true);
-        }
+        } 
         GL11.glPopMatrix();
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderFlag.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderFlag.java
index 400900f..5e927de 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderFlag.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderFlag.java
@@ -26,7 +26,7 @@ public class RenderFlag extends TileEntitySpecialRenderer<TileEntityFlag> {
         TextureSetFlag set = tileEntity.getResourceState().getResourceSet();
         renderPole(set);
         if (BlockUtil.getBlock((IBlockAccess)getWorld(), tileEntity.getPos().up()) != RTMBlock.flag)
-            renderFlag(tileEntity, set);
+            renderFlag(tileEntity, set); 
         GL11.glPopMatrix();
     }
 
@@ -72,8 +72,8 @@ public class RenderFlag extends TileEntitySpecialRenderer<TileEntityFlag> {
                 float nr3 = getNormalR(r3 + yaw);
                 tessellator.setNormal(NGTMath.getSin(nr3), 0.0F, NGTMath.getCos(nr3));
                 tessellator.addVertexWithUV(d3, -(v0 + windInv * u0w) * h, u0w * wind, u0, v0);
-            }
-        }
+            } 
+        } 
         tessellator.draw();
         GL11.glShadeModel(7424);
         GL11.glEnable(2884);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderMachine.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderMachine.java
index 4a3e2a2..d436da1 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderMachine.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderMachine.java
@@ -37,11 +37,11 @@ public final class RenderMachine extends TileEntitySpecialRenderer<TileEntityMac
                 case 5:
                     GL11.glRotatef(-90.0F, 0.0F, 0.0F, 1.0F);
                     break;
-            }
+            }  
         GL11.glTranslatef(0.0F, -0.5F, 0.0F);
         float yaw = par1.getRotation();
         if (cfg.rotateByMetadata && par1.getBlockMetadata() == 0)
-            yaw = -yaw;
+            yaw = -yaw; 
         GL11.glRotatef(yaw, 0.0F, 1.0F, 0.0F);
         int pass = MinecraftForgeClient.getRenderPass();
         modelSet.modelObj.render(par1, cfg, pass, par8);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderMovingMachine.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderMovingMachine.java
index 429bd4c..2323387 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderMovingMachine.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderMovingMachine.java
@@ -23,7 +23,7 @@ import org.lwjgl.opengl.GL11;
 public class RenderMovingMachine extends TileEntitySpecialRenderer<TileEntityMovingMachine> {
     private void renderMovingMachine(TileEntityMovingMachine tileEntity, double x, double y, double z, float p5) {
         if (!tileEntity.isCore && tileEntity.hasPair())
-            return;
+            return; 
         GL11.glPushMatrix();
         GL11.glEnable(32826);
         GL11.glEnable(2884);
@@ -38,13 +38,13 @@ public class RenderMovingMachine extends TileEntitySpecialRenderer<TileEntityMov
             tessellator.addVertex(0.0F, 0.0F, 0.0F);
             tessellator.addVertex(tileEntity.pairBlockX, tileEntity.pairBlockY, tileEntity.pairBlockZ);
             tessellator.draw();
-        }
+        } 
         double dx = tileEntity.prevPosX + (tileEntity.posX - tileEntity.prevPosX) * p5;
         double dy = tileEntity.prevPosY + (tileEntity.posY - tileEntity.prevPosY) * p5;
         double dz = tileEntity.prevPosZ + (tileEntity.posZ - tileEntity.prevPosZ) * p5;
         GL11.glTranslatef((float)(dx + 0.5D), (float)(dy + 0.5D), (float)(dz + 0.5D));
         if (tileEntity.guideVisibility)
-            NGTRenderer.renderFrame(tileEntity.offsetX, tileEntity.offsetY, tileEntity.offsetZ, tileEntity.width, tileEntity.height, tileEntity.depth, 65295, 255);
+            NGTRenderer.renderFrame(tileEntity.offsetX, tileEntity.offsetY, tileEntity.offsetZ, tileEntity.width, tileEntity.height, tileEntity.depth, 65295, 255); 
         GL11.glEnable(3553);
         GLHelper.enableLighting();
         if (setupBrightness(tileEntity));
@@ -62,18 +62,18 @@ public class RenderMovingMachine extends TileEntitySpecialRenderer<TileEntityMov
             GLHelper.setBrightness(i);
             GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
             return true;
-        }
+        } 
         return false;
     }
 
     private void renderBlocks(TileEntityMovingMachine tile, float p2) {
         if (tile.dummyWorld == null || tile.blocksObject == null)
-            return;
+            return; 
         if (tile.glLists == null)
-            tile.glLists = new GLObject[2];
+            tile.glLists = new GLObject[2]; 
         int pass = MinecraftForgeClient.getRenderPass();
         if (pass == -1)
-            pass = 0;
+            pass = 0; 
         NGTWorld world = (NGTWorld)tile.dummyWorld;
         NGTObjectRenderer.INSTANCE.renderTileEntities(world, p2, pass);
         GLHelper.disableLighting();
@@ -85,7 +85,7 @@ public class RenderMovingMachine extends TileEntitySpecialRenderer<TileEntityMov
             GLHelper.endCompile();
         } else {
             GLHelper.callList(tile.glLists[pass]);
-        }
+        } 
         GLHelper.enableLighting();
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderOrnament.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderOrnament.java
index 697c81f..ceea6c4 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderOrnament.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderOrnament.java
@@ -21,7 +21,7 @@ public class RenderOrnament<T extends TileEntityOrnament> extends TileEntitySpec
         if (modelSet.modelObj.renderer.getScript() == null) {
             float scale = par1.getRandomScale();
             GL11.glScalef(scale, scale, scale);
-        }
+        } 
         modelSet.modelObj.render(par1, cfg, pass, par8);
         GL11.glPopMatrix();
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderPaint.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderPaint.java
index 8a4a780..c571bde 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderPaint.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderPaint.java
@@ -86,11 +86,11 @@ public class RenderPaint extends TileEntitySpecialRenderer<TileEntityPaint> {
                                     tessellator.addVertex(d2, d0 + 0.0625F, d1);
                                     tessellator.addVertex(d2, d0 + 0.0625F, d1 + 0.0625F);
                                     break;
-                            }
-                        }
-                    }
-                }
-        }
+                            } 
+                        } 
+                    } 
+                }  
+        } 
         tessellator.draw();
         GL11.glDepthMask(true);
         GL11.glDisable(3042);
@@ -101,7 +101,7 @@ public class RenderPaint extends TileEntitySpecialRenderer<TileEntityPaint> {
         if (stack != null && stack.getItem() == RTMItem.crowbar) {
             GL11.glTranslatef(0.5F, 0.5F, 0.5F);
             RTMCore.proxy.renderMissingModel();
-        }
+        } 
         GL11.glDisable(2884);
         GL11.glPopMatrix();
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderRailroadSign.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderRailroadSign.java
index c8ba93b..8352585 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderRailroadSign.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderRailroadSign.java
@@ -21,7 +21,7 @@ public class RenderRailroadSign extends TileEntitySpecialRenderer<TileEntityRail
         float d = 0.0675F;
         boolean flipVertical = !tileEntity.getWorld().isAirBlock(tileEntity.getPos().up());
         if (flipVertical)
-            f0 = -0.25F;
+            f0 = -0.25F; 
         GL11.glTranslatef(0.0F, f0, 0.0F);
         GL11.glRotatef(tileEntity.getRotation(), 0.0F, 1.0F, 0.0F);
         NGTTessellator tessellator = NGTTessellator.instance;
@@ -45,7 +45,7 @@ public class RenderRailroadSign extends TileEntitySpecialRenderer<TileEntityRail
         GL11.glPopMatrix();
         GL11.glDisable(3553);
         if (flipVertical)
-            GL11.glTranslatef(0.0F, -0.5F, 0.0F);
+            GL11.glTranslatef(0.0F, -0.5F, 0.0F); 
         tessellator.startDrawingQuads();
         tessellator.setColorOpaque_I(4210752);
         NGTRenderer.renderPole(tessellator, 0.0625F, 1.5F, false);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderSignBoard.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderSignBoard.java
index c26dd4c..7fb7e17 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderSignBoard.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderSignBoard.java
@@ -28,7 +28,7 @@ public class RenderSignBoard extends TileEntitySpecialRenderer<TileEntitySignBoa
         if (cfg.frame > 1) {
             minV = (tileEntity.counter / cfg.animationCycle) / cfg.frame;
             maxV = (tileEntity.counter / cfg.animationCycle + 1) / cfg.frame;
-        }
+        } 
         GL11.glRotatef(dir * -90.0F, 0.0F, 1.0F, 0.0F);
         if (meta == 0) {
             GL11.glTranslatef(0.0F, 0.5F - height, 0.0F);
@@ -46,7 +46,7 @@ public class RenderSignBoard extends TileEntitySpecialRenderer<TileEntitySignBoa
             GL11.glTranslatef(width - 0.5F, 0.0F, 0.0F);
         } else {
             GL11.glTranslatef(0.5F - width, 0.0F, 0.0F);
-        }
+        } 
         GL11.glDisable(2896);
         NGTTessellator tessellator = NGTTessellator.instance;
         bindTexture(set.texture);
@@ -65,7 +65,7 @@ public class RenderSignBoard extends TileEntitySpecialRenderer<TileEntitySignBoa
             GL11.glDisable(3553);
             tessellator.startDrawingQuads();
             tessellator.setColorRGBA_I(color, 255);
-        }
+        } 
         tessellator.addVertexWithUV(-width, -height, -depth, 1.0F, maxV);
         tessellator.addVertexWithUV(-width, height, -depth, 1.0F, minV);
         tessellator.addVertexWithUV(width, height, -depth, u1, minV);
@@ -73,7 +73,7 @@ public class RenderSignBoard extends TileEntitySpecialRenderer<TileEntitySignBoa
         tessellator.draw();
         color -= 1052688;
         if (color < 0)
-            color = 0;
+            color = 0; 
         GL11.glDisable(3553);
         tessellator.startDrawingQuads();
         tessellator.setColorRGBA_I(color, 255);
@@ -101,17 +101,17 @@ public class RenderSignBoard extends TileEntitySpecialRenderer<TileEntitySignBoa
         GL11.glScalef(1.0F, -1.0F, 1.0F);
         for (SignboardText text : (tileEntity.getResourceState()).texts) {
             if (cfg.backTexture != 1 || text.posU < width)
-                text.render(text.posU - width, text.posV - height, depth + 0.01F, 1.0F);
+                text.render(text.posU - width, text.posV - height, depth + 0.01F, 1.0F); 
             if (cfg.backTexture == 0 || (cfg.backTexture == 1 && text.posU >= width)) {
                 GL11.glPushMatrix();
                 GL11.glRotatef(180.0F, 0.0F, 1.0F, 0.0F);
                 float x = text.posU - width;
                 if (cfg.backTexture == 1)
-                    x -= cfg.width;
+                    x -= cfg.width; 
                 text.render(x, text.posV - height, depth + 0.01F, 1.0F);
                 GL11.glPopMatrix();
-            }
-        }
+            } 
+        } 
         GL11.glDisable(3042);
         GL11.glPopMatrix();
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderStation.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderStation.java
index 1112632..2aebec7 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderStation.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/RenderStation.java
@@ -23,10 +23,10 @@ public class RenderStation extends TileEntitySpecialRenderer<TileEntityStation>
 
     public void renderStation(TileEntityStation tileEntity, double par2, double par4, double par6, float par8) {
         if (this.stationBlock == null)
-            this.stationBlock = Item.getItemFromBlock(RTMBlock.stationCore);
+            this.stationBlock = Item.getItemFromBlock(RTMBlock.stationCore); 
         ItemStack stack = (NGTUtilClient.getMinecraft()).player.getHeldItemMainhand();
         if (stack == null || stack.getItem() != this.stationBlock)
-            return;
+            return; 
         GL11.glPushMatrix();
         GL11.glEnable(32826);
         GL11.glTranslatef((float)par2, (float)par4, (float)par6);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityConverter.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityConverter.java
index 864b7ef..f6bfd07 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityConverter.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityConverter.java
@@ -26,15 +26,15 @@ public class TileEntityConverter extends TileEntityCustom implements ITickable {
     public void update() {
         if (getCore() != null)
             if (this.world.getRedstonePowerFromNeighbors(getPos()) > 0)
-                this.core.powered = true;
+                this.core.powered = true;  
     }
 
     public TileEntityConverterCore getCore() {
         if (this.core == null) {
             TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)getWorld(), this.corePos[0], this.corePos[1], this.corePos[2]);
             if (tile instanceof TileEntityConverterCore)
-                this.core = (TileEntityConverterCore)tile;
-        }
+                this.core = (TileEntityConverterCore)tile; 
+        } 
         return this.core;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityConverterCore.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityConverterCore.java
index acbdca0..d1a1080 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityConverterCore.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityConverterCore.java
@@ -66,11 +66,11 @@ public class TileEntityConverterCore extends TileEntityConverter {
                     int meta = BlockUtil.getMetadata((IBlockAccess)getWorld(), x, y + 1, z);
                     this.capacity += meta + 1;
                     if (this.capacity > 720)
-                        this.capacity = 720;
+                        this.capacity = 720; 
                     BlockUtil.setAir(this.world, x, y + 1, z);
                     if (this.capacity > 540)
-                        this.mode = 1;
-                }
+                        this.mode = 1; 
+                } 
             } else if (this.capacity > 0) {
                 if (this.mode == 1) {
                     this.mode = 2;
@@ -79,19 +79,19 @@ public class TileEntityConverterCore extends TileEntityConverter {
                     if (this.count > this.capacity * 16) {
                         this.mode = 3;
                         this.count = 0;
-                    }
-                }
-            }
+                    } 
+                } 
+            }  
         if (this.mode == 0 || this.mode == 3) {
             if (this.prevPowered) {
                 this.pitch += 0.5F;
             } else {
                 this.pitch -= 0.5F;
-            }
+            } 
             if (this.pitch > 90.0F)
-                this.pitch = 90.0F;
+                this.pitch = 90.0F; 
             if (this.pitch < 0.0F)
-                this.pitch = 0.0F;
+                this.pitch = 0.0F; 
             if (this.prevPowered && this.pitch > 27.0F) {
                 Vec3 vec3 = PooledVec3.create(0.0D, 2.04805D, 2.9275D);
                 vec3 = vec3.rotateAroundX(-this.pitch);
@@ -101,7 +101,7 @@ public class TileEntityConverterCore extends TileEntityConverter {
                         this.capacity--;
                     } else {
                         this.mode = 0;
-                    }
+                    }  
                 if (this.world.isRemote) {
                     if (this.mode == 3 && this.capacity > 0)
                         for (int i = 0; i < 10; i++) {
@@ -110,21 +110,21 @@ public class TileEntityConverterCore extends TileEntityConverter {
                             double y0 = y + vec3.getY() - 0.25D + (random.nextFloat() * 0.5F);
                             double z0 = z + vec3.getZ() + 0.5D - 0.25D + (random.nextFloat() * 0.5F);
                             RTMCore.proxy.spawnModParticle(this.world, x0, y0, z0, 0.0D, -0.125D, 0.0D);
-                        }
+                        }  
                 } else if (this.mode == 3 && this.capacity > 0) {
                     int x1 = NGTMath.floor(x + vec3.getX() + 0.5D);
                     int y1 = NGTMath.floor(y + vec3.getY());
                     int z1 = NGTMath.floor(z + vec3.getZ() + 0.5D);
                     while (BlockUtil.getBlock((IBlockAccess)getWorld(), x1, y1, z1) == Blocks.AIR || BlockUtil.getBlock((IBlockAccess)getWorld(), x1, y1, z1) == RTMFluid.liquefiedSteel)
-                        y--;
+                        y--; 
                     BlockLiquidBase.addLiquid(this.world, x1, y1 + 1, z1, (Block)RTMFluid.liquefiedSteel, 1, true);
-                }
-            }
-        }
+                } 
+            } 
+        } 
         if (!this.world.isRemote && this.mode != this.prevMode) {
             sendPacket();
             NGTLog.sendChatMessageToAll("message.converter.mode" + this.mode, new Object[0]);
-        }
+        } 
     }
 
     public float getPitch() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityCrossingGate.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityCrossingGate.java
index 2b8f72d..7dbafb1 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityCrossingGate.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityCrossingGate.java
@@ -23,28 +23,28 @@ public class TileEntityCrossingGate extends TileEntityMachineBase {
         super.update();
         if (this.world.getRedstonePowerFromNeighbors(getPos()) > 0) {
             if (this.barMoveCount < 90)
-                this.barMoveCount++;
+                this.barMoveCount++; 
             if (this.tickCountOnActive < 360) {
                 this.tickCountOnActive++;
             } else {
                 this.tickCountOnActive = 0;
-            }
+            } 
             if (this.tickCountOnActive % 10 == 0)
-                this.lightCount = (this.lightCount <= 0) ? 1 : 0;
+                this.lightCount = (this.lightCount <= 0) ? 1 : 0; 
             if (this.world.isRemote) {
                 ModelSetMachine set = getResourceState().getResourceSet();
                 if (!this.soundPlayer.isPlaying() && (set.getConfig()).sound_Running != null)
-                    this.soundPlayer.playSound((TileEntity)this, (set.getConfig()).sound_Running, true);
-            }
+                    this.soundPlayer.playSound((TileEntity)this, (set.getConfig()).sound_Running, true); 
+            } 
         } else {
             if (this.barMoveCount > 0)
-                this.barMoveCount--;
+                this.barMoveCount--; 
             this.tickCountOnActive = 0;
             this.lightCount = -1;
             if (this.world.isRemote)
                 if (this.soundPlayer.isPlaying())
-                    this.soundPlayer.stopSound();
-        }
+                    this.soundPlayer.stopSound();  
+        } 
     }
 
     public void onActivate() {}
@@ -53,7 +53,7 @@ public class TileEntityCrossingGate extends TileEntityMachineBase {
         super.updateResourceState();
         if (this.world != null && this.world.isRemote)
             if (this.soundPlayer.isPlaying())
-                this.soundPlayer.stopSound();
+                this.soundPlayer.stopSound();  
     }
 
     @SideOnly(Side.CLIENT)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityEffect.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityEffect.java
index 309bb37..9e01bc0 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityEffect.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityEffect.java
@@ -64,8 +64,8 @@ public class TileEntityEffect extends TileEntityCustom implements ITickable {
                     double flameSize = getSigmoid(f0, 0.03125F) * 20.0D * 2.0D;
                     double blastSize = getLinear(f0);
                     doExplosion(flameSize, blastSize);
-                }
-            }
+                } 
+            }  
         this.tickCount++;
     }
 
@@ -77,7 +77,7 @@ public class TileEntityEffect extends TileEntityCustom implements ITickable {
         double tileY = y + 0.5D;
         double tileZ = z + 0.5D;
         if (blastSize > 128.0D)
-            blastSize = 128.0D;
+            blastSize = 128.0D; 
         double d0 = flameSize * flameSize;
         double d1 = blastSize * blastSize;
         if (this.tickCount < 400 && this.world.getGameRules().getBoolean("mobGriefing")) {
@@ -88,9 +88,9 @@ public class TileEntityEffect extends TileEntityCustom implements ITickable {
             int i0y = i0;
             int i1y = i1;
             if (y - i0y < 0)
-                i0y = y;
+                i0y = y; 
             if (y - i0y + i1y >= 256)
-                i1y = 256 - y + i0y;
+                i1y = 256 - y + i0y; 
             for (int i = 0; i < i1; i++) {
                 for (int j = 0; j < i1y; j++) {
                     for (int k = 0; k < i1; k++) {
@@ -103,7 +103,7 @@ public class TileEntityEffect extends TileEntityCustom implements ITickable {
                             flag = 1;
                         } else if (i4 <= i3) {
                             flag = 2;
-                        }
+                        } 
                         if (flag > 0) {
                             int x1 = x0 + x;
                             int y1 = y0 + y;
@@ -115,23 +115,23 @@ public class TileEntityEffect extends TileEntityCustom implements ITickable {
                                     float hardness = state.getBlockHardness(this.world, getPos());
                                     if (flag == 1) {
                                         if (hardness >= 0.0F && hardness < 500.0F)
-                                            setBlock(x1, y1, z1, Blocks.AIR);
+                                            setBlock(x1, y1, z1, Blocks.AIR); 
                                     } else if (hardness >= 0.0F && hardness < 0.5F) {
                                         if (block != Blocks.FIRE) {
                                             setBlock(x1, y1, z1, Blocks.AIR);
                                             if (state.getMaterial() == Material.PLANTS || state.getMaterial() == Material.LEAVES)
-                                                setBlock(x1, y1, z1, (Block)Blocks.FIRE);
-                                        }
+                                                setBlock(x1, y1, z1, (Block)Blocks.FIRE); 
+                                        } 
                                     } else if (block == Blocks.GRASS || block == Blocks.FARMLAND || block == Blocks.MYCELIUM) {
                                         setBlock(x1, y1, z1, Blocks.DIRT);
-                                    }
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-        }
+                                    } 
+                                } 
+                            } 
+                        } 
+                    } 
+                } 
+            } 
+        } 
         double time = (800 - this.tickCount) / 760.0D;
         List list = this.world.getEntitiesWithinAABBExcludingEntity(null, getAABB(tileX, tileY, tileZ, blastSize));
         Iterator<Entity> iterator = list.iterator();
@@ -155,18 +155,18 @@ public class TileEntityEffect extends TileEntityCustom implements ITickable {
                         entity.setFire(5);
                     } else {
                         entity.attackEntityFrom(nuclearDamage, damage);
-                    }
+                    }  
                 if (acceleration > 0.0D) {
                     if (entity instanceof EntityPlayer)
                         if (((EntityPlayer)entity).capabilities.isFlying)
-                            continue;
+                            continue;  
                     entity.velocityChanged = true;
                     entity.motionX += dx * acceleration;
                     entity.motionY += dy * acceleration * 1.2000000476837158D;
                     entity.motionZ += dz * acceleration;
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     public double getSigmoid(float x, float a) {
@@ -181,15 +181,15 @@ public class TileEntityEffect extends TileEntityCustom implements ITickable {
         double minY = y - size;
         double maxY = y + size;
         if (minY < 0.0D)
-            minY = 0.0D;
+            minY = 0.0D; 
         if (maxY > 256.0D)
-            maxY = 256.0D;
+            maxY = 256.0D; 
         return new AxisAlignedBB(x - size, minY, z - size, x + size, maxY, z + size);
     }
 
     private boolean isChunksExist(int x, int y, int z) {
         if (y >= 0 && y < 256)
-            return getWorld().isBlockLoaded(new BlockPos(x, y, z));
+            return getWorld().isBlockLoaded(new BlockPos(x, y, z)); 
         return false;
     }
 
@@ -207,9 +207,9 @@ public class TileEntityEffect extends TileEntityCustom implements ITickable {
             IBlockState state = this.world.getBlockState(pos);
             Block block = state.getBlock();
             if (block.getBoundingBox(state, (IBlockAccess)getWorld(), pos) != null && block.canCollideCheck(state, false))
-                i0++;
+                i0++; 
             vec3 = vec3.add(x0, y0, z0);
-        }
+        } 
         return i0;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityFlag.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityFlag.java
index 5374a93..d39b77c 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityFlag.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityFlag.java
@@ -25,14 +25,14 @@ public class TileEntityFlag extends TileEntityPlaceable implements IResourceSele
 
     public TileEntityFlag() {
         if (!NGTUtil.isServer())
-            this.wave = NGTMath.RANDOM.nextInt(360);
+            this.wave = NGTMath.RANDOM.nextInt(360); 
     }
 
     public void readFromNBT(NBTTagCompound nbt) {
         super.readFromNBT(nbt);
         this.state.readFromNBT(nbt.getCompoundTag("State"));
         if (this.state.version < 1)
-            getResourceState().setResourceName(nbt.getString("TextureName"));
+            getResourceState().setResourceName(nbt.getString("TextureName")); 
     }
 
     public NBTTagCompound writeToNBT(NBTTagCompound nbt) {
@@ -45,11 +45,11 @@ public class TileEntityFlag extends TileEntityPlaceable implements IResourceSele
         if (this.world.isRemote) {
             this.wave += 10.0F;
             if (this.wave >= 360.0F)
-                this.wave = 0.0F;
+                this.wave = 0.0F; 
             this.tick++;
             if (this.tick >= 36000)
-                this.tick = 0;
-        }
+                this.tick = 0; 
+        } 
     }
 
     public void updateResourceState() {
@@ -57,7 +57,7 @@ public class TileEntityFlag extends TileEntityPlaceable implements IResourceSele
             sendPacket();
             markDirty();
             BlockUtil.markBlockForUpdate(getWorld(), getPos());
-        }
+        } 
     }
 
     public ResourceState<TextureSetFlag> getResourceState() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityFluorescent.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityFluorescent.java
index 5bcb860..8d7fab3 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityFluorescent.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityFluorescent.java
@@ -35,8 +35,8 @@ public class TileEntityFluorescent extends TileEntityOrnament implements ITickab
             if (this.count == 3) {
                 this.world.checkLight(getPos());
                 this.count = 0;
-            }
-        }
+            } 
+        } 
     }
 
     protected ResourceType getSubType() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityLight.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityLight.java
index 7db41f3..2fd4203 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityLight.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityLight.java
@@ -15,15 +15,15 @@ public class TileEntityLight extends TileEntityMachineBase {
         if (this.isGettingPower ^ b) {
             this.isGettingPower = b;
             this.world.checkLight(getPos());
-        }
+        } 
     }
 
     public Vec3 getNormal(float x, float y, float z, float pitch, float yaw) {
         if (this.normal == null) {
             this.normal = new Vec3(x, y, z);
-            MachinePartsRenderer.rotateVec(this.normal,
+            MachinePartsRenderer.rotateVec(this.normal, 
                     getBlockMetadata(), pitch, yaw);
-        }
+        } 
         return this.normal;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityMachineBase.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityMachineBase.java
index c0dbcba..aeedee2 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityMachineBase.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityMachineBase.java
@@ -50,9 +50,9 @@ public abstract class TileEntityMachineBase extends TileEntityPlaceable implemen
     public void update() {
         this.tick++;
         if (this.tick == Integer.MAX_VALUE)
-            this.tick = 0;
+            this.tick = 0; 
         if (!(getWorld()).isRemote)
-            this.executer.execScript(this);
+            this.executer.execScript(this); 
     }
 
     public void setRotation(EntityPlayer player, float rotationInterval, boolean synch) {
@@ -71,14 +71,14 @@ public abstract class TileEntityMachineBase extends TileEntityPlaceable implemen
 
     public Vec3 getNormal(float x, float y, float z, float pitch, float yaw) {
         if (this.normal == null)
-            this.normal = new Vec3(x, y, z);
+            this.normal = new Vec3(x, y, z); 
         return this.normal;
     }
 
     public void onActivate() {
         ModelSetMachine set = getResourceState().getResourceSet();
         if (this.world.isRemote && (set.getConfig()).sound_OnActivate != null)
-            RTMCore.proxy.playSound((TileEntity)this, (set.getConfig()).sound_OnActivate, 1.0F, 1.0F);
+            RTMCore.proxy.playSound((TileEntity)this, (set.getConfig()).sound_OnActivate, 1.0F, 1.0F); 
     }
 
     public boolean shouldRenderInPass(int pass) {
@@ -100,7 +100,7 @@ public abstract class TileEntityMachineBase extends TileEntityPlaceable implemen
             sendPacket();
             markDirty();
             BlockUtil.markBlockForUpdate(getWorld(), getPos());
-        }
+        } 
     }
 
     public int[] getSelectorPos() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityMirror.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityMirror.java
index 2372e2d..fd4d9d2 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityMirror.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityMirror.java
@@ -18,7 +18,7 @@ public class TileEntityMirror extends TileEntity implements ITickable {
         if (this.world.isRemote && this.mirrors == null) {
             this.mirrorType = ((BlockMirror)getBlockType()).mirrorType;
             setupMirror();
-        }
+        } 
     }
 
     private void setupMirror() {
@@ -28,7 +28,7 @@ public class TileEntityMirror extends TileEntity implements ITickable {
             EnumFace face = b ? EnumFace.get(getBlockMetadata()) : EnumFace.get(i);
             this.mirrors[i] = new MirrorComponent(getPos().getX(), getPos().getY(), getPos().getZ(), this.mirrorType, face);
             MirrorObject.add(this.world, this.mirrors[i], face, this.mirrorType);
-        }
+        } 
     }
 
     public void onChunkUnload() {
@@ -43,16 +43,16 @@ public class TileEntityMirror extends TileEntity implements ITickable {
     private void removeMirror() {
         if (this.world.isRemote && this.mirrors != null) {
             for (int i = 0; i < this.mirrors.length; i++)
-                MirrorObject.remove(this.mirrors[i]);
+                MirrorObject.remove(this.mirrors[i]); 
             this.mirrors = null;
-        }
+        } 
     }
 
     public int getAlpha() {
         if (this.mirrorType == BlockMirror.MirrorType.Hexa_Cube) {
             int meta = getBlockMetadata();
             return (meta << 4) + meta;
-        }
+        } 
         return 255;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityMovingMachine.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityMovingMachine.java
index 023637f..b91c5df 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityMovingMachine.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityMovingMachine.java
@@ -125,14 +125,14 @@ public class TileEntityMovingMachine extends TileEntityCustom implements ITickab
         if (this.world == null && this.moveDir != 0 && nbt.hasKey("NGTO")) {
             this.blocksObject = NGTObject.readFromNBT(nbt.getCompoundTag("NGTO"));
             this.moveDir = -2;
-        }
+        } 
         this.prevPosX = this.posX;
         this.prevPosY = this.posY;
         this.prevPosZ = this.posZ;
         if (getWorld() == null || !(getWorld()).isRemote) {
             sendPacket();
             markDirty();
-        }
+        } 
     }
 
     public NBTTagCompound writeToNBT(NBTTagCompound nbt) {
@@ -149,13 +149,13 @@ public class TileEntityMovingMachine extends TileEntityCustom implements ITickab
         nbt.setByte("MoveDir", this.moveDir);
         nbt.setBoolean("GuideVisibility", this.guideVisibility);
         if (this.moveDir != 0 && this.blocksObject != null)
-            nbt.setTag("NGTO", (NBTBase)this.blocksObject.writeToNBT());
+            nbt.setTag("NGTO", (NBTBase)this.blocksObject.writeToNBT()); 
         return nbt;
     }
 
     public void update() {
         if (!this.isCore)
-            return;
+            return; 
         if (this.moveDir == 1 || this.moveDir == -1) {
             this.prevPosX = this.posX;
             this.prevPosY = this.posY;
@@ -168,37 +168,37 @@ public class TileEntityMovingMachine extends TileEntityCustom implements ITickab
                 if (Math.abs(this.posX) > Math.abs(this.pairBlockX)) {
                     this.posX = this.pairBlockX;
                     flag = true;
-                }
+                } 
                 if (Math.abs(this.posY) > Math.abs(this.pairBlockY)) {
                     this.posY = this.pairBlockY;
                     flag = true;
-                }
+                } 
                 if (Math.abs(this.posZ) > Math.abs(this.pairBlockZ)) {
                     this.posZ = this.pairBlockZ;
                     flag = true;
-                }
+                } 
             } else {
                 if (Math.abs(this.pairBlockX - this.posX) > Math.abs(this.pairBlockX)) {
                     this.posX = 0.0D;
                     flag = true;
-                }
+                } 
                 if (Math.abs(this.pairBlockY - this.posY) > Math.abs(this.pairBlockY)) {
                     this.posY = 0.0D;
                     flag = true;
-                }
+                } 
                 if (Math.abs(this.pairBlockZ - this.posZ) > Math.abs(this.pairBlockZ)) {
                     this.posZ = 0.0D;
                     flag = true;
-                }
-            }
+                } 
+            } 
             moveEntities();
             if (flag && !this.world.isRemote)
-                setMovement((byte)0);
+                setMovement((byte)0); 
         } else if (this.moveDir == -2) {
             this.moveDir = 0;
             editBlock(1);
             onBlockChanged();
-        }
+        } 
     }
 
     private void moveEntities() {
@@ -216,19 +216,19 @@ public class TileEntityMovingMachine extends TileEntityCustom implements ITickab
                         case 1:
                             entity.moveMM(mX, mY, mZ);
                             break;
-                    }
-                }
-            }
+                    } 
+                } 
+            } 
             if (this.bbIds != null)
-                RTMCore.NETWORK_WRAPPER.sendToAll(new PacketMoveMM(this.bbIds, mX, mY, mZ));
-        }
+                RTMCore.NETWORK_WRAPPER.sendToAll(new PacketMoveMM(this.bbIds, mX, mY, mZ)); 
+        } 
     }
 
     public void onBlockChanged() {
         if (!hasPair())
-            return;
+            return; 
         if (!this.isCore)
-            getCore().onBlockChanged();
+            getCore().onBlockChanged(); 
         int md = 0;
         boolean bs = (this.world.getRedstonePowerFromNeighbors(getPos()) > 0);
         boolean be = (this.world.getRedstonePowerFromNeighbors(getPos().add(this.pairBlockX, this.pairBlockY, this.pairBlockZ)) > 0);
@@ -238,9 +238,9 @@ public class TileEntityMovingMachine extends TileEntityCustom implements ITickab
             md = -1;
         } else {
             md = 0;
-        }
+        } 
         if (this.moveDir != md)
-            setMovement((byte)md);
+            setMovement((byte)md); 
     }
 
     public void setMovement(byte par1) {
@@ -261,12 +261,12 @@ public class TileEntityMovingMachine extends TileEntityCustom implements ITickab
             markDirty();
             String s = "MM," + par1;
             RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)new PacketNotice((byte)1, s, (TileEntity)this));
-        }
+        } 
     }
 
     private void editBlock(int mode) {
         if (mode == 1 && this.blocksObject == null)
-            return;
+            return; 
         List<BlockSet> list = new ArrayList<>();
         List<AxisAlignedBB> aabbList = new ArrayList<>();
         int x0 = getPos().getX() + (int)this.posX + 1;
@@ -292,10 +292,10 @@ public class TileEntityMovingMachine extends TileEntityCustom implements ITickab
                                         aabbList.clear();
                                         block.addCollisionBoxToList(state, this.world, pos, new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D), aabbList, null, false);
                                         if (!aabbList.isEmpty())
-                                            aabb = aabbList.get(0);
+                                            aabb = aabbList.get(0); 
                                     } else {
                                         aabb = block.getBoundingBox(state, (IBlockAccess)this.world, pos);
-                                    }
+                                    } 
                                     if (block.canCollideCheck(state, false) && aabb != null) {
                                         aabb = aabb.offset(-x, -y, -z);
                                         boolean b = (BlockUtil.getBlock((IBlockAccess)getWorld(), x, y + 1, z) == Blocks.AIR);
@@ -304,25 +304,25 @@ public class TileEntityMovingMachine extends TileEntityCustom implements ITickab
                                         entity.setAABB(aabb);
                                         this.world.spawnEntity(entity);
                                         this.bbList.add(entity);
-                                    }
-                                }
+                                    } 
+                                } 
                             } else if (!this.world.isRemote) {
                                 BlockUtil.setAir(getWorld(), x, y, z);
-                            }
+                            } 
                         } else if (passF == 0) {
                             if (!this.world.isRemote) {
                                 BlockSet set = this.blocksObject.blockList.get(count);
                                 setBlockSet(set, x, y, z);
-                            }
-                        }
+                            } 
+                        } 
                     });
-        }
+        } 
         if (!this.world.isRemote && mode == 1) {
             for (EntityMMBoundingBox entity : this.bbList)
-                entity.setDead();
+                entity.setDead(); 
             this.bbList.clear();
             this.bbIds = null;
-        }
+        } 
         if (mode == 0) {
             this.blocksObject = NGTObject.createNGTO(list, this.width, this.height, this.depth, x0, y0, z0);
             if (this.world.isRemote) {
@@ -331,8 +331,8 @@ public class TileEntityMovingMachine extends TileEntityCustom implements ITickab
                 int size = this.bbList.size();
                 this.bbIds = new int[size];
                 for (int i = 0; i < size; i++)
-                    this.bbIds[i] = ((EntityMMBoundingBox)this.bbList.get(i)).getEntityId();
-            }
+                    this.bbIds[i] = ((EntityMMBoundingBox)this.bbList.get(i)).getEntityId(); 
+            } 
         } else {
             this.blocksObject = null;
             if (this.world.isRemote && this.glLists != null) {
@@ -340,8 +340,8 @@ public class TileEntityMovingMachine extends TileEntityCustom implements ITickab
                 GLHelper.deleteGLList(this.glLists[1]);
                 this.glLists = null;
                 this.dummyWorld = null;
-            }
-        }
+            } 
+        } 
     }
 
     @SideOnly(Side.CLIENT)
@@ -374,14 +374,14 @@ public class TileEntityMovingMachine extends TileEntityCustom implements ITickab
                     nbt0.setInteger("y", y);
                     nbt0.setInteger("z", z);
                     tile.readFromNBT(nbt0);
-                }
+                } 
                 if (tile instanceof TileEntityCustom) {
                     ((TileEntityCustom)tile).setPos(x, y, z, prevX, prevY, prevZ);
                 } else {
                     tile.setPos(pos);
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     public void setData(int p1, int p2, int p3, int ox, int oy, int oz, float p4, boolean p5) {
@@ -428,12 +428,12 @@ public class TileEntityMovingMachine extends TileEntityCustom implements ITickab
                                 setPair(tile);
                                 tile.setPair(this);
                                 return;
-                            }
-                        }
-                    }
-                }
-            }
-        }
+                            } 
+                        } 
+                    } 
+                } 
+            } 
+        } 
     }
 
     public TileEntityMovingMachine getCore() {
@@ -444,8 +444,8 @@ public class TileEntityMovingMachine extends TileEntityCustom implements ITickab
         if (par1 && hasPair()) {
             TileEntityMovingMachine tile = getPair();
             if (tile != null)
-                tile.reset(false);
-        }
+                tile.reset(false); 
+        } 
         this.isCore = false;
         this.pairBlockX = this.pairBlockY = this.pairBlockZ = 0;
         this.posX = this.posY = this.posZ = 0.0D;
@@ -456,7 +456,7 @@ public class TileEntityMovingMachine extends TileEntityCustom implements ITickab
 
     public void generateVehicle(EntityPlayer player) {
         if ((getWorld()).isRemote)
-            return;
+            return; 
         int startX = getX() + 1 + this.offsetX;
         int startY = getY() + 1 + this.offsetY;
         int startZ = getZ() + 1 + this.offsetZ;
@@ -477,7 +477,7 @@ public class TileEntityMovingMachine extends TileEntityCustom implements ITickab
             default:
                 vehicle = new EntityCar(getWorld());
                 break;
-        }
+        } 
         vehicle.setPositionAndUpdate(getX() + 0.5D, getY() + 0.5D, getZ() + 0.5D);
         getWorld().spawnEntity((Entity)vehicle);
         VehicleNGTO obj = new VehicleNGTO(ngto, this.vngto.offsetX, this.vngto.offsetY, this.vngto.offsetZ, this.vngto.scale);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityOrnament.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityOrnament.java
index e52f3c2..e7edddb 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityOrnament.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityOrnament.java
@@ -51,7 +51,7 @@ public abstract class TileEntityOrnament extends TileEntityCustom implements IRe
             float min = (((ModelSetOrnament)getResourceState().getResourceSet()).getConfig()).minRandomScale;
             float randF = NGTMath.RANDOM.nextFloat();
             this.randomScale = min + (1.0F - min) * randF;
-        }
+        } 
         return this.randomScale;
     }
 
@@ -77,7 +77,7 @@ public abstract class TileEntityOrnament extends TileEntityCustom implements IRe
             sendPacket();
             markDirty();
             BlockUtil.markBlockForUpdate(getWorld(), getPos());
-        }
+        } 
     }
 
     public int[] getSelectorPos() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityPaint.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityPaint.java
index 53ba159..daa46fc 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityPaint.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityPaint.java
@@ -20,18 +20,18 @@ public class TileEntityPaint extends TileEntityCustom {
         if (ia.length == 1536)
             for (int i = 0; i < 6; i++) {
                 for (int j = 0; j < 256; j++)
-                    this.colors[i][j] = ia[i * 256 + j];
-            }
+                    this.colors[i][j] = ia[i * 256 + j]; 
+            }  
         byte[] ba = nbt.getByteArray("Alphas");
         if (ba.length == 1536)
             for (int i = 0; i < 6; i++) {
                 for (int j = 0; j < 256; j++)
-                    this.alphas[i][j] = ba[i * 256 + j] + 128;
-            }
+                    this.alphas[i][j] = ba[i * 256 + j] + 128; 
+            }  
         byte[] ba2 = nbt.getByteArray("HasColor");
         if (ba2.length == 6)
             for (int i = 0; i < 6; i++)
-                this.hasColor[i] = (ba2[i] == 1);
+                this.hasColor[i] = (ba2[i] == 1);  
     }
 
     public NBTTagCompound writeToNBT(NBTTagCompound nbt) {
@@ -39,25 +39,25 @@ public class TileEntityPaint extends TileEntityCustom {
         int[] ia = new int[1536];
         for (int i = 0; i < 6; i++) {
             for (int m = 0; m < 256; m++)
-                ia[i * 256 + m] = this.colors[i][m];
-        }
+                ia[i * 256 + m] = this.colors[i][m]; 
+        } 
         nbt.setIntArray("Colors", ia);
         byte[] ba = new byte[1536];
         for (int j = 0; j < 6; j++) {
             for (int m = 0; m < 256; m++)
-                ba[j * 256 + m] = (byte)(this.alphas[j][m] - 128);
-        }
+                ba[j * 256 + m] = (byte)(this.alphas[j][m] - 128); 
+        } 
         nbt.setByteArray("Alphas", ba);
         byte[] ba2 = new byte[6];
         for (int k = 0; k < 6; k++)
-            ba2[k] = (byte)(this.hasColor[k] ? 1 : 0);
+            ba2[k] = (byte)(this.hasColor[k] ? 1 : 0); 
         nbt.setByteArray("HasColor", ba2);
         return nbt;
     }
 
     public void setColor(int color, int alpha, int p1, int p2, int dir) {
         if (p1 < 0 || p1 >= 16 || p2 < 0 || p2 >= 16)
-            return;
+            return; 
         int index = p1 * 16 + p2;
         int c0 = this.colors[dir][index];
         int a0 = this.alphas[dir][index];
@@ -69,7 +69,7 @@ public class TileEntityPaint extends TileEntityCustom {
 
     public void clearColor(int p1, int p2, int dir) {
         if (p1 < 0 || p1 >= 16 || p2 < 0 || p2 >= 16)
-            return;
+            return; 
         int index = p1 * 16 + p2;
         this.colors[dir][index] = 0;
         this.alphas[dir][index] = 0;
@@ -99,16 +99,16 @@ public class TileEntityPaint extends TileEntityCustom {
                             this.hasColor[i] = true;
                             flag = true;
                             break;
-                        }
-                    }
-                }
-            }
+                        } 
+                    } 
+                } 
+            } 
             if (flag) {
                 sendPacket();
             } else {
                 this.world.setBlockToAir(getPos());
-            }
-        }
+            } 
+        } 
     }
 
     @SideOnly(Side.CLIENT)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityPipe.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityPipe.java
index f70ea2a..d3d50c6 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityPipe.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityPipe.java
@@ -16,7 +16,7 @@ public class TileEntityPipe extends TileEntityOrnament {
         super.readFromNBT(nbt);
         this.connection = nbt.getByteArray("connection");
         if (this.connection.length < 6)
-            this.connection = new byte[6];
+            this.connection = new byte[6]; 
         searchConnection();
     }
 
@@ -34,7 +34,7 @@ public class TileEntityPipe extends TileEntityOrnament {
 
     public void searchConnection() {
         if (getWorld() == null)
-            return;
+            return; 
         for (int i = 0; i < 6; i++) {
             int x0 = getPos().getX() + BlockUtil.facing[i][0];
             int y0 = getPos().getY() + BlockUtil.facing[i][1];
@@ -49,8 +49,8 @@ public class TileEntityPipe extends TileEntityOrnament {
                 this.connection[i] = 1;
             } else {
                 this.connection[i] = 0;
-            }
-        }
+            } 
+        } 
     }
 
     public boolean isConnected(byte side) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityRailroadSign.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityRailroadSign.java
index 6b232f7..0672cb4 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityRailroadSign.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityRailroadSign.java
@@ -19,7 +19,7 @@ public class TileEntityRailroadSign extends TileEntityPlaceable implements IReso
         super.readFromNBT(nbt);
         this.state.readFromNBT(nbt.getCompoundTag("State"));
         if (this.state.version < 1)
-            getResourceState().setResourceName(nbt.getString("textureName"));
+            getResourceState().setResourceName(nbt.getString("textureName")); 
     }
 
     public NBTTagCompound writeToNBT(NBTTagCompound nbt) {
@@ -38,7 +38,7 @@ public class TileEntityRailroadSign extends TileEntityPlaceable implements IReso
             sendPacket();
             markDirty();
             BlockUtil.markBlockForUpdate(getWorld(), getPos());
-        }
+        } 
     }
 
     public int[] getSelectorPos() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityScaffold.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityScaffold.java
index 0dda4f5..3cf0b86 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityScaffold.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityScaffold.java
@@ -41,7 +41,7 @@ public class TileEntityScaffold extends TileEntityOrnament {
             Vec3 vec = getVec(speed);
             vec = vec.rotateAroundY(180.0F - getDir() * 90.0F);
             return vec;
-        }
+        } 
         return Vec3.ZERO;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntitySignBoard.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntitySignBoard.java
index d495a5c..2ecfba6 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntitySignBoard.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntitySignBoard.java
@@ -29,7 +29,7 @@ public class TileEntitySignBoard extends TileEntityCustom implements IResourceSe
         super.readFromNBT(nbt);
         this.state.readFromNBT(nbt.getCompoundTag("State"));
         if (this.state.version < 1)
-            getResourceState().setResourceName(nbt.getString("name"));
+            getResourceState().setResourceName(nbt.getString("name")); 
         this.direction = nbt.getByte("dir");
     }
 
@@ -45,15 +45,15 @@ public class TileEntitySignBoard extends TileEntityCustom implements IResourceSe
         if (this.world.isRemote) {
             this.counter++;
             if (this.counter >= (set.getConfig()).frame * (set.getConfig()).animationCycle)
-                this.counter = 0;
-        }
+                this.counter = 0; 
+        } 
         boolean b = (this.world.getRedstonePowerFromNeighbors(getPos()) > 0);
         if (this.isGettingPower ^ b) {
             this.isGettingPower = b;
             this.world.checkLight(getPos());
         } else if ((set.getConfig()).lightValue == -16) {
             this.world.checkLight(getPos());
-        }
+        } 
     }
 
     public void updateResourceState() {
@@ -61,10 +61,10 @@ public class TileEntitySignBoard extends TileEntityCustom implements IResourceSe
             markDirty();
             sendPacket();
             if (this.world != null)
-                BlockUtil.markBlockForUpdate(getWorld(), getPos());
+                BlockUtil.markBlockForUpdate(getWorld(), getPos()); 
         } else {
             this.counter = 0;
-        }
+        } 
     }
 
     public int[] getSelectorPos() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntitySlot.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntitySlot.java
index 51983a9..3306a7c 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntitySlot.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntitySlot.java
@@ -11,9 +11,9 @@ public class TileEntitySlot extends TileEntity implements ITickable {
     public void update() {
         this.count++;
         if (this.count > 4)
-            this.count = 0;
+            this.count = 0; 
         if (this.count == 0 && this.world.isBlockPowered(getPos()))
             if (!this.world.isRemote)
-                ((BlockSlot)RTMBlock.slot).inhaleLiquid(this.world, getPos().getX(), getPos().getY(), getPos().getZ());
+                ((BlockSlot)RTMBlock.slot).inhaleLiquid(this.world, getPos().getX(), getPos().getY(), getPos().getZ());  
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityTrainWorkBench.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityTrainWorkBench.java
index 0c96ebb..725d04d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityTrainWorkBench.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityTrainWorkBench.java
@@ -33,8 +33,8 @@ public class TileEntityTrainWorkBench extends TileEntityCustom implements ITicka
             NBTTagCompound nbt1 = nbttaglist.getCompoundTagAt(i);
             int j = nbt1.getByte("Slot") & 0xFF;
             if (j >= 0 && j < this.craftSlots.length)
-                this.craftSlots[j] = new ItemStack(nbt1);
-        }
+                this.craftSlots[j] = new ItemStack(nbt1); 
+        } 
     }
 
     public NBTTagCompound writeToNBT(NBTTagCompound nbt) {
@@ -46,8 +46,8 @@ public class TileEntityTrainWorkBench extends TileEntityCustom implements ITicka
                 nbt1.setByte("Slot", (byte)i);
                 this.craftSlots[i].writeToNBT(nbt1);
                 tagList.appendTag((NBTBase)nbt1);
-            }
-        }
+            } 
+        } 
         nbt.setTag("Items", (NBTBase)tagList);
         return nbt;
     }
@@ -59,23 +59,23 @@ public class TileEntityTrainWorkBench extends TileEntityCustom implements ITicka
             } else {
                 this.craftingTime = 0;
                 this.isCrafting = false;
-            }
+            }  
     }
 
     public void readItemsFromTile(IInventory inventory, IInventory inv2) {
         int i;
         for (i = 0; i < 25; i++)
-            inventory.setInventorySlotContents(i, this.craftSlots[i]);
+            inventory.setInventorySlotContents(i, this.craftSlots[i]); 
         for (i = 25; i < 30; i++)
-            inv2.setInventorySlotContents(i - 25, this.craftSlots[i]);
+            inv2.setInventorySlotContents(i - 25, this.craftSlots[i]); 
     }
 
     public void writeItemsToTile(IInventory inventory, IInventory inv2) {
         int i;
         for (i = 0; i < this.craftSlots.length; i++)
-            this.craftSlots[i] = inventory.getStackInSlot(i);
+            this.craftSlots[i] = inventory.getStackInSlot(i); 
         for (i = 25; i < 30; i++)
-            this.craftSlots[i] = inv2.getStackInSlot(i - 25);
+            this.craftSlots[i] = inv2.getStackInSlot(i - 25); 
         sendPacket();
     }
 
@@ -95,7 +95,7 @@ public class TileEntityTrainWorkBench extends TileEntityCustom implements ITicka
         if (sendPacket) {
             String s = "StartCrafting";
             RTMCore.NETWORK_WRAPPER.sendToServer((IMessage)new PacketNotice((byte)0, s, (TileEntity)this));
-        }
+        } 
     }
 
     public boolean isCrafting() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityTurnstile.java b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityTurnstile.java
index 64b8ae2..9783844 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityTurnstile.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tileentity/TileEntityTurnstile.java
@@ -21,7 +21,7 @@ public class TileEntityTurnstile extends TileEntityMachineBase {
     public void update() {
         super.update();
         if (this.count > 0)
-            this.count--;
+            this.count--; 
     }
 
     public boolean canThrough() {
@@ -31,7 +31,7 @@ public class TileEntityTurnstile extends TileEntityMachineBase {
     public void setCount(int par1) {
         this.count = par1;
         if (!this.world.isRemote)
-            sendPacket();
+            sendPacket(); 
     }
 
     protected ResourceType getSubType() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tt/SignboardText.java b/src/api/rtm/jp/ngt/rtm/block/tt/SignboardText.java
index 9f7c9a5..de26bda 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tt/SignboardText.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tt/SignboardText.java
@@ -92,9 +92,9 @@ public class SignboardText {
         if (this.ttMode) {
             int idx = this.timeTable.getMatchTrainIndex(this.ttTrack) + this.ttOffset;
             if (idx >= this.texts.length)
-                idx = this.texts.length - 1;
+                idx = this.texts.length - 1; 
             return this.texts[idx];
-        }
+        } 
         return this.texts[this.index];
     }
 
@@ -121,18 +121,18 @@ public class SignboardText {
                     s = this.timeTable.timeTable.trainName[i];
                 } else {
                     s = this.timeTable.getData(i, col);
-                }
+                } 
                 this.texts[i] = FontImage.create(s, pFont, pStyle, pColor, 48, isClient);
-            }
+            } 
             this.texts[this.texts.length - 1] = FontImage.create(" ", pFont, pStyle, pColor, 48, isClient);
         } else if (this.animeType == AnimeType.SWITCH) {
             String[] sa = pText.split("\\|");
             this.texts = new FontImage[sa.length];
             for (int i = 0; i < sa.length; i++)
-                this.texts[i] = FontImage.create(sa[i], pFont, pStyle, pColor, 48, isClient);
+                this.texts[i] = FontImage.create(sa[i], pFont, pStyle, pColor, 48, isClient); 
         } else {
             this.texts = new FontImage[] { FontImage.create(pText, pFont, pStyle, pColor, 48, isClient) };
-        }
+        } 
         this.rawText = pText;
         this.index = 0;
     }
@@ -164,25 +164,25 @@ public class SignboardText {
             if (difSec >= this.animeSpeed) {
                 drawFlag = false;
                 if (difSec >= this.animeSpeed * 2.0F)
-                    this.prevTime = time;
-            }
+                    this.prevTime = time; 
+            } 
         } else {
             if (this.animeType == AnimeType.SWITCH)
                 if (difSec >= this.animeSpeed) {
                     this.index = (this.index + 1) % this.texts.length;
                     this.prevTime = time;
-                }
+                }  
             int tw = (int)(48.0F * this.width / this.size);
             maxU = tw / getText().getWidth();
             if (maxU > 1.0F) {
                 maxU = 1.0F;
                 w2 = this.size * getText().getWidth() / getText().getHeight();
-            }
-        }
+            } 
+        } 
         float h = this.size * scale;
         float w = w2 * scale;
         if (drawFlag)
-            getText().render(x, y, z, w, h, minU, 0.0F, maxU, 1.0F);
+            getText().render(x, y, z, w, h, minU, 0.0F, maxU, 1.0F); 
     }
 
     public enum AnimeType {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tt/StationTimeTable.java b/src/api/rtm/jp/ngt/rtm/block/tt/StationTimeTable.java
index f7718a4..63e851c 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tt/StationTimeTable.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tt/StationTimeTable.java
@@ -25,14 +25,14 @@ public class StationTimeTable {
         } else {
             int mcTime = 0;
             if (!NGTUtil.isServer())
-                mcTime = (int)((NGTUtil.getClientWorld().getWorldTime() + 6000L) % 24000L);
+                mcTime = (int)((NGTUtil.getClientWorld().getWorldTime() + 6000L) % 24000L); 
             time = mcTime * 86400 / 24000;
-        }
+        } 
         for (int i = 0; i < (this.timeTable.ttData[this.rowIndex]).length; i++) {
             TimeTable.TTEntry entry = this.timeTable.ttData[this.rowIndex][i];
             if (time <= entry.departureTime && (track < 0 || track == entry.trackNum))
-                return i;
-        }
+                return i; 
+        } 
         return getSize();
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tt/TimeTable.java b/src/api/rtm/jp/ngt/rtm/block/tt/TimeTable.java
index d328f8c..20d0f2d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tt/TimeTable.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tt/TimeTable.java
@@ -48,7 +48,7 @@ public class TimeTable {
                         if (section != null) {
                             currentSection = section;
                             sectionCount = 0;
-                        }
+                        } 
                     } else if (currentSection == TTSection.Config) {
                         if (firstStr.startsWith("name")) {
                             this.name = parseString(firstStr);
@@ -56,7 +56,7 @@ public class TimeTable {
                             this.description = parseString(firstStr);
                         } else if (firstStr.startsWith("useRealTime")) {
                             this.useRealTime = Boolean.valueOf(parseString(firstStr)).booleanValue();
-                        }
+                        } 
                     } else if (currentSection == TTSection.Color) {
                         String[] sa2 = firstStr.split("=");
                         String key = sa2[0];
@@ -67,30 +67,30 @@ public class TimeTable {
                             for (int i = 1; i < sa.length; i++) {
                                 this.trainAxis.put(sa[i], Integer.valueOf(i - 1));
                                 TimeTableManager.INSTANCE.addTTAndTrain(sa[i], this);
-                            }
+                            } 
                         } else if (sectionCount == 2) {
                             this.trainName = new String[sa.length - 1];
                             for (int i = 1; i < sa.length; i++)
-                                this.trainName[i - 1] = sa[i];
+                                this.trainName[i - 1] = sa[i]; 
                         } else {
                             int row = sectionCount - 3;
                             this.stationAxis.put(sa[0], Integer.valueOf(row));
                             List<String> list = new ArrayList<>();
                             idListTemp.add(list);
                             for (int i = 1; i < sa.length; i++)
-                                list.add(sa[i]);
-                        }
+                                list.add(sa[i]); 
+                        } 
                     } else if (currentSection == TTSection.Entry) {
                         if (sectionCount == 1) {
                             for (String s : sa)
-                                this.colNames.add(s);
+                                this.colNames.add(s); 
                         } else {
                             entryMapTemp.put(sa[0], new TTEntry(sa));
-                        }
-                    }
+                        } 
+                    }  
                 sectionCount++;
-            }
-        }
+            } 
+        } 
         convertData(idListTemp, entryMapTemp);
     }
 
@@ -100,8 +100,8 @@ public class TimeTable {
             List<String> list = ids.get(i);
             this.ttData[i] = new TTEntry[list.size()];
             for (int j = 0; j < list.size(); j++)
-                this.ttData[i][j] = entries.get(list.get(j));
-        }
+                this.ttData[i][j] = entries.get(list.get(j)); 
+        } 
     }
 
     private String parseString(String str) {
@@ -138,8 +138,8 @@ public class TimeTable {
         public static TTSection get(String str) {
             for (TTSection type : values()) {
                 if (str.contains(type.toString()))
-                    return type;
-            }
+                    return type; 
+            } 
             return null;
         }
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tt/TimeTableManager.java b/src/api/rtm/jp/ngt/rtm/block/tt/TimeTableManager.java
index f5d8c73..f6ba198 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tt/TimeTableManager.java
+++ b/src/api/rtm/jp/ngt/rtm/block/tt/TimeTableManager.java
@@ -21,15 +21,15 @@ public class TimeTableManager {
     private final Map<String, TimeTable> trainToTT = new HashMap<>();
 
     public void load() {
-        List<File> fileList = NGTFileLoader.findFile(file ->
+        List<File> fileList = NGTFileLoader.findFile(file -> 
                 (file.getName().startsWith("tt_") && file.getName().endsWith(".csv")));
         for (File file : fileList) {
             try {
                 loadTT(file);
             } catch (IOException e) {
                 throw new ModelFormatException(String.format("[TTM] Can't load TT : %s", new Object[] { file.getAbsolutePath() }), e);
-            }
-        }
+            } 
+        } 
     }
 
     private void loadTT(File file) throws IOException {
@@ -41,7 +41,7 @@ public class TimeTableManager {
 
     public TimeTable getTimeTable(String name) {
         if (this.ttEntries.containsKey(name))
-            return this.ttEntries.get(name);
+            return this.ttEntries.get(name); 
         return this.ttEntries.get("tt_sample.csv");
     }
 
@@ -51,7 +51,7 @@ public class TimeTableManager {
 
     public TimeTable getTimeTableByTrainName(String name) {
         if (this.trainToTT.containsKey(name))
-            return this.trainToTT.get(name);
+            return this.trainToTT.get(name); 
         return this.ttEntries.get("tt_sample.csv");
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/CommandMCtrl.java b/src/api/rtm/jp/ngt/rtm/command/CommandMCtrl.java
index d4720ab..4f2da03 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/CommandMCtrl.java
+++ b/src/api/rtm/jp/ngt/rtm/command/CommandMCtrl.java
@@ -26,19 +26,19 @@ public class CommandMCtrl extends CommandBase {
         if (args.length == 0 || "help".equals(args[0])) {
             help(sender);
             return;
-        }
+        } 
         if (args.length < 3) {
             NGTLog.sendChatMessage(sender, "Invalid command.", new Object[0]);
             return;
-        }
+        } 
         ModelCtrl ctrl = ModelCtrl.getCommand(args[1]);
         List list = getTargets(sender, args[0], ctrl);
         if (list.isEmpty()) {
             NGTLog.sendChatMessage(sender, "Target not found.", new Object[0]);
             return;
-        }
+        } 
         for (Object obj : list)
-            ctrl.executor.exec(obj, sender, args[1], args[2]);
+            ctrl.executor.exec(obj, sender, args[1], args[2]); 
     }
 
     private List getTargets(ICommandSender player, String filter, ModelCtrl ctrl) {
@@ -50,26 +50,26 @@ public class CommandMCtrl extends CommandBase {
                 if (filter.equals("@a")) {
                     list.add(entity);
                     continue;
-                }
+                } 
                 if (filter.equals("@n")) {
                     double d1 = entity.getDistanceSq(player.getPosition());
                     if (d1 < distanceSq) {
                         list.clear();
                         list.add(entity);
-                    }
+                    } 
                     continue;
-                }
+                } 
                 if (filter.startsWith("@r")) {
                     int range = Integer.valueOf(filter.replace("@r:", "")).intValue();
                     double d1 = entity.getDistanceSq(player.getPosition());
                     if (d1 <= (range * range))
-                        list.add(entity);
+                        list.add(entity); 
                     continue;
-                }
+                } 
                 if (filter.equals(entity.getName()))
-                    list.add(entity);
-            }
-        }
+                    list.add(entity); 
+            } 
+        } 
         return list;
     }
 
@@ -77,7 +77,7 @@ public class CommandMCtrl extends CommandBase {
         NGTLog.sendChatMessage(player, "Target filter -> @a...all, @n...nearest, @r:00...range, or name", new Object[0]);
         for (ModelCtrl mc : ModelCtrl.values()) {
             if (!mc.discription.isEmpty())
-                NGTLog.sendChatMessage(player, mc.discription, new Object[0]);
-        }
+                NGTLog.sendChatMessage(player, mc.discription, new Object[0]); 
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/CommandNPC.java b/src/api/rtm/jp/ngt/rtm/command/CommandNPC.java
index f7d218f..aab6468 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/CommandNPC.java
+++ b/src/api/rtm/jp/ngt/rtm/command/CommandNPC.java
@@ -22,7 +22,7 @@ public class CommandNPC extends CommandBase {
         } catch (PlayerNotFoundException e) {
             e.printStackTrace();
             return;
-        }
+        } 
         if (args.length == 2);
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/CommandRTM.java b/src/api/rtm/jp/ngt/rtm/command/CommandRTM.java
index b012649..6249c4e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/CommandRTM.java
+++ b/src/api/rtm/jp/ngt/rtm/command/CommandRTM.java
@@ -29,7 +29,7 @@ public class CommandRTM extends CommandBase {
         } catch (PlayerNotFoundException e) {
             e.printStackTrace();
             return;
-        }
+        } 
         if (args.length > 0) {
             if (args[0].equals("delAllTrain")) {
                 int count = 0;
@@ -41,17 +41,17 @@ public class CommandRTM extends CommandBase {
                         count++;
                     } else if (object instanceof EntityBogie) {
                         entity = (EntityBogie)object;
-                    }
+                    } 
                     if (entity != null && !entity.isDead)
-                        entity.setDead();
-                }
+                        entity.setDead(); 
+                } 
                 NGTLog.sendChatMessage((ICommandSender)entityPlayerMP, "Delete " + count + "trains.", new Object[0]);
             } else if (!args[0].equals("twitter_tag")) {
                 if (args[0].equals("dismount"))
-                    entityPlayerMP.dismountRidingEntity();
-            }
+                    entityPlayerMP.dismountRidingEntity(); 
+            } 
             return;
-        }
+        } 
         NGTLog.sendChatMessage(sender, "/rtm delAllTrain : Delete all train", new Object[0]);
         NGTLog.sendChatMessage(sender, "/rtm dismount : Dismount player from vehicle", new Object[0]);
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/CommandTRec.java b/src/api/rtm/jp/ngt/rtm/command/CommandTRec.java
index ced469a..b6716f9 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/CommandTRec.java
+++ b/src/api/rtm/jp/ngt/rtm/command/CommandTRec.java
@@ -30,7 +30,7 @@ public class CommandTRec extends CommandBase {
         } catch (PlayerNotFoundException e) {
             e.printStackTrace();
             return;
-        }
+        } 
         RTMCore.NETWORK_WRAPPER.sendTo((IMessage)new PacketNotice((byte)1, "TRec"), player);
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/ModelCtrl.java b/src/api/rtm/jp/ngt/rtm/command/ModelCtrl.java
index 8b96477..2731efb 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/ModelCtrl.java
+++ b/src/api/rtm/jp/ngt/rtm/command/ModelCtrl.java
@@ -12,43 +12,25 @@ import jp.ngt.rtm.modelpack.modelset.ModelSetFirearm;
 import net.minecraft.command.ICommandSender;
 
 public enum ModelCtrl {
-    NO_FUNC(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    FIRE(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    V_ADD_PITCH(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    V_ADD_YAW(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    V_MOV_DIST(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    VEHICLE_STATE(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    DATA_MAP(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    DIR(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    NOTCH(s -> false, obj -> false, (target, player, order, value) -> false, "");
-
-    public final String discription;
-
-    public final CommandExecutor executor;
-
-    public final TargetFilter filter;
-
-    public final CommandMatcher matcher;
-
-    static {
-        NOTCH = new ModelCtrl("NOTCH", 0, s -> s.equals("notch"), obj -> obj instanceof EntityTrainBase, (target, player, order, value) -> {
+    //@formatter:off
+        NOTCH(s -> s.equals("notch"), obj -> obj instanceof EntityTrainBase, (target, player, order, value) -> {
                     int notch = Integer.valueOf(value).intValue();
                     return ((EntityTrainBase)target).setNotch(notch);
-                }"mctrl <train> notch <-8 ~ 5>");
-        DIR = new ModelCtrl("DIR", 1, s -> s.equals("dir"), obj -> obj instanceof EntityTrainBase, (target, player, order, value) -> {
+                }, "mctrl <train> notch <-8 ~ 5>"),
+        DIR(s -> s.equals("dir"), obj -> obj instanceof EntityTrainBase, (target, player, order, value) -> {
                     int dir = Integer.valueOf(value).intValue();
                     ((EntityTrainBase)target).setTrainDirection(dir);
                     return true;
-                }"mctrl <train> dir <0 or 1>");
-        DATA_MAP = new ModelCtrl("DATA_MAP", 2, s -> s.startsWith("dm:"), obj -> obj instanceof IResourceSelector, (target, player, order, value) -> {
+                }, "mctrl <train> dir <0 or 1>"),
+        DATA_MAP(s -> s.startsWith("dm:"), obj -> obj instanceof IResourceSelector, (target, player, order, value) -> {
                     String dataName = order.replace("dm:", "");
                     if (!((IResourceSelector)target).getResourceState().getDataMap().set(dataName, value, 3)) {
                         NGTLog.sendChatMessage(player, "[" + dataName + "] is not key.", new Object[0]);
                         return false;
                     }
                     return true;
-                }"mctrl <?> dm:<data name> <(type)value>");
-        VEHICLE_STATE = new ModelCtrl("VEHICLE_STATE", 3, s -> s.startsWith("state:"), obj -> obj instanceof EntityVehicleBase, (target, player, order, value) -> {
+                }, "mctrl <?> dm:<data name> <(type)value>"),
+        VEHICLE_STATE(s -> s.startsWith("state:"), obj -> obj instanceof EntityVehicleBase, (target, player, order, value) -> {
                     String dataName = order.replace("state:", "");
                     try {
                         TrainState state = TrainState.valueOf(value);
@@ -60,14 +42,14 @@ public enum ModelCtrl {
                         NGTLog.sendChatMessage(player, "Illegal argument.", new Object[0]);
                         return false;
                     }
-                }"mctrl <vehicle> state:<data name> <value>");
-        V_MOV_DIST = new ModelCtrl("V_MOV_DIST", 4, s -> s.equals("move"), obj -> obj instanceof EntityVehicle, (target, player, order, value) -> {
+                }, "mctrl <vehicle> state:<data name> <value>"),
+        V_MOV_DIST(s -> s.equals("move"), obj -> obj instanceof EntityVehicle, (target, player, order, value) -> {
                     EntityVehicle vehicle = (EntityVehicle)target;
                     double dist = Double.valueOf(value).doubleValue();
                     vehicle.controller.setMoveDistance(vehicle, dist);
                     return true;
-                }"mctrl <vehicle> move <distance>");
-        V_ADD_YAW = new ModelCtrl("V_ADD_YAW", 5, s -> s.equals("addYaw"), obj -> (obj instanceof EntityVehicle || obj instanceof EntityArtillery), (target, player, order, value) -> {
+                }, "mctrl <vehicle> move <distance>"),
+        V_ADD_YAW(s -> s.equals("addYaw"), obj -> (obj instanceof EntityVehicle || obj instanceof EntityArtillery), (target, player, order, value) -> {
                     if (target instanceof EntityArtillery) {
                         EntityArtillery firearm = (EntityArtillery)target;
                         float yaw = Float.valueOf(value).floatValue();
@@ -78,23 +60,33 @@ public enum ModelCtrl {
                         vehicle.controller.addYaw(vehicle, yaw);
                     }
                     return true;
-                }"mctrl <vehicle or artillery> addYaw <value>");
-        V_ADD_PITCH = new ModelCtrl("V_ADD_PITCH", 6, s -> s.equals("addPitch"), obj -> (obj instanceof EntityVehicle || obj instanceof EntityArtillery), (target, player, order, value) -> {
+                }, "mctrl <vehicle or artillery> addYaw <value>"),
+        V_ADD_PITCH(s -> s.equals("addPitch"), obj -> (obj instanceof EntityVehicle || obj instanceof EntityArtillery), (target, player, order, value) -> {
                     if (target instanceof EntityArtillery) {
                         EntityArtillery firearm = (EntityArtillery)target;
                         float yaw = Float.valueOf(value).floatValue();
                         firearm.controller.addPitch(firearm, -yaw);
                     }
                     return true;
-                }"mctrl <artillery> addPitch <value>");
-        FIRE = new ModelCtrl("FIRE", 7, s -> s.equals("fire"), obj -> obj instanceof EntityArtillery, (target, player, order, value) -> {
+                }, "mctrl <artillery> addPitch <value>"),
+        FIRE(s -> s.equals("fire"), obj -> obj instanceof EntityArtillery, (target, player, order, value) -> {
                     EntityArtillery firearm = (EntityArtillery)target;
                     ItemAmmunition.BulletType type = ItemAmmunition.BulletType.getBulletType((((ModelSetFirearm)firearm.getResourceState().getResourceSet()).getConfig()).ammoType);
                     int count = Integer.valueOf(value).intValue();
                     firearm.fire(null, type, count);
                     return true;
-                }"mctrl <artillery> fire <number of bullet>");
-    }
+                }, "mctrl <artillery> fire <number of bullet>"),
+    //@formatter:on
+
+    NO_FUNC(s -> false, obj -> false, (target, player, order, value) -> false, "");
+
+    public final String discription;
+
+    public final CommandExecutor executor;
+
+    public final TargetFilter filter;
+
+    public final CommandMatcher matcher;
 
     ModelCtrl(CommandMatcher par1, TargetFilter par2, CommandExecutor par3, String par4) {
         this.matcher = par1;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockConnector.java b/src/api/rtm/jp/ngt/rtm/electric/BlockConnector.java
index 1ab936c..6525638 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockConnector.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/BlockConnector.java
@@ -62,7 +62,7 @@ public class BlockConnector extends BlockElectricalWiring {
             case 5:
                 minX = 0.0F;
                 break;
-        }
+        } 
         return new AxisAlignedBB(minX, minY, minZ, maxX, maxY, maxZ);
     }
 
@@ -70,7 +70,7 @@ public class BlockConnector extends BlockElectricalWiring {
         if (!world.isRemote) {
             int meta = BlockUtil.getMetadata((IBlockAccess)world, pos);
             spawnAsEntity(world, pos, getItem(meta));
-        }
+        } 
     }
 
     protected ItemStack getItem(int damage) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockElectricalWiring.java b/src/api/rtm/jp/ngt/rtm/electric/BlockElectricalWiring.java
index 5e07c81..bafbef2 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockElectricalWiring.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/BlockElectricalWiring.java
@@ -14,7 +14,7 @@ public abstract class BlockElectricalWiring extends BlockContainerCustomWithMeta
 
     public boolean onBlockActivated(BlockArgHolder holder, float hitX, float hitY, float hitZ) {
         if ((holder.getWorld()).isRemote)
-            return true;
+            return true; 
         TileEntityElectricalWiring tile = (TileEntityElectricalWiring)holder.getWorld().getTileEntity(holder.getBlockPos());
         tile.onRightClick(holder.getPlayer());
         return true;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockSignal.java b/src/api/rtm/jp/ngt/rtm/electric/BlockSignal.java
index 4f3cc20..39e8e9a 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockSignal.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/BlockSignal.java
@@ -26,7 +26,7 @@ public class BlockSignal extends BlockContainerCustomWithMeta implements IBlockC
             int y = holder.getBlockPos().getY();
             int z = holder.getBlockPos().getZ();
             holder.getPlayer().openGui(RTMCore.instance, RTMCore.guiIdSelectTileEntityModel, holder.getWorld(), x, y, z);
-        }
+        } 
         return true;
     }
 
@@ -37,8 +37,8 @@ public class BlockSignal extends BlockContainerCustomWithMeta implements IBlockC
             TileEntitySignal tile = (TileEntitySignal)world.getTileEntity(pos);
             tile.setOrigBlock();
             if (!(holder.getPlayer()).capabilities.isCreativeMode)
-                dropBlockAsItemWithChance(world, pos, null, 0.0F, 0);
-        }
+                dropBlockAsItemWithChance(world, pos, null, 0.0F, 0); 
+        } 
         return true;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockSignalConverter.java b/src/api/rtm/jp/ngt/rtm/electric/BlockSignalConverter.java
index 5a52a75..3460baa 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockSignalConverter.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/BlockSignalConverter.java
@@ -50,9 +50,9 @@ public class BlockSignalConverter extends BlockContainerCustomWithMeta implement
         int z = pos.getZ();
         int meta = BlockUtil.getMetadata((IBlockAccess)world, pos);
         if (meta == SignalConverterType.Increment.id || meta == SignalConverterType.Decrement.id)
-            return true;
+            return true; 
         if (world.isRemote)
-            holder.getPlayer().openGui(RTMCore.instance, RTMCore.guiIdSignalConverter, world, x, y, z);
+            holder.getPlayer().openGui(RTMCore.instance, RTMCore.guiIdSignalConverter, world, x, y, z); 
         return true;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockSpeaker.java b/src/api/rtm/jp/ngt/rtm/electric/BlockSpeaker.java
index aefb251..0b6cf05 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockSpeaker.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/BlockSpeaker.java
@@ -36,7 +36,7 @@ public class BlockSpeaker extends BlockMachineBase implements IBlockConnective {
             super.onBlockActivated(holder, hitX, hitY, hitZ);
         } else if (world.isRemote) {
             holder.getPlayer().openGui(RTMCore.instance, RTMCore.guiIdSpeaker, world, x, y, z);
-        }
+        } 
         return true;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockTicketVendor.java b/src/api/rtm/jp/ngt/rtm/electric/BlockTicketVendor.java
index 2b3b449..84020a4 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockTicketVendor.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/BlockTicketVendor.java
@@ -35,13 +35,13 @@ public class BlockTicketVendor extends BlockMachineBase {
             int y = pos.getY();
             int z = pos.getZ();
             player.openGui(RTMCore.instance, RTMCore.guiIdTicketVendor, world, x, y, z);
-        }
+        } 
         return true;
     }
 
     public void dropBlockAsItemWithChance(World world, BlockPos pos, IBlockState state, float chance, int fortune) {
         if (!world.isRemote)
-            spawnAsEntity(world, pos, new ItemStack(RTMItem.installedObject, 1, ItemInstalledObject.IstlObjType.TICKET_VENDOR.id));
+            spawnAsEntity(world, pos, new ItemStack(RTMItem.installedObject, 1, ItemInstalledObject.IstlObjType.TICKET_VENDOR.id)); 
     }
 
     public ItemStack getPickBlock(IBlockState state, RayTraceResult target, World world, BlockPos pos, EntityPlayer player) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/Connection.java b/src/api/rtm/jp/ngt/rtm/electric/Connection.java
index dc8eff1..d5de667 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/Connection.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/Connection.java
@@ -40,7 +40,7 @@ public class Connection {
         this.z = z2;
         this.type = type2;
         if (par6 != null)
-            this.state.readFromNBT(par6.writeToNBT());
+            this.state.readFromNBT(par6.writeToNBT()); 
     }
 
     public static List<Connection> readListFromNBT(NBTTagCompound nbt) {
@@ -51,7 +51,7 @@ public class Connection {
             Connection connection = new Connection();
             connection.readFromNBT(nbt0);
             list.add(connection);
-        }
+        } 
         return list;
     }
 
@@ -59,7 +59,7 @@ public class Connection {
         this.state.readFromNBT(nbt.getCompoundTag("State"));
         this.isRoot = nbt.getBoolean("IsRoot");
         if (!nbt.hasKey("IsRoot"))
-            this.isRoot = true;
+            this.isRoot = true; 
         this.x = nbt.getInteger("x");
         this.y = nbt.getInteger("y");
         this.z = nbt.getInteger("z");
@@ -82,9 +82,9 @@ public class Connection {
                         name = "SimpleCatenary";
                         typeId = 50;
                         break;
-                }
+                }  
             this.state.setResourceName(name);
-        }
+        } 
         this.type = ConnectionType.getType(typeId);
     }
 
@@ -103,7 +103,7 @@ public class Connection {
             NBTTagCompound nbt0 = new NBTTagCompound();
             connection.writeToNBT(nbt0);
             tagList.appendTag((NBTBase)nbt0);
-        }
+        } 
         nbt.setTag("connections", (NBTBase)tagList);
     }
 
@@ -114,17 +114,17 @@ public class Connection {
     public TileEntityElectricalWiring getElectricalWiring(World world) {
         if (this.type == ConnectionType.WIRE || this.type == ConnectionType.TO_ENTITY) {
             if (this.connectedObject != null && this.connectedObject instanceof TileEntityElectricalWiring)
-                return (TileEntityElectricalWiring)this.connectedObject;
+                return (TileEntityElectricalWiring)this.connectedObject; 
             if (this.type == ConnectionType.TO_ENTITY) {
                 this.connectedObject = TileEntityElectricalWiring.getWireEntity(world, this.x, this.y, this.z);
                 return (TileEntityElectricalWiring)this.connectedObject;
-            }
+            } 
             TileEntity te = BlockUtil.getTileEntity((IBlockAccess)world, this.x, this.y, this.z);
             if (te instanceof TileEntityElectricalWiring) {
                 this.connectedObject = te;
                 return (TileEntityElectricalWiring)this.connectedObject;
-            }
-        }
+            } 
+        } 
         return null;
     }
 
@@ -132,50 +132,50 @@ public class Connection {
         if (this.type == ConnectionType.DIRECT) {
             TileEntity te = BlockUtil.getTileEntity((IBlockAccess)world, this.x, this.y, this.z);
             if (te instanceof IProvideElectricity)
-                return (IProvideElectricity)te;
-        }
+                return (IProvideElectricity)te; 
+        } 
         return null;
     }
 
     public EntityPlayer getPlayer(World world) {
         if (this.type == ConnectionType.TO_PLAYER)
             if (isAvailable(world))
-                return (EntityPlayer)this.connectedObject;
+                return (EntityPlayer)this.connectedObject;  
         return null;
     }
 
     public boolean isAvailable(World world) {
         if (this.type == ConnectionType.DIRECT)
-            return true;
+            return true; 
         if (this.type == ConnectionType.TO_PLAYER) {
             if (this.connectedObject instanceof EntityPlayer)
-                return (TileEntityElectricalWiring.getWireType((EntityPlayer)this.connectedObject) != null);
+                return (TileEntityElectricalWiring.getWireType((EntityPlayer)this.connectedObject) != null); 
             Entity entity = world.getEntityByID(this.x);
             if (entity instanceof EntityPlayer) {
                 this.connectedObject = entity;
                 return true;
-            }
+            } 
             return false;
-        }
+        } 
         if (this.connectedObject == null)
-            getElectricalWiring(world);
+            getElectricalWiring(world); 
         if (this.connectedObject instanceof TileEntityDummyEW) {
             TileEntityDummyEW tile = (TileEntityDummyEW)this.connectedObject;
             if (tile.entityEW == null || tile.entityEW.isDead)
-                return false;
+                return false; 
         } else if (this.connectedObject instanceof TileEntityElectricalWiring) {
             return !((TileEntityElectricalWiring)this.connectedObject).isInvalid();
-        }
+        } 
         return (this.connectedObject != null);
     }
 
     public boolean equals(Object obj) {
         if (this == obj)
-            return true;
+            return true; 
         if (obj instanceof Connection) {
             Connection con = (Connection)obj;
             return (this.type == con.type && this.x == con.x && this.y == con.y && this.z == con.z);
-        }
+        } 
         return false;
     }
 
@@ -202,8 +202,8 @@ public class Connection {
         public static ConnectionType getType(int par1) {
             for (ConnectionType type : values()) {
                 if (type.id == par1)
-                    return type;
-            }
+                    return type; 
+            } 
             return NONE;
         }
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/RenderElectricalWiring.java b/src/api/rtm/jp/ngt/rtm/electric/RenderElectricalWiring.java
index e7b1c2e..6d776c2 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/RenderElectricalWiring.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/RenderElectricalWiring.java
@@ -59,7 +59,7 @@ public class RenderElectricalWiring extends TileEntitySpecialRenderer<TileEntity
                 GL11.glRotatef(90.0F, 0.0F, 1.0F, 0.0F);
                 GL11.glRotatef(90.0F, 1.0F, 0.0F, 0.0F);
                 break;
-        }
+        } 
         modelSet.modelObj.render(tileEntity, cfg, pass, par8);
         GL11.glPopMatrix();
     }
@@ -67,27 +67,27 @@ public class RenderElectricalWiring extends TileEntitySpecialRenderer<TileEntity
     protected void renderAllWire(TileEntityConnectorBase tileEntity, double par2, double par4, double par6, float par8, int pass) {
         Vec3 vec = tileEntity.getWirePos();
         if (vec == null)
-            return;
+            return; 
         GL11.glPushMatrix();
         GL11.glTranslatef((float)(par2 + 0.5D + vec.getX()), (float)(par4 + 0.5D + vec.getY()), (float)(par6 + 0.5D + vec.getZ()));
         for (Connection connection : tileEntity.getConnnectionList()) {
             if (connection.type.isVisible && connection.isRoot)
-                renderWire(tileEntity, connection, par8, pass);
-        }
+                renderWire(tileEntity, connection, par8, pass); 
+        } 
         GL11.glPopMatrix();
     }
 
     private void renderWire(TileEntityConnectorBase tileEntity, Connection connection, float par8, int pass) {
         ModelSetWire modelSet = connection.getResourceState().getResourceSet();
         if (modelSet.isDummy())
-            return;
+            return; 
         if ((modelSet.getConfig()).doCulling) {
             GL11.glEnable(2884);
         } else {
             GL11.glDisable(2884);
-        }
+        } 
         if ((modelSet.getConfig()).smoothing)
-            GL11.glShadeModel(7425);
+            GL11.glShadeModel(7425); 
         Vec3 vec = getConnectedTarget(tileEntity, connection, par8);
         WirePartsRenderer renderer = (WirePartsRenderer)modelSet.modelObj.renderer;
         if (pass == 0) {
@@ -99,16 +99,16 @@ public class RenderElectricalWiring extends TileEntitySpecialRenderer<TileEntity
                 renderer.renderWire(tileEntity, connection, vec, par8, RenderPass.LIGHT.id);
                 GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
                 GLHelper.enableLighting();
-            }
+            } 
             if (modelSet.modelObj.alphaBlend) {
                 GL11.glEnable(3042);
                 GL11.glBlendFunc(770, 771);
                 renderer.renderWire(tileEntity, connection, vec, par8, RenderPass.TRANSPARENT.id);
                 GL11.glDisable(3042);
-            }
-        }
+            } 
+        } 
         if ((modelSet.getConfig()).smoothing)
-            GL11.glShadeModel(7424);
+            GL11.glShadeModel(7424); 
         GL11.glEnable(2884);
     }
 
@@ -145,11 +145,11 @@ public class RenderElectricalWiring extends TileEntitySpecialRenderer<TileEntity
                     x0 = entity.prevPosX + (entity.posX - entity.prevPosX) * par8 - d9 * 0.35D - d7 * 0.85D;
                     y0 = entity.prevPosY + d6 + (entity.posY - entity.prevPosY) * par8 - 0.45D;
                     z0 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * par8 - d7 * 0.35D + d9 * 0.85D;
-                }
+                } 
                 x = (float)(x0 - thisX);
                 y = (float)(y0 - thisY);
                 z = (float)(z0 - thisZ);
-            }
+            } 
         } else {
             TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)getWorld(), connection.x, connection.y, connection.z);
             if (tile instanceof TileEntityConnectorBase) {
@@ -158,9 +158,9 @@ public class RenderElectricalWiring extends TileEntitySpecialRenderer<TileEntity
                     x = connection.x + 0.5F + (float)posTarget.getX() - thisX;
                     y = connection.y + 0.5F + (float)posTarget.getY() - thisY;
                     z = connection.z + 0.5F + (float)posTarget.getZ() - thisZ;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         return PooledVec3.create(x, y, z);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/RenderSignal.java b/src/api/rtm/jp/ngt/rtm/electric/RenderSignal.java
index 5df2e80..11c561a 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/RenderSignal.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/RenderSignal.java
@@ -29,7 +29,7 @@ public class RenderSignal extends TileEntitySpecialRenderer<TileEntitySignal> {
         GL11.glRotatef(dir, 0.0F, 1.0F, 0.0F);
         ModelSetSignal modelSet = tileEntity.getResourceState().getResourceSet();
         if (modelSet != null && !modelSet.isDummy())
-            modelSet.modelObj.render(tileEntity, modelSet.getConfig(), pass, partialTicks);
+            modelSet.modelObj.render(tileEntity, modelSet.getConfig(), pass, partialTicks); 
         GL11.glPopMatrix();
         renderBaseBlock(tileEntity, pass, partialTicks);
         renderBaseTileEntity(tileEntity, par2, par4, par6, pass, dir);
@@ -50,7 +50,7 @@ public class RenderSignal extends TileEntitySpecialRenderer<TileEntitySignal> {
     private void renderBaseTileEntity(TileEntitySignal signal, double x, double y, double z, int pass, float partialTicks) {
         TileEntity tile = signal.getOrigTileEntity();
         if (tile == null)
-            return;
+            return; 
         tile.setWorld(signal.getWorld());
         TileEntitySpecialRenderer renderer = TileEntityRendererDispatcher.instance.getRenderer(tile);
         if (tile.shouldRenderInPass(pass) && renderer != null)
@@ -63,7 +63,7 @@ public class RenderSignal extends TileEntitySpecialRenderer<TileEntitySignal> {
                 CrashReportCategory category = report.makeCategory("TileEntity Details");
                 tile.addInfoToCrashReport(category);
                 throw new ReportedException(report);
-            }
+            }  
     }
 
     public void render(TileEntitySignal tileEntity, double par2, double par4, double par6, float par8, int par9, float alpha) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/SignalConverterType.java b/src/api/rtm/jp/ngt/rtm/electric/SignalConverterType.java
index 09cb9e7..a087032 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/SignalConverterType.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/SignalConverterType.java
@@ -15,7 +15,7 @@ public enum SignalConverterType {
 
     public static SignalConverterType getType(int p1) {
         if (p1 < 0 || p1 > (values()).length)
-            return RSIn;
+            return RSIn; 
         return values()[p1];
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/SignalLevel.java b/src/api/rtm/jp/ngt/rtm/electric/SignalLevel.java
index a5b4367..4508994 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/SignalLevel.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/SignalLevel.java
@@ -23,17 +23,17 @@ public enum SignalLevel {
     public static SignalLevel getSignal(int par1) {
         for (SignalLevel signal : values()) {
             if (signal.level == par1)
-                return signal;
-        }
+                return signal; 
+        } 
         return STOP;
     }
 
     public static float getSpeed(int par1, float par2) {
         SignalLevel signal = getSignal(par1);
         if (par2 > signal.speedUpperLimit)
-            return signal.speedUpperLimit;
+            return signal.speedUpperLimit; 
         if (par2 < signal.speedLowerLimit)
-            return signal.speedLowerLimit;
+            return signal.speedLowerLimit; 
         return par2;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntityConnector.java b/src/api/rtm/jp/ngt/rtm/electric/TileEntityConnector.java
index a917a6b..8736939 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntityConnector.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/TileEntityConnector.java
@@ -7,45 +7,45 @@ public abstract class TileEntityConnector extends TileEntityConnectorBase {
 
     public void onGetElectricity(int x, int y, int z, int level, int counter) {
         if (getSubType() == RTMResource.CONNECTOR_INPUT)
-            super.onGetElectricity(x, y, z, level, counter);
+            super.onGetElectricity(x, y, z, level, counter); 
     }
 
     protected void sendElectricity(Connection connection, int level, int counter) {
         if (getSubType() == RTMResource.CONNECTOR_INPUT && connection.type == Connection.ConnectionType.DIRECT) {
             IProvideElectricity provider = connection.getIProvideElectricity(this.world);
             if (provider != null)
-                provider.setElectricity(getX(), getY(), getZ(), level);
+                provider.setElectricity(getX(), getY(), getZ(), level); 
         } else {
             super.sendElectricity(connection, level, counter);
-        }
+        } 
     }
 
     public void update() {
         super.update();
         if (!this.world.isRemote)
             if (getSubType() == RTMResource.CONNECTOR_OUTPUT)
-                checkSignalOutput();
+                checkSignalOutput();  
     }
 
     private void checkSignalOutput() {
         Connection connection = getBlockConnection();
         if (connection == null)
-            return;
+            return; 
         IProvideElectricity provider = connection.getIProvideElectricity(this.world);
         if (provider != null) {
             int level = provider.getElectricity();
             if (level != this.prevOutputSignal) {
                 sendElectricityToAll(level);
                 this.prevOutputSignal = level;
-            }
-        }
+            } 
+        } 
     }
 
     private Connection getBlockConnection() {
         for (Connection connection : this.connections) {
             if (connection.type == Connection.ConnectionType.DIRECT)
-                return connection;
-        }
+                return connection; 
+        } 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntityConnectorBase.java b/src/api/rtm/jp/ngt/rtm/electric/TileEntityConnectorBase.java
index 2647218..a66f997 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntityConnectorBase.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/TileEntityConnectorBase.java
@@ -43,7 +43,7 @@ public abstract class TileEntityConnectorBase extends TileEntityElectricalWiring
         if (!set.isDummy() && !set.getConfig().getName().equals(this.modelName)) {
             updateWirePos();
             this.modelName = set.getConfig().getName();
-        }
+        } 
     }
 
     public Vec3 getWirePos() {
@@ -73,7 +73,7 @@ public abstract class TileEntityConnectorBase extends TileEntityElectricalWiring
                 vec = vec.rotateAroundX(-90.0F);
                 vec = vec.rotateAroundY(90.0F);
                 break;
-        }
+        } 
         this.wirePos = vec;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntityDummyEW.java b/src/api/rtm/jp/ngt/rtm/electric/TileEntityDummyEW.java
index 5c5c376..a1358a1 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntityDummyEW.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/TileEntityDummyEW.java
@@ -14,7 +14,7 @@ public class TileEntityDummyEW extends TileEntityElectricalWiring {
     public void onGetElectricity(int x, int y, int z, int level, int counter) {
         super.onGetElectricity(x, y, z, level, counter);
         if (x != getX() || y != getY() || z != getZ())
-            this.entityEW.setElectricity(level);
+            this.entityEW.setElectricity(level); 
     }
 
     public void update() {
@@ -24,8 +24,8 @@ public class TileEntityDummyEW extends TileEntityElectricalWiring {
             if (level >= 0 && level != this.prevSignal) {
                 onGetElectricity(getX(), getY(), getZ(), level, 0);
                 this.prevSignal = level;
-            }
-        }
+            } 
+        } 
     }
 
     public boolean isBlockTile() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntityElectricalWiring.java b/src/api/rtm/jp/ngt/rtm/electric/TileEntityElectricalWiring.java
index 2e47ff1..7cb02e2 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntityElectricalWiring.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/TileEntityElectricalWiring.java
@@ -40,12 +40,12 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
         if (getWorld() != null && (getWorld()).isRemote) {
             for (Connection connection : this.connections) {
                 if (!prevConnections.contains(connection))
-                    WireManager.INSTANCE.addWire(this, connection);
+                    WireManager.INSTANCE.addWire(this, connection); 
                 prevConnections.remove(connection);
-            }
+            } 
             for (Connection connection : prevConnections)
-                WireManager.INSTANCE.removeWire(this, connection);
-        }
+                WireManager.INSTANCE.removeWire(this, connection); 
+        } 
     }
 
     public NBTTagCompound writeToNBT(NBTTagCompound nbt) {
@@ -55,7 +55,7 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
             nbt.setInteger("x", getX());
             nbt.setInteger("y", getY());
             nbt.setInteger("z", getZ());
-        }
+        } 
         Connection.writeListToNBT(nbt, this.connections);
         return nbt;
     }
@@ -63,8 +63,8 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
     protected Connection getConnection(int x, int y, int z) {
         for (Connection connection : this.connections) {
             if (connection.x == x && connection.y == y && connection.z == z)
-                return connection;
-        }
+                return connection; 
+        } 
         return null;
     }
 
@@ -80,9 +80,9 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
                 this.connections.remove(c0);
                 TileEntityElectricalWiring tile = getWireTileEntity(x, y, z, c0.type);
                 if (tile != null)
-                    tile.setConnectionFrom(getX(), getY(), getZ(), Connection.ConnectionType.NONE, (ResourceState)null);
+                    tile.setConnectionFrom(getX(), getY(), getZ(), Connection.ConnectionType.NONE, (ResourceState)null); 
                 flag = true;
-            }
+            } 
         } else if (type == Connection.ConnectionType.TO_PLAYER) {
             this.connections.add(new Connection(true, x, y, z, type, state));
             flag = true;
@@ -94,13 +94,13 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
                 if (type == Connection.ConnectionType.DIRECT || (tile != null && tile.setConnectionFrom(getX(), getY(), getZ(), type2, state))) {
                     this.connections.add(new Connection(true, x, y, z, type, state));
                     flag = true;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         if (!this.world.isRemote && flag) {
             markDirty();
             sendPacket();
-        }
+        } 
         return flag;
     }
 
@@ -109,7 +109,7 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
         if (!this.world.isRemote) {
             markDirty();
             sendPacket();
-        }
+        } 
         return true;
     }
 
@@ -117,33 +117,33 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
         Connection connection = getConnection(x, y, z);
         if (type == Connection.ConnectionType.NONE) {
             if (connection != null)
-                this.connections.remove(connection);
+                this.connections.remove(connection); 
         } else if (connection == null) {
             this.connections.add(new Connection(false, x, y, z, type, state));
-        }
+        } 
     }
 
     public void onGetElectricity(int x, int y, int z, int level, int counter) {
         if (level == 0) {
             if (this.prevSignal < 0)
-                this.prevSignal = 0;
+                this.prevSignal = 0; 
         } else if (level > 0) {
             if (level != this.prevSignal)
-                this.prevSignal = level;
-        }
+                this.prevSignal = level; 
+        } 
     }
 
     protected void sendElectricity(Connection connection, int level, int counter) {
         TileEntityElectricalWiring tile = connection.getElectricalWiring(this.world);
         if (tile != null)
-            tile.onGetElectricity(getX(), getY(), getZ(), level, ++counter);
+            tile.onGetElectricity(getX(), getY(), getZ(), level, ++counter); 
     }
 
     protected void sendElectricityToAll(int level) {
         for (Connection connection : this.connections) {
             if (connection.type != Connection.ConnectionType.NONE)
-                sendElectricity(connection, level, 0);
-        }
+                sendElectricity(connection, level, 0); 
+        } 
     }
 
     public void update() {
@@ -155,26 +155,26 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
                     double d2 = (getY() + random.nextFloat());
                     double d3 = (getZ() + random.nextFloat());
                     this.world.spawnParticle(EnumParticleTypes.REDSTONE, d1, d2, d3, 0.0D, 0.0D, 0.0D, new int[0]);
-                }
-            }
+                } 
+            } 
         } else {
             List<Connection> list = new ArrayList<>(this.connections);
             for (Connection connection : list) {
                 if (!connection.isAvailable(this.world) || connection.type == Connection.ConnectionType.NONE)
-                    setConnectionTo(connection.x, connection.y, connection.z, Connection.ConnectionType.NONE, (ResourceState)null);
-            }
+                    setConnectionTo(connection.x, connection.y, connection.z, Connection.ConnectionType.NONE, (ResourceState)null); 
+            } 
             if (this.prevSignal >= 0 && this.prevSignal != this.signal) {
                 this.signal = this.prevSignal;
                 sendElectricityToAll(this.signal);
-            }
+            } 
             this.prevSignal = -1;
-        }
+        } 
     }
 
     public static ResourceState getWireType(EntityPlayer player) {
         ItemStack itemStack = player.inventory.getCurrentItem();
         if (itemStack != null && itemStack.getItem() == RTMItem.itemWire)
-            return ((ItemWithModel)itemStack.getItem()).getModelState(itemStack);
+            return ((ItemWithModel)itemStack.getItem()).getModelState(itemStack); 
         return null;
     }
 
@@ -188,22 +188,22 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
             ResourceState wireType = getWireType(player);
             if (wireType == null) {
                 if (disconnection())
-                    return true;
+                    return true; 
                 this.isActivated = true;
                 flag = true;
             } else {
                 if (createConnection(player, wireType)) {
                     if (!player.capabilities.isCreativeMode)
-                        player.inventory.getCurrentItem().shrink(1);
+                        player.inventory.getCurrentItem().shrink(1); 
                     return true;
-                }
+                } 
                 this.isActivated = true;
                 setConnectionTo(player.getEntityId(), -1, 0, Connection.ConnectionType.TO_PLAYER, wireType);
                 flag = true;
-            }
-        }
+            } 
+        } 
         if (flag)
-            sendPacket();
+            sendPacket(); 
         return flag;
     }
 
@@ -215,8 +215,8 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
                 tile.isActivated = false;
                 setConnectionTo(tile.getX(), tile.getY(), tile.getZ(), Connection.ConnectionType.NONE, (ResourceState)null);
                 return true;
-            }
-        }
+            } 
+        } 
         return false;
     }
 
@@ -234,13 +234,13 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
                     flag = tile.setConnectionTo(getX(), getY(), getZ(), type, state);
                 } else {
                     flag = setConnectionTo(tile.getX(), tile.getY(), tile.getZ(), type, state);
-                }
+                } 
                 if (type != Connection.ConnectionType.NONE && flag) {
                     tile.setConnectionTo(player.getEntityId(), -1, 0, Connection.ConnectionType.NONE, (ResourceState)null);
                     return true;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         return false;
     }
 
@@ -255,16 +255,16 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
                 for (int k = 0; k < rangeD; k++) {
                     TileEntityElectricalWiring tile0 = getWireTileEntity(x - range + i, y - range + j, z - range + k, Connection.ConnectionType.NONE, false);
                     if ((i != range || j != range || k != range) && tile0 != null && tile0.isActivated)
-                        return tile0;
-                }
-            }
-        }
+                        return tile0; 
+                } 
+            } 
+        } 
         List<EntityElectricalWiring> list = this.world.getEntitiesWithinAABB(EntityElectricalWiring.class, new AxisAlignedBB((x - range), (y - range), (z - range), (x + range), (y + range), (z + range)));
         if (!list.isEmpty())
             for (EntityElectricalWiring entity : list) {
                 if (entity.tileEW.isActivated)
-                    return entity.tileEW;
-            }
+                    return entity.tileEW; 
+            }  
         return null;
     }
 
@@ -275,21 +275,21 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
     protected TileEntityElectricalWiring getWireTileEntity(int x, int y, int z, Connection.ConnectionType type, boolean par5) {
         if (par5) {
             if (type == Connection.ConnectionType.TO_ENTITY)
-                return getWireEntity(this.world, x, y, z);
+                return getWireEntity(this.world, x, y, z); 
             Connection connection = getConnection(x, y, z);
             if (connection != null && connection.getElectricalWiring(this.world) != null)
-                return connection.getElectricalWiring(this.world);
-        }
+                return connection.getElectricalWiring(this.world); 
+        } 
         TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)this.world, x, y, z);
         if (tile instanceof TileEntityElectricalWiring)
-            return (TileEntityElectricalWiring)tile;
+            return (TileEntityElectricalWiring)tile; 
         return null;
     }
 
     public static TileEntityElectricalWiring getWireEntity(World world, int x, int y, int z) {
         List<EntityElectricalWiring> list = world.getEntitiesWithinAABB(EntityElectricalWiring.class, new AxisAlignedBB(x, y, z, (x + 1), (y + 2), (z + 1)));
         if (!list.isEmpty())
-            return ((EntityElectricalWiring)list.get(0)).tileEW;
+            return ((EntityElectricalWiring)list.get(0)).tileEW; 
         return null;
     }
 
@@ -299,7 +299,7 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
 
     public void onBlockBreaked() {
         for (Connection connection : this.connections)
-            sendElectricity(connection, 0, 0);
+            sendElectricity(connection, 0, 0); 
     }
 
     public void sendPacket() {
@@ -309,7 +309,7 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
                 RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)new PacketWire(entity, this));
             } else {
                 RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)new PacketWire(this));
-            }
+            }  
     }
 
     public void setPos(int x, int y, int z, int prevX, int prevY, int prevZ) {
@@ -320,7 +320,7 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
             connection.x += difX;
             connection.y += difY;
             connection.z += difZ;
-        }
+        } 
         super.setPos(x, y, z, prevX, prevY, prevZ);
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntitySignal.java b/src/api/rtm/jp/ngt/rtm/electric/TileEntitySignal.java
index 4caa020..795c383 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntitySignal.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/TileEntitySignal.java
@@ -43,9 +43,9 @@ public class TileEntitySignal extends TileEntityPlaceable implements IProvideEle
         this.blockDirection = nbt.getInteger("blockDir");
         this.signalLevel = nbt.getInteger("Signal");
         if (this.world != null && this.world.isRemote)
-            BlockUtil.markBlockForUpdate(getWorld(), getPos());
+            BlockUtil.markBlockForUpdate(getWorld(), getPos()); 
         if (nbt.hasKey("BaseBlockData"))
-            this.origTileEntity = TileEntity.create(null, nbt.getCompoundTag("BaseBlockData"));
+            this.origTileEntity = TileEntity.create(null, nbt.getCompoundTag("BaseBlockData")); 
     }
 
     public NBTTagCompound writeToNBT(NBTTagCompound nbt) {
@@ -57,16 +57,16 @@ public class TileEntitySignal extends TileEntityPlaceable implements IProvideEle
             NBTTagCompound nbt2 = new NBTTagCompound();
             this.origTileEntity.writeToNBT(nbt2);
             nbt.setTag("BaseBlockData", (NBTBase)nbt2);
-        }
+        } 
         return nbt;
     }
 
     public void update() {
         this.tick++;
         if (this.tick == Integer.MAX_VALUE)
-            this.tick = 0;
+            this.tick = 0; 
         if (!(getWorld()).isRemote)
-            this.executer.execScript(this);
+            this.executer.execScript(this); 
     }
 
     public int getElectricity() {
@@ -77,11 +77,11 @@ public class TileEntitySignal extends TileEntityPlaceable implements IProvideEle
         if (!this.world.isRemote) {
             ModelSetSignal modelSet = getResourceState().getResourceSet();
             if (level > (modelSet.getConfig()).maxSignalLevel)
-                level = (modelSet.getConfig()).maxSignalLevel;
+                level = (modelSet.getConfig()).maxSignalLevel; 
             this.signalLevel = level;
             markDirty();
             sendPacket();
-        }
+        } 
     }
 
     public void setSignalProperty(String name, Block par1, int par2, EntityPlayer player, TileEntity tile) {
@@ -126,7 +126,7 @@ public class TileEntitySignal extends TileEntityPlaceable implements IProvideEle
             NBTTagCompound nbt = new NBTTagCompound();
             this.origTileEntity.writeToNBT(nbt);
             tile.readFromNBT(nbt);
-        }
+        } 
     }
 
     public boolean shouldRenderInPass(int pass) {
@@ -146,7 +146,7 @@ public class TileEntitySignal extends TileEntityPlaceable implements IProvideEle
         if (this.world == null || !this.world.isRemote) {
             markDirty();
             sendPacket();
-        }
+        } 
     }
 
     public int[] getSelectorPos() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntitySignalConverter.java b/src/api/rtm/jp/ngt/rtm/electric/TileEntitySignalConverter.java
index d1cee01..aac58bd 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntitySignalConverter.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/TileEntitySignalConverter.java
@@ -76,17 +76,17 @@ public abstract class TileEntitySignalConverter extends TileEntityCustom impleme
 
     public static TileEntitySignalConverter createTileEntity(int par1) {
         switch (SignalConverterType.getType(par1)) {
-            case EQUAL:
+            case RSIn:
                 return new TileEntitySC_RSIn();
-            case GREATER_EQUAL:
+            case RSOut:
                 return new TileEntitySC_RSOut();
-            case GREATER_THAN:
+            case Increment:
                 return new TileEntitySC_Increment();
-            case LESS_EQUAL:
+            case Decrement:
                 return new TileEntitySC_Decrement();
-            case LESS_THAN:
+            case Wireless:
                 return new TileEntitySC_Wireless();
-        }
+        } 
         return new TileEntitySC_RSIn();
     }
 
@@ -98,8 +98,8 @@ public abstract class TileEntitySignalConverter extends TileEntityCustom impleme
         public int getElectricity() {
             for (EnumFacing side : EnumFacing.values()) {
                 if (this.world.isSidePowered(getPos().offset(side), side))
-                    return this.signalOnTrue;
-            }
+                    return this.signalOnTrue; 
+            } 
             return this.signalOnFalse;
         }
 
@@ -136,11 +136,11 @@ public abstract class TileEntitySignalConverter extends TileEntityCustom impleme
                 case NOT_EQUAL:
                     i0 = (level != this.signalOnTrue) ? 1 : 0;
                     break;
-            }
+            } 
             if (i0 >= 0 && i0 != this.signal) {
                 this.signal = i0;
                 this.world.notifyNeighborsOfStateChange(getPos(), getBlockType(), true);
-            }
+            } 
         }
     }
 
@@ -188,14 +188,14 @@ public abstract class TileEntitySignalConverter extends TileEntityCustom impleme
             if (list == null) {
                 list = new ArrayList<>();
                 ADAPTER_MAP.put(Integer.valueOf(par1), list);
-            }
+            } 
             return list;
         }
 
         private void updateAntennaList() {
             List<TileEntitySC_Wireless> list = getList(this.prevChannel);
             if (list.contains(this))
-                list.remove(this);
+                list.remove(this); 
             List<TileEntitySC_Wireless> list2 = getList(getChannel());
             list2.add(this);
             this.prevChannel = getChannel();
@@ -204,19 +204,19 @@ public abstract class TileEntitySignalConverter extends TileEntityCustom impleme
         public void update() {
             super.update();
             if (!this.world.isRemote)
-                updateChunks();
+                updateChunks(); 
         }
 
         public void invalidate() {
             super.invalidate();
             if (!this.world.isRemote)
-                releaseTicket();
+                releaseTicket(); 
         }
 
         public void validate() {
             super.validate();
             if (!this.world.isRemote)
-                updateChunks();
+                updateChunks(); 
         }
 
         public int getChannel() {
@@ -230,7 +230,7 @@ public abstract class TileEntitySignalConverter extends TileEntityCustom impleme
         public void setSignalProp(int par1, int par2, TileEntitySignalConverter.ComparatorType par3) {
             super.setSignalProp(par1, par2, par3);
             if (this.world == null || !this.world.isRemote)
-                updateAntennaList();
+                updateAntennaList(); 
         }
 
         public int getRSOutput() {
@@ -244,7 +244,7 @@ public abstract class TileEntitySignalConverter extends TileEntityCustom impleme
         public void setElectricity(int x, int y, int z, int level) {
             List<TileEntitySC_Wireless> list = getList(getChannel());
             for (TileEntitySC_Wireless tile : list)
-                tile.setWirelessSignal(getPos().getX(), getPos().getY(), getPos().getZ(), level);
+                tile.setWirelessSignal(getPos().getX(), getPos().getY(), getPos().getZ(), level); 
         }
 
         private void setWirelessSignal(int x, int y, int z, int level) {
@@ -262,7 +262,7 @@ public abstract class TileEntitySignalConverter extends TileEntityCustom impleme
                 forceChunkLoading();
             } else {
                 releaseTicket();
-            }
+            } 
         }
 
         public boolean isChunkLoaderEnable() {
@@ -274,7 +274,7 @@ public abstract class TileEntitySignalConverter extends TileEntityCustom impleme
             if (this.ticket != null) {
                 ForgeChunkManager.releaseTicket(this.ticket);
                 this.ticket = null;
-            }
+            } 
         }
 
         private boolean requestTicket() {
@@ -286,14 +286,14 @@ public abstract class TileEntitySignalConverter extends TileEntityCustom impleme
                 RTMChunkManager.writeData(chunkTicket, (TileEntity)this);
                 setChunkTicket(chunkTicket);
                 return true;
-            }
+            } 
             NGTLog.debug("[RTM] Failed to get ticket (Chunk Loader)");
             return false;
         }
 
         public void setChunkTicket(ForgeChunkManager.Ticket par1) {
             if (this.ticket != par1)
-                ForgeChunkManager.releaseTicket(this.ticket);
+                ForgeChunkManager.releaseTicket(this.ticket); 
             this.ticket = par1;
             this.finishSetup = false;
         }
@@ -308,16 +308,16 @@ public abstract class TileEntitySignalConverter extends TileEntityCustom impleme
             if (!this.world.isRemote) {
                 if (this.ticket == null)
                     if (!requestTicket())
-                        return;
+                        return;  
                 if (!this.finishSetup) {
                     setupChunks(x, z);
                     this.finishSetup = true;
-                }
+                } 
                 for (ChunkPos chunk : this.loadedChunks)
-                    ForgeChunkManager.forceChunk(this.ticket, chunk);
+                    ForgeChunkManager.forceChunk(this.ticket, chunk); 
                 ChunkPos myChunk = new ChunkPos(x, z);
                 ForgeChunkManager.forceChunk(this.ticket, myChunk);
-            }
+            } 
         }
 
         private void setupChunks(int xChunk, int zChunk) {
@@ -346,8 +346,8 @@ public abstract class TileEntitySignalConverter extends TileEntityCustom impleme
         public static ComparatorType getType(int par1) {
             for (ComparatorType type : values()) {
                 if (type.id == par1)
-                    return type;
-            }
+                    return type; 
+            } 
             return EQUAL;
         }
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntitySpeaker.java b/src/api/rtm/jp/ngt/rtm/electric/TileEntitySpeaker.java
index b7adb89..0118f85 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntitySpeaker.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/TileEntitySpeaker.java
@@ -21,7 +21,7 @@ public class TileEntitySpeaker extends TileEntityMachineBase implements IProvide
             if (level > 0 && level <= 64) {
                 String sound = SpeakerSounds.getInstance(!this.world.isRemote).getSound(level);
                 if (sound != null && !sound.equals("null"))
-                    RTMCore.proxy.playSound((TileEntity)this, sound, 1.0F, 1.0F);
-            }
+                    RTMCore.proxy.playSound((TileEntity)this, sound, 1.0F, 1.0F); 
+            }  
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/WireManager.java b/src/api/rtm/jp/ngt/rtm/electric/WireManager.java
index 0a92ab4..b763f90 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/WireManager.java
+++ b/src/api/rtm/jp/ngt/rtm/electric/WireManager.java
@@ -60,16 +60,16 @@ public final class WireManager {
                         if (list == null) {
                             list = new ArrayList<>();
                             this.loadedWires.put(chunk, list);
-                        }
+                        } 
                         if (add) {
                             list.add(entry);
                         } else {
                             list.remove(entry);
-                        }
-                    }
-                }
-            }
-        }
+                        } 
+                    } 
+                } 
+            } 
+        } 
     }
 
     public double getWireY(double x, double y, double z) {
@@ -80,8 +80,8 @@ public final class WireManager {
                     int index = entry.lineXZ.getNearlestPoint(512, x, z);
                     double resY = entry.minY + (entry.maxY - entry.minY) * index / 512.0D;
                     return resY;
-                }
-            }
+                } 
+            }  
         return y;
     }
 
@@ -120,7 +120,7 @@ public final class WireManager {
             if (obj instanceof WireEntry) {
                 WireEntry entry = (WireEntry)obj;
                 return (this.minY == entry.minY && this.maxY == entry.maxY && this.lineXZ.equals(entry.lineXZ));
-            }
+            } 
             return false;
         }
 
@@ -148,7 +148,7 @@ public final class WireManager {
             if (obj instanceof WireChunk) {
                 WireChunk chunk = (WireChunk)obj;
                 return (this.chunkX == chunk.chunkX && this.chunkZ == chunk.chunkZ);
-            }
+            } 
             return false;
         }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityATC.java b/src/api/rtm/jp/ngt/rtm/entity/EntityATC.java
index d8546d5..000b5f3 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityATC.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/EntityATC.java
@@ -25,7 +25,7 @@ public class EntityATC extends EntityElectricalWiring {
 
     public boolean attackEntityFrom(DamageSource par1, float par2) {
         if (!this.world.isRemote)
-            setSignalToRail(0);
+            setSignalToRail(0); 
         return super.attackEntityFrom(par1, par2);
     }
 
@@ -39,8 +39,8 @@ public class EntityATC extends EntityElectricalWiring {
                 TileEntityLargeRailCore tile = ((TileEntityLargeRailBase)tile0).getRailCore();
                 tile.setSignal(signalLevel);
                 break;
-            }
-        }
+            } 
+        } 
     }
 
     public int getElectricity() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityBullet.java b/src/api/rtm/jp/ngt/rtm/entity/EntityBullet.java
index c564098..1c50d25 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityBullet.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/EntityBullet.java
@@ -67,7 +67,7 @@ public class EntityBullet extends EntityArrow {
         setBulletSize();
         if (world.isRemote) {
             setRenderDistanceWeight(10.0D);
-        }
+        } 
     }
 
     public EntityBullet(World world, Entity shooter, ItemAmmunition.BulletType type, double x, double y, double z, double mX, double mY, double mZ) {
@@ -111,7 +111,7 @@ public class EntityBullet extends EntityArrow {
             double d5 = d2 / distance;
             setLocationAndAngles(shooter.posX + d4, this.posY, shooter.posZ + d5, f2, f3);
             shoot(d0, d1, d2, speed, 1.0F);
-        }
+        } 
     }
 
     protected void entityInit() {
@@ -147,7 +147,7 @@ public class EntityBullet extends EntityArrow {
             setSize(0.5F, 0.5F);
         } else {
             setSize(0.05F, 0.05F);
-        }
+        } 
     }
 
     public void shoot(double par1, double par3, double par5, float par7, float par8) {
@@ -169,7 +169,7 @@ public class EntityBullet extends EntityArrow {
             this.shootingEntity.motionY -= this.motionY * recoilCoe;
             this.shootingEntity.motionZ -= this.motionZ * recoilCoe;
             this.shootingEntity.velocityChanged = true;
-        }
+        } 
     }
 
     @SideOnly(Side.CLIENT)
@@ -191,48 +191,48 @@ public class EntityBullet extends EntityArrow {
             this.prevRotationYaw = this.rotationYaw;
             setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
             this.ticksInGround = 0;
-        }
+        } 
     }
 
     public void onUpdate() {
         onEntityUpdate();
         if (this.world.isRemote)
-            updateClient();
+            updateClient(); 
         if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F) {
             float f = (float)NGTMath.firstSqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
             this.prevRotationYaw = this.rotationYaw = (float)NGTMath.toDegrees(Math.atan2(this.motionX, this.motionZ));
             this.prevRotationPitch = this.rotationPitch = (float)NGTMath.toDegrees(Math.atan2(this.motionY, f));
-        }
+        } 
         BlockPos pos = new BlockPos(this.tileX, this.tileY, this.tileZ);
         IBlockState state = this.world.getBlockState(pos);
         if (state.getMaterial() != Material.AIR) {
             AxisAlignedBB aabb = state.getCollisionBoundingBox((IBlockAccess)this.world, pos);
             if (aabb != null && aabb.contains(new Vec3d(this.posX, this.posY, this.posZ)))
-                this.inGround = true;
-        }
+                this.inGround = true; 
+        } 
         if (this.inGround) {
             if (state.getBlock() == this.landingBlock) {
                 this.ticksInGround++;
                 if (!this.world.isRemote && this.ticksInGround >= 400)
-                    setDead();
+                    setDead(); 
                 onLanding(this.tileX, this.tileY, this.tileZ);
             } else {
                 this.inGround = false;
                 this.ticksInGround = 0;
                 this.ticksInAir = 0;
-            }
+            } 
         } else {
             this.ticksInAir++;
             if (!this.world.isRemote && this.ticksInAir >= 1200)
-                setDead();
+                setDead(); 
             Vec3d vecPos = new Vec3d(this.posX, this.posY, this.posZ);
             Vec3d vec3 = new Vec3d(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
             RayTraceResult mop = this.world.rayTraceBlocks(vecPos, vec3, false, true, false);
             vec3 = new Vec3d(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
             if (mop != null)
-                vec3 = new Vec3d(mop.hitVec.x, mop.hitVec.y, mop.hitVec.z);
+                vec3 = new Vec3d(mop.hitVec.x, mop.hitVec.y, mop.hitVec.z); 
             Entity hitEntity = null;
-            List<Entity> list = this.world.getEntitiesWithinAABBExcludingEntity((Entity)this,
+            List<Entity> list = this.world.getEntitiesWithinAABBExcludingEntity((Entity)this, 
                     getEntityBoundingBox().offset(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
             if (!list.isEmpty()) {
                 Vec3d vecPos2 = new Vec3d(this.posX, this.posY, this.posZ);
@@ -240,7 +240,7 @@ public class EntityBullet extends EntityArrow {
                 for (Entity entity : list) {
                     boolean flag = true;
                     if (entity.equals(this.shootingEntity))
-                        flag = false;
+                        flag = false; 
                     if (entity.canBeCollidedWith() && flag) {
                         AxisAlignedBB aabb = entity.getEntityBoundingBox().expand(0.5D, 0.5D, 0.5D);
                         RayTraceResult mop1 = aabb.calculateIntercept(vecPos2, vec3);
@@ -249,13 +249,13 @@ public class EntityBullet extends EntityArrow {
                             if (d1 < d0 || d0 == 0.0D) {
                                 hitEntity = entity;
                                 d0 = d1;
-                            }
-                        }
-                    }
-                }
-            }
+                            } 
+                        } 
+                    } 
+                } 
+            } 
             if (hitEntity != null)
-                mop = new RayTraceResult(hitEntity);
+                mop = new RayTraceResult(hitEntity); 
             boolean hitBlock = false;
             if (mop != null)
                 if (mop.entityHit != null) {
@@ -268,8 +268,8 @@ public class EntityBullet extends EntityArrow {
                     this.landingBlock = state.getBlock();
                     this.inGround = true;
                     if (this.landingBlock != Blocks.AIR)
-                        this.landingBlock.onEntityCollision(this.world, pos, state, (Entity)this);
-                }
+                        this.landingBlock.onEntityCollision(this.world, pos, state, (Entity)this); 
+                }  
             if (hitBlock) {
                 this.posX = mop.hitVec.x;
                 this.posY = mop.hitVec.y;
@@ -278,7 +278,7 @@ public class EntityBullet extends EntityArrow {
                 this.posX += this.motionX;
                 this.posY += this.motionY;
                 this.posZ += this.motionZ;
-            }
+            } 
             float f2 = (float)NGTMath.firstSqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
             this.rotationYaw = (float)NGTMath.toDegrees(Math.atan2(this.motionX, this.motionZ));
             this.rotationPitch = (float)NGTMath.toDegrees(Math.atan2(this.motionY, f2));
@@ -291,9 +291,9 @@ public class EntityBullet extends EntityArrow {
                 for (int l = 0; l < 4; l++) {
                     double d4 = 0.25D;
                     this.world.spawnParticle(EnumParticleTypes.WATER_BUBBLE, this.posX - this.motionX * d4, this.posY - this.motionY * d4, this.posZ - this.motionZ * d4, this.motionX, this.motionY, this.motionZ, new int[0]);
-                }
+                } 
                 d3 = 0.9D;
-            }
+            } 
             ItemAmmunition.BulletType type = getBulletType();
             if (type == ItemAmmunition.BulletType.cannon_40cm || type == ItemAmmunition.BulletType.cannon_Atomic) {
                 this.motionX *= d3;
@@ -311,10 +311,10 @@ public class EntityBullet extends EntityArrow {
                 this.motionY *= d3;
                 this.motionZ *= d3;
                 this.motionY -= 0.001D;
-            }
+            } 
             setPosition(this.posX, this.posY, this.posZ);
             doBlockCollisions();
-        }
+        } 
     }
 
     @SideOnly(Side.CLIENT)
@@ -323,7 +323,7 @@ public class EntityBullet extends EntityArrow {
             Entity viewer = NGTUtilClient.getMinecraft().getRenderViewEntity();
             double range = NGTUtil.getChunkLoadDistance() - 32.0D;
             if (viewer != null && viewer.getDistanceSq((Entity)this) > range * range)
-                return;
+                return; 
             int count = 15;
             Random random = (getEntityWorld()).rand;
             for (int j = 0; j < count; j++) {
@@ -336,8 +336,8 @@ public class EntityBullet extends EntityArrow {
                 double vy = -this.motionY * (random.nextDouble() * 0.5D + 0.5D) * dece + random.nextGaussian() * vari;
                 double vz = -this.motionZ * (random.nextDouble() * 0.5D + 0.5D) * dece + random.nextGaussian() * vari;
                 getEntityWorld().spawnParticle(EnumParticleTypes.EXPLOSION_NORMAL, d0, d1, d2, vx, vy, vz, new int[0]);
-            }
-        }
+            } 
+        } 
     }
 
     protected boolean canTriggerWalking() {
@@ -348,9 +348,9 @@ public class EntityBullet extends EntityArrow {
         if (this.type == null) {
             byte type = ((Byte)getDataManager().get(AMMO_TYPE)).byteValue();
             if (type < 0)
-                return ItemAmmunition.BulletType.handgun_9mm;
+                return ItemAmmunition.BulletType.handgun_9mm; 
             this.type = ItemAmmunition.BulletType.getBulletType(type);
-        }
+        } 
         return this.type;
     }
 
@@ -371,16 +371,16 @@ public class EntityBullet extends EntityArrow {
 
     protected void onHitEntity(Entity entity) {
         if (entity.equals(this.shootingEntity))
-            return;
+            return; 
         float damage = (getBulletType()).damage;
         if (entity.attackEntityFrom(DamageSource.causeThrownDamage((Entity)this, this.shootingEntity), damage));
         if (!this.world.isRemote) {
             if (this.type == ItemAmmunition.BulletType.cannon_40cm || this.type == ItemAmmunition.BulletType.rocket) {
                 boolean doMobGriefing = this.world.getGameRules().getBoolean("mobGriefing");
                 this.world.newExplosion((Entity)this, entity.posX, entity.posY, entity.posZ, 12.0F, false, doMobGriefing);
-            }
+            } 
             setDead();
-        }
+        } 
     }
 
     protected void onLanding(int x, int y, int z) {
@@ -395,11 +395,11 @@ public class EntityBullet extends EntityArrow {
                 float hardness = state.getBlockHardness(this.world, pos);
                 if (block != Blocks.AIR && doMobGriefing) {
                     if (hardness >= 0.0F && hardness < 500.0F)
-                        this.world.setBlockToAir(pos);
+                        this.world.setBlockToAir(pos); 
                     this.world.newExplosion((Entity)this, this.posX, this.posY, this.posZ, 12.0F, false, doMobGriefing);
-                }
+                } 
                 setDead();
-            }
+            } 
         } else if (type == ItemAmmunition.BulletType.cannon_Atomic) {
             if (!this.world.isRemote) {
                 float hardness = state.getBlockHardness(this.world, pos);
@@ -407,7 +407,7 @@ public class EntityBullet extends EntityArrow {
                 BlockUtil.setBlock(getEntityWorld(), x, y, z, RTMBlock.effect, 0, 3);
                 getEntityWorld().playSound(this.posX, this.posY, this.posZ, SoundEvents.ENTITY_GENERIC_EXPLODE, SoundCategory.PLAYERS, 10.0F, 1.0F, false);
                 setDead();
-            }
+            } 
         } else if (this.landingBlock != null && getCanBreakBlock()) {
             if (!RTMCore.gunBreakBlock) {
                 BlockUtil.playBlockBreakSound(getEntityWorld(), pos, this.landingBlock, meta);
@@ -416,17 +416,17 @@ public class EntityBullet extends EntityArrow {
                 if (!this.world.isRemote) {
                     this.world.setBlockToAir(pos);
                     setDead();
-                }
+                } 
             } else if (this.landingBlock == Blocks.TNT) {
                 if (!this.world.isRemote) {
                     ((BlockTNT)this.landingBlock).explode(this.world, pos, block.getStateFromMeta(1), null);
                     this.world.setBlockToAir(pos);
                     setDead();
-                }
+                } 
             } else {
                 BlockUtil.playBlockBreakSound(getEntityWorld(), pos, this.landingBlock, meta);
-            }
-        }
+            } 
+        } 
         setCanBreakBlock(false);
     }
 
@@ -434,13 +434,13 @@ public class EntityBullet extends EntityArrow {
         Material mat = block.getMaterial();
         if (bullet == ItemAmmunition.BulletType.handgun_9mm) {
             if (mat == Material.LEAVES || mat == Material.PLANTS || mat == Material.VINE || mat == Material.CIRCUITS || mat == Material.CARPET || mat == Material.GLASS || mat == Material.REDSTONE_LIGHT || mat == Material.CORAL || mat == Material.SNOW || mat == Material.CRAFTED_SNOW || mat == Material.CACTUS || mat == Material.CAKE)
-                return doMobGriefing;
+                return doMobGriefing; 
         } else if (bullet == ItemAmmunition.BulletType.rifle_12_7mm) {
             if (block.getBlockHardness(this.world, new BlockPos(x, y, z)) < 5.0F && block.getBlock().getExplosionResistance((Entity)this) <= 6.0F)
-                return doMobGriefing;
+                return doMobGriefing; 
         } else if (mat == Material.WOOD || mat == Material.LEAVES || mat == Material.PLANTS || mat == Material.VINE || mat == Material.CIRCUITS || mat == Material.CARPET || mat == Material.GLASS || mat == Material.REDSTONE_LIGHT || mat == Material.CORAL || mat == Material.ICE || mat == Material.PACKED_ICE || mat == Material.SNOW || mat == Material.CRAFTED_SNOW || mat == Material.CACTUS || mat == Material.CAKE) {
             return doMobGriefing;
-        }
+        } 
         return false;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityElectricalWiring.java b/src/api/rtm/jp/ngt/rtm/entity/EntityElectricalWiring.java
index d54ec76..6c0407e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityElectricalWiring.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/EntityElectricalWiring.java
@@ -30,7 +30,7 @@ public abstract class EntityElectricalWiring extends EntityInstalledObject {
     public void onUpdate() {
         super.onUpdate();
         if (this.tileEW.getPos().getY() <= 0)
-            setTilePos();
+            setTilePos(); 
         this.tileEW.update();
     }
 
@@ -43,9 +43,9 @@ public abstract class EntityElectricalWiring extends EntityInstalledObject {
 
     public boolean processInitialInteract(EntityPlayer player, EnumHand hand) {
         if (this.world.isRemote)
-            return true;
+            return true; 
         if (this.tileEW.onRightClick(player))
-            return true;
+            return true; 
         return super.processInitialInteract(player, hand);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityInstalledObject.java b/src/api/rtm/jp/ngt/rtm/entity/EntityInstalledObject.java
index 82d96f5..04d42c6 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityInstalledObject.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/EntityInstalledObject.java
@@ -72,32 +72,32 @@ public abstract class EntityInstalledObject extends EntityCustom implements IRes
     public void onUpdate() {
         super.onUpdate();
         if (!(getEntityWorld()).isRemote)
-            this.executer.execScript(this);
+            this.executer.execScript(this); 
     }
 
     public boolean processInitialInteract(EntityPlayer player, EnumHand hand) {
         if (player.isSneaking()) {
             if (this.world.isRemote)
-                player.openGui(RTMCore.instance, RTMCore.guiIdSelectEntityModel, player.world, getEntityId(), 0, 0);
+                player.openGui(RTMCore.instance, RTMCore.guiIdSelectEntityModel, player.world, getEntityId(), 0, 0); 
             return true;
-        }
+        } 
         return true;
     }
 
     public boolean attackEntityFrom(DamageSource par1, float par2) {
         if (isEntityInvulnerable(par1) || this.isDead)
-            return false;
+            return false; 
         if (par1.getTrueSource() instanceof EntityPlayer) {
             if (!this.world.isRemote) {
                 markVelocityChanged();
                 EntityPlayer entityplayer = (EntityPlayer)par1.getTrueSource();
                 if (!entityplayer.capabilities.isCreativeMode)
-                    dropItems();
+                    dropItems(); 
                 getEntityWorld().playSound(this.posX, this.posY, this.posZ, SoundEvents.BLOCK_STONE_BREAK, SoundCategory.BLOCKS, 1.0F, 1.0F, true);
                 setDead();
-            }
+            } 
             return true;
-        }
+        } 
         return false;
     }
 
@@ -119,7 +119,7 @@ public abstract class EntityInstalledObject extends EntityCustom implements IRes
 
     public void updateResourceState() {
         if (this.world == null || !this.world.isRemote)
-            PacketNBT.sendToClient((Entity)this);
+            PacketNBT.sendToClient((Entity)this); 
     }
 
     public int[] getSelectorPos() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityMMBoundingBox.java b/src/api/rtm/jp/ngt/rtm/entity/EntityMMBoundingBox.java
index 34085c5..75e8327 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityMMBoundingBox.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/EntityMMBoundingBox.java
@@ -74,18 +74,18 @@ public class EntityMMBoundingBox extends Entity {
 
     private AxisAlignedBB getAABB() {
         if (getDataManager() == null)
-            return new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
+            return new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D); 
         Rotations roF = (Rotations)getDataManager().get(AABB_F);
         Rotations roL = (Rotations)getDataManager().get(AABB_L);
         if (roF.getX() == -1.0F)
-            return new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
+            return new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D); 
         return new AxisAlignedBB(roF.getX(), roF.getY(), roF.getZ(), roL.getX(), roL.getY(), roL.getZ());
     }
 
     public void onUpdate() {
         if (!this.world.isRemote)
             if (this.movingMachine == null)
-                setDead();
+                setDead();  
     }
 
     private void applyCollisionToEntities(double dx, double dy, double dz) {
@@ -96,8 +96,8 @@ public class EntityMMBoundingBox extends Entity {
         for (int i = 0; i < list.size(); i++) {
             Entity entity = list.get(i);
             if (!(entity instanceof EntityMMBoundingBox))
-                moveEntity(entity, dx, dy, dz);
-        }
+                moveEntity(entity, dx, dy, dz); 
+        } 
     }
 
     private void moveEntity(Entity entity, double dx, double dy, double dz) {
@@ -110,18 +110,18 @@ public class EntityMMBoundingBox extends Entity {
                 if (inXAndZ(entity)) {
                     double y1 = myBB.maxY - entityBB.minY + dy;
                     if (y1 != 0.0D)
-                        dy += y1;
+                        dy += y1; 
                     entity.fallDistance = 0.0F;
                     entity.motionY = 0.0D;
                     entity.onGround = true;
                     flag = true;
-                }
+                } 
             } else if (inXOrZ(entity)) {
                 dy = 0.0D;
                 dx = myBB.calculateXOffset(entityBB, dx);
                 dz = myBB.calculateZOffset(entityBB, dz);
                 flag = true;
-            }
+            } 
             if (flag) {
                 double d0 = entityBB.minY + dy + entity.getYOffset();
                 if (this.world.isRemote) {
@@ -129,16 +129,16 @@ public class EntityMMBoundingBox extends Entity {
                 } else if (!(entity instanceof net.minecraft.entity.player.EntityPlayer)) {
                     entity.setPosition(entity.posX + dx, d0, entity.posZ + dz);
                     entity.velocityChanged = true;
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     private boolean inY(Entity entity, double moveY) {
         AxisAlignedBB entityBB = entity.getEntityBoundingBox();
         AxisAlignedBB myBB = getEntityBoundingBox();
         if (moveY > 0.0D)
-            return (entityBB.minY <= myBB.maxY && entityBB.maxY > myBB.minY);
+            return (entityBB.minY <= myBB.maxY && entityBB.maxY > myBB.minY); 
         return (entityBB.minY <= myBB.maxY - moveY && entityBB.maxY > myBB.minY);
     }
 
@@ -147,7 +147,7 @@ public class EntityMMBoundingBox extends Entity {
         AxisAlignedBB myBB = getEntityBoundingBox();
         double d0 = 0.21D;
         if (moveY > 0.0D)
-            return (entityBB.minY >= myBB.maxY - moveY - d0 && entityBB.minY <= myBB.maxY);
+            return (entityBB.minY >= myBB.maxY - moveY - d0 && entityBB.minY <= myBB.maxY); 
         return (entityBB.minY >= myBB.maxY - d0 && entityBB.minY <= myBB.maxY - moveY);
     }
 
@@ -204,8 +204,8 @@ public class EntityMMBoundingBox extends Entity {
                         case 1:
                             entity.moveMM(moveX, moveY, moveZ);
                             break;
-                    }
-            }
-        }
+                    }  
+            } 
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityMeltedMetalFX.java b/src/api/rtm/jp/ngt/rtm/entity/EntityMeltedMetalFX.java
index 7cb9c55..b70aa68 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityMeltedMetalFX.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/EntityMeltedMetalFX.java
@@ -26,13 +26,13 @@ public class EntityMeltedMetalFX extends Particle {
         this.prevPosY = this.posY;
         this.prevPosZ = this.posZ;
         if (this.particleAge++ >= this.particleMaxAge)
-            setExpired();
+            setExpired(); 
         this.motionY -= 0.05D;
         if (this.onGround) {
             this.motionY *= -(10.0D + Math.random() * 4.0D * (1.0F - this.particleAge / this.particleMaxAge));
             this.motionX += Math.random() * 0.08D - 0.04D;
             this.motionZ += Math.random() * 0.08D - 0.04D;
-        }
+        } 
         move(this.motionX, this.motionY, this.motionZ);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityTrainDetector.java b/src/api/rtm/jp/ngt/rtm/entity/EntityTrainDetector.java
index 3be4872..88f0aae 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityTrainDetector.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/EntityTrainDetector.java
@@ -43,9 +43,9 @@ public class EntityTrainDetector extends EntityElectricalWiring {
                 if (tile != null && tile instanceof TileEntityLargeRailBase) {
                     this.findTrain = ((TileEntityLargeRailBase)tile).isTrainOnRail();
                     break;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         super.onUpdate();
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/FirearmController.java b/src/api/rtm/jp/ngt/rtm/entity/FirearmController.java
index ff44313..bfc16dc 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/FirearmController.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/FirearmController.java
@@ -25,8 +25,8 @@ public class FirearmController {
             } else {
                 entity.setBarrelYaw(this.prevYaw + this.yawDif);
                 this.yawDif = 0.0F;
-            }
-        }
+            } 
+        } 
         if (this.pitchDif != 0.0F) {
             float dif = MathHelper.wrapDegrees(this.prevPitch + this.pitchDif - entity.getBarrelPitch());
             if (Math.abs(dif) > this.pitchSpeed) {
@@ -35,8 +35,8 @@ public class FirearmController {
             } else {
                 entity.setBarrelPitch(this.prevPitch + this.pitchDif);
                 this.pitchDif = 0.0F;
-            }
-        }
+            } 
+        } 
     }
 
     public void addYaw(EntityArtillery entity, float par1) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/RenderBullet.java b/src/api/rtm/jp/ngt/rtm/entity/RenderBullet.java
index 3bab73a..a27a0c8 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/RenderBullet.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/RenderBullet.java
@@ -68,7 +68,7 @@ public class RenderBullet extends Render<EntityBullet> {
                     GL11.glScalef(0.1F, 1.5F, 0.1F);
                 } else {
                     GL11.glScalef(0.05F, 0.75F, 0.05F);
-                }
+                } 
                 GLHelper.disableLighting();
                 GLHelper.setLightmapMaxBrightness();
                 GL11.glColor4f(1.0F, 1.0F, 0.25F, 1.0F);
@@ -82,17 +82,17 @@ public class RenderBullet extends Render<EntityBullet> {
                 bindTexture(TEX_CANNON);
             } else if (type == ItemAmmunition.BulletType.rocket) {
                 bindTexture(TEX_ROCKET);
-            }
+            } 
             if (type == ItemAmmunition.BulletType.rocket) {
                 this.rocket.renderAll(false);
             } else {
                 this.cannon.renderAll(false);
-            }
+            } 
             if (brightBullet) {
                 GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
                 GLHelper.enableLighting();
                 GL11.glEnable(3553);
-            }
+            } 
         } else if (pass == 1) {
             if (type == ItemAmmunition.BulletType.rocket) {
                 GL11.glEnable(3042);
@@ -100,8 +100,8 @@ public class RenderBullet extends Render<EntityBullet> {
                 GL11.glRotatef(270.0F, 0.0F, 1.0F, 0.0F);
                 NGTRenderer.renderFire(0.5F, 3.0F, 16755200, 25);
                 GL11.glDisable(3042);
-            }
-        }
+            } 
+        } 
         GL11.glDisable(32826);
         GL11.glPopMatrix();
     }
@@ -126,8 +126,8 @@ public class RenderBullet extends Render<EntityBullet> {
                 renderRazer(entity, x, y, z, size);
             } else {
                 renderMuzzleFlash(entity, x, y, z, firstPersonView);
-            }
-        }
+            } 
+        } 
     }
 
     private static boolean shouldRenderMuzzleFlash(ItemStack stack, int useCount) {
@@ -135,12 +135,12 @@ public class RenderBullet extends Render<EntityBullet> {
             ItemGun.GunType gunType = ((ItemGun)stack.getItem()).gunType;
             if (gunType == ItemGun.GunType.razer_gun) {
                 if (useCount > 0)
-                    return true;
+                    return true; 
             } else if (useCount % 2 > 0) {
                 if (gunType.rapidFire || useCount == gunType.useDuration - 1)
-                    return true;
-            }
-        }
+                    return true; 
+            } 
+        } 
         return false;
     }
 
@@ -198,11 +198,11 @@ public class RenderBullet extends Render<EntityBullet> {
             for (int j = 0; j < 128; j++) {
                 razerPart1.tessellateAll(tessellator, true);
                 tessellator.addTranslation(0.0F, 0.0F, -1.0F);
-            }
+            } 
             tessellator.resetTranslation();
             razerPart0.tessellateAll(tessellator, true);
             tessellator.draw();
-        }
+        } 
         GL11.glEnable(3553);
         GL11.glDepthMask(true);
         GL11.glDisable(3042);
@@ -221,7 +221,7 @@ public class RenderBullet extends Render<EntityBullet> {
             GL11.glTranslatef(0.0F, entity.getEyeHeight(), 0.0F);
             GL11.glRotatef(entity.rotationPitch, 1.0F, 0.0F, 0.0F);
             GL11.glTranslatef(-0.36F, -0.05F, 0.4F);
-        }
+        } 
     }
 
     @Deprecated
@@ -230,7 +230,7 @@ public class RenderBullet extends Render<EntityBullet> {
         RenderManager renMg = NGTUtilClient.getMinecraft().getRenderManager();
         float partialTicks = 0.0F;
         GlStateManager.rotate(-entity.rotationYaw, 0.0F, 1.0F, 0.0F);
-        GlStateManager.rotate(((renMg.options.thirdPersonView == 2) ? -1 : true) * -entity.rotationPitch, 1.0F, 0.0F, 0.0F);
+        GlStateManager.rotate(((renMg.options.thirdPersonView == 2) ? -1 : 1) * -entity.rotationPitch, 1.0F, 0.0F, 0.0F);
         int k = (entity.getPrimaryHand() == EnumHandSide.RIGHT) ? 1 : -1;
         float f7 = entity.getSwingProgress(partialTicks);
         float f8 = MathHelper.sin((float)NGTMath.firstSqrt(f7) * 3.1415927F);
@@ -254,7 +254,7 @@ public class RenderBullet extends Render<EntityBullet> {
             d5 = entity.prevPosY + entity.getEyeHeight() + (entity.posY - entity.prevPosY) * partialTicks - 0.45D;
             d6 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * partialTicks - d0 * d2 + d1 * 0.8D;
             d7 = entity.isSneaking() ? -0.1875D : 0.0D;
-        }
+        } 
         double d13 = entity.prevPosX + (entity.posX - entity.prevPosX) * partialTicks;
         double d8 = entity.prevPosY + (entity.posY - entity.prevPosY) * partialTicks + 0.25D;
         double d9 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * partialTicks;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/RenderEntityInstalledObject.java b/src/api/rtm/jp/ngt/rtm/entity/RenderEntityInstalledObject.java
index dac6761..c381ce7 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/RenderEntityInstalledObject.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/RenderEntityInstalledObject.java
@@ -27,7 +27,7 @@ public class RenderEntityInstalledObject extends Render<EntityInstalledObject> {
         if (cfg.followRailAngle) {
             GL11.glRotatef(entity.rotationPitch, 1.0F, 0.0F, 0.0F);
             GL11.glRotatef(entity.rotationRoll, 0.0F, 0.0F, 1.0F);
-        }
+        } 
         int pass = MinecraftForgeClient.getRenderPass();
         modelSet.modelObj.render(entity, cfg, pass, par9);
         GL11.glPopMatrix();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/ai/EntityAIDriveWithMacro.java b/src/api/rtm/jp/ngt/rtm/entity/ai/EntityAIDriveWithMacro.java
index 43b7170..ffa1a55 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/ai/EntityAIDriveWithMacro.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/ai/EntityAIDriveWithMacro.java
@@ -31,7 +31,7 @@ public class EntityAIDriveWithMacro extends EntityAIBase {
         if (!shouldExecute()) {
             this.executor.stop(this.motorman.world);
             return false;
-        }
+        } 
         return true;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/ai/EntityAIDrivingWithDiagram.java b/src/api/rtm/jp/ngt/rtm/entity/ai/EntityAIDrivingWithDiagram.java
index 2607773..c67364c 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/ai/EntityAIDrivingWithDiagram.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/ai/EntityAIDrivingWithDiagram.java
@@ -38,7 +38,7 @@ public class EntityAIDrivingWithDiagram extends EntityAIDrivingWithSignal {
 
     public boolean shouldExecute() {
         if (this.motorman.hasDiagram())
-            return super.shouldExecute();
+            return super.shouldExecute(); 
         return false;
     }
 
@@ -67,7 +67,7 @@ public class EntityAIDrivingWithDiagram extends EntityAIDrivingWithSignal {
             } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {}
             this.diagram.add(new TrainDiagram(t, com, pX, pY, pZ));
             NGTLog.debug("add diagram : " + s);
-        }
+        } 
         this.diagram.add(new TrainDiagram(0, "finish", 0, 0, 0));
     }
 
@@ -78,7 +78,7 @@ public class EntityAIDrivingWithDiagram extends EntityAIDrivingWithSignal {
     private void runTrain() {
         TrainDiagram td = this.diagram.get(0);
         if (td.command.equals("finish") || td.command.length() == 0)
-            return;
+            return; 
         int worldTime = (int)(this.motorman.world.getWorldTime() % 24000L);
         int signalLevel = this.train.getSignal();
         if (td.command.equals("start")) {
@@ -87,9 +87,9 @@ public class EntityAIDrivingWithDiagram extends EntityAIDrivingWithSignal {
                     this.train.setNotch(4);
                     this.diagram.remove(0);
                     NGTLog.debug("motorman start train");
-                }
+                }  
             return;
-        }
+        } 
         float distance = getDistanceTrain((Entity)this.train, td.pointX, td.pointZ);
         float margin = (td.time - worldTime);
         float prevSpeed = this.train.getSpeed();
@@ -97,7 +97,7 @@ public class EntityAIDrivingWithDiagram extends EntityAIDrivingWithSignal {
         int notch = 0;
         int notchS = 0;
         if (signalLevel > 0)
-            notchS = (EnumNotch.getNotchFromSignal(signalLevel)).id;
+            notchS = (EnumNotch.getNotchFromSignal(signalLevel)).id; 
         if (td.command.equals("set_speed")) {
             float speed = td.pointX / 72.0F;
             ac1 = (speed - prevSpeed) / margin;
@@ -109,12 +109,12 @@ public class EntityAIDrivingWithDiagram extends EntityAIDrivingWithSignal {
                 notch = (EnumNotch.getSuitableNotchFromSpeed(sp0)).id;
             } else if (ac1 < 0.0F) {
                 notch = (EnumNotch.getSuitableNotchFromAcceleration(ac1)).id;
-            }
+            } 
         } else if (td.command.equals("stop")) {
             if (distance <= 360.0F) {
                 ac1 = -prevSpeed / margin;
                 if (0.5F * prevSpeed * margin < distance)
-                    ac1 += 7.5E-4F;
+                    ac1 += 7.5E-4F; 
                 notch = (EnumNotch.getSuitableNotchFromAcceleration(ac1)).id;
             } else {
                 distance -= 360.0F;
@@ -125,23 +125,23 @@ public class EntityAIDrivingWithDiagram extends EntityAIDrivingWithSignal {
                         notch = EnumNotch.inertia.id;
                     } else {
                         notch = EnumNotch.accelerate_4.id;
-                    }
+                    } 
                 } else if (ac1 > EnumNotch.brake_1.acceleration) {
                     notch = EnumNotch.inertia.id;
                 } else {
                     notch = (EnumNotch.getSuitableNotchFromAcceleration(ac1)).id;
-                }
-            }
+                } 
+            } 
             if (worldTime >= td.time - 2 && worldTime <= td.time + 2) {
                 notch = -4;
                 NGTLog.debug("motorman stop train");
-            }
-        }
+            } 
+        } 
         if (signalLevel > 0)
-            notch = (notch <= notchS) ? notch : notchS;
+            notch = (notch <= notchS) ? notch : notchS; 
         this.train.setNotch(notch);
         if (worldTime >= td.time - 2 && worldTime <= td.time + 2)
-            this.diagram.remove(0);
+            this.diagram.remove(0); 
     }
 
     private float getDistanceTrain(Entity entity, double par1, double par2) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/ai/EntityAIDrivingWithSignal.java b/src/api/rtm/jp/ngt/rtm/entity/ai/EntityAIDrivingWithSignal.java
index 46d696f..d6c0f13 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/ai/EntityAIDrivingWithSignal.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/ai/EntityAIDrivingWithSignal.java
@@ -18,7 +18,7 @@ public class EntityAIDrivingWithSignal extends EntityAIBase {
 
     public boolean shouldExecute() {
         if (this.motorman.isRiding() && this.motorman.getRidingEntity() instanceof EntityTrainBase)
-            return true;
+            return true; 
         return false;
     }
 
@@ -43,13 +43,13 @@ public class EntityAIDrivingWithSignal extends EntityAIBase {
         if (gap > 0.0F) {
             for (EnumNotch notch : EnumNotch.values()) {
                 if (notch.max_speed >= par1)
-                    return notch;
-            }
+                    return notch; 
+            } 
         } else {
             if (gap == 0.0F)
-                return EnumNotch.inertia;
+                return EnumNotch.inertia; 
             return EnumNotch.brake_4;
-        }
+        } 
         return EnumNotch.inertia;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/ai/EntityAIRangedAttackWithItem.java b/src/api/rtm/jp/ngt/rtm/entity/ai/EntityAIRangedAttackWithItem.java
index 29b2da4..b505968 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/ai/EntityAIRangedAttackWithItem.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/ai/EntityAIRangedAttackWithItem.java
@@ -15,7 +15,7 @@ public class EntityAIRangedAttackWithItem extends EntityAIAttackRanged {
     public boolean shouldExecute() {
         ItemStack item = this.npc.getHeldItem();
         if (item != null && item.getItem() instanceof jp.ngt.rtm.item.ItemGun)
-            return super.shouldExecute();
+            return super.shouldExecute(); 
         return false;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/ai/EntityAITravelByTrain.java b/src/api/rtm/jp/ngt/rtm/entity/ai/EntityAITravelByTrain.java
index 3badcb0..2436baf 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/ai/EntityAITravelByTrain.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/ai/EntityAITravelByTrain.java
@@ -40,11 +40,11 @@ public class EntityAITravelByTrain extends EntityAIBase {
         if (this.count > 0) {
             this.count--;
             return false;
-        }
+        } 
         if (this.activeTask == null) {
             this.activeTask = this.aiEnterStation;
             if (this.npc.isRiding())
-                this.npc.startRiding(null);
+                this.npc.startRiding(null); 
         } else if (this.activeTask == this.aiRideTrain) {
             if (this.npc.isRiding() && ((EntityFloor)this.npc.getRidingEntity()).getVehicle().getSpeed() == 0.0F) {
                 dismount();
@@ -53,9 +53,9 @@ public class EntityAITravelByTrain extends EntityAIBase {
                 } else {
                     this.activeTask = this.aiLeaveStation;
                     this.aiRideTrain.targetTrain = null;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         return this.activeTask.shouldExecute();
     }
 
@@ -73,18 +73,18 @@ public class EntityAITravelByTrain extends EntityAIBase {
                     if (this.activeTask.shouldExecute()) {
                         this.activeTask.startExecuting();
                         return true;
-                    }
-                }
+                    } 
+                } 
             } else if (this.activeTask == this.aiRideTrain) {
                 if (this.npc.isRiding()) {
                     this.count = (this.npc.getRNG().nextInt(20) + 1) * 400;
                     return false;
-                }
+                } 
             } else if (this.activeTask == this.aiLeaveStation) {
                 this.count = (this.npc.getRNG().nextInt(20) + 1) * 400;
                 this.activeTask = null;
                 return false;
-            }
+            }  
         return flag;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/fluid/EntityFluid.java b/src/api/rtm/jp/ngt/rtm/entity/fluid/EntityFluid.java
index 94bbfc7..b6fb2de 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/fluid/EntityFluid.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/fluid/EntityFluid.java
@@ -67,7 +67,7 @@ public class EntityFluid extends Entity {
         super(world);
         setSize(0.25F, 0.25F);
         if (world.isRemote)
-            this.fluidVtx = new FluidVertexHolder();
+            this.fluidVtx = new FluidVertexHolder(); 
     }
 
     protected void entityInit() {
@@ -120,30 +120,30 @@ public class EntityFluid extends Entity {
             BlockPos underPos = new BlockPos(MathHelper.floor(this.posX), MathHelper.floor((getEntityBoundingBox()).minY) - 1, MathHelper.floor(this.posZ));
             IBlockState underState = this.world.getBlockState(underPos);
             f *= underState.getBlock().getSlipperiness(underState, (IBlockAccess)this.world, underPos, this);
-        }
+        } 
         this.motionX *= f;
         this.motionY *= 0.98D;
         this.motionZ *= f;
         if (this.onGround)
-            this.motionY *= -0.9D;
+            this.motionY *= -0.9D; 
         updateFluidState();
     }
 
     protected void updateFluidState() {
         float temp = getTemperature();
         if (temp >= 500.0F)
-            this.counter++;
+            this.counter++; 
         if (this.world.isRemote) {
             float f0 = 1.0F - getNormalizedTemperture();
             if (getFluidType() == FluidType.COKE) {
                 int rand = 100 + (int)(100.0F * f0);
                 if (getTemperature() > 200.0F && this.world.rand.nextInt(rand) == 0)
-                    this.world.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, this.posX, this.posY + 0.25D, this.posZ, 0.0D, 0.125D, 0.0D, new int[0]);
+                    this.world.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, this.posX, this.posY + 0.25D, this.posZ, 0.0D, 0.125D, 0.0D, new int[0]); 
             } else if ((getFluidType()).type == FluidType.Type.LIQUID) {
                 int rand = 250 + (int)(250.0F * f0);
                 if (getTemperature() > 300.0F && this.world.rand.nextInt(rand) == 0)
-                    this.world.spawnParticle(EnumParticleTypes.EXPLOSION_NORMAL, this.posX, this.posY + 0.25D, this.posZ, 0.0D, 0.125D, 0.0D, new int[0]);
-            }
+                    this.world.spawnParticle(EnumParticleTypes.EXPLOSION_NORMAL, this.posX, this.posY + 0.25D, this.posZ, 0.0D, 0.125D, 0.0D, new int[0]); 
+            } 
             this.fluidVtx.update(this);
         } else {
             if (temp > 0.0F) {
@@ -151,14 +151,14 @@ public class EntityFluid extends Entity {
                     temp -= 20.0F;
                 } else if (getFluidType() != FluidType.COKE && this.world.rand.nextInt(10) == 0) {
                     temp--;
-                }
+                } 
                 if (temp != getTemperature())
-                    setTemperture(temp);
-            }
+                    setTemperture(temp); 
+            } 
             int max = (getFluidType()).life;
             if (max > 0 && this.counter >= max)
-                setDead();
-        }
+                setDead(); 
+        } 
     }
 
     private void calcFluidMovement() {
@@ -171,15 +171,15 @@ public class EntityFluid extends Entity {
         double pz = this.posZ;
         double maxDif = 0.0D;
         double accumDif = 0.0D;
-        List<Entity> list = this.world.getEntitiesWithinAABBExcludingEntity(this,
+        List<Entity> list = this.world.getEntitiesWithinAABBExcludingEntity(this, 
                 getEntityBoundingBox().grow(1.0D, 1.0D, 1.0D));
         for (Entity entity2 : list) {
             if (entity2.isDead)
-                continue;
+                continue; 
             if (entity2 instanceof EntityFluid) {
                 EntityFluid entity = (EntityFluid)entity2;
                 if (entity == this)
-                    continue;
+                    continue; 
                 double difX = px - entity.posX;
                 double difY = py - entity.posY;
                 double difZ = pz - entity.posZ;
@@ -190,7 +190,7 @@ public class EntityFluid extends Entity {
                     px += difX / distance * d0;
                     py += difY / distance * d0;
                     pz += difZ / distance * d0;
-                }
+                } 
                 if (this.world.isRemote) {
                     if (distanceSq <= 1.0D && (getFluidType()).type != FluidType.Type.SOLID) {
                         this.nearFluids.add(entity);
@@ -199,9 +199,9 @@ public class EntityFluid extends Entity {
                             if (dif > maxDif) {
                                 maxDif = dif;
                                 accumDif = entity.posDif;
-                            }
-                        }
-                    }
+                            } 
+                        } 
+                    } 
                 } else if (distanceSq <= 1.0D) {
                     float temp1 = getTemperature();
                     float temp2 = entity.getTemperature();
@@ -213,17 +213,17 @@ public class EntityFluid extends Entity {
                         float f0 = (temp2 - temp1) * (entity.getFluidType()).thermalConductivity;
                         temp2 -= f0;
                         temp1 += f0;
-                    }
+                    } 
                     setTemperture(temp1);
                     entity.setTemperture(temp2);
-                }
+                } 
                 onFluidCollide(entity);
                 continue;
-            }
+            } 
             onEntityCollideFluid(entity2);
-        }
+        } 
         if (this.world.isRemote)
-            this.posDif = (float)(accumDif + maxDif);
+            this.posDif = (float)(accumDif + maxDif); 
         this.motionX += px - this.posX;
         this.motionZ += pz - this.posZ;
     }
@@ -233,12 +233,12 @@ public class EntityFluid extends Entity {
             if (getDistanceSq(fluid) <= 1.0D)
                 if (fluid.getFluidType() == FluidType.IRON_ORE && fluid.getTemperature() >= FluidType.PIG_IRON.meltingPoint) {
                     int countInc = this.world.rand.nextInt(2) + 2;
-                    ItemBucketLiquid.setFluid(this.world, fluid.posX, fluid.posY, fluid.posZ, FluidType.PIG_IRON, countInc,
+                    ItemBucketLiquid.setFluid(this.world, fluid.posX, fluid.posY, fluid.posZ, FluidType.PIG_IRON, countInc, 
                             getTemperature());
                     fluid.setFluidType(FluidType.SLAG);
                     fluid.setTemperture(getTemperature());
                     this.counter += 2000;
-                }
+                }   
     }
 
     protected void onEntityCollideFluid(Entity entity) {
@@ -246,12 +246,12 @@ public class EntityFluid extends Entity {
             if (getDistanceSq(entity) <= 0.0625D) {
                 boolean burnFlag = (getTemperature() > 300.0F);
                 if (entity instanceof EntityItem)
-                    burnFlag = !addItem((EntityItem)entity);
+                    burnFlag = !addItem((EntityItem)entity); 
                 if (burnFlag && this.world.rand.nextInt(5) == 0) {
                     entity.attackEntityFrom(DamageSource.LAVA, 2.0F * getNormalizedTemperture());
                     entity.setFire(5);
-                }
-            }
+                } 
+            }  
     }
 
     private boolean addItem(EntityItem entity) {
@@ -261,13 +261,13 @@ public class EntityFluid extends Entity {
                     .getCount(), 0.0F);
             entity.setDead();
             return true;
-        }
+        } 
         if (stack.getItem() == ITEM_IRON_ORE) {
             ItemBucketLiquid.setFluid(this.world, entity.posX, entity.posY, entity.posZ, FluidType.IRON_ORE, stack
                     .getCount(), 0.0F);
             entity.setDead();
             return true;
-        }
+        } 
         return false;
     }
 
@@ -296,39 +296,39 @@ public class EntityFluid extends Entity {
                     this.motionX += (bx - aabb.minX) * d0;
                 } else if (maxX > bx) {
                     this.motionX -= (aabb.maxX - (bx + 1)) * d0;
-                }
+                } 
                 if (minZ < bz) {
                     this.motionZ += (bz - aabb.minZ) * d0;
                 } else if (maxZ > bz) {
                     this.motionZ -= (aabb.maxZ - (bz + 1)) * d0;
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     public boolean processInitialInteract(EntityPlayer player, EnumHand hand) {
         float temp = getTemperature();
         if (NGTUtil.isEquippedItem(player, Items.BUCKET) || NGTUtil.isEquippedItem(player, RTMItem.bucketLiquid)) {
             if (temp > (getFluidType()).meltingPoint)
-                return ItemBucketLiquid.pickupFluid(player, this);
+                return ItemBucketLiquid.pickupFluid(player, this); 
         } else {
             if (NGTUtil.isEquippedItem(player, RTMItem.bellows)) {
                 if (!this.world.isRemote)
-                    setTemperture(temp - 10.0F);
+                    setTemperture(temp - 10.0F); 
                 return true;
-            }
+            } 
             if (NGTUtil.isEquippedItem(player, RTMItem.paddle)) {
                 if (!this.world.isRemote)
-                    ItemPaddle.pushPull(player, this, -1.0F);
+                    ItemPaddle.pushPull(player, this, -1.0F); 
                 return true;
-            }
+            } 
             if (NGTUtil.isEquippedItem(player, Items.FLINT_AND_STEEL)) {
                 if (!this.world.isRemote && getFluidType() == FluidType.COKE)
                     if (getTemperature() < 500.0F)
-                        setTemperture(500.0F);
+                        setTemperture(500.0F);  
                 return true;
-            }
-        }
+            } 
+        } 
         return false;
     }
 
@@ -346,25 +346,25 @@ public class EntityFluid extends Entity {
                         item = Item.getItemFromBlock(Blocks.COBBLESTONE);
                     } else if (getFluidType() == FluidType.IRON_ORE) {
                         item = Item.getItemFromBlock(Blocks.IRON_ORE);
-                    }
+                    } 
                 } else {
                     NGTLog.showChatMessage((ITextComponent)new TextComponentString(
                                 String.format("Temperture is too hot ! (%5.1f)", new Object[] { Float.valueOf(getTemperature()) })));
                     return true;
-                }
+                } 
             } else if (NGTUtil.isEquippedItem(player, RTMItem.paddle)) {
                 ItemPaddle.pushPull(player, this, 1.0F);
                 return true;
-            }
+            } 
             if (item == null)
                 if (getFluidType() == FluidType.COKE)
-                    item = RTMItem.coke;
+                    item = RTMItem.coke;  
             if (item != null) {
                 player.getHeldItemMainhand().damageItem(1, (EntityLivingBase)player);
                 player.entityDropItem(new ItemStack(item, 1, 0), 1.0F);
                 setDead();
-            }
-        }
+            } 
+        } 
         return true;
     }
 
@@ -384,7 +384,7 @@ public class EntityFluid extends Entity {
 
     private void setFluidType(String type) {
         if (type == null || type.isEmpty())
-            type = FluidType.STEEL.toString();
+            type = FluidType.STEEL.toString(); 
         getDataManager().set(TYPE, type);
     }
 
@@ -400,7 +400,7 @@ public class EntityFluid extends Entity {
     public float getNormalizedTemperture() {
         float temp = getTemperature();
         if (temp > (getFluidType()).meltingPoint)
-            return 1.0F;
+            return 1.0F; 
         return temp / (getFluidType()).meltingPoint;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/fluid/FluidType.java b/src/api/rtm/jp/ngt/rtm/entity/fluid/FluidType.java
index ccc71eb..acaaec1 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/fluid/FluidType.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/fluid/FluidType.java
@@ -41,13 +41,13 @@ public enum FluidType {
 
     public int getColor(float gradation, float normalizedTemp) {
         int r = calcColorComponent(
-                ColorUtil.getR(this.topHotColor), ColorUtil.getR(this.bottomHotColor),
+                ColorUtil.getR(this.topHotColor), ColorUtil.getR(this.bottomHotColor), 
                 ColorUtil.getR(this.topColdColor), ColorUtil.getR(this.bottomColdColor), gradation, normalizedTemp, true);
         int g = calcColorComponent(
-                ColorUtil.getG(this.topHotColor), ColorUtil.getG(this.bottomHotColor),
+                ColorUtil.getG(this.topHotColor), ColorUtil.getG(this.bottomHotColor), 
                 ColorUtil.getG(this.topColdColor), ColorUtil.getG(this.bottomColdColor), gradation, normalizedTemp, true);
         int b = calcColorComponent(
-                ColorUtil.getB(this.topHotColor), ColorUtil.getB(this.bottomHotColor),
+                ColorUtil.getB(this.topHotColor), ColorUtil.getB(this.bottomHotColor), 
                 ColorUtil.getB(this.topColdColor), ColorUtil.getB(this.bottomColdColor), gradation, normalizedTemp, true);
         return ColorUtil.encode(r, g, b);
     }
@@ -58,7 +58,7 @@ public enum FluidType {
         if (useTemp) {
             top = (topHot - topCold) * normalizedTemp + topCold;
             bottom = (bottomHot - bottomCold) * normalizedTemp + bottomCold;
-        }
+        } 
         int color = (int)((top - bottom) * gradation + bottom);
         return (color < 0) ? 0 : ((color > 255) ? 255 : color);
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/fluid/FluidVertexHolder.java b/src/api/rtm/jp/ngt/rtm/entity/fluid/FluidVertexHolder.java
index 6d1b540..b930cdb 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/fluid/FluidVertexHolder.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/fluid/FluidVertexHolder.java
@@ -20,8 +20,8 @@ public final class FluidVertexHolder {
                 addVertex(fluid, (i + 1) * 8 + j, ModelSolid.SPHERE[i2 * 16 + j3]);
                 i2 = i * 2;
                 addVertex(fluid, i * 8 + j, ModelSolid.SPHERE[i2 * 16 + j3]);
-            }
-        }
+            } 
+        } 
     }
 
     private void addVertex(EntityFluid entity, int bufIndex, float[] vtx) {
@@ -46,23 +46,23 @@ public final class FluidVertexHolder {
                     x = (float)(x + (target.posX - entity.posX) * d0);
                     y = (float)(y + (target.posY - entity.posY) * d0);
                     z = (float)(z + (target.posZ - entity.posZ) * d0);
-                }
-            }
+                } 
+            } 
             double len = NGTMath.firstSqrt((x * x + y * y + z * z));
             if (len > 0.25D) {
                 x = (float)(x * 0.25D / len);
                 y = (float)(y * 0.25D / len);
                 z = (float)(z * 0.25D / len);
                 len = 0.25D;
-            }
-        }
+            } 
+        } 
         float colorF = (y / scale + 1.0F) * 0.5F;
         colorF = (colorF < 0.0F) ? 0.0F : ((colorF > 1.0F) ? 1.0F : colorF);
         if (entity.posDif > 0.0F) {
             float f0 = entity.posDif / 0.125F;
             f0 = ((f0 > 1.0F) ? 1.0F : f0) * 0.9F;
             colorF = colorF * (1.0F - f0) + f0;
-        }
+        } 
         this.buffer[bufIndex][0] = x;
         this.buffer[bufIndex][1] = y;
         this.buffer[bufIndex][2] = z;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/fluid/RenderFluid.java b/src/api/rtm/jp/ngt/rtm/entity/fluid/RenderFluid.java
index 3e4b8e6..791a9e7 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/fluid/RenderFluid.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/fluid/RenderFluid.java
@@ -36,7 +36,7 @@ public final class RenderFluid extends Render<EntityFluid> {
             GL11.glShadeModel(7425);
             if (pass == 1) {
                 if (isCoke && entity.getTemperature() >= 1000.0F)
-                    renderFire(entity);
+                    renderFire(entity); 
             } else {
                 if ((entity.getFluidType()).type == FluidType.Type.SOLID)
                     switch (entity.getEntityId() % 4) {
@@ -52,14 +52,14 @@ public final class RenderFluid extends Render<EntityFluid> {
                         case 3:
                             GL11.glRotatef(-5.0F, 0.0F, 0.0F, 1.0F);
                             break;
-                    }
+                    }  
                 renderMetaball(entity);
-            }
+            } 
             GL11.glShadeModel(7424);
             GLHelper.enableLighting();
             GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
             GL11.glEnable(3553);
-        }
+        } 
         GL11.glPopMatrix();
     }
 
@@ -74,8 +74,8 @@ public final class RenderFluid extends Render<EntityFluid> {
                 int j2 = j % splitW;
                 addVertex(tessellator, entity, (i + 1) * 8 + j2, normTemp);
                 addVertex(tessellator, entity, i * 8 + j2, normTemp);
-            }
-        }
+            } 
+        } 
         tessellator.draw();
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/EntityMotorman.java b/src/api/rtm/jp/ngt/rtm/entity/npc/EntityMotorman.java
index 27bb03f..9daca5b 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/EntityMotorman.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/npc/EntityMotorman.java
@@ -74,7 +74,7 @@ public class EntityMotorman extends EntityNPC {
             NBTTagList nbttaglist = new NBTTagList();
             nbttaglist.appendTag((NBTBase)diagramNBT);
             nbt.setTag("DiagramRTM", (NBTBase)nbttaglist);
-        }
+        } 
     }
 
     public void readEntityFromNBT(NBTTagCompound nbt) {
@@ -84,24 +84,24 @@ public class EntityMotorman extends EntityNPC {
             NBTTagCompound diagramNBT = nbttaglist.getCompoundTagAt(0);
             ItemStack itemstack = new ItemStack(diagramNBT);
             setDiagram(itemstack);
-        }
+        } 
     }
 
     public void onDeath(DamageSource source) {
         super.onDeath(source);
         if (!this.world.isRemote && hasDiagram())
-            entityDropItem(getDiagram(), 1.0F);
+            entityDropItem(getDiagram(), 1.0F); 
     }
 
     public boolean processInteract(EntityPlayer player, EnumHand hand) {
         if (player.world.isRemote)
-            player.openGui(RTMCore.instance, RTMCore.guiIdMotorman, player.world, getEntityId(), 0, 0);
+            player.openGui(RTMCore.instance, RTMCore.guiIdMotorman, player.world, getEntityId(), 0, 0); 
         ItemStack itemstack = player.inventory.getCurrentItem();
         if (itemstack.getItem() instanceof net.minecraft.item.ItemWritableBook) {
             if (!this.world.isRemote)
-                setDiagram(itemstack.copy());
+                setDiagram(itemstack.copy()); 
             itemstack.shrink(1);
-        }
+        } 
         return false;
     }
 
@@ -112,7 +112,7 @@ public class EntityMotorman extends EntityNPC {
         for (String s : list) {
             sb.append("//");
             sb.append(s);
-        }
+        } 
         RTMCore.NETWORK_WRAPPER.sendToServer((IMessage)new PacketNotice((byte)0, sb.toString(), (Entity)this));
         NGTLog.sendChatMessage((ICommandSender)NGTUtil.getClientPlayer(), "Set macro : " + file.getName(), new Object[0]);
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/EntityNPC.java b/src/api/rtm/jp/ngt/rtm/entity/npc/EntityNPC.java
index 6f38175..d010aed 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/EntityNPC.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/npc/EntityNPC.java
@@ -103,7 +103,7 @@ public class EntityNPC extends EntityTameable implements IResourceSelector, IRan
         if (this.state.version < 1) {
             String s = nbt.getString("ModelName");
             this.state.setResourceName(s);
-        }
+        } 
         NBTTagList nbttaglist = nbt.getTagList("Inventory", 10);
         this.inventory.readFromNBT(nbttaglist);
     }
@@ -134,7 +134,7 @@ public class EntityNPC extends EntityTameable implements IResourceSelector, IRan
 
     public void onUpdate() {
         if (this.inventory.isOpening)
-            return;
+            return; 
         super.onUpdate();
         this.playerDummy.setPosition(this.posX, this.posY, this.posZ);
         this.playerDummy.rotationYaw = this.rotationYaw;
@@ -145,40 +145,40 @@ public class EntityNPC extends EntityTameable implements IResourceSelector, IRan
             if (!hasGun || this.useItemCount > item.getMaxItemUseDuration()) {
                 if (!this.world.isRemote) {
                     if (hasGun)
-                        item.onPlayerStoppedUsing(this.world, (EntityLivingBase)this.playerDummy, this.useItemCount);
+                        item.onPlayerStoppedUsing(this.world, (EntityLivingBase)this.playerDummy, this.useItemCount); 
                     setUseItem(false);
-                }
+                } 
                 this.useItemCount = 0;
             } else if (!this.world.isRemote) {
                 item.getItem().onUsingTick(item, (EntityLivingBase)this.playerDummy, this.useItemCount);
-            }
+            } 
             this.useItemCount++;
         } else {
             this.useItemCount = 0;
-        }
+        } 
         if (!(getEntityWorld()).isRemote)
-            this.executer.execScript(this);
+            this.executer.execScript(this); 
     }
 
     public void onLivingUpdate() {
         if (this.myRole != Role.MANNEQUIN) {
             super.onLivingUpdate();
             if (!this.world.isRemote)
-                healNPC();
-        }
+                healNPC(); 
+        } 
         if (this.roleChanged) {
             this.roleChanged = false;
             this.myRole = Role.getRole((((ModelSetNPC)this.state.getResourceSet()).getConfig()).role);
             this.myRole.init(this);
             onInventoryChanged();
-        }
+        } 
     }
 
     private void debugCurrentAI() {
         for (EntityAITasks.EntityAITaskEntry entry : this.tasks.taskEntries) {
             if (entry.using)
-                NGTLog.debug("AI:%s", new Object[] { entry.action.getClass().getSimpleName() });
-        }
+                NGTLog.debug("AI:%s", new Object[] { entry.action.getClass().getSimpleName() }); 
+        } 
     }
 
     public void addTrackingPlayer(EntityPlayerMP player) {
@@ -192,8 +192,8 @@ public class EntityNPC extends EntityTameable implements IResourceSelector, IRan
                 ItemStack stack = this.inventory.getStackInSlot(index);
                 heal(((ItemFood)stack.getItem()).getHealAmount(stack));
                 stack.shrink(1);
-            }
-        }
+            } 
+        } 
     }
 
     public void onDeath(DamageSource source) {
@@ -201,8 +201,8 @@ public class EntityNPC extends EntityTameable implements IResourceSelector, IRan
         if (!this.world.isRemote) {
             this.inventory.dropAllItems();
             if (source.getTrueSource() instanceof EntityPlayer && !((EntityPlayer)source.getTrueSource()).capabilities.isCreativeMode)
-                dropEntity();
-        }
+                dropEntity(); 
+        } 
     }
 
     protected void dropEntity() {
@@ -217,9 +217,9 @@ public class EntityNPC extends EntityTameable implements IResourceSelector, IRan
                 par2 = 10000.0F;
             } else if (!((EntityPlayer)attacker).capabilities.isCreativeMode && this.myRole == Role.MANNEQUIN) {
                 return false;
-            }
+            }  
         if (!this.executer.onAttackedFrom(this, attacker))
-            return false;
+            return false; 
         return super.attackEntityFrom(damageSource, par2);
     }
 
@@ -229,13 +229,13 @@ public class EntityNPC extends EntityTameable implements IResourceSelector, IRan
         ItemStack stack = getHeldItem();
         DamageSource damSrc = DamageSource.causeMobDamage((EntityLivingBase)this);
         if (!this.executer.attackEntity(this, target))
-            return false;
+            return false; 
         if (target instanceof EntityLivingBase) {
             List<ItemStack> list = new ArrayList<>();
             list.add(stack);
             power += EnchantmentHelper.getEnchantmentModifierDamage(list, damSrc);
             knockback += EnchantmentHelper.getKnockbackModifier((EntityLivingBase)this);
-        }
+        } 
         boolean flag = target.attackEntityFrom(damSrc, power);
         if (flag) {
             if (knockback > 0) {
@@ -244,32 +244,32 @@ public class EntityNPC extends EntityTameable implements IResourceSelector, IRan
                 target.addVelocity(vx, 0.1D, vz);
                 this.motionX *= 0.6D;
                 this.motionZ *= 0.6D;
-            }
+            } 
             int j = EnchantmentHelper.getFireAspectModifier((EntityLivingBase)this);
             if (j > 0)
-                target.setFire(j * 4);
+                target.setFire(j * 4); 
             if (target instanceof EntityLivingBase)
-                EnchantmentHelper.applyThornEnchantments((EntityLivingBase)target, (Entity)this);
+                EnchantmentHelper.applyThornEnchantments((EntityLivingBase)target, (Entity)this); 
             EnchantmentHelper.applyArthropodEnchantments((EntityLivingBase)this, target);
-        }
+        } 
         return flag;
     }
 
     public void attackEntityWithRangedAttack(EntityLivingBase target, float strength) {
         if (!this.executer.attackEntity(this, (Entity)target))
-            return;
+            return; 
         if (!isUsingItem()) {
             ItemStack item = getHeldItem();
             if (!item.isEmpty() && item.getItem() instanceof ItemGun) {
                 item.useItemRightClick(this.world, this.playerDummy, EnumHand.MAIN_HAND);
                 setUseItem(true);
-            }
-        }
+            } 
+        } 
     }
 
     public boolean processInteract(EntityPlayer player, EnumHand hand) {
         if (!this.world.isRemote)
-            player.openGui(RTMCore.instance, RTMCore.guiIdNPC, this.world, getEntityId(), 0, 0);
+            player.openGui(RTMCore.instance, RTMCore.guiIdNPC, this.world, getEntityId(), 0, 0); 
         return true;
     }
 
@@ -296,9 +296,9 @@ public class EntityNPC extends EntityTameable implements IResourceSelector, IRan
 
     public ItemStack getItemStackFromSlot(EntityEquipmentSlot slot) {
         if (slot == EntityEquipmentSlot.MAINHAND)
-            return this.inventory.mainInventory[0];
+            return this.inventory.mainInventory[0]; 
         if (slot == EntityEquipmentSlot.OFFHAND)
-            return ItemStack.EMPTY;
+            return ItemStack.EMPTY; 
         return this.inventory.armorInventory[slot.getSlotIndex() - 1];
     }
 
@@ -315,7 +315,7 @@ public class EntityNPC extends EntityTameable implements IResourceSelector, IRan
             this.inventory.mainInventory[0] = stack;
         } else if (slot != EntityEquipmentSlot.OFFHAND) {
             this.inventory.armorInventory[slot.getSlotIndex() - 1] = stack;
-        }
+        } 
     }
 
     public Iterable<ItemStack> getArmorInventoryList() {
@@ -329,7 +329,7 @@ public class EntityNPC extends EntityTameable implements IResourceSelector, IRan
     public void updateResourceState() {
         this.roleChanged = true;
         if (this.world == null || !this.world.isRemote)
-            PacketNBT.sendToClient((Entity)this);
+            PacketNBT.sendToClient((Entity)this); 
     }
 
     public int[] getSelectorPos() {
@@ -354,7 +354,7 @@ public class EntityNPC extends EntityTameable implements IResourceSelector, IRan
 
     public EntityBullet getBullet(ItemGun.GunType type) {
         if (getAttackTarget() == null)
-            return new EntityBullet(this.world, (EntityLivingBase)this, type.speed, type.bulletType);
+            return new EntityBullet(this.world, (EntityLivingBase)this, type.speed, type.bulletType); 
         return new EntityBullet(this.world, (EntityLivingBase)this, getAttackTarget(), type.speed, type.bulletType);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/InventoryNPC.java b/src/api/rtm/jp/ngt/rtm/entity/npc/InventoryNPC.java
index ecc07fc..cf308ba 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/InventoryNPC.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/npc/InventoryNPC.java
@@ -33,16 +33,16 @@ public final class InventoryNPC implements IInventory {
                 nbt.setByte("Slot", (byte)i);
                 this.mainInventory[i].writeToNBT(nbt);
                 nbtList.appendTag((NBTBase)nbt);
-            }
-        }
+            } 
+        } 
         for (i = 0; i < this.armorInventory.length; i++) {
             if (!this.armorInventory[i].isEmpty()) {
                 NBTTagCompound nbt = new NBTTagCompound();
                 nbt.setByte("Slot", (byte)(i + 100));
                 this.armorInventory[i].writeToNBT(nbt);
                 nbtList.appendTag((NBTBase)nbt);
-            }
-        }
+            } 
+        } 
         return nbtList;
     }
 
@@ -53,11 +53,11 @@ public final class InventoryNPC implements IInventory {
             ItemStack itemstack = new ItemStack(nbt);
             if (!itemstack.isEmpty()) {
                 if (j >= 0 && j < this.mainInventory.length)
-                    this.mainInventory[j] = itemstack;
+                    this.mainInventory[j] = itemstack; 
                 if (j >= 100 && j < this.armorInventory.length + 100)
-                    this.armorInventory[j - 100] = itemstack;
-            }
-        }
+                    this.armorInventory[j - 100] = itemstack; 
+            } 
+        } 
     }
 
     public int getSizeInventory() {
@@ -66,10 +66,10 @@ public final class InventoryNPC implements IInventory {
 
     public ItemStack getStackInSlot(int index) {
         if (index < this.mainInventory.length)
-            return this.mainInventory[index];
+            return this.mainInventory[index]; 
         index -= this.mainInventory.length;
         if (index < this.armorInventory.length)
-            return this.armorInventory[index];
+            return this.armorInventory[index]; 
         return ItemStack.EMPTY;
     }
 
@@ -79,20 +79,20 @@ public final class InventoryNPC implements IInventory {
             targetInv = this.armorInventory;
             index -= this.mainInventory.length;
             if (index >= this.armorInventory.length)
-                return ItemStack.EMPTY;
-        }
+                return ItemStack.EMPTY; 
+        } 
         if (!targetInv[index].isEmpty()) {
             ItemStack itemstack = ItemStack.EMPTY;
             if (targetInv[index].getCount() <= size) {
                 itemstack = targetInv[index];
                 targetInv[index] = ItemStack.EMPTY;
                 return itemstack;
-            }
+            } 
             itemstack = targetInv[index].splitStack(size);
             if (targetInv[index].getCount() == 0)
-                targetInv[index] = ItemStack.EMPTY;
+                targetInv[index] = ItemStack.EMPTY; 
             return itemstack;
-        }
+        } 
         return ItemStack.EMPTY;
     }
 
@@ -102,13 +102,13 @@ public final class InventoryNPC implements IInventory {
             targetInv = this.armorInventory;
             index -= this.mainInventory.length;
             if (index >= this.armorInventory.length)
-                return ItemStack.EMPTY;
-        }
+                return ItemStack.EMPTY; 
+        } 
         if (!targetInv[index].isEmpty()) {
             ItemStack itemstack = targetInv[index];
             targetInv[index] = ItemStack.EMPTY;
             return itemstack;
-        }
+        } 
         return ItemStack.EMPTY;
     }
 
@@ -118,8 +118,8 @@ public final class InventoryNPC implements IInventory {
             targetInv = this.armorInventory;
             index -= this.mainInventory.length;
             if (index >= this.armorInventory.length)
-                return;
-        }
+                return; 
+        } 
         targetInv[index] = item;
     }
 
@@ -161,44 +161,44 @@ public final class InventoryNPC implements IInventory {
             if (!this.mainInventory[i].isEmpty()) {
                 this.npc.entityDropItem(this.mainInventory[i], 0.5F);
                 this.mainInventory[i] = ItemStack.EMPTY;
-            }
-        }
+            } 
+        } 
         for (i = 0; i < this.armorInventory.length; i++) {
             if (!this.armorInventory[i].isEmpty()) {
                 this.npc.entityDropItem(this.armorInventory[i], 0.5F);
                 this.armorInventory[i] = ItemStack.EMPTY;
-            }
-        }
+            } 
+        } 
     }
 
     public int getTotalArmorValue() {
         int damageReduce = 0;
         for (int j = 0; j < this.armorInventory.length; j++) {
             if (this.armorInventory[j].getItem() instanceof ItemArmor)
-                damageReduce += ((ItemArmor)this.armorInventory[j].getItem()).damageReduceAmount;
-        }
+                damageReduce += ((ItemArmor)this.armorInventory[j].getItem()).damageReduceAmount; 
+        } 
         return damageReduce;
     }
 
     public void damageArmor(EntityLivingBase entity, float damage) {
         damage /= 4.0F;
         if (damage < 1.0F)
-            damage = 1.0F;
+            damage = 1.0F; 
         for (int i = 0; i < this.armorInventory.length; i++) {
             if (this.armorInventory[i].getItem() instanceof ItemArmor) {
                 this.armorInventory[i].damageItem((int)damage, entity);
                 if (this.armorInventory[i].getCount() == 0)
-                    this.armorInventory[i] = ItemStack.EMPTY;
-            }
-        }
+                    this.armorInventory[i] = ItemStack.EMPTY; 
+            } 
+        } 
     }
 
     public int hasItem(Class<? extends Item> clazz) {
         for (int i = 0; i < getSizeInventory(); i++) {
             ItemStack stack = getStackInSlot(i);
             if (!stack.isEmpty() && stack.getItem().getClass() == clazz)
-                return i;
-        }
+                return i; 
+        } 
         return -1;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/NPCAIEnterStation.java b/src/api/rtm/jp/ngt/rtm/entity/npc/NPCAIEnterStation.java
index 65d76ac..afb7208 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/NPCAIEnterStation.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/npc/NPCAIEnterStation.java
@@ -16,7 +16,7 @@ public class NPCAIEnterStation extends NPCAISerachTurnstile {
 
     public boolean shouldContinueExecuting() {
         if (this.enterStation)
-            return !this.npc.getNavigator().noPath();
+            return !this.npc.getNavigator().noPath(); 
         boolean flag = super.shouldContinueExecuting();
         if (!flag && this.openedTurnstile) {
             double vecX = this.targetBlockPos[0] + 0.5D - this.npc.posX;
@@ -29,10 +29,10 @@ public class NPCAIEnterStation extends NPCAISerachTurnstile {
                     this.enterStation = true;
                     startExecuting();
                     return true;
-                }
+                } 
                 d0 -= 0.25D;
-            }
-        }
+            } 
+        } 
         return flag;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/NPCAILeaveStation.java b/src/api/rtm/jp/ngt/rtm/entity/npc/NPCAILeaveStation.java
index e451494..d1bc506 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/NPCAILeaveStation.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/npc/NPCAILeaveStation.java
@@ -16,7 +16,7 @@ public class NPCAILeaveStation extends NPCAISerachTurnstile {
 
     public boolean shouldContinueExecuting() {
         if (this.leftStation)
-            return !this.npc.getNavigator().noPath();
+            return !this.npc.getNavigator().noPath(); 
         boolean flag = super.shouldContinueExecuting();
         if (!flag && this.openedTurnstile) {
             double vecX = this.targetBlockPos[0] + 0.5D - this.npc.posX;
@@ -29,10 +29,10 @@ public class NPCAILeaveStation extends NPCAISerachTurnstile {
                     this.leftStation = true;
                     startExecuting();
                     return true;
-                }
+                } 
                 d0 -= 0.25D;
-            }
-        }
+            } 
+        } 
         return flag;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/NPCAIRideTrain.java b/src/api/rtm/jp/ngt/rtm/entity/npc/NPCAIRideTrain.java
index 81d50b3..498e86f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/NPCAIRideTrain.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/npc/NPCAIRideTrain.java
@@ -39,16 +39,16 @@ public class NPCAIRideTrain extends EntityAIBase {
 
     public boolean shouldContinueExecuting() {
         if (this.target.isDead)
-            return false;
+            return false; 
         if (this.targetTrain.getSpeed() != 0.0F || this.npc.getDistanceSq((Entity)this.targetTrain) > 1024.0D)
-            return false;
+            return false; 
         if (this.npc.getDistanceSq((Entity)this.target) < 9.0D) {
             if (this.target.getFirstPassenger() == null) {
                 this.npc.startRiding((Entity)this.target);
                 return false;
-            }
+            } 
             return setTargetSeat();
-        }
+        } 
         return !this.npc.getNavigator().noPath();
     }
 
@@ -67,18 +67,18 @@ public class NPCAIRideTrain extends EntityAIBase {
                     if (dsq < distance) {
                         nextTarget = floor;
                         distance = dsq;
-                    }
-                }
-            }
+                    } 
+                } 
+            } 
             if (nextTarget != null) {
                 this.entityPathNavigate = this.npc.getNavigator().getPathToEntityLiving((Entity)nextTarget);
                 if (this.entityPathNavigate != null) {
                     this.target = nextTarget;
                     this.targetTrain = nextTarget.getVehicle();
                     return true;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         return false;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/NPCAISerachTurnstile.java b/src/api/rtm/jp/ngt/rtm/entity/npc/NPCAISerachTurnstile.java
index d13d563..79d6be3 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/NPCAISerachTurnstile.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/npc/NPCAISerachTurnstile.java
@@ -50,19 +50,19 @@ public class NPCAISerachTurnstile extends EntityAIBase {
                             this.targetBlockPos[1] = y + j;
                             this.targetBlockPos[2] = z + k;
                             distance = dsq;
-                        }
-                    }
-                }
-            }
-        }
+                        } 
+                    } 
+                } 
+            } 
+        } 
         if (this.targetBlockPos[1] != -1) {
             Vec3d vec3 = new Vec3d(this.targetBlockPos[0] + 0.5D, this.targetBlockPos[1], this.targetBlockPos[2] + 0.5D);
             if (vec3 != null) {
                 this.entityPathNavigate = this.npc.getNavigator().getPathToXYZ(vec3.x, vec3.y, vec3.z);
                 if (this.entityPathNavigate != null)
-                    return true;
-            }
-        }
+                    return true; 
+            } 
+        } 
         return false;
     }
 
@@ -72,7 +72,7 @@ public class NPCAISerachTurnstile extends EntityAIBase {
             RTMBlock.turnstile.openGate(this.npc.world, this.targetBlockPos[0], this.targetBlockPos[1], this.targetBlockPos[2], null);
             this.openedTurnstile = true;
             return false;
-        }
+        } 
         return !b0;
     }
 
@@ -82,9 +82,9 @@ public class NPCAISerachTurnstile extends EntityAIBase {
         if (index >= 0) {
             ItemStack stack = inventory.getStackInSlot(index);
             if (((ItemTicket)stack.getItem()).ticketType != 2)
-                inventory.setInventorySlotContents(index, ItemTicket.consumeTicket(stack));
+                inventory.setInventorySlotContents(index, ItemTicket.consumeTicket(stack)); 
             return true;
-        }
+        } 
         return false;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/RenderNPC.java b/src/api/rtm/jp/ngt/rtm/entity/npc/RenderNPC.java
index fac20ad..ed40029 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/RenderNPC.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/npc/RenderNPC.java
@@ -37,7 +37,7 @@ public class RenderNPC extends RenderBiped<EntityNPC> {
             this.textureType = 1;
         } else if (month == 12 && day >= 24 && day <= 26) {
             this.textureType = 12;
-        }
+        } 
     }
 
     public void doRender(EntityNPC entity, double x, double y, double z, float par8, float partialTick) {
@@ -46,11 +46,11 @@ public class RenderNPC extends RenderBiped<EntityNPC> {
             boolean hasGun = (heldItem != null && heldItem.getItem() instanceof jp.ngt.rtm.item.ItemGun);
             boolean usingGun = (hasGun && entity.isUsingItem());
             if (usingGun)
-                ((ModelBiped)this.mainModel).rightArmPose = ModelBiped.ArmPose.BOW_AND_ARROW;
-            super.doRender((EntityLiving)entity, x, y, z, par8, partialTick);
+                ((ModelBiped)this.mainModel).rightArmPose = ModelBiped.ArmPose.BOW_AND_ARROW; 
+            super.doRender(entity, x, y, z, par8, partialTick);
         } else {
             renderCustomModel(entity, x, y, z, par8, partialTick);
-        }
+        } 
     }
 
     private void renderCustomModel(EntityNPC entity, double x, double y, double z, float par8, float partialTick) {
@@ -69,9 +69,9 @@ public class RenderNPC extends RenderBiped<EntityNPC> {
                     return TEX_SHISHI;
                 case 12:
                     return TEX_SANTA;
-            }
+            } 
             return TEXTURE;
-        }
+        } 
         return ((ModelSetNPC)entity.getResourceState().getResourceSet()).texture;
     }
 
@@ -84,10 +84,10 @@ public class RenderNPC extends RenderBiped<EntityNPC> {
 
         public void doRenderLayer(EntityNPC entity, float par2, float par3, float partialTicks, float par5, float par6, float par7, float scale) {
             if (entity.isMotorman())
-                return;
+                return; 
             ResourceLocation tex = ((ModelSetNPC)entity.getResourceState().getResourceSet()).lightTexture;
             if (tex == null)
-                return;
+                return; 
             this.parentRenderer.bindTexture(tex);
             GlStateManager.enableBlend();
             GlStateManager.disableAlpha();
@@ -101,7 +101,7 @@ public class RenderNPC extends RenderBiped<EntityNPC> {
             GlStateManager.enableLighting();
             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
             this.parentRenderer.getMainModel().render((Entity)entity, par2, par3, par5, par6, par7, scale);
-            this.parentRenderer.setLightmap((EntityLiving)entity);
+            this.parentRenderer.setLightmap(entity);
             GlStateManager.depthMask(true);
             GlStateManager.disableBlend();
             GlStateManager.enableAlpha();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/Role.java b/src/api/rtm/jp/ngt/rtm/entity/npc/Role.java
index b07738d..e334f11 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/Role.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/npc/Role.java
@@ -116,7 +116,7 @@ public class Role {
             } else {
                 entity.tasks.addTask(2, this.aiLeapAtTarget);
                 entity.tasks.addTask(3, this.aiCollideAttack);
-            }
+            } 
         }
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/macro/MacroExecutor.java b/src/api/rtm/jp/ngt/rtm/entity/npc/macro/MacroExecutor.java
index 91ffe5e..f972b1f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/macro/MacroExecutor.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/npc/macro/MacroExecutor.java
@@ -21,14 +21,14 @@ public class MacroExecutor {
         for (String s : args) {
             TrainCommand command = TrainCommand.parse(s);
             if (command != null)
-                this.commands.add(command);
-        }
+                this.commands.add(command); 
+        } 
         this.executing = false;
     }
 
     public boolean start(World world) {
         if (this.executing)
-            return false;
+            return false; 
         this.executing = true;
         this.startTime = world.getWorldTime();
         return true;
@@ -39,7 +39,7 @@ public class MacroExecutor {
             this.executing = false;
             this.startTime = 0L;
             return true;
-        }
+        } 
         return false;
     }
 
@@ -53,7 +53,7 @@ public class MacroExecutor {
         if (time >= command.time) {
             execCommand(train, command.type, command.parameter);
             this.commands.remove(0);
-        }
+        } 
     }
 
     private void execCommand(EntityTrainBase train, TrainCommand.CommandType type, Object param) {
@@ -71,10 +71,10 @@ public class MacroExecutor {
                 case Door:
                     execDoor(train, TrainState.valueOf(param.toString()));
                     return;
-            }
+            } 
         } catch (Exception e) {
             e.printStackTrace();
-        }
+        } 
     }
 
     private void execNotch(EntityTrainBase train, int notch) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/macro/MacroRecorder.java b/src/api/rtm/jp/ngt/rtm/entity/npc/macro/MacroRecorder.java
index 06ec6c6..5c57a86 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/macro/MacroRecorder.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/npc/macro/MacroRecorder.java
@@ -31,7 +31,7 @@ public class MacroRecorder {
 
     public boolean start(World world) {
         if (this.recording)
-            return false;
+            return false; 
         this.recording = true;
         this.startTime = world.getWorldTime();
         this.commands.clear();
@@ -41,7 +41,7 @@ public class MacroRecorder {
 
     public boolean stop(World world) {
         if (!this.recording)
-            return false;
+            return false; 
         this.recording = false;
         this.startTime = 0L;
         saveToFile(NGTUtil.getClientPlayer());
@@ -52,7 +52,7 @@ public class MacroRecorder {
         if (this.recording) {
             long time = world.getWorldTime() - this.startTime;
             this.commands.add(new TrainCommand(time, type, param));
-        }
+        } 
     }
 
     private void saveToFile(EntityPlayer player) {
@@ -66,14 +66,14 @@ public class MacroRecorder {
             for (int i = 0; i < texts.length; i++) {
                 TrainCommand command = this.commands.get(i);
                 texts[i] = command.toString();
-            }
+            } 
             NGTText.writeToText(saveFile, texts);
             NGTLog.sendChatMessage((ICommandSender)player, "Save macro : " + saveFile.getName(), new Object[0]);
         } catch (IOException e) {
             if (saveFile != null)
-                NGTLog.sendChatMessage((ICommandSender)player, "Failed to save file : " + saveFile.getAbsolutePath(), new Object[0]);
+                NGTLog.sendChatMessage((ICommandSender)player, "Failed to save file : " + saveFile.getAbsolutePath(), new Object[0]); 
             e.printStackTrace();
-        }
+        } 
     }
 
     public boolean isRecording() {
@@ -100,7 +100,7 @@ public class MacroRecorder {
         File modsFolder = NGTFileLoader.getModsDir().get(0);
         File macroFolder = new File(modsFolder, "rtm/train_macro");
         if (!macroFolder.exists())
-            macroFolder.mkdirs();
+            macroFolder.mkdirs(); 
         return macroFolder;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/macro/TrainCommand.java b/src/api/rtm/jp/ngt/rtm/entity/npc/macro/TrainCommand.java
index 892c9f6..25af815 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/macro/TrainCommand.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/npc/macro/TrainCommand.java
@@ -33,17 +33,17 @@ public class TrainCommand {
                     long t1 = Long.valueOf(matcher.group(1)).longValue();
                     CommandType type = CommandType.valueOf(matcher.group(2));
                     return new TrainCommand(t1, type, "");
-                }
+                } 
                 if (count == 3) {
                     long t1 = Long.valueOf(matcher.group(1)).longValue();
                     CommandType type = CommandType.valueOf(matcher.group(2));
                     String param = matcher.group(3).replace(" ", "");
                     return new TrainCommand(t1, type, param);
-                }
-            }
+                } 
+            } 
         } catch (Exception e) {
             e.printStackTrace();
-        }
+        } 
         NGTLog.debug("Failed parse : " + par1);
         return null;
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/EntityBogie.java b/src/api/rtm/jp/ngt/rtm/entity/train/EntityBogie.java
index b164c1d..fae5722 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/EntityBogie.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/EntityBogie.java
@@ -149,13 +149,13 @@ public final class EntityBogie extends Entity implements Lockable {
 
     public BogieController.MotionState updateBogiePos(float speed, float trainLength, EntityBogie frontBogie) {
         if (updateCollision())
-            return BogieController.MotionState.STOP;
+            return BogieController.MotionState.STOP; 
         this.movingYaw = NGTMath.wrapAngle(this.rotationYaw + (isFront() ? 0.0F : 180.0F));
         double px = this.posX + NGTMath.sin(this.movingYaw) * speed;
         double py = this.posY;
         double pz = this.posZ + NGTMath.cos(this.movingYaw) * speed;
         if (!resetRailObj(px, py, pz))
-            return BogieController.MotionState.FLY;
+            return BogieController.MotionState.FLY; 
         RailMap rm = this.currentRailMap;
         int pIndex = 0;
         if (frontBogie == null || this.prevPosIndex == -1) {
@@ -176,9 +176,9 @@ public final class EntityBogie extends Entity implements Lockable {
                 if (difTemp < dif) {
                     dif = difTemp;
                     pIndex = i;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         this.prevPosIndex = pIndex;
         double[] posZX = rm.getRailPos(this.split, pIndex);
         py = rm.getRailHeight(this.split, pIndex) + getYOffset();
@@ -188,9 +188,9 @@ public final class EntityBogie extends Entity implements Lockable {
         float pitch = fixBogiePitch(rm.getRailPitch(this.split, pIndex), railYaw, yaw);
         float cant = rm.getCant(this.split, pIndex);
         if (Math.abs(NGTMath.wrapAngle(railYaw - yaw)) > 90.0F)
-            cant *= -1.0F;
+            cant *= -1.0F; 
         if (this.posX == posZX[1] && this.posZ == posZX[0])
-            return BogieController.MotionState.MOVE;
+            return BogieController.MotionState.MOVE; 
         this.posBuf[0] = posZX[1];
         this.posBuf[1] = py;
         this.posBuf[2] = posZX[0];
@@ -201,8 +201,8 @@ public final class EntityBogie extends Entity implements Lockable {
         if (this.jointDelay > 0.0F) {
             this.jointDelay -= speed;
             if (this.jointDelay <= 0.0F)
-                playJointSound();
-        }
+                playJointSound(); 
+        } 
         return BogieController.MotionState.MOVE;
     }
 
@@ -216,7 +216,7 @@ public final class EntityBogie extends Entity implements Lockable {
     private boolean resetRailObj(double px, double py, double pz) {
         TileEntityLargeRailCore coreObj = getRail(px, py, pz);
         if (coreObj == null)
-            return false;
+            return false; 
         if (this.currentRailObj != coreObj) {
             this.currentRailObj = coreObj;
             if (coreObj instanceof TileEntityLargeRailSwitchCore) {
@@ -224,11 +224,11 @@ public final class EntityBogie extends Entity implements Lockable {
                 this.currentRailMap = switchObj.getSwitch().getNearestPoint(this).getActiveRailMap(this.world);
             } else {
                 this.currentRailMap = coreObj.getRailMap(this);
-            }
+            } 
             this.split = (int)(this.currentRailMap.getLength() * 32.0D);
             this.prevPosIndex = -1;
             onChangeRail(coreObj);
-        }
+        } 
         return true;
     }
 
@@ -237,8 +237,8 @@ public final class EntityBogie extends Entity implements Lockable {
         if (railObj != null) {
             TileEntityLargeRailCore coreObj = railObj.getRailCore();
             if (coreObj != null)
-                return coreObj;
-        }
+                return coreObj; 
+        } 
         return null;
     }
 
@@ -248,7 +248,7 @@ public final class EntityBogie extends Entity implements Lockable {
         if (!cfg.muteJointSound) {
             this.jointIndex = 0;
             playJointSound();
-        }
+        } 
     }
 
     protected boolean reverseJointArray() {
@@ -272,8 +272,8 @@ public final class EntityBogie extends Entity implements Lockable {
                 float fcur = cfg.jointDelay[getBogieId()][index0];
                 float fnex = cfg.jointDelay[getBogieId()][index1];
                 this.jointDelay = Math.abs(fnex - fcur);
-            }
-        }
+            } 
+        } 
     }
 
     public double[] getPosBuf() {
@@ -295,16 +295,16 @@ public final class EntityBogie extends Entity implements Lockable {
                 this.rotationYaw = yaw % 360.0F;
                 this.movingYaw = movYaw;
                 break;
-        }
+        } 
     }
 
     public final void onUpdate() {
         if (!this.world.isRemote) {
             if (getTrain() == null)
-                setDead();
+                setDead(); 
             if (!this.tracked)
-                this.tracked = VehicleTrackerEntry.trackingVehicle(this);
-        }
+                this.tracked = VehicleTrackerEntry.trackingVehicle(this); 
+        } 
     }
 
     public void onBogieUpdate() {
@@ -313,14 +313,14 @@ public final class EntityBogie extends Entity implements Lockable {
         if (this.world.isRemote) {
             updatePosAndRotationClient();
             if (this.world.isBlockLoaded(getPosition()))
-                doBlockCollisions();
-        }
+                doBlockCollisions(); 
+        } 
     }
 
     public void setDead() {
         super.setDead();
         if (!this.world.isRemote)
-            RTMCore.NETWORK_WRAPPER.sendToAll(new PacketVehicleMovement(this, true));
+            RTMCore.NETWORK_WRAPPER.sendToAll(new PacketVehicleMovement(this, true)); 
     }
 
     @SideOnly(Side.CLIENT)
@@ -342,14 +342,14 @@ public final class EntityBogie extends Entity implements Lockable {
             double newY = train.posY + v31.getY();
             double newZ = train.posZ + v31.getZ();
             setPosition(newX, newY, newZ);
-        }
+        } 
         if (this.carPosRotationInc > 0) {
             float d0 = 1.0F / this.carPosRotationInc;
             this.rotationYaw += NGTMath.wrapAngle((float)(this.carYaw - this.rotationYaw)) * d0;
             this.rotationPitch = (float)(this.rotationPitch + (this.carPitch - this.rotationPitch) * d0);
             this.rotationRoll = (float)(this.rotationRoll + (this.carRoll - this.rotationRoll) * d0);
             this.carPosRotationInc--;
-        }
+        } 
         setRotation(this.rotationYaw, this.rotationPitch);
         setPosition(this.posX, this.posY, this.posZ);
     }
@@ -357,9 +357,9 @@ public final class EntityBogie extends Entity implements Lockable {
     public boolean attackEntityFrom(DamageSource par1, float par2) {
         if (getTrain() == null || (getTrain()).isDead) {
             if (!this.world.isRemote)
-                setDead();
+                setDead(); 
             return true;
-        }
+        } 
         return getTrain().attackEntityFrom(par1, par2);
     }
 
@@ -380,21 +380,21 @@ public final class EntityBogie extends Entity implements Lockable {
                     if (d0 < distanceSq) {
                         nearestBogie = (EntityBogie)entity;
                         distanceSq = d0;
-                    }
-                }
+                    } 
+                } 
                 continue;
-            }
+            } 
             if (entity instanceof EntityBumpingPost) {
                 collideWithBumpingPost((EntityBumpingPost)entity);
                 continue;
-            }
+            } 
             if (entity instanceof EntityLivingBase)
-                collideWithLiving((EntityLivingBase)entity);
-        }
+                collideWithLiving((EntityLivingBase)entity); 
+        } 
         if (nearestBogie != null) {
             connectBogie(nearestBogie);
             return true;
-        }
+        } 
         return false;
     }
 
@@ -403,15 +403,15 @@ public final class EntityBogie extends Entity implements Lockable {
         EntityTrainBase train2 = bogie.getTrain();
         if (train2 != null && !train.equals(train2)) {
             if (train.getFormation() != null && train.getFormation().containBogie(bogie))
-                return false;
+                return false; 
             if (!train.inConnectableRange(train2))
-                return false;
+                return false; 
             RailMap rm0 = TileEntityLargeRailBase.getRailMapFromCoordinates(this.world, this, this.posX, this.posY, this.posZ);
             RailMap rm1 = TileEntityLargeRailBase.getRailMapFromCoordinates(this.world, bogie, bogie.posX, bogie.posY, bogie.posZ);
             if (rm0 == null || !rm0.canConnect(rm1))
-                return false;
+                return false; 
             if (this.isActivated || bogie.isActivated)
-                return true;
+                return true; 
             float speed0 = train.getSpeed();
             float speed1 = train2.getSpeed();
             boolean b0 = (train.getTrainDirection() == getBogieId());
@@ -421,8 +421,8 @@ public final class EntityBogie extends Entity implements Lockable {
             if (sp0 - sp1 >= 0.0F) {
                 train2.setSpeed((b0 ^ b1) ? speed0 : -speed0);
                 train.setSpeed((b0 ^ b1) ? speed1 : -speed1);
-            }
-        }
+            } 
+        } 
         return false;
     }
 
@@ -439,7 +439,7 @@ public final class EntityBogie extends Entity implements Lockable {
         if (train.getTrainDirection() == getBogieId() && dsq <= dis) {
             train.stopTrain(true);
             if (train.getFirstPassenger() instanceof EntityPlayer);
-        }
+        } 
         return false;
     }
 
@@ -456,8 +456,8 @@ public final class EntityBogie extends Entity implements Lockable {
                 EntityDamageSource entityDamageSource = new EntityDamageSource("train", (Entity)train);
                 float damage = speed * 7.2F;
                 entity.attackEntityFrom((DamageSource)entityDamageSource, damage);
-            }
-        }
+            } 
+        } 
         return false;
     }
 
@@ -485,9 +485,9 @@ public final class EntityBogie extends Entity implements Lockable {
 
     public boolean processInitialInteract(EntityPlayer player, EnumHand hand) {
         if (getTrain() != null)
-            return getTrain().interactTrain(this, player);
+            return getTrain().interactTrain(this, player); 
         if (player.inventory.getCurrentItem() != null && player.inventory.getCurrentItem().getItem() == RTMItem.paddle)
-            return true;
+            return true; 
         return true;
     }
 
@@ -500,8 +500,8 @@ public final class EntityBogie extends Entity implements Lockable {
             int id = ((Integer)getDataManager().get(TRAIN_ID)).intValue();
             Entity entity = this.world.getEntityByID(id);
             if (entity instanceof EntityTrainBase)
-                this.parentTrain = (EntityTrainBase)entity;
-        }
+                this.parentTrain = (EntityTrainBase)entity; 
+        } 
         return this.parentTrain;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/EntityFreightCar.java b/src/api/rtm/jp/ngt/rtm/entity/train/EntityFreightCar.java
index 6db97cb..b38f29a 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/EntityFreightCar.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/EntityFreightCar.java
@@ -44,9 +44,9 @@ public final class EntityFreightCar extends EntityTrainBase implements IInventor
             if (nbt1.hasKey("Slot", 1)) {
                 byte b0 = nbt1.getByte("Slot");
                 if (b0 >= 0 && b0 < this.cargoSlots.length)
-                    this.cargoSlots[b0] = new ItemStack(nbt1);
-            }
-        }
+                    this.cargoSlots[b0] = new ItemStack(nbt1); 
+            } 
+        } 
     }
 
     protected void writeEntityToNBT(NBTTagCompound nbt) {
@@ -59,8 +59,8 @@ public final class EntityFreightCar extends EntityTrainBase implements IInventor
                 nbt0.setByte("Slot", (byte)i);
                 this.cargoSlots[i].writeToNBT(nbt0);
                 list.appendTag((NBTBase)nbt0);
-            }
-        }
+            } 
+        } 
         nbt.setTag("Items", (NBTBase)list);
     }
 
@@ -68,8 +68,8 @@ public final class EntityFreightCar extends EntityTrainBase implements IInventor
         super.setDead();
         for (int i = 0; i < this.cargoEntities.length; i++) {
             if (this.cargoEntities[i] != null)
-                this.cargoEntities[i].setDead();
-        }
+                this.cargoEntities[i].setDead(); 
+        } 
     }
 
     public void onVehicleUpdate() {
@@ -82,28 +82,28 @@ public final class EntityFreightCar extends EntityTrainBase implements IInventor
                         entity.updatePartPos(this);
                         this.world.spawnEntity((Entity)entity);
                         this.cargoEntities[i] = entity;
-                    }
+                    } 
                 } else if (this.cargoEntities[i] != null) {
                     this.cargoEntities[i].setDead();
                     this.cargoEntities[i] = (EntityContainer)null;
-                }
-            }
+                } 
+            }  
     }
 
     public boolean attackEntityFrom(DamageSource par1, float par2) {
         if (!this.world.isRemote)
             for (int i = 0; i < this.cargoSlots.length; i++) {
                 if (this.cargoSlots[i] != null)
-                    entityDropItem(this.cargoSlots[i], 1.0F);
-            }
+                    entityDropItem(this.cargoSlots[i], 1.0F); 
+            }  
         return super.attackEntityFrom(par1, par2);
     }
 
     public boolean processInitialInteract(EntityPlayer player, EnumHand hand) {
         if (super.processInitialInteract(player, hand))
-            return true;
+            return true; 
         if (!this.world.isRemote)
-            player.openGui(RTMCore.instance, RTMCore.guiIdFreightCar, player.world, getEntityId(), 0, 0);
+            player.openGui(RTMCore.instance, RTMCore.guiIdFreightCar, player.world, getEntityId(), 0, 0); 
         return true;
     }
 
@@ -130,7 +130,7 @@ public final class EntityFreightCar extends EntityTrainBase implements IInventor
             default:
                 cargo = new EntityContainer(this.world, this, this.cargoSlots[slot], pos, slot);
                 break;
-        }
+        } 
         cargo.readCargoFromItem();
         if (damage == 0 || damage == 1) {
             EntityCargoWithModel entity = (EntityCargoWithModel)cargo;
@@ -138,8 +138,8 @@ public final class EntityFreightCar extends EntityTrainBase implements IInventor
             if (state.getResourceSet().isDummy()) {
                 state.setResourceName(state.type.defaultName);
                 entity.updateResourceState();
-            }
-        }
+            } 
+        } 
         return cargo;
     }
 
@@ -157,12 +157,12 @@ public final class EntityFreightCar extends EntityTrainBase implements IInventor
                 ItemStack itemStack = this.cargoSlots[par1];
                 this.cargoSlots[par1] = ItemStack.EMPTY;
                 return itemStack;
-            }
+            } 
             ItemStack itemstack = this.cargoSlots[par1].splitStack(par2);
             if (this.cargoSlots[par1].getCount() == 0)
-                this.cargoSlots[par1] = ItemStack.EMPTY;
+                this.cargoSlots[par1] = ItemStack.EMPTY; 
             return itemstack;
-        }
+        } 
         return ItemStack.EMPTY;
     }
 
@@ -171,14 +171,14 @@ public final class EntityFreightCar extends EntityTrainBase implements IInventor
             ItemStack itemstack = this.cargoSlots[par1];
             this.cargoSlots[par1] = ItemStack.EMPTY;
             return itemstack;
-        }
+        } 
         return ItemStack.EMPTY;
     }
 
     public void setInventorySlotContents(int par1, ItemStack itemStack) {
         this.cargoSlots[par1] = itemStack;
         if (!itemStack.isEmpty() && itemStack.getCount() > getInventoryStackLimit())
-            itemStack.setCount(getInventoryStackLimit());
+            itemStack.setCount(getInventoryStackLimit()); 
     }
 
     public String getName() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/EntityTrainBase.java b/src/api/rtm/jp/ngt/rtm/entity/train/EntityTrainBase.java
index 0344c6d..060abde 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/EntityTrainBase.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/EntityTrainBase.java
@@ -125,13 +125,13 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
 
     private void writeFormationData(NBTTagCompound nbt) {
         if (this.formation == null)
-            return;
+            return; 
         FormationEntry entry = this.formation.getEntry(this);
         if (entry != null) {
             nbt.setLong("FormationId", this.formation.id);
             nbt.setByte("EntryPos", entry.entryId);
             nbt.setByte("EntryDir", entry.dir);
-        }
+        } 
     }
 
     protected void readEntityFromNBT(NBTTagCompound nbt) {
@@ -151,7 +151,7 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
         } else {
             this.formation = f0;
             f0.setTrain(this, pos, dir);
-        }
+        } 
     }
 
     public AxisAlignedBB getCollisionBox(Entity par1) {
@@ -171,21 +171,21 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
                 this.formation.onRemovedTrain(this);
             } catch (IndexOutOfBoundsException e) {
                 e.printStackTrace();
-            }
-        }
+            } 
+        } 
     }
 
     public void onVehicleUpdate() {
         updateSpeed();
         if (existBogies())
-            this.bogieController.updateBogies(this);
+            this.bogieController.updateBogies(this); 
         super.onVehicleUpdate();
         if (this.world.isRemote) {
             spawnSmoke();
         } else {
             updateChunks();
             updateATS();
-        }
+        } 
     }
 
     protected void updateFallState() {
@@ -193,12 +193,12 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
             this.motionY = 0.0D;
         } else {
             super.updateFallState();
-        }
+        } 
     }
 
     protected void updateMovement() {
         if (this.formation.isFrontCar(this))
-            this.formation.updateTrainMovement();
+            this.formation.updateTrainMovement(); 
     }
 
     public void updateTrainMovement(BogieController.MotionState state) {
@@ -214,21 +214,21 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
                 this.onRail = false;
                 this.noClip = false;
                 setSpeed(0.0F);
-            }
+            } 
         } else if (state == BogieController.MotionState.MOVE) {
             if (!this.onRail) {
                 this.motionX = this.motionY = this.motionZ = 0.0D;
                 this.onRail = true;
                 this.noClip = true;
-            }
+            } 
         } else if (state == BogieController.MotionState.STOP) {
 
-        }
+        } 
         if (!this.onRail) {
             super.updateMovement();
             this.bogieController.updateBogiePos(this, 0, BogieController.UpdateFlag.NONE);
             this.bogieController.updateBogiePos(this, 1, BogieController.UpdateFlag.NONE);
-        }
+        } 
     }
 
     protected void applyPhysicalEffect() {
@@ -241,9 +241,9 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
             this.rotationPitch -= f0;
         } else if (this.rotationPitch < 0.0F) {
             this.rotationPitch += f0;
-        }
+        } 
         if (Math.abs(this.rotationPitch) < f0)
-            this.rotationPitch = 0.0F;
+            this.rotationPitch = 0.0F; 
         (getBogie(0)).rotationPitch = this.rotationPitch;
         (getBogie(1)).rotationPitch = this.rotationPitch * -1.0F;
     }
@@ -253,7 +253,7 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
         float f0 = -cfg.rolling;
         float pendulum = NGTMath.wrapAngle((this.rotationYaw - this.prevRotationYaw) * f0);
         if (getTrainDirection() == 1)
-            pendulum *= -1.0F;
+            pendulum *= -1.0F; 
         float roll = par1 + pendulum;
         this.wave = (float)((this.wave + getSpeed() * cfg.rollSpeedCoefficient) % 6.283185307179586D);
         float sw = (NGTMath.getSin(this.wave) + NGTMath.getSin(this.wave * cfg.rollVariationCoefficient)) * 0.5F;
@@ -266,8 +266,8 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
             if (this.atsCount >= 100) {
                 stopTrain(false);
                 this.atsCount = 0;
-            }
-        }
+            } 
+        } 
     }
 
     protected void updateBlockCollisionState() {
@@ -278,8 +278,8 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
             if (railCore != null) {
                 int signal = railCore.getSignal();
                 setSignal(signal);
-            }
-        }
+            } 
+        } 
         doBlockCollisions();
     }
 
@@ -304,13 +304,13 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
                     double d2 = this.posZ + vec3.getZ() + random.nextFloat() * 0.5D - 0.25D;
                     double smokeSpeed = 0.0625D;
                     if ((set.getConfig()).smoke.length == 7)
-                        smokeSpeed = ((Double)(set.getConfig()).smoke[i][6]).doubleValue();
+                        smokeSpeed = ((Double)(set.getConfig()).smoke[i][6]).doubleValue(); 
                     double vx = (random.nextDouble() * 2.0D - 1.0D) * smokeSpeed;
                     double vz = (random.nextDouble() * 2.0D - 1.0D) * smokeSpeed;
                     this.world.spawnParticle(particle, d0, d1, d2, vx, 0.25D, vz, new int[0]);
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     @SideOnly(Side.CLIENT)
@@ -318,25 +318,25 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
         super.updateAnimation();
         ModelSetTrain modelSet = getResourceState().getResourceSet();
         if (getTrainDirection() == 0 && this.seatRotation > -45)
-            this.seatRotation--;
+            this.seatRotation--; 
         if (getTrainDirection() == 1 && this.seatRotation < 45)
-            this.seatRotation++;
+            this.seatRotation++; 
         setRollsignAnimation(getVehicleState(TrainState.TrainStateType.Destination));
         if (this.rollsignAnimation > this.rollsignV) {
             this.rollsignAnimation--;
         } else if (this.rollsignAnimation < this.rollsignV) {
             this.rollsignAnimation++;
-        }
+        } 
         if ((getResourceState()).type == RTMResource.TRAIN_EC)
             if (this.complessorActive) {
                 this.brakeAirCount++;
                 if (this.brakeAirCount >= 2880) {
                     this.complessorActive = false;
                     RTMCore.proxy.playSound((Entity)this, "rtm:sounds/train/cp_fin.ogg", 1.0F, 1.0F);
-                }
+                } 
             } else if (this.brakeAirCount < 2480) {
                 this.complessorActive = true;
-            }
+            }  
     }
 
     protected int[] getPantographMaxHeight() {
@@ -359,14 +359,14 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
                         if (rand.nextInt(20) == 0) {
                             int count = rand.nextInt(5) + 1;
                             for (int k = 0; k < 5; k++)
-                                NGTParticle.INSTANCE.spawnParticle(getEntityWorld(), 100, false, this.posX + vec.getX(), y, this.posZ + vec.getZ(), rand.nextGaussian() * 0.0625D, -0.25D, rand.nextGaussian() * 0.0625D, ia);
-                        }
-                    }
-                }
-            }
+                                NGTParticle.INSTANCE.spawnParticle(getEntityWorld(), 100, false, this.posX + vec.getX(), y, this.posZ + vec.getZ(), rand.nextGaussian() * 0.0625D, -0.25D, rand.nextGaussian() * 0.0625D, ia); 
+                        } 
+                    } 
+                } 
+            } 
         } else {
             ia = new int[] { 0, 0 };
-        }
+        } 
         return ia;
     }
 
@@ -374,7 +374,7 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
     public float getCouplerYaw(int dir) {
         EntityTrainBase conTrain = getConnectedTrain(dir);
         if (conTrain == null)
-            return 0.0F;
+            return 0.0F; 
         float dif = NGTMath.getAngleD(this.posZ, this.posX, conTrain.posZ, conTrain.posX);
         float angle = NGTMath.wrapAngle(dif - this.rotationYaw + ((dir == 0) ? 0.0F : 180.0F));
         return angle + ((Math.abs(angle) > 90.0F) ? 180.0F : 0.0F);
@@ -384,16 +384,16 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
         ModelSetTrain modelSet = getResourceState().getResourceSet();
         String sound = isStrong ? (modelSet.getConfig()).sound_BrakeRelease : (modelSet.getConfig()).sound_BrakeRelease2;
         if (sound != null)
-            RTMCore.proxy.playSound((Entity)this, sound, 1.0F, 1.0F);
+            RTMCore.proxy.playSound((Entity)this, sound, 1.0F, 1.0F); 
     }
 
     protected void updateSpeed() {
         if (!this.onRail)
-            return;
+            return; 
         int notch = getNotch();
         Entity passenger = getFirstPassenger();
         if (passenger == null || (!(passenger instanceof EntityPlayer) && !(passenger instanceof EntityMotorman)))
-            if (notch > 0);
+            if (notch > 0); 
         boolean isBrakeDisabled = true;
         float speed = getSpeed();
         if (notch < 0) {
@@ -401,19 +401,19 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
             if (this.brakeCount < max) {
                 this.brakeCount++;
                 if (this.world.isRemote)
-                    this.brakeAirCount--;
+                    this.brakeAirCount--; 
             } else if (this.brakeCount > max) {
                 this.brakeCount -= (this.brakeCount - max > 1) ? 2 : 1;
-            }
+            } 
         } else if (notch >= 0) {
             if (this.brakeCount > 0) {
                 if (speed <= 0.0F)
-                    isBrakeDisabled = false;
+                    isBrakeDisabled = false; 
                 this.brakeCount -= 2;
             } else if (this.brakeCount < 0) {
                 this.brakeCount = 0;
-            }
-        }
+            } 
+        } 
         if (isControlCar())
             if (isBrakeDisabled && !this.world.isRemote) {
                 ModelSetTrain set = getResourceState().getResourceSet();
@@ -427,13 +427,13 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
                         float dec = 0.0125F;
                         float f2 = (getTrainDirection() == 0) ? dec : -dec;
                         deceleration = NGTMath.sin(this.rotationPitch) * f2;
-                    }
+                    } 
                     speed += acceleration - deceleration;
                 } else {
                     speed += (speed > 0.0F) ? acceleration : ((speed < 0.0F) ? -acceleration : 0.0F);
-                }
+                } 
                 setSpeed(speed);
-            }
+            }  
     }
 
     public void setPositionAndRotation(double x, double y, double z, float yaw, float pitch) {
@@ -448,7 +448,7 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
 
     public void move(MoverType type, double x, double y, double z) {
         if (!this.onRail)
-            super.move(type, x, y, z);
+            super.move(type, x, y, z); 
     }
 
     public void addVelocity(double par1, double par3, double par5) {}
@@ -460,7 +460,7 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
             double d0 = ((TrainConfig)modelSet0.getConfig()).trainDistance;
             double d1 = ((TrainConfig)modelSet1.getConfig()).trainDistance;
             return d0 + d1;
-        }
+        } 
         return 20.25D;
     }
 
@@ -483,7 +483,7 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
 
     public boolean attackEntityFrom(DamageSource par1, float par2) {
         if (isEntityInvulnerable(par1) || this.isDead)
-            return false;
+            return false; 
         if (!par1.isExplosion() && par1.getTrueSource() instanceof EntityPlayer) {
             EntityPlayer player = (EntityPlayer)par1.getTrueSource();
             if (!this.world.isRemote && PermissionManager.INSTANCE.hasPermission(player, "editVehicle")) {
@@ -493,19 +493,19 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
                     if (model != null) {
                         String type = model.getConfig().getSubType();
                         damage = type.equals("DC") ? 0 : (type.equals("EC") ? 1 : (type.equals("CC") ? 2 : 3));
-                    }
+                    } 
                     entityDropItem(new ItemStack(RTMItem.itemtrain, 1, damage), 0.0F);
-                }
+                } 
                 setDead();
-            }
+            } 
             return true;
-        }
+        } 
         return false;
     }
 
     protected boolean interactTrain(EntityBogie bogie, EntityPlayer player) {
         if (getFirstPassenger() != null && !getFirstPassenger().equals(player))
-            return true;
+            return true; 
         if (!this.world.isRemote) {
             ItemStack itemstack = player.inventory.getCurrentItem();
             int id1 = bogie.getBogieId();
@@ -516,11 +516,11 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
                     mountMotorman(bogie, player, itemstack);
                 } else if (itemstack.getItem() == RTMItem.paddle) {
                     NGTLog.sendChatMessage((ICommandSender)player, "UUID:" + getUniqueID().toString() + "(bogie, found train)", new Object[0]);
-                }
+                } 
             } else if (id1 >= 0) {
                 mountEntityToTrain((Entity)player, id1);
-            }
-        }
+            } 
+        } 
         return true;
     }
 
@@ -533,7 +533,7 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
             } else {
                 this.formation.onDisconnectedTrain(this, id1);
                 NGTLog.sendChatMessage((ICommandSender)player, "message.train.deconcatenation", new Object[0]);
-            }
+            }  
     }
 
     protected void mountMotorman(EntityBogie bogie, EntityPlayer player, ItemStack stack) {
@@ -544,35 +544,34 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
             if (this.world.spawnEntity((Entity)motorman)) {
                 mountEntityToTrain((Entity)motorman, id1);
                 stack.shrink(1);
-            }
-        }
+            } 
+        } 
     }
 
     private void mountEntityToTrain(Entity entity, int direction) {
         if (getTrainDirection() != direction)
-            setSpeed(-getSpeed());
+            setSpeed(-getSpeed()); 
         setTrainDirection(direction);
         entity.startRiding((Entity)this);
     }
 
     protected void removePassengerFromVehicle(Entity passenger) {
-        EntityTrainBase entityTrainBase;
         Entity riding = getBogie(getTrainDirection());
         if (riding == null || getDistanceSq(riding) > 225.0D)
-        fixRiderPosOnDismount(passenger, (Entity)entityTrainBase);
+        fixRiderPosOnDismount(passenger, riding);
     }
 
     public boolean processInitialInteract(EntityPlayer player, EnumHand hand) {
         if (player.isSneaking()) {
             if (this.world.isRemote)
-                player.openGui(RTMCore.instance, RTMCore.guiIdSelectEntityModel, player.world, getEntityId(), 0, 0);
+                player.openGui(RTMCore.instance, RTMCore.guiIdSelectEntityModel, player.world, getEntityId(), 0, 0); 
             return true;
-        }
+        } 
         if (NGTUtil.isEquippedItem(player, RTMItem.paddle)) {
             if (!this.world.isRemote)
-                NGTLog.sendChatMessage((ICommandSender)player, "UUID:" + getUniqueID().toString() + "(train)", new Object[0]);
+                NGTLog.sendChatMessage((ICommandSender)player, "UUID:" + getUniqueID().toString() + "(train)", new Object[0]); 
             return true;
-        }
+        } 
         return false;
     }
 
@@ -592,8 +591,8 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
             if (existBogies()) {
                 getBogie(0).setBogieSize(width, 1.1875F);
                 getBogie(1).setBogieSize(width, 1.1875F);
-            }
-        }
+            } 
+        } 
     }
 
     public void connectTrain(EntityBogie par1, EntityBogie par2) {
@@ -608,11 +607,11 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
                     player = (EntityPlayer)getFirstPassenger();
                 } else if (par2.getTrain().getFirstPassenger() instanceof EntityPlayer) {
                     player = (EntityPlayer)par2.getTrain().getFirstPassenger();
-                }
+                } 
                 if (player != null)
-                    NGTLog.sendChatMessage((ICommandSender)player, "message.train.concatenated", new Object[0]);
-            }
-        }
+                    NGTLog.sendChatMessage((ICommandSender)player, "message.train.concatenated", new Object[0]); 
+            } 
+        } 
     }
 
     public float getSpeed() {
@@ -624,7 +623,7 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
             this.trainSpeed = par1;
         } else if (isControlCar()) {
             this.formation.setSpeed(par1);
-        }
+        } 
     }
 
     public void setSpeed_NoSync(float par1) {
@@ -635,8 +634,8 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
         if (this.formation != null) {
             setNotch(-8);
             if (changeSpeed)
-                setSpeed(0.0F);
-        }
+                setSpeed(0.0F); 
+        } 
     }
 
     public boolean isControlCar() {
@@ -665,18 +664,18 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
         if (this.formation != null) {
             FormationEntry entry = this.formation.getEntry(this);
             if (entry == null)
-                return null;
+                return null; 
             int pos = entry.entryId;
             int dif = (par1 == 0) ? -1 : 1;
             if (entry.dir == 1)
-                dif *= -1;
+                dif *= -1; 
             pos += dif;
             if (pos < 0 || pos >= this.formation.size())
-                return null;
+                return null; 
             FormationEntry connected = this.formation.get(pos);
             if (connected != null)
-                return connected.train;
-        }
+                return connected.train; 
+        } 
         return null;
     }
 
@@ -697,7 +696,7 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
             setTrainDirection_NoSync((byte)par1);
         } else {
             this.formation.setTrainDirection((byte)par1, this);
-        }
+        } 
     }
 
     public void setTrainDirection_NoSync(byte par1) {
@@ -707,7 +706,7 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
             if (existBogies()) {
                 getBogie(par1).setFront(true);
                 getBogie(id2).setFront(false);
-            }
+            }  
     }
 
     public int getNotch() {
@@ -726,10 +725,10 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
             if (setNotch(i + par2)) {
                 RTMCore.proxy.playSound(driver, "rtm:sounds/train/lever.ogg", 1.0F, 1.0F);
                 if (i < 0 && par2 > 0 && !this.world.isRemote)
-                    playBrakeReleaseSound((i == -1));
+                    playBrakeReleaseSound((i == -1)); 
                 return true;
-            }
-        }
+            } 
+        } 
         return false;
     }
 
@@ -740,8 +739,8 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
                 if (prevNotch != par1) {
                     super.setVehicleState(TrainState.TrainStateType.Notch, (byte)par1);
                     return true;
-                }
-            }
+                } 
+            }  
         return false;
     }
 
@@ -754,20 +753,20 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
         if (par1 > 0 && signal != -1) {
             setSignal2(par1);
             if (par1 == 1 && getSpeed() > 0.0F)
-                this.atsCount++;
-        }
+                this.atsCount++; 
+        } 
     }
 
     public void setSignal2(int par1) {
         if (par1 == -1)
-            this.atsCount = 0;
+            this.atsCount = 0; 
         super.setVehicleState(TrainState.TrainStateType.Signal, (byte)par1);
     }
 
     public void setVehicleState(TrainState.TrainStateType type, byte data) {
         byte b = (data < type.min) ? type.max : ((data > type.max) ? type.min : data);
         if (this.formation != null)
-            this.formation.setTrainStateData(type, b, this);
+            this.formation.setTrainStateData(type, b, this); 
     }
 
     public void setTrainStateData_NoSync(TrainState.TrainStateType type, byte data) {
@@ -784,7 +783,7 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
         if (getBogie(i) != null) {
             boolean b0 = getBogie(i).isFront();
             return ((i == 0 && b0) || (i == 1 && !b0)) ? 1.0F : -1.0F;
-        }
+        } 
         return 1.0F;
     }
 
@@ -801,7 +800,7 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
             forceChunkLoading();
         } else {
             releaseTicket();
-        }
+        } 
         this.prevChunkCoordX = this.chunkCoordX;
         this.prevChunkCoordZ = this.chunkCoordZ;
     }
@@ -815,7 +814,7 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
         if (this.ticket != null) {
             ForgeChunkManager.releaseTicket(this.ticket);
             this.ticket = null;
-        }
+        } 
     }
 
     private boolean requestTicket() {
@@ -827,14 +826,14 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
             chunkTicket.bindEntity((Entity)this);
             setChunkTicket(chunkTicket);
             return true;
-        }
+        } 
         NGTLog.debug("[RTM] Failed to get ticket (Chunk Loader)");
         return false;
     }
 
     public void setChunkTicket(ForgeChunkManager.Ticket par1) {
         if (this.ticket != par1)
-            ForgeChunkManager.releaseTicket(this.ticket);
+            ForgeChunkManager.releaseTicket(this.ticket); 
         this.ticket = par1;
     }
 
@@ -845,14 +844,14 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
     public void forceChunkLoading(int x, int z) {
         if (!this.world.isRemote) {
             if (this.ticket == null && !requestTicket())
-                return;
+                return; 
             if (x != this.prevChunkCoordX || z != this.prevChunkCoordZ)
-                setupChunks(x, z);
+                setupChunks(x, z); 
             for (ChunkPos chunk : this.loadedChunks)
-                ForgeChunkManager.forceChunk(this.ticket, chunk);
+                ForgeChunkManager.forceChunk(this.ticket, chunk); 
             ChunkPos myChunk = new ChunkPos(x, z);
             ForgeChunkManager.forceChunk(this.ticket, myChunk);
-        }
+        } 
     }
 
     private void setupChunks(int xChunk, int zChunk) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/RenderBogie.java b/src/api/rtm/jp/ngt/rtm/entity/train/RenderBogie.java
index ec585e2..3c3be22 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/RenderBogie.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/RenderBogie.java
@@ -30,7 +30,7 @@ public final class RenderBogie extends Render<EntityBogie> {
             x = par2 + (train.posX - train.prevPosX) * partialTick;
             y = par4 + (train.posY - train.prevPosY) * partialTick;
             z = par6 + (train.posZ - train.prevPosZ) * partialTick;
-        }
+        } 
         GL11.glTranslatef((float)x, (float)y + 1.1875F, (float)z);
         float yaw = bogie.prevRotationYaw + NGTMath.wrapAngle(bogie.rotationYaw - bogie.prevRotationYaw) * partialTick;
         GL11.glRotatef(yaw, 0.0F, 1.0F, 0.0F);
@@ -46,10 +46,10 @@ public final class RenderBogie extends Render<EntityBogie> {
                 VehicleBaseConfig cfg = modelset.getConfig();
                 modelset.bogieModels[index].render(bogie, cfg, 0, partialTick);
                 flag = false;
-            }
-        }
+            } 
+        } 
         if (flag)
-            RTMCore.proxy.renderMissingModel();
+            RTMCore.proxy.renderMissingModel(); 
         GL11.glEnable(2884);
         GL11.glPopMatrix();
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/CargoPos.java b/src/api/rtm/jp/ngt/rtm/entity/train/parts/CargoPos.java
index c437e13..c365ada 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/CargoPos.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/parts/CargoPos.java
@@ -22,8 +22,8 @@ public enum CargoPos {
     public static CargoPos getCargoPos(float size) {
         for (CargoPos cp : values()) {
             if (size > cp.min && size <= cp.max)
-                return cp;
-        }
+                return cp; 
+        } 
         return C40FT;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityArtillery.java b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityArtillery.java
index 1c49b57..1cbfbc0 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityArtillery.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityArtillery.java
@@ -92,17 +92,17 @@ public class EntityArtillery extends EntityCargoWithModel<ModelSetFirearm> {
     public void onUpdate() {
         super.onUpdate();
         if (this.recoilCount > 0)
-            this.recoilCount--;
+            this.recoilCount--; 
         if (this.ammoCount > 0) {
             if (this.recoilCount <= 0) {
                 ItemAmmunition.BulletType type = ItemAmmunition.BulletType.getBulletType(hasAmmo());
                 boolean b = (getEntityWorld()).isRemote ? fireOnClient(type) : fireOnServer(type);
                 this.recoilCount = (((ModelSetFirearm)getResourceState().getResourceSet()).getConfig()).rateOfFire;
                 this.ammoCount--;
-            }
+            } 
         } else if (!(getEntityWorld()).isRemote && this.ammoCount == 0 && hasAmmo() >= 0) {
             setAmmo(-1);
-        }
+        } 
         if (getPassengers().isEmpty()) {
             this.controller.onUpdate(this);
         } else {
@@ -110,7 +110,7 @@ public class EntityArtillery extends EntityCargoWithModel<ModelSetFirearm> {
             float yaw = NGTMath.wrapAngle(-ridden.rotationYaw - this.rotationYaw);
             setBarrelYaw(yaw);
             setBarrelPitch(ridden.rotationPitch);
-        }
+        } 
     }
 
     public void updatePassenger(Entity passenger) {
@@ -121,7 +121,7 @@ public class EntityArtillery extends EntityCargoWithModel<ModelSetFirearm> {
             v31 = v31.rotateAroundY(this.rotationYaw);
             Vec3 v32 = v31.add(this.posX, this.posY, this.posZ);
             passenger.setPosition(v32.getX(), v32.getY() + passenger.getYOffset(), v32.getZ());
-        }
+        } 
     }
 
     @SideOnly(Side.CLIENT)
@@ -133,26 +133,26 @@ public class EntityArtillery extends EntityCargoWithModel<ModelSetFirearm> {
         speed = cfg.rotationSpeedY;
         yaw += (riderYaw - yaw) * speed;
         if (yaw > cfg.yaw[0])
-            yaw = cfg.yaw[0];
+            yaw = cfg.yaw[0]; 
         if (yaw < cfg.yaw[1])
-            yaw = cfg.yaw[1];
+            yaw = cfg.yaw[1]; 
         player.rotationYaw = player.prevRotationYaw = -yaw - this.rotationYaw;
         float riderPitch = player.rotationPitch;
         float pitch = getBarrelPitch();
         speed = cfg.rotationSpeedX;
         pitch += (riderPitch - pitch) * speed;
         if (pitch > -cfg.pitch[1])
-            pitch = -cfg.pitch[1];
+            pitch = -cfg.pitch[1]; 
         if (pitch < -cfg.pitch[0])
-            pitch = -cfg.pitch[0];
+            pitch = -cfg.pitch[0]; 
         player.rotationPitch = player.prevRotationPitch = pitch;
     }
 
     public boolean processInitialInteract(EntityPlayer player, EnumHand hand) {
         if (super.processInitialInteract(player, hand))
-            return true;
+            return true; 
         if (isBeingRidden())
-            return true;
+            return true; 
         ItemStack itemstack = player.inventory.getCurrentItem();
         if (itemstack != null) {
             int type = getAmmoType(itemstack.getItemDamage());
@@ -165,18 +165,18 @@ public class EntityArtillery extends EntityCargoWithModel<ModelSetFirearm> {
                             this.world.playSound(this.posX, this.posY, this.posZ, sound, SoundCategory.BLOCKS, 1.0F, 0.8F, false);
                             itemstack.shrink(1);
                             this.ammoCount--;
-                        }
+                        }   
                 return true;
-            }
+            } 
             if (itemstack.getItem() == RTMItem.paddle) {
                 if (!this.world.isRemote)
                     if (hasAmmo() >= 0)
-                        fire(player, ItemAmmunition.BulletType.getBulletType(hasAmmo()), -this.ammoCount);
+                        fire(player, ItemAmmunition.BulletType.getBulletType(hasAmmo()), -this.ammoCount);  
                 return true;
-            }
-        }
+            } 
+        } 
         if (!this.world.isRemote)
-            player.startRiding((Entity)this);
+            player.startRiding((Entity)this); 
         return true;
     }
 
@@ -189,23 +189,23 @@ public class EntityArtillery extends EntityCargoWithModel<ModelSetFirearm> {
                     if (!player.capabilities.isCreativeMode) {
                         stack.shrink(1);
                         if (stack.getCount() <= 0)
-                            player.inventory.setInventorySlotContents(i, ItemStack.EMPTY);
-                    }
+                            player.inventory.setInventorySlotContents(i, ItemStack.EMPTY); 
+                    } 
                     if (!(getEntityWorld()).isRemote)
-                        fire(player, ItemAmmunition.BulletType.getBulletType(type), 1);
+                        fire(player, ItemAmmunition.BulletType.getBulletType(type), 1); 
                     return;
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     public boolean fire(@Nullable EntityPlayer player, ItemAmmunition.BulletType type, int count) {
         if (player != null && !PermissionManager.INSTANCE.hasPermission(player, "useCannon"))
-            return false;
+            return false; 
         setAmmo(type.id);
         int max = (((ModelSetFirearm)getResourceState().getResourceSet()).getConfig()).magazineSize;
         if (count > max)
-            count = max;
+            count = max; 
         this.ammoCount = count;
         RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)new PacketNotice((byte)1, "fire," + count, (Entity)this));
         return true;
@@ -259,10 +259,10 @@ public class EntityArtillery extends EntityCargoWithModel<ModelSetFirearm> {
                 double zRand = this.world.rand.nextDouble() * 2.0D - 1.0D;
                 this.world.spawnParticle(EnumParticleTypes.EXPLOSION_LARGE, vMuzzle.getX() + xRand, vMuzzle.getY() + yRand, vMuzzle.getZ() + zRand, 0.0D, 0.0D, 0.0D, new int[0]);
                 this.world.playSound(vMuzzle.getX() + xRand, vMuzzle.getY() + yRand, vMuzzle.getZ() + zRand, SoundEvents.ENTITY_GENERIC_EXPLODE, SoundCategory.BLOCKS, 1.0F, 1.0F, false);
-            }
+            } 
         } else {
             RTMCore.proxy.playSound((Entity)this, "rtm:sounds/item/gun.ogg", RTMCore.gunSoundVol, 1.0F);
-        }
+        } 
         return true;
     }
 
@@ -279,11 +279,11 @@ public class EntityArtillery extends EntityCargoWithModel<ModelSetFirearm> {
             par1 = MathHelper.wrapDegrees(par1);
             FirearmConfig cfg = ((ModelSetFirearm)getResourceState().getResourceSet()).getConfig();
             if (par1 > cfg.yaw[0])
-                par1 = cfg.yaw[0];
+                par1 = cfg.yaw[0]; 
             if (par1 < cfg.yaw[1])
-                par1 = cfg.yaw[1];
+                par1 = cfg.yaw[1]; 
             getDataManager().set(B_YAW, Float.valueOf(par1));
-        }
+        } 
     }
 
     public float getBarrelPitch() {
@@ -295,11 +295,11 @@ public class EntityArtillery extends EntityCargoWithModel<ModelSetFirearm> {
             par1 = MathHelper.wrapDegrees(par1);
             FirearmConfig cfg = ((ModelSetFirearm)getResourceState().getResourceSet()).getConfig();
             if (par1 > -cfg.pitch[1])
-                par1 = -cfg.pitch[1];
+                par1 = -cfg.pitch[1]; 
             if (par1 < -cfg.pitch[0])
-                par1 = -cfg.pitch[0];
+                par1 = -cfg.pitch[0]; 
             getDataManager().set(B_PITCH, Float.valueOf(par1));
-        }
+        } 
     }
 
     public void setAmmo(int par1) {
@@ -313,7 +313,7 @@ public class EntityArtillery extends EntityCargoWithModel<ModelSetFirearm> {
     public int getAmmoType(int par1) {
         int i0 = par1 / 4;
         if (par1 % 4 == 0 && (i0 == 0 || i0 == 5))
-            return i0;
+            return i0; 
         return -1;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityCargo.java b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityCargo.java
index 53a1760..e5321cc 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityCargo.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityCargo.java
@@ -36,7 +36,7 @@ public abstract class EntityCargo extends EntityVehiclePart {
 
     private void setItem(ItemStack stack) {
         if (stack.getCount() > 1)
-            stack.setCount(1);
+            stack.setCount(1); 
         this.itemCargo = stack;
     }
 
@@ -66,7 +66,7 @@ public abstract class EntityCargo extends EntityVehiclePart {
     public void readCargoFromItem() {
         NBTTagCompound itemNBT = this.itemCargo.getTagCompound();
         if (itemNBT != null)
-            readCargoFromNBT(itemNBT);
+            readCargoFromNBT(itemNBT); 
     }
 
     protected void writeEntityToNBT(NBTTagCompound nbt) {
@@ -82,7 +82,7 @@ public abstract class EntityCargo extends EntityVehiclePart {
 
     public void writeCargoToItem() {
         if (!this.itemCargo.hasTagCompound())
-            this.itemCargo.setTagCompound(new NBTTagCompound());
+            this.itemCargo.setTagCompound(new NBTTagCompound()); 
         writeCargoToNBT(this.itemCargo.getTagCompound());
     }
 
@@ -90,15 +90,15 @@ public abstract class EntityCargo extends EntityVehiclePart {
 
     public boolean attackEntityFrom(DamageSource par1, float par2) {
         if (isEntityInvulnerable(par1) || this.isDead)
-            return false;
+            return false; 
         if (!par1.isExplosion() && par1.getTrueSource() instanceof net.minecraft.entity.player.EntityPlayer) {
             if (!this.world.isRemote)
                 if (this.isIndependent || getVehicle() == null) {
                     setDead();
                     dropCargoItem();
-                }
+                }  
             return true;
-        }
+        } 
         return false;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityCargoWithModel.java b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityCargoWithModel.java
index e1d489e..32c4af3 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityCargoWithModel.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityCargoWithModel.java
@@ -18,7 +18,7 @@ import net.minecraft.util.EnumHand;
 import net.minecraft.world.World;
 
 public abstract class EntityCargoWithModel<T extends ModelSetBase> extends EntityCargo implements IResourceSelector {
-    private final ResourceState<T> state = (ResourceState)new ResourceState<>(getSubType(), this);
+    private final ResourceState state = (ResourceState)new ResourceState<>(getSubType(), this);
 
     public EntityCargoWithModel(World par1) {
         super(par1);
@@ -52,13 +52,13 @@ public abstract class EntityCargoWithModel<T extends ModelSetBase> extends Entit
     public boolean processInitialInteract(EntityPlayer player, EnumHand hand) {
         if (player.isSneaking()) {
             if (this.world.isRemote)
-                player.openGui(RTMCore.instance, RTMCore.guiIdSelectEntityModel, player.world, getEntityId(), 0, 0);
+                player.openGui(RTMCore.instance, RTMCore.guiIdSelectEntityModel, player.world, getEntityId(), 0, 0); 
             return true;
-        }
+        } 
         return false;
     }
 
-    public ResourceState<T> getResourceState() {
+    public ResourceState<? extends T> getResourceState() {
         return this.state;
     }
 
@@ -67,8 +67,8 @@ public abstract class EntityCargoWithModel<T extends ModelSetBase> extends Entit
             writeCargoToItem();
             PacketNBT.sendToClient((Entity)this);
             if (getVehicle() != null)
-                updatePartPos(getVehicle());
-        }
+                updatePartPos(getVehicle()); 
+        } 
     }
 
     public int[] getSelectorPos() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityContainer.java b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityContainer.java
index 0e883fa..d781d4e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityContainer.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityContainer.java
@@ -52,8 +52,8 @@ public class EntityContainer extends EntityCargoWithModel<ModelSetContainer> imp
             NBTTagCompound nbt2 = tagList.getCompoundTagAt(i);
             byte b0 = nbt2.getByte("Slot");
             if (b0 >= 0 && b0 < this.containerSlots.length)
-                this.containerSlots[b0] = ItemUtil.readFromNBT(nbt2);
-        }
+                this.containerSlots[b0] = ItemUtil.readFromNBT(nbt2); 
+        } 
     }
 
     protected void writeCargoToNBT(NBTTagCompound nbt) {
@@ -65,20 +65,20 @@ public class EntityContainer extends EntityCargoWithModel<ModelSetContainer> imp
                 nbt1.setByte("Slot", (byte)i);
                 ItemUtil.writeToNBT(nbt1, this.containerSlots[i]);
                 tagList.appendTag((NBTBase)nbt1);
-            }
-        }
+            } 
+        } 
         nbt.setTag("Items", (NBTBase)tagList);
     }
 
     private NBTTagCompound getCargoNBT() {
         if (!this.itemCargo.hasTagCompound())
-            this.itemCargo.setTagCompound(new NBTTagCompound());
+            this.itemCargo.setTagCompound(new NBTTagCompound()); 
         return this.itemCargo.getTagCompound();
     }
 
     public AxisAlignedBB getCollisionBox(Entity entity) {
         if (entity instanceof EntityFloor || entity instanceof EntityVehicleBase || entity instanceof jp.ngt.rtm.entity.train.EntityBogie)
-            return null;
+            return null; 
         return entity.getEntityBoundingBox();
     }
 
@@ -93,38 +93,39 @@ public class EntityContainer extends EntityCargoWithModel<ModelSetContainer> imp
 
     public boolean processInitialInteract(EntityPlayer player, EnumHand hand) {
         if (super.processInitialInteract(player, hand))
-            return true;
+            return true; 
         ItemStack itemstack = player.inventory.getCurrentItem();
         if (this.isIndependent && itemstack != null) {
             if (itemstack.getItem() instanceof ItemCargo && itemstack.getItemDamage() == 0) {
                 double d0 = 1.5D;
                 double d1 = 256.0D;
                 List<Entity> list = getEntityWorld().getEntitiesWithinAABBExcludingEntity((Entity)player, new AxisAlignedBB(this.posX - d0, this.posY, this.posZ - d0, this.posX + d0, this.posY + d1, this.posZ + d0));
+                EntityContainer topEntity = this;
                 for (Entity entity : list) {
                     if (entity instanceof EntityContainer && entity.posY > topEntity.posY)
-                        topEntity = (EntityContainer)entity;
-                }
+                        topEntity = (EntityContainer)entity; 
+                } 
                 ResourceSet<ContainerConfig> set = topEntity.getResourceState().getResourceSet();
                 EntityContainer cargo = new EntityContainer(this.world, itemstack.copy(), 0, 0, 0);
                 cargo.setPositionAndRotation(topEntity.posX, topEntity.posY + ((ContainerConfig)set.getConfig()).containerHeight, topEntity.posZ, topEntity.rotationYaw, 0.0F);
                 cargo.readCargoFromItem();
                 if (!this.world.isRemote) {
                     this.world.spawnEntity((Entity)cargo);
-                    ResourceState<T> st2 = ((ItemCargo)itemstack.getItem()).getModelState(itemstack);
+                    ResourceState st2 = ((ItemCargo)itemstack.getItem()).getModelState(itemstack);
                     cargo.getResourceState().readFromNBT(st2.writeToNBT());
                     cargo.updateResourceState();
-                }
+                } 
                 itemstack.shrink(1);
                 return true;
-            }
+            } 
             if (itemstack.getItem() instanceof jp.ngt.rtm.item.ItemCrowbar) {
                 attackEntityFrom(DamageSource.ANVIL, 0.0F);
                 return true;
-            }
-        }
+            } 
+        } 
         if (!this.world.isRemote)
             if (this.itemCargo != null)
-                player.openGui(RTMCore.instance, RTMCore.guiIdItemContainer, this.world, getEntityId(), 0, 0);
+                player.openGui(RTMCore.instance, RTMCore.guiIdItemContainer, this.world, getEntityId(), 0, 0);  
         return true;
     }
 
@@ -132,12 +133,12 @@ public class EntityContainer extends EntityCargoWithModel<ModelSetContainer> imp
         if (getResourceState() == null) {
             this.needsUpdatePos = true;
             return Vec3.ZERO;
-        }
+        } 
         ContainerConfig cfg = ((ModelSetContainer)getResourceState().getResourceSet()).getConfig();
         CargoPos cp = CargoPos.getCargoPos(cfg.containerLength);
         float zPos = cp.zPos[getCargoId()];
         if (zPos == 20.0F)
-            zPos = 0.0F;
+            zPos = 0.0F; 
         Vec3 vec = super.getPartVec();
         return PooledVec3.create(vec.getX(), vec.getY(), zPos);
     }
@@ -156,12 +157,12 @@ public class EntityContainer extends EntityCargoWithModel<ModelSetContainer> imp
                 ItemStack itemStack = this.containerSlots[par1];
                 this.containerSlots[par1] = ItemStack.EMPTY;
                 return itemStack;
-            }
+            } 
             ItemStack itemstack = this.containerSlots[par1].splitStack(par2);
             if (this.containerSlots[par1].getCount() == 0)
-                this.containerSlots[par1] = ItemStack.EMPTY;
+                this.containerSlots[par1] = ItemStack.EMPTY; 
             return itemstack;
-        }
+        } 
         return ItemStack.EMPTY;
     }
 
@@ -170,14 +171,14 @@ public class EntityContainer extends EntityCargoWithModel<ModelSetContainer> imp
             ItemStack itemstack = this.containerSlots[par1];
             this.containerSlots[par1] = ItemStack.EMPTY;
             return itemstack;
-        }
+        } 
         return ItemStack.EMPTY;
     }
 
     public void setInventorySlotContents(int par1, ItemStack itemStack) {
         this.containerSlots[par1] = itemStack;
         if (itemStack.getCount() > getInventoryStackLimit())
-            itemStack.setCount(getInventoryStackLimit());
+            itemStack.setCount(getInventoryStackLimit()); 
     }
 
     public String getName() {
@@ -200,12 +201,12 @@ public class EntityContainer extends EntityCargoWithModel<ModelSetContainer> imp
 
     public void openInventory(EntityPlayer player) {
         if (!this.world.isRemote)
-            readCargoFromNBT(getCargoNBT());
+            readCargoFromNBT(getCargoNBT()); 
     }
 
     public void closeInventory(EntityPlayer player) {
         if (!this.world.isRemote)
-            writeCargoToNBT(getCargoNBT());
+            writeCargoToNBT(getCargoNBT()); 
     }
 
     public boolean isItemValidForSlot(int var1, ItemStack var2) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityFloor.java b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityFloor.java
index 8c27cb7..84adaeb 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityFloor.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityFloor.java
@@ -64,9 +64,9 @@ public class EntityFloor extends EntityVehiclePart {
     public boolean attackEntityFrom(DamageSource par1, float par2) {
         if (getVehicle() == null || (getVehicle()).isDead) {
             if (!this.world.isRemote)
-                setDead();
+                setDead(); 
             return true;
-        }
+        } 
         return false;
     }
 
@@ -74,13 +74,13 @@ public class EntityFloor extends EntityVehiclePart {
         Entity passenger = getFirstPassenger();
         if (passenger != null) {
             if (passenger instanceof EntityPlayer && passenger != player)
-                return true;
+                return true; 
             if (passenger instanceof EntityLiving) {
                 passenger.startRiding((Entity)null);
                 return true;
-            }
+            } 
             return true;
-        }
+        } 
         int seatType = getSeatType();
         if (!this.world.isRemote && seatType != 0) {
             if (NGTUtil.isEquippedItem(player, Items.LEAD)) {
@@ -91,12 +91,12 @@ public class EntityFloor extends EntityVehiclePart {
                         living.clearLeashed(true, true);
                         living.startRiding((Entity)this);
                         return true;
-                    }
-                }
-            }
+                    } 
+                } 
+            } 
             if (!player.isSneaking())
-                player.startRiding((Entity)this);
-        }
+                player.startRiding((Entity)this); 
+        } 
         return true;
     }
 
@@ -114,7 +114,7 @@ public class EntityFloor extends EntityVehiclePart {
     public int getBrightnessForRender() {
         EntityVehicleBase vehicle = getVehicle();
         if (vehicle != null)
-            return vehicle.getBrightnessForRender();
+            return vehicle.getBrightnessForRender(); 
         return super.getBrightnessForRender();
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityTie.java b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityTie.java
index 965bc74..9c25606 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityTie.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityTie.java
@@ -41,10 +41,10 @@ public class EntityTie extends EntityCargo {
                 for (int j = 0; j < this.world.loadedEntityList.size(); j++) {
                     Entity entity = this.world.loadedEntityList.get(j);
                     if (uuid.equals(entity.getUniqueID()))
-                        entity.startRiding((Entity)this);
-                }
-            }
-        }
+                        entity.startRiding((Entity)this); 
+                } 
+            } 
+        } 
     }
 
     protected void writeEntityToNBT(NBTTagCompound nbt) {
@@ -59,10 +59,10 @@ public class EntityTie extends EntityCargo {
             if (uuid != null) {
                 l0 = uuid.getMostSignificantBits();
                 l1 = uuid.getLeastSignificantBits();
-            }
+            } 
             nbt.setLong("riderUUID_Most", l0);
             nbt.setLong("riderUUID_Least", l1);
-        }
+        } 
     }
 
     public void onUpdate() {
@@ -71,15 +71,15 @@ public class EntityTie extends EntityCargo {
         if (passenger != null && !(passenger instanceof net.minecraft.entity.EntityLivingBase)) {
             passenger.rotationYaw = this.rotationYaw;
             passenger.rotationPitch = this.rotationPitch;
-        }
+        } 
     }
 
     public boolean processInitialInteract(EntityPlayer player, EnumHand hand) {
         if (getFirstPassenger() == null) {
             if (this.world.isRemote)
-                return true;
+                return true; 
             double d0 = 1.5D;
-            List<Entity> list = this.world.getEntitiesWithinAABB(Entity.class, new AxisAlignedBB(this.posX - d0, this.posY - 0.5D, this.posZ - d0, this.posX + d0, this.posY + 4.5D, this.posZ + d0), entity ->
+            List<Entity> list = this.world.getEntitiesWithinAABB(Entity.class, new AxisAlignedBB(this.posX - d0, this.posY - 0.5D, this.posZ - d0, this.posX + d0, this.posY + 4.5D, this.posZ + d0), entity -> 
 
                     (entity instanceof EntityVehiclePart || entity instanceof jp.ngt.rtm.entity.train.EntityBogie || entity instanceof jp.ngt.rtm.entity.EntityInstalledObject) ? false : ((entity instanceof EntityVehicleBase) ? ((getVehicle() != entity)) : true));
             if (!list.isEmpty()) {
@@ -89,11 +89,11 @@ public class EntityTie extends EntityCargo {
                     entity1.startRiding((Entity)this);
                     NGTLog.sendChatMessage((ICommandSender)player, entity1.toString() + " was fixed.", new Object[0]);
                     return true;
-                }
-            }
+                } 
+            } 
             NGTLog.sendChatMessage((ICommandSender)player, "Fixable entity not found.", new Object[0]);
             return false;
-        }
+        } 
         Entity entity = getFirstPassenger();
         entity.dismountRidingEntity();
         return true;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityVehiclePart.java b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityVehiclePart.java
index 422128b..4d4b616 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityVehiclePart.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/parts/EntityVehiclePart.java
@@ -64,10 +64,10 @@ public abstract class EntityVehiclePart extends EntityCustom {
             if (uuid != null) {
                 l0 = uuid.getMostSignificantBits();
                 l1 = uuid.getLeastSignificantBits();
-            }
+            } 
             nbt.setLong("trainUUID_Most", l0);
             nbt.setLong("trainUUID_Least", l1);
-        }
+        } 
     }
 
     protected void readEntityFromNBT(NBTTagCompound nbt) {
@@ -82,9 +82,9 @@ public abstract class EntityVehiclePart extends EntityCustom {
             if (l0 != 0L && l1 != 0L) {
                 UUID uuid = new UUID(l0, l1);
                 if (!loadTrainFromUUID(uuid))
-                    this.unloadedParent = uuid;
-            }
-        }
+                    this.unloadedParent = uuid; 
+            } 
+        } 
     }
 
     private boolean loadTrainFromUUID(UUID uuid) {
@@ -94,8 +94,8 @@ public abstract class EntityVehiclePart extends EntityCustom {
                 setVehicle((EntityVehicleBase)entity);
                 onLoadVehicle();
                 return true;
-            }
-        }
+            } 
+        } 
         return false;
     }
 
@@ -103,7 +103,7 @@ public abstract class EntityVehiclePart extends EntityCustom {
 
     public AxisAlignedBB getCollisionBox(Entity par1) {
         if (par1 instanceof EntityVehiclePart || par1 instanceof EntityVehicleBase || par1 instanceof jp.ngt.rtm.entity.train.EntityBogie)
-            return null;
+            return null; 
         return par1.getEntityBoundingBox();
     }
 
@@ -123,11 +123,11 @@ public abstract class EntityVehiclePart extends EntityCustom {
         if (!this.world.isRemote)
             if (getFirstPassenger() != null) {
                 if (this.rider == null && getFirstPassenger() instanceof EntityLivingBase)
-                    this.rider = (EntityLivingBase)getFirstPassenger();
+                    this.rider = (EntityLivingBase)getFirstPassenger(); 
             } else if (this.rider != null) {
                 onDismount((Entity)this.rider);
                 this.rider = null;
-            }
+            }  
         if (this.isIndependent) {
             this.prevPosX = this.posX;
             this.prevPosY = this.posY;
@@ -137,17 +137,17 @@ public abstract class EntityVehiclePart extends EntityCustom {
         } else {
             if (this.unloadedParent != null)
                 if (loadTrainFromUUID(this.unloadedParent))
-                    this.unloadedParent = null;
+                    this.unloadedParent = null;  
             super.onUpdate();
             EntityVehicleBase vehicle = getVehicle();
             if (vehicle != null)
-                updatePartPos(vehicle);
-        }
+                updatePartPos(vehicle); 
+        } 
     }
 
     public void onDismount(Entity rider) {
         if (getVehicle() != null)
-            getVehicle().fixRiderPosOnDismount(rider, (Entity)this);
+            getVehicle().fixRiderPosOnDismount(rider, (Entity)this); 
     }
 
     public void updatePartPos(EntityVehicleBase vehicle) {
@@ -165,7 +165,7 @@ public abstract class EntityVehiclePart extends EntityCustom {
         if (getVehicle() == null || getVehicle().getSpeed() <= 0.0F) {
             setPosition(par1, par3, par5);
             setRotation(par7, par8);
-        }
+        } 
     }
 
     @SideOnly(Side.CLIENT)
@@ -184,8 +184,8 @@ public abstract class EntityVehiclePart extends EntityCustom {
             int id = ((Integer)getDataManager().get(TRAIN_ID)).intValue();
             Entity entity = this.world.getEntityByID(id);
             if (entity instanceof EntityVehicleBase)
-                this.parent = (EntityVehicleBase)entity;
-        }
+                this.parent = (EntityVehicleBase)entity; 
+        } 
         return this.parent;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/RenderArtillery.java b/src/api/rtm/jp/ngt/rtm/entity/train/parts/RenderArtillery.java
index 81d98bf..46b66bd 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/RenderArtillery.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/parts/RenderArtillery.java
@@ -36,8 +36,8 @@ public class RenderArtillery extends Render<EntityArtillery> {
             } else {
                 int pass = MinecraftForgeClient.getRenderPass();
                 modelSet.modelObj.render(entity, modelSet.getConfig(), pass, par8);
-            }
-        }
+            } 
+        } 
         GL11.glPopMatrix();
     }
 
@@ -66,7 +66,7 @@ public class RenderArtillery extends Render<EntityArtillery> {
         if (entity.getRecoil() > 0.0F) {
             float recoil = (set.getConfig()).recoil * entity.getRecoil();
             GL11.glTranslatef(0.0F, 0.0F, -recoil);
-        }
+        } 
         renderParts(set.modelObj.model, (set.getConfig()).modelPartsBarrel);
         GL11.glPopMatrix();
     }
@@ -90,7 +90,7 @@ public class RenderArtillery extends Render<EntityArtillery> {
     private boolean shouldRender(EntityArtillery par1) {
         if (par1.getFirstPassenger() != null && par1.getFirstPassenger().equals((NGTUtilClient.getMinecraft()).player))
             if (ClientProxy.getViewMode((EntityPlayer)(NGTUtilClient.getMinecraft()).player) == 0)
-                return false;
+                return false;  
         return true;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/RenderContainer.java b/src/api/rtm/jp/ngt/rtm/entity/train/parts/RenderContainer.java
index fa19e83..d1ce477 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/RenderContainer.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/parts/RenderContainer.java
@@ -29,7 +29,7 @@ public class RenderContainer extends Render<EntityContainer> {
         } else {
             int pass = MinecraftForgeClient.getRenderPass();
             modelSet.modelObj.render(entity, modelSet.getConfig(), pass, par8);
-        }
+        } 
         GL11.glPopMatrix();
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/RenderSeat.java b/src/api/rtm/jp/ngt/rtm/entity/train/parts/RenderSeat.java
index 27df6bb..c1b3b85 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/RenderSeat.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/parts/RenderSeat.java
@@ -44,7 +44,7 @@ public class RenderSeat extends Render<EntityFloor> {
             this.model.render((Entity)entity, 0.0F, 0.0F, -0.1F, 0.0F, 0.0F, 0.0625F);
         } else if (seatType == 3) {
 
-        }
+        } 
     }
 
     public void doRender(EntityFloor par1, double par2, double par4, double par6, float par8, float par9) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/BogieController.java b/src/api/rtm/jp/ngt/rtm/entity/train/util/BogieController.java
index 0896770..7940180 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/BogieController.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/util/BogieController.java
@@ -21,7 +21,7 @@ public final class BogieController {
                 setupBogieOnClient(train, bogieId);
             } else {
                 setupBogieOnServer(train, bogieId);
-            }
+            }  
         return this.bogies[bogieId];
     }
 
@@ -29,7 +29,7 @@ public final class BogieController {
     private void setupBogieOnClient(EntityTrainBase train, int bogieId) {
         Entity entity = train.world.getEntityByID(train.getBogieEntityId(bogieId));
         if (entity instanceof EntityBogie)
-            this.bogies[bogieId] = (EntityBogie)entity;
+            this.bogies[bogieId] = (EntityBogie)entity; 
     }
 
     private void setupBogieOnServer(EntityTrainBase train, int bogieId) {
@@ -49,8 +49,8 @@ public final class BogieController {
                 bogie.setTrain(train);
                 train.setBogieEntityId(bogieId, bogie.getEntityId());
                 this.bogies[bogieId] = bogie;
-            }
-        }
+            } 
+        } 
     }
 
     public void updateBogies(EntityTrainBase train) {
@@ -62,11 +62,11 @@ public final class BogieController {
         if (getBogie(train, 0) != null) {
             getBogie(train, 0).setDead();
             this.bogies[0] = null;
-        }
+        } 
         if (getBogie(train, 1) != null) {
             getBogie(train, 1).setDead();
             this.bogies[1] = null;
-        }
+        } 
     }
 
     public MotionState moveTrainWithBogie(EntityTrainBase train, EntityTrainBase prevTrain, float speed, boolean forceMove) {
@@ -74,7 +74,7 @@ public final class BogieController {
             updateBogiePos(train, 0, UpdateFlag.NONE);
             updateBogiePos(train, 1, UpdateFlag.NONE);
             return MotionState.STOP;
-        }
+        } 
         EntityBogie frontBogie = this.bogies[0].isFront() ? this.bogies[0] : this.bogies[1];
         EntityBogie backBogie = !this.bogies[0].isFront() ? this.bogies[0] : this.bogies[1];
         float[][] pos = ((ModelSetTrain)train.getResourceState().getResourceSet()).getConfig().getBogiePos();
@@ -92,16 +92,16 @@ public final class BogieController {
             float disBogie = (float)(disTrain - lenBF - lenBB);
             EntityBogie prevBogie = prevTrain.getBogie(1 - prevTrain.getTrainDirection());
             updateFlagFront = frontBogie.updateBogiePos(speed, disBogie, prevBogie);
-        }
+        } 
         if (updateFlagFront == MotionState.MOVE) {
             updateFlagBack = backBogie.updateBogiePos(speed, trainLength, frontBogie);
             if (updateFlagBack == MotionState.MOVE) {
                 updateTrainPos(train, lengthF, lengthB);
                 return MotionState.MOVE;
-            }
-        }
+            } 
+        } 
         if (updateFlagFront == MotionState.FLY || updateFlagBack == MotionState.FLY)
-            return MotionState.FLY;
+            return MotionState.FLY; 
         return MotionState.STOP;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/EnumNotch.java b/src/api/rtm/jp/ngt/rtm/entity/train/util/EnumNotch.java
index 9e6bab4..768119f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/EnumNotch.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/util/EnumNotch.java
@@ -33,8 +33,8 @@ public enum EnumNotch {
     public static EnumNotch getNotch(int par1) {
         for (EnumNotch notch : values()) {
             if (notch.id == par1)
-                return notch;
-        }
+                return notch; 
+        } 
         return inertia;
     }
 
@@ -50,50 +50,50 @@ public enum EnumNotch {
                 return accelerate_2;
             case 5:
                 return brake_4;
-        }
+        } 
         return inertia;
     }
 
     public static float getAcceleration(int par1, float par2) {
         EnumNotch notch = getNotch(par1);
         if (par1 > 0 && par2 >= notch.max_speed)
-            return 0.0F;
+            return 0.0F; 
         return notch.acceleration;
     }
 
     public static EnumNotch getSuitableNotchFromSpeed(float par1) {
         if (par1 >= accelerate_5.max_speed)
-            return accelerate_5;
+            return accelerate_5; 
         for (EnumNotch notch : values()) {
             if (notch.max_speed >= par1 && notch.max_speed - 0.3F < par1)
-                return notch;
-        }
+                return notch; 
+        } 
         return inertia;
     }
 
     public static EnumNotch getSuitableNotchFromAcceleration(float par1) {
         if (par1 > 0.0F)
-            return accelerate_4;
+            return accelerate_4; 
         for (EnumNotch notch : values()) {
             if (notch.acceleration <= par1 && notch.acceleration + 5.0E-4F > par1)
-                return notch;
-        }
+                return notch; 
+        } 
         return inertia;
     }
 
     public static float getAcceleration(int notch, float prevSpeed, TrainConfig cfg) {
         if (notch == 0)
-            return 0.0F;
+            return 0.0F; 
         if (notch > 0) {
             notch--;
             if (prevSpeed >= cfg.maxSpeed[notch])
-                return 0.0F;
+                return 0.0F; 
             return cfg.accelerateion;
-        }
+        } 
         float decceleration = (getNotch(notch)).acceleration;
         float absSpeed = Math.abs(prevSpeed);
         if (absSpeed + decceleration < 0.0F)
-            return -absSpeed;
+            return -absSpeed; 
         return decceleration;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/Formation.java b/src/api/rtm/jp/ngt/rtm/entity/train/util/Formation.java
index d82ae47..5b859db 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/Formation.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/util/Formation.java
@@ -41,9 +41,9 @@ public final class Formation {
                 if (entry != null) {
                     formation.setEntry(entry, i);
                     entry.train.setFormation(formation);
-                }
-            }
-        }
+                } 
+            } 
+        } 
         return formation;
     }
 
@@ -57,10 +57,10 @@ public final class Formation {
                     NBTTagCompound tag = new NBTTagCompound();
                     entry.writeToNBT(tag);
                     tagList.appendTag((NBTBase)tag);
-                }
-            }
+                } 
+            } 
             nbt.setTag("Entries", (NBTBase)tagList);
-        }
+        } 
     }
 
     public int size() {
@@ -78,15 +78,15 @@ public final class Formation {
     public FormationEntry getEntry(EntityTrainBase par1) {
         for (FormationEntry entry : this.entries) {
             if (entry != null && par1.equals(entry.train))
-                return entry;
-        }
+                return entry; 
+        } 
         return null;
     }
 
     public void setTrain(EntityTrainBase par1, int par3, int par5) {
         setEntry(new FormationEntry(par1, par3, par5), par3);
         if (!(par1.getEntityWorld()).isRemote)
-            sendPacket();
+            sendPacket(); 
     }
 
     @SideOnly(Side.CLIENT)
@@ -97,29 +97,29 @@ public final class Formation {
         } else {
             entry.entryId = par3;
             entry.dir = par5;
-        }
+        } 
     }
 
     private void reallocation() {
         int i = 0;
         for (FormationEntry entry : this.entries) {
             if (entry != null)
-                entry.updateFormationData(this, i);
+                entry.updateFormationData(this, i); 
             i++;
-        }
+        } 
         sendPacket();
     }
 
     private void reverse() {
-        NGTUtil.reverse((Object[])this.entries);
+        NGTUtil.reverse(this.entries);
         for (FormationEntry entry : this.entries)
-            entry.dir = (byte)(entry.dir ^ 0x1);
+            entry.dir = (byte)(entry.dir ^ 0x1); 
     }
 
     private void addAll(FormationEntry[] par1) {
         List<FormationEntry> list = new ArrayList<>();
-        NGTUtil.addArray(list, (Object[])this.entries);
-        NGTUtil.addArray(list, (Object[])par1);
+        NGTUtil.addArray(list, this.entries);
+        NGTUtil.addArray(list, par1);
         this.entries = list.<FormationEntry>toArray(new FormationEntry[list.size()]);
     }
 
@@ -129,29 +129,29 @@ public final class Formation {
         for (int i = start; i <= end; i++) {
             array[j] = this.entries[i];
             j++;
-        }
+        } 
         this.entries = array;
     }
 
     public void connectTrain(EntityTrainBase par1, EntityTrainBase par2, int par3, int par4, Formation par5) {
         FormationEntry entry = getEntry(par1);
         if (entry == null)
-            return;
+            return; 
         int i0 = 0;
         boolean flag0 = (par3 == entry.dir);
         if (flag0)
-            reverse();
+            reverse(); 
         entry = par5.getEntry(par2);
         flag0 = (par4 == entry.dir);
         if (!flag0)
-            par5.reverse();
+            par5.reverse(); 
         addAll(par5.entries);
         reallocation();
         for (FormationEntry entry2 : this.entries) {
             setSpeed(0.0F);
             entry2.train.setNotch(-8);
             entry2.train.setVehicleState(TrainState.TrainStateType.Role, TrainState.Role_Center.data);
-        }
+        } 
         FormationManager.getInstance().removeFormation(par5.id);
     }
 
@@ -159,10 +159,10 @@ public final class Formation {
         if (this.entries.length <= 1) {
             FormationManager.getInstance().removeFormation(this.id);
             return;
-        }
+        } 
         FormationEntry entry = getEntry(par1);
         if (entry == null)
-            return;
+            return; 
         if (entry.entryId == 0) {
             trim(1, this.entries.length - 1);
         } else if (entry.entryId == this.entries.length - 1) {
@@ -174,24 +174,24 @@ public final class Formation {
             for (int i = entry.entryId + 1; i < this.entries.length; i++) {
                 formation.setEntry(this.entries[i], j);
                 j++;
-            }
+            } 
             trim(0, entry.entryId - 1);
             formation.reallocation();
-        }
+        } 
         reallocation();
     }
 
     public void onDisconnectedTrain(EntityTrainBase par1, int par2) {
         FormationEntry entry = getEntry(par1);
         if (entry == null)
-            return;
+            return; 
         boolean b0 = (par2 == entry.dir);
         int i0 = b0 ? entry.entryId : (entry.entryId + 1);
         int size = this.entries.length - i0;
         Formation formation = new Formation(FormationManager.getInstance().getNewFormationId(), size);
         int j = 0;
         for (int i = i0; i < this.entries.length; i++)
-            formation.setEntry(this.entries[i], j);
+            formation.setEntry(this.entries[i], j); 
         formation.reallocation();
         trim(0, i0 - 1);
         reallocation();
@@ -203,8 +203,8 @@ public final class Formation {
                 if (entry.train.isControlCar()) {
                     this.controlCar = entry.train;
                     break;
-                }
-            }
+                } 
+            }  
         return this.controlCar;
     }
 
@@ -214,36 +214,36 @@ public final class Formation {
 
     public void setSpeed(float par1) {
         if (par1 == this.speed)
-            return;
+            return; 
         for (FormationEntry entry : this.entries)
-            entry.train.setSpeed_NoSync(par1);
+            entry.train.setSpeed_NoSync(par1); 
         this.speed = par1;
     }
 
     public void setTrainDirection(byte par1, EntityTrainBase par2) {
         FormationEntry entry = getEntry(par2);
         if (entry == null)
-            return;
+            return; 
         this.direction = (byte)(par1 ^ entry.dir);
         byte b0 = 0;
         for (FormationEntry entry2 : this.entries) {
             if (entry2 != null) {
                 b0 = (byte)(this.direction ^ entry2.dir);
                 entry2.train.setTrainDirection_NoSync(b0);
-            }
-        }
+            } 
+        } 
     }
 
     public void setTrainStateData(TrainState.TrainStateType type, byte data, EntityTrainBase par2) {
         for (FormationEntry entry : this.entries) {
             if (type == TrainState.TrainStateType.Role) {
                 if (data == TrainState.Role_Front.data)
-                    this.controlCar = par2;
+                    this.controlCar = par2; 
                 if (par2.equals(entry.train)) {
                     entry.train.setTrainStateData_NoSync(type, data);
                 } else if (entry.train.getVehicleState(TrainState.TrainStateType.Role) == data) {
                     entry.train.setTrainStateData_NoSync(type, TrainState.Role_Center.data);
-                }
+                } 
             } else if (type == TrainState.TrainStateType.Door) {
                 int stateR = data & 0x1;
                 int stateL = data >> 1;
@@ -251,16 +251,16 @@ public final class Formation {
                 entry.train.setTrainStateData_NoSync(type, (byte)data2);
             } else {
                 entry.train.setTrainStateData_NoSync(type, data);
-            }
-        }
+            } 
+        } 
     }
 
     public boolean containBogie(EntityBogie bogie) {
         for (FormationEntry entry : this.entries) {
             EntityTrainBase train = entry.train;
             if (train.getBogie(0) == bogie || train.getBogie(1) == bogie)
-                return true;
-        }
+                return true; 
+        } 
         return false;
     }
 
@@ -281,10 +281,10 @@ public final class Formation {
                 EntityTrainBase train = (this.entries[index]).train;
                 BogieController.MotionState state = BogieController.MotionState.STOP;
                 if (train.existBogies())
-                    state = train.bogieController.moveTrainWithBogie(train, prevTrain, this.speed, false);
+                    state = train.bogieController.moveTrainWithBogie(train, prevTrain, this.speed, false); 
                 train.updateTrainMovement(state);
                 prevTrain = train;
-            }
-        }
+            } 
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/FormationData.java b/src/api/rtm/jp/ngt/rtm/entity/train/util/FormationData.java
index 700c8a0..fe446cb 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/FormationData.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/util/FormationData.java
@@ -15,7 +15,7 @@ public final class FormationData extends WorldSavedData {
         for (int i = 0; i < tagList.tagCount(); i++) {
             NBTTagCompound tag = tagList.getCompoundTagAt(i);
             Formation formation = Formation.readFromNBT(tag, false);
-        }
+        } 
     }
 
     public NBTTagCompound writeToNBT(NBTTagCompound nbt) {
@@ -24,7 +24,7 @@ public final class FormationData extends WorldSavedData {
             NBTTagCompound tag = new NBTTagCompound();
             formation.writeToNBT(tag, false);
             tagList.appendTag((NBTBase)tag);
-        }
+        } 
         nbt.setTag("Formations", (NBTBase)tagList);
         return nbt;
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/FormationEntry.java b/src/api/rtm/jp/ngt/rtm/entity/train/util/FormationEntry.java
index b4085ab..4d7642e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/FormationEntry.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/util/FormationEntry.java
@@ -32,12 +32,12 @@ public final class FormationEntry implements Comparable<FormationEntry> {
                 Thread.sleep(200L);
             } catch (InterruptedException e) {
                 e.printStackTrace();
-            }
-        }
+            } 
+        } 
         World world = NGTUtil.getClientWorld();
         EntityTrainBase entity = (EntityTrainBase)world.getEntityByID(trainId);
         if (entity == null)
-            return null;
+            return null; 
         return new FormationEntry(entity, pos, dir);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/FormationManager.java b/src/api/rtm/jp/ngt/rtm/entity/train/util/FormationManager.java
index 150800d..2ee4b4d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/FormationManager.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/util/FormationManager.java
@@ -29,9 +29,9 @@ public final class FormationManager {
             if (data == null) {
                 data = new FormationData("rtm_formations");
                 world.setData("rtm_formations", data);
-            }
+            } 
             this.saveData = data;
-        }
+        } 
     }
 
     public Map<Long, Formation> getFormations() {
@@ -45,13 +45,13 @@ public final class FormationManager {
     public void setFormation(long id, Formation formation) {
         this.formationMap.put(Long.valueOf(id), formation);
         if (!this.isRemote && this.saveData != null)
-            this.saveData.markDirty();
+            this.saveData.markDirty(); 
     }
 
     public void removeFormation(long id) {
         this.formationMap.remove(Long.valueOf(id));
         if (!this.isRemote && this.saveData != null)
-            this.saveData.markDirty();
+            this.saveData.markDirty(); 
     }
 
     public long getNewFormationId() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/TrainState.java b/src/api/rtm/jp/ngt/rtm/entity/train/util/TrainState.java
index 90a0698..977a6a4 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/TrainState.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/train/util/TrainState.java
@@ -32,16 +32,16 @@ public enum TrainState {
     public static TrainState getState(TrainStateType par1, byte par2Data) {
         for (TrainState state : values()) {
             if (state.type == par1 && state.data == par2Data)
-                return state;
-        }
+                return state; 
+        } 
         return Door_Close;
     }
 
     public static TrainStateType getStateType(int par1Id) {
         for (TrainStateType state : TrainStateType.values()) {
             if (state.id == par1Id)
-                return state;
-        }
+                return state; 
+        } 
         return TrainStateType.Door;
     }
 
@@ -76,8 +76,8 @@ public enum TrainState {
         public static TrainStateType get(int id) {
             for (TrainStateType type : values()) {
                 if (type.id == id)
-                    return type;
-            }
+                    return type; 
+            } 
             return Direction;
         }
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/util/ColFace.java b/src/api/rtm/jp/ngt/rtm/entity/util/ColFace.java
index 0bb8dcd..e7bf7e7 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/util/ColFace.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/util/ColFace.java
@@ -30,7 +30,7 @@ public final class ColFace {
         for (int i = 0; i < vtxCount; i++) {
             int idx0 = (i < 2) ? i : (i + (i - 2) * 2);
             this.vertices[i] = toVec(face.vertices[idx0]);
-        }
+        } 
         this.normal = toVec(face.faceNormal);
         init();
     }
@@ -46,10 +46,10 @@ public final class ColFace {
             Vec3 v01n = v1.sub(v0).normalize();
             Vec3 v21n = v1.sub(v2).normalize();
             this.vtxExpanded[(i + 1) % len] = v1.add(v01n.multi(expand).add(v21n.multi(expand)));
-        }
+        } 
         Vec3 sum = Vec3.ZERO;
         for (Vec3 vec : this.vertices)
-            sum = sum.add(vec);
+            sum = sum.add(vec); 
         this.center = sum.multi(1.0D / this.vertices.length);
     }
 
@@ -60,14 +60,14 @@ public final class ColFace {
     public ColFace rotateAroundX(float rotation) {
         ColFace face = copy();
         for (int i = 0; i < face.vertices.length; i++)
-            face.vertices[i] = face.vertices[i].rotateAroundX(rotation);
+            face.vertices[i] = face.vertices[i].rotateAroundX(rotation); 
         return face;
     }
 
     public ColFace rotateAroundY(float rotation) {
         ColFace face = copy();
         for (int i = 0; i < face.vertices.length; i++)
-            face.vertices[i] = face.vertices[i].rotateAroundY(rotation);
+            face.vertices[i] = face.vertices[i].rotateAroundY(rotation); 
         return face;
     }
 
@@ -75,7 +75,7 @@ public final class ColFace {
         ColFace face = new ColFace();
         face.vertices = new Vec3[this.vertices.length];
         for (int i = 0; i < this.vertices.length; i++)
-            face.vertices[i] = this.vertices[i];
+            face.vertices[i] = this.vertices[i]; 
         face.normal = this.normal;
         return face;
     }
@@ -99,13 +99,13 @@ public final class ColFace {
                 if (!isSameDir) {
                     inFace = false;
                     break;
-                }
-            }
+                } 
+            } 
             if (inFace) {
                 this.color = 0;
                 return vZX;
-            }
-        }
+            } 
+        } 
         return Vec3.ZERO;
     }
 
@@ -127,26 +127,26 @@ public final class ColFace {
             maxY = (vtx.getY() > maxY) ? vtx.getY() : maxY;
             minZ = (vtx.getZ() < minZ) ? vtx.getZ() : minZ;
             maxZ = (vtx.getZ() > maxZ) ? vtx.getZ() : maxZ;
-        }
+        } 
         double thickness = 0.25D;
         if (maxX - minX < thickness)
             if (this.normal.getX() >= 0.0D) {
                 minX -= this.normal.getX() * thickness;
             } else {
                 maxX += this.normal.getX() * thickness;
-            }
+            }  
         if (maxY - minY < thickness)
             if (this.normal.getY() >= 0.0D) {
                 minY -= this.normal.getY() * thickness;
             } else {
                 maxY += this.normal.getY() * thickness;
-            }
+            }  
         if (maxZ - minZ < thickness)
             if (this.normal.getZ() >= 0.0D) {
                 minZ -= this.normal.getZ() * thickness;
             } else {
                 maxZ += this.normal.getZ() * thickness;
-            }
+            }  
         AxisAlignedBB aabb = new AxisAlignedBB(minX, minY, minZ, maxX, maxY, maxZ);
         double offsetY = (myself instanceof EntityVehicleBase) ? ((EntityVehicleBase)myself).getVehicleYOffset() : 0.0D;
         return aabb.offset(myself.posX, myself.posY + offsetY, myself.posZ);
@@ -164,9 +164,9 @@ public final class ColFace {
                 tessellator.addVertex((float)v0.getX(), (float)v0.getY(), (float)v0.getZ());
                 Vec3 v1 = this.vertices[(i + 1) % this.vertices.length];
                 tessellator.addVertex((float)v1.getX(), (float)v1.getY(), (float)v1.getZ());
-            }
+            } 
             GL11.glLineWidth(5.0F);
-        }
+        } 
     }
 
     @SideOnly(Side.CLIENT)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/util/CollisionHelper.java b/src/api/rtm/jp/ngt/rtm/entity/util/CollisionHelper.java
index d679452..7db0ac7 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/util/CollisionHelper.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/util/CollisionHelper.java
@@ -20,27 +20,27 @@ public final class CollisionHelper {
                     }
                 };
             thread.start();
-        }
+        } 
     }
 
     public void onCollison(GetCollisionBoxesEvent event) {
         if (event.getEntity() == null || !(event.getEntity() instanceof net.minecraft.entity.player.EntityPlayer))
-            return;
+            return; 
         double range = 10.5D;
         AxisAlignedBB box = event.getAabb();
         List<AxisAlignedBB> aabbList = event.getCollisionBoxesList();
         List<Entity> list = event.getWorld().getEntitiesWithinAABBExcludingEntity(event.getEntity(), box.grow(range));
         for (Entity entity : list) {
             if (entity.isDead || !(entity instanceof IResourceSelector))
-                continue;
+                continue; 
             ((IResourceSelector)entity).getResourceState().applyCollison(event.getEntity(), entity, box, aabbList);
-        }
+        } 
         boolean debug = false;
         if (debug && !aabbList.isEmpty())
             for (int i = 0; i < aabbList.size(); i++) {
                 AxisAlignedBB hit = aabbList.get(i);
-                NGTLog.debug("[%d] %3.1f, %3.1f, %3.1f (%3.0f %3.0f %3.0f)", new Object[] { Integer.valueOf(i), Double.valueOf(hit.maxX - hit.minX), Double.valueOf(hit.maxY - hit.minY), Double.valueOf(hit.maxZ - hit.minZ),
+                NGTLog.debug("[%d] %3.1f, %3.1f, %3.1f (%3.0f %3.0f %3.0f)", new Object[] { Integer.valueOf(i), Double.valueOf(hit.maxX - hit.minX), Double.valueOf(hit.maxY - hit.minY), Double.valueOf(hit.maxZ - hit.minZ), 
                             Double.valueOf((hit.maxX + hit.minX) * 0.5D), Double.valueOf((hit.maxY + hit.minY) * 0.5D), Double.valueOf((hit.maxZ + hit.minZ) * 0.5D) });
-            }
+            }  
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/util/CollisionObj.java b/src/api/rtm/jp/ngt/rtm/entity/util/CollisionObj.java
index b593f4e..0bdddef 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/util/CollisionObj.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/util/CollisionObj.java
@@ -53,24 +53,24 @@ public final class CollisionObj {
                     Thread.sleep(100L);
                 } catch (InterruptedException e) {
                     e.printStackTrace();
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     public void addColFace(String partsName, ColFace face, byte status) {
         ColParts target = null;
         for (ColParts parts : this.partsList) {
             if (parts.name.equals(partsName))
-                target = parts;
-        }
+                target = parts; 
+        } 
         if (target == null) {
             target = new ColParts(partsName);
             this.partsList.add(target);
-        }
+        } 
         target.faces.add(face);
         if (status == 1)
-            this.box = initAABB();
+            this.box = initAABB(); 
     }
 
     @SideOnly(Side.CLIENT)
@@ -78,9 +78,9 @@ public final class CollisionObj {
         boolean addAll = false;
         List<String> nameList = new ArrayList<>();
         if (names != null) {
-            NGTUtil.addArray(nameList, (Object[])names);
+            NGTUtil.addArray(nameList, names);
             addAll = names[0].equals("-all");
-        }
+        } 
         for (GroupObject go : model.getGroupObjects()) {
             if (addAll || nameList.contains(go.name)) {
                 ColParts parts = new ColParts(go.name);
@@ -89,11 +89,11 @@ public final class CollisionObj {
                         ColFace cFace = new ColFace();
                         cFace.setData(face);
                         parts.faces.add(cFace);
-                    }
-                }
+                    } 
+                } 
                 this.partsList.add(parts);
-            }
-        }
+            } 
+        } 
     }
 
     private AxisAlignedBB initAABB() {
@@ -112,9 +112,9 @@ public final class CollisionObj {
                     maxY = (vtx.getY() > maxY) ? vtx.getY() : maxY;
                     minZ = (vtx.getZ() < minZ) ? vtx.getZ() : minZ;
                     maxZ = (vtx.getZ() > maxZ) ? vtx.getZ() : maxZ;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         return new AxisAlignedBB(minX, minY, minZ, maxX, maxY, maxZ);
     }
 
@@ -133,9 +133,9 @@ public final class CollisionObj {
                 if (hitAABB.intersects(playerAABB)) {
                     boxList.add(hitAABB);
                     hitted = true;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         if (!hitted || myself instanceof EntityVehicleBase);
     }
 
@@ -165,22 +165,22 @@ public final class CollisionObj {
                                 pointX = hit;
                                 faceX = face;
                                 face.color = 16711680;
-                            }
+                            }  
                         if (flags[1] && hitY)
                             if (pointY == null || Math.abs(vt.getY() - hit.getY()) < Math.abs(vt.getY() - pointY.getY())) {
                                 pointY = hit;
                                 faceY = face;
                                 face.color = 65280;
-                            }
+                            }  
                         if (flags[2] && !hitY)
                             if (pointZ == null || Math.abs(vt.getZ() - hit.getZ()) < Math.abs(vt.getZ() - pointZ.getZ())) {
                                 pointZ = hit;
                                 faceZ = face;
                                 face.color = 255;
-                            }
-                    }
-                }
-        }
+                            }  
+                    } 
+                }  
+        } 
         HitResult[] result = new HitResult[3];
         result[0] = (pointX != null) ? applyRotation(pointX, faceX, myself) : null;
         result[1] = (pointY != null) ? applyRotation(pointY, faceY, myself) : null;
@@ -268,15 +268,15 @@ public final class CollisionObj {
                 for (ColFace face : parts.faces) {
                     face.renderFrame(tessellator, true);
                     face.renderNormal(tessellator);
-                }
-        }
+                }  
+        } 
         tessellator.draw();
     }
 
     @SideOnly(Side.CLIENT)
     private void renderHits() {
         if (this.hit == null)
-            return;
+            return; 
         NGTTessellator tessellator = NGTTessellator.instance;
         tessellator.startDrawing(1);
         int color = 16711680;
@@ -295,9 +295,9 @@ public final class CollisionObj {
                 tessellator.addVertex(x, y, z + size);
                 result.face.color = color;
                 result.face.renderFrame(tessellator, true);
-            }
+            } 
             color = color >> 8 & 0xFFFFFF;
-        }
+        } 
         tessellator.draw();
     }
 
@@ -306,6 +306,6 @@ public final class CollisionObj {
         double py = myself.posY;
         int color = 10526880;
         for (AxisAlignedBB aabb : this.aabbList)
-            NGTRenderer.renderFrame((float)(aabb.minX - myself.posX), (float)(aabb.minY - py), (float)(aabb.minZ - myself.posZ), (float)(aabb.maxX - aabb.minX), (float)(aabb.maxY - aabb.minY), (float)(aabb.maxZ - aabb.minZ), color, 255);
+            NGTRenderer.renderFrame((float)(aabb.minX - myself.posX), (float)(aabb.minY - py), (float)(aabb.minZ - myself.posZ), (float)(aabb.maxX - aabb.minX), (float)(aabb.maxY - aabb.minY), (float)(aabb.maxZ - aabb.minZ), color, 255); 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/EntityPlane.java b/src/api/rtm/jp/ngt/rtm/entity/vehicle/EntityPlane.java
index 7829b29..b80abd5 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/EntityPlane.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/vehicle/EntityPlane.java
@@ -32,7 +32,7 @@ public class EntityPlane extends EntityVehicle {
             this.motionY *= 0.8D;
         } else if (this.speed == 0.0D) {
             super.updateFallState();
-        }
+        } 
     }
 
     protected void updateMotion(EntityLivingBase entity, float moveStrafe, float moveForward) {
@@ -42,48 +42,48 @@ public class EntityPlane extends EntityVehicle {
         float maxSpeed = cfg.getMaxSpeed(this.onGround);
         float f0 = moveStrafe * cfg.getYawCoefficient(this.onGround);
         if (!cfg.changeYawOnStopping)
-            f0 = (float)(f0 * this.speed / maxSpeed);
+            f0 = (float)(f0 * this.speed / maxSpeed); 
         float maxYaw = cfg.getMaxYaw(this.onGround);
         if (f0 > maxYaw) {
             f0 = maxYaw;
         } else if (f0 < -maxYaw) {
             f0 = -maxYaw;
-        }
+        } 
         this.rotationYaw += f0;
         if (this.speed > maxSpeed) {
             this.speed = maxSpeed;
         } else if (this.speed < 0.0D) {
             if (hovering) {
                 if (this.speed < -maxSpeed)
-                    this.speed = -maxSpeed;
+                    this.speed = -maxSpeed; 
             } else {
                 this.speed = 0.0D;
-            }
-        }
+            } 
+        } 
         Vec3 vec = getMotionVec();
         this.motionX = vec.getX();
         this.motionZ = vec.getZ();
         double d0 = 0.05D * (1.0D - this.speed / maxSpeed);
         if (!hovering)
-            this.motionY = vec.getY() - d0;
+            this.motionY = vec.getY() - d0; 
         if (moveForward == 0.0F)
-            this.speed *= cfg.getFriction(this.onGround);
+            this.speed *= cfg.getFriction(this.onGround); 
         if (Math.abs(this.speed) < 0.001D) {
             this.speed = 0.0D;
             this.motionX = this.motionZ = 0.0D;
-        }
+        } 
         if (this.speed > 0.0D && !this.onGround) {
             this.rotationRoll = moveStrafe * (float)(this.speed / maxSpeed) * -cfg.getRollCoefficient(this.onGround);
         } else {
             this.rotationRoll *= 0.75F;
-        }
+        } 
         if (Math.abs(this.rotationRoll) < 0.01F)
-            this.rotationRoll = 0.0F;
+            this.rotationRoll = 0.0F; 
     }
 
     protected Vec3 getMotionVec() {
         if ((this.onGround && this.rotationPitch < 0.0F) || this.inWater)
-            return super.getMotionVec();
+            return super.getMotionVec(); 
         Vec3 vec = PooledVec3.create(0.0D, 0.0D, this.speed);
         vec = vec.rotateAroundX(this.rotationPitch);
         vec = vec.rotateAroundY(this.rotationYaw);
@@ -93,7 +93,7 @@ public class EntityPlane extends EntityVehicle {
     protected void updateRotation() {
         this.rotationPitch *= 0.99F;
         if (Math.abs(this.rotationPitch) < 0.01F)
-            this.rotationPitch = 0.0F;
+            this.rotationPitch = 0.0F; 
     }
 
     public void setUpDown(int par1) {
@@ -104,9 +104,9 @@ public class EntityPlane extends EntityVehicle {
             if (par1 != 0) {
                 this.rotationPitch += cfg.getPitchCoefficient(this.onGround) * par1 * (float)(this.speed / cfg.getMaxSpeed(this.onGround));
                 if (this.onGround && this.rotationPitch < 1.0F)
-                    this.rotationPitch = 0.0F;
-            }
-        }
+                    this.rotationPitch = 0.0F; 
+            } 
+        } 
     }
 
     @SideOnly(Side.CLIENT)
@@ -117,7 +117,7 @@ public class EntityPlane extends EntityVehicle {
         BlockPos pos = getPosition().down();
         AxisAlignedBB aabb = getEntityWorld().getBlockState(pos).getCollisionBoundingBox((IBlockAccess)getEntityWorld(), pos);
         if (aabb != null)
-            aabb = aabb.offset(pos);
+            aabb = aabb.offset(pos); 
         boolean onBlock = (aabb != null && aabb.maxY >= this.posY);
         return (!onGround && (speed > 0.0F || hovering) && !onBlock);
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/EntityShip.java b/src/api/rtm/jp/ngt/rtm/entity/vehicle/EntityShip.java
index 551966a..0d0880b 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/EntityShip.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/vehicle/EntityShip.java
@@ -23,7 +23,7 @@ public class EntityShip extends EntityVehicle {
     protected void updateMotion(EntityLivingBase entity, float moveStrafe, float moveForward) {
         super.updateMotion(entity, moveStrafe, moveForward);
         if (this.speed > 0.0D && this.inWater)
-            this.rotationRoll = moveStrafe * (float)(this.speed / ((ModelSetVehicle)getResourceState().getResourceSet()).getConfig().getMaxSpeed(this.onGround)) * -5.0F;
+            this.rotationRoll = moveStrafe * (float)(this.speed / ((ModelSetVehicle)getResourceState().getResourceSet()).getConfig().getMaxSpeed(this.onGround)) * -5.0F; 
     }
 
     protected void updateFallState() {
@@ -36,8 +36,8 @@ public class EntityShip extends EntityVehicle {
                 this.motionY += 0.05D;
             } else {
                 this.motionY = 0.0D;
-            }
-        }
+            } 
+        } 
     }
 
     protected ItemStack getVehicleItem() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/EntityVehicle.java b/src/api/rtm/jp/ngt/rtm/entity/vehicle/EntityVehicle.java
index abc9b52..98e0592 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/EntityVehicle.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/vehicle/EntityVehicle.java
@@ -64,7 +64,7 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
         super(world);
         setSize(2.0F, 2.0F);
         if (world.isRemote)
-            this.seatRotation = -45;
+            this.seatRotation = -45; 
     }
 
     protected void entityInit() {
@@ -93,7 +93,7 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
     protected void writeEntityToNBT(NBTTagCompound nbt) {
         super.writeEntityToNBT(nbt);
         if (getNGTO() != null)
-            nbt.setTag("NGTO", (NBTBase)getNGTO().writeToNBT());
+            nbt.setTag("NGTO", (NBTBase)getNGTO().writeToNBT()); 
     }
 
     public void onVehicleUpdate() {
@@ -101,7 +101,7 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
         updateVibration();
         if (!this.world.isRemote) {
             if (getFirstPassenger() == null)
-                this.controller.onUpdate(this);
+                this.controller.onUpdate(this); 
             setOnGround(this.onGround);
             setSpeed((float)this.speed);
             setSpeed2((float)this.speed);
@@ -109,7 +109,7 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
             setAccelerationStrafe(this.accelerationStrafe);
             updateRotation();
             setRotation(this.rotationYaw, this.rotationPitch);
-        }
+        } 
     }
 
     protected void updateFallState() {
@@ -117,7 +117,7 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
             this.motionY = 0.0D;
         } else {
             super.updateFallState();
-        }
+        } 
     }
 
     protected void updateMovement() {
@@ -125,12 +125,12 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
             float f0 = (this.accelerationDecCount - 1) / this.accelerationDecCount;
             this.accelerationForward *= f0;
             this.accelerationStrafe *= f0;
-        }
+        } 
         if (shouldUpdateMotion())
             if (getFirstPassenger() != null && getFirstPassenger() instanceof EntityLivingBase) {
                 EntityLivingBase living = (EntityLivingBase)getFirstPassenger();
                 updateMotion(living, living.moveStrafing, living.moveForward);
-            }
+            }  
         super.updateMovement();
     }
 
@@ -142,15 +142,15 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
                 this.motionX *= 0.9D;
                 this.motionZ *= 0.9D;
                 if (cfg.hoveringSpeed == 0.0F || this.motionY < 0.0D)
-                    this.motionY = 0.0D;
+                    this.motionY = 0.0D; 
             } else {
                 this.speed *= 0.9999D;
                 super.applyPhysicalEffect();
                 if (cfg.hoveringSpeed != 0.0F) {
                     this.motionX *= 0.9D;
                     this.motionZ *= 0.9D;
-                }
-            }
+                } 
+            }  
     }
 
     protected void updateVibration() {
@@ -160,7 +160,7 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
         } else {
             float[] v = (((ModelSetVehicle)getResourceState().getResourceSet()).getConfig()).vibration;
             this.vibration = (dxz > 0.0D) ? v[1] : v[0];
-        }
+        } 
     }
 
     protected boolean shouldUpdateMotion() {
@@ -179,18 +179,18 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
             pos = pos.down();
             state = getEntityWorld().getBlockState(pos);
             this.inWater = isLiquid;
-        }
+        } 
     }
 
     protected void updateEntityCollisionState() {
-        List<Entity> list = this.world.getEntitiesWithinAABBExcludingEntity((Entity)this,
+        List<Entity> list = this.world.getEntitiesWithinAABBExcludingEntity((Entity)this, 
                 getEntityBoundingBox().expand(0.25D, 0.25D, 0.25D));
         if (list != null && !list.isEmpty())
             for (int k = 0; k < list.size(); k++) {
                 Entity entity = list.get(k);
                 if (entity != getFirstPassenger() && entity.canBePushed())
-                    applyEntityCollision(entity);
-            }
+                    applyEntityCollision(entity); 
+            }  
     }
 
     protected void updateMotion(EntityLivingBase entity, float moveStrafe, float moveForward) {
@@ -207,11 +207,11 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
         this.motionX = vec.getX();
         this.motionZ = vec.getZ();
         if (moveForward == 0.0F)
-            this.speed *= cfg.getFriction(this.onGround);
+            this.speed *= cfg.getFriction(this.onGround); 
         if (Math.abs(this.speed) < 0.001D) {
             this.speed = 0.0D;
             this.motionX = this.motionZ = 0.0D;
-        }
+        } 
         this.accelerationForward = moveForward;
         this.accelerationStrafe = moveStrafe;
         this.accelerationDecCount = 5;
@@ -244,15 +244,15 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
             } else {
                 pitch *= 0.75F;
                 roll *= 0.75F;
-            }
+            } 
         } else {
             pitch *= 0.75F;
             roll *= 0.75F;
-        }
+        } 
         if (Math.abs(pitch) < 0.01F)
-            pitch = 0.0F;
+            pitch = 0.0F; 
         if (Math.abs(roll) < 0.01F)
-            roll = 0.0F;
+            roll = 0.0F; 
         float pitchDif = pitch - prevPitch;
         pitch = prevPitch + (pitchDif + this.prevPitchDif) * 0.5F;
         this.prevPitchDif = pitch - prevPitch;
@@ -278,11 +278,11 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
             if (aabb != null) {
                 double y = aabb.maxY;
                 if (state.getBlock() instanceof jp.ngt.rtm.rail.BlockLargeRailBase)
-                    y -= 256.0D;
+                    y -= 256.0D; 
                 return y + blockY - 1.0D;
-            }
+            } 
             pos = pos.down();
-        }
+        } 
         return this.posY;
     }
 
@@ -291,7 +291,7 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
         if (getNGTO() != null) {
             VehicleNGTO obj = getNGTO();
             vec = PooledVec3.create((obj.riderPosX * obj.scale), (obj.riderPosY * obj.scale), (obj.riderPosZ * obj.scale));
-        }
+        } 
         return vec;
     }
 
@@ -306,13 +306,13 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
     public boolean processInitialInteract(EntityPlayer player, EnumHand hand) {
         if (player.isSneaking()) {
             if (this.world.isRemote)
-                player.openGui(RTMCore.instance, RTMCore.guiIdSelectEntityModel, player.world, getEntityId(), 0, 0);
+                player.openGui(RTMCore.instance, RTMCore.guiIdSelectEntityModel, player.world, getEntityId(), 0, 0); 
             return true;
-        }
+        } 
         if (getFirstPassenger() instanceof EntityPlayer && getFirstPassenger() != player)
-            return true;
+            return true; 
         if (!this.world.isRemote)
-            player.startRiding((Entity)this);
+            player.startRiding((Entity)this); 
         return true;
     }
 
@@ -322,9 +322,9 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
             if (PermissionManager.INSTANCE.hasPermission(player, "editVehicle")) {
                 setDead();
                 if (!player.capabilities.isCreativeMode)
-                    entityDropItem(getVehicleItem(), 0.5F);
-            }
-        }
+                    entityDropItem(getVehicleItem(), 0.5F); 
+            } 
+        } 
         return true;
     }
 
@@ -338,9 +338,9 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
                     VehicleConfig cfg = ((ModelSetVehicle)getResourceState().getResourceSet()).getConfig();
                     float strength = (float)(dxz / cfg.getMaxSpeed(this.onGround));
                     if (strength > 0.5F)
-                        entity.attackEntityFrom(DamageSource.causeThornsDamage((Entity)this), strength);
-                }
-            }
+                        entity.attackEntityFrom(DamageSource.causeThornsDamage((Entity)this), strength); 
+                } 
+            }  
     }
 
     @SideOnly(Side.CLIENT)
@@ -391,13 +391,13 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
 
     public VehicleNGTO getNGTO() {
         if (this.vngto == null)
-            this.vngto = VehicleNGTO.readFromNBT((NBTTagCompound)getDataManager().get(NGTO), false);
+            this.vngto = VehicleNGTO.readFromNBT((NBTTagCompound)getDataManager().get(NGTO), false); 
         return this.vngto;
     }
 
     public void setNGTO(VehicleNGTO ngto) {
         if (ngto != null)
-            getDataManager().set(NGTO, ngto.writeToNBT());
+            getDataManager().set(NGTO, ngto.writeToNBT()); 
     }
 
     public void updateResourceState() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/EntityVehicleBase.java b/src/api/rtm/jp/ngt/rtm/entity/vehicle/EntityVehicleBase.java
index 04f131a..50fe37d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/EntityVehicleBase.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/vehicle/EntityVehicleBase.java
@@ -34,7 +34,7 @@ import net.minecraftforge.fml.common.network.simpleimpl.IMessage;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends EntityCustom implements IResourceSelector {
+public abstract class EntityVehicleBase<T extends ModelSetVehicleBase<?>> extends EntityCustom implements IResourceSelector<T> {
     public static final int MAX_SEAT_ROTATION = 45;
 
     public static final int MAX_DOOR_MOVE = 60;
@@ -115,13 +115,13 @@ public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends E
         super(world);
         this.ignoreFrustumCheck = true;
         if (!NGTUtil.isServer())
-            setRenderDistanceWeight(16.0D);
+            setRenderDistanceWeight(16.0D); 
         this.preventEntitySpawning = true;
         this.soundUpdater = (world != null) ? RTMCore.proxy.getSoundUpdater(this) : null;
         if (world.isRemote)
-            world.addWeatherEffect((Entity)this);
+            world.addWeatherEffect((Entity)this); 
         for (TrainState.TrainStateType type : TrainState.TrainStateType.values())
-            setVehicleState(type, type.min);
+            setVehicleState(type, type.min); 
     }
 
     protected void entityInit() {}
@@ -133,7 +133,7 @@ public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends E
     protected void readEntityFromNBT(NBTTagCompound nbt) {
         getResourceState().readFromNBT(nbt.getCompoundTag("State"));
         if (this.world != null && this.world.isRemote)
-            updateResourceState();
+            updateResourceState(); 
     }
 
     public boolean shouldRenderInPass(int pass) {
@@ -173,16 +173,16 @@ public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends E
         if (!this.world.isRemote) {
             for (EntityFloor floor : this.vehicleFloors) {
                 if (floor != null)
-                    floor.setDead();
-            }
+                    floor.setDead(); 
+            } 
             RTMCore.NETWORK_WRAPPER.sendToAll(new PacketVehicleMovement((Entity)this, true));
-        }
+        } 
     }
 
     public final void onUpdate() {
         if (!this.world.isRemote || this.ignoreUpdate)
-            onVehicleUpdate();
-        this.ignoreUpdate ^= 0x1;
+            onVehicleUpdate(); 
+        this.ignoreUpdate ^= true;
     }
 
     protected void onVehicleUpdate() {
@@ -190,27 +190,27 @@ public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends E
         this.prevRotationRoll = this.rotationRoll;
         if (this.world.isRemote) {
             if (this.soundUpdater != null)
-                this.soundUpdater.update();
+                this.soundUpdater.update(); 
             updateAnimation();
             updatePosAndRotationClient();
         } else {
             if (!this.tracked)
-                this.tracked = VehicleTrackerEntry.trackingVehicle((Entity)this);
+                this.tracked = VehicleTrackerEntry.trackingVehicle((Entity)this); 
             if (!this.floorLoaded)
-                setupFloors();
+                setupFloors(); 
             Entity passenger = getFirstPassenger();
             if (passenger != null) {
                 if (this.rider == null && passenger instanceof EntityLivingBase)
-                    this.rider = (EntityLivingBase)passenger;
+                    this.rider = (EntityLivingBase)passenger; 
             } else if (this.rider != null) {
                 this.rider = null;
-            }
+            } 
             this.executer.execScript(this);
             updateBlockCollisionState();
             updateEntityCollisionState();
             updateFallState();
             updateMovement();
-        }
+        } 
     }
 
     protected void updateBlockCollisionState() {}
@@ -244,7 +244,7 @@ public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends E
             float roll = getRoll() + (this.vehicleRoll - getRoll()) * d0;
             this.rotationRoll = roll;
             this.vehiclePosRotationInc--;
-        }
+        } 
         setRotation(this.rotationYaw, this.rotationPitch);
         setPosition(this.posX, this.posY, this.posZ);
     }
@@ -282,7 +282,7 @@ public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends E
         } catch (NullPointerException e) {
             e.printStackTrace();
             aabb = new AxisAlignedBB(-1.5D, 0.0D, -2.0D, 1.5D, 3.0D, 2.0D);
-        }
+        } 
         Vec3 vec = PooledVec3.create(ridingEntity.posX - this.posX, ridingEntity.posY - this.posY, ridingEntity.posZ - this.posZ);
         vec = vec.rotateAroundY(-this.rotationYaw);
         float yawDif = NGTMath.wrapAngle(-passenger.rotationYaw - this.rotationYaw);
@@ -295,7 +295,7 @@ public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends E
             double z = this.posZ + vec.getZ();
             BlockPos pos = this.world.getTopSolidOrLiquidBlock(new BlockPos(x, y, z));
             passenger.setPositionAndUpdate(pos.getX() + 0.5D, pos.getY() + 0.5D, pos.getZ() + 0.5D);
-        }
+        } 
     }
 
     public void updatePassenger(Entity passenger) {
@@ -310,7 +310,7 @@ public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends E
             passenger.setPosition(x, y, z);
             passenger.rotationYaw -= NGTMath.wrapAngle(this.rotationYaw - this.prevRotationYaw);
             passenger.rotationPitch -= NGTMath.wrapAngle(this.rotationPitch - this.prevRotationPitch);
-        }
+        } 
     }
 
     public Vec3 getRiderPos(Entity passenger) {
@@ -368,22 +368,22 @@ public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends E
         int pantoState = getVehicleState(TrainState.TrainStateType.Pantograph);
         if (pantoState == TrainState.Pantograph_Down.data) {
             if (this.pantograph_F < 40)
-                this.pantograph_F++;
+                this.pantograph_F++; 
             if (this.pantograph_B < 40)
-                this.pantograph_B++;
+                this.pantograph_B++; 
         } else {
             int[] ia = getPantographMaxHeight();
             if (this.pantograph_F > ia[0]) {
                 this.pantograph_F--;
             } else if (this.pantograph_F < ia[0]) {
                 this.pantograph_F++;
-            }
+            } 
             if (this.pantograph_B > ia[1]) {
                 this.pantograph_B--;
             } else if (this.pantograph_B < ia[1]) {
                 this.pantograph_B++;
-            }
-        }
+            } 
+        } 
     }
 
     @SideOnly(Side.CLIENT)
@@ -409,14 +409,14 @@ public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends E
         if (isOpen) {
             if (move < 60) {
                 if (move == 0)
-                    RTMCore.proxy.playSound((Entity)this, ((VehicleBaseConfig)modelSet.getConfig()).sound_DoorOpen, 1.0F, 1.0F);
+                    RTMCore.proxy.playSound((Entity)this, ((VehicleBaseConfig)modelSet.getConfig()).sound_DoorOpen, 1.0F, 1.0F); 
                 move++;
-            }
+            } 
         } else if (move > 0) {
             if (move == 60)
-                RTMCore.proxy.playSound((Entity)this, ((VehicleBaseConfig)modelSet.getConfig()).sound_DoorClose, 1.0F, 1.0F);
+                RTMCore.proxy.playSound((Entity)this, ((VehicleBaseConfig)modelSet.getConfig()).sound_DoorClose, 1.0F, 1.0F); 
             move--;
-        }
+        } 
         return move;
     }
 
@@ -427,8 +427,8 @@ public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends E
     private void setupFloors() {
         for (EntityFloor entity : this.vehicleFloors) {
             if (entity != null)
-                entity.setDead();
-        }
+                entity.setDead(); 
+        } 
         ModelSetVehicleBase modelSetVehicleBase = (ModelSetVehicleBase)getResourceState().getResourceSet();
         this.floorLoaded = true;
         for (int i = 0; i < (modelSetVehicleBase.getConfig().getSlotPos()).length; i++) {
@@ -439,8 +439,8 @@ public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends E
             } else {
                 this.floorLoaded = false;
                 break;
-            }
-        }
+            } 
+        } 
     }
 
     public String getName() {
@@ -455,9 +455,9 @@ public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends E
         if (this.world == null || !this.world.isRemote) {
             PacketNBT.sendToClient((Entity)this);
             this.floorLoaded = false;
-        }
+        } 
         if (this.world.isRemote)
-            this.soundUpdater.onModelChanged();
+            this.soundUpdater.onModelChanged(); 
     }
 
     public int[] getSelectorPos() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/RenderVehicleBase.java b/src/api/rtm/jp/ngt/rtm/entity/vehicle/RenderVehicleBase.java
index 5b9a8ef..cfe033d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/RenderVehicleBase.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/vehicle/RenderVehicleBase.java
@@ -47,7 +47,7 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
         super(renderManager);
     }
 
-    protected void renderVehicleBase(EntityVehicleBase<ModelSetVehicleBase> vehicle, double par2, double par4, double par6, float par8, float par9) {
+    protected void renderVehicleBase(EntityVehicleBase<? extends ModelSetVehicleBase> vehicle, double par2, double par4, double par6, float par8, float par9) {
         GL11.glPushMatrix();
         GL11.glEnable(32826);
         double x = par2;
@@ -61,7 +61,7 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
         float roll = vehicle.prevRotationRoll + (vehicle.rotationRoll - vehicle.prevRotationRoll) * par9;
         GL11.glRotatef(roll, 0.0F, 0.0F, 1.0F);
         if ((Minecraft.getMinecraft()).gameSettings.showDebugInfo)
-            debugCollision(vehicle);
+            debugCollision(vehicle); 
         VehicleNGTO vngto = vehicle.getNGTO();
         if (vngto != null) {
             renderVehicleNGTO((EntityVehicle)vehicle, vngto, par9);
@@ -73,8 +73,8 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
                 renderVehicleMain(vehicle, modelSet, par9);
             } else {
                 RTMCore.proxy.renderMissingModel();
-            }
-        }
+            } 
+        } 
         GL11.glPopMatrix();
     }
 
@@ -83,30 +83,30 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
         boolean smoothing = ((VehicleBaseConfig)modelSet.getConfig()).smoothing;
         boolean culling = ((VehicleBaseConfig)modelSet.getConfig()).doCulling;
         if (smoothing)
-            GL11.glShadeModel(7425);
+            GL11.glShadeModel(7425); 
         if (!culling)
-            GL11.glDisable(2884);
+            GL11.glDisable(2884); 
         if (pass == 0) {
             renderBodyNormal(vehicle, modelSet, par4);
         } else if (pass == 1) {
             if (modelSet.modelObj.light)
-                renderBodyLight(vehicle, modelSet, par4);
+                renderBodyLight(vehicle, modelSet, par4); 
             if (modelSet.modelObj.alphaBlend)
-                renderBodyTransparent(vehicle, modelSet, par4);
-        }
+                renderBodyTransparent(vehicle, modelSet, par4); 
+        } 
         if (!culling)
-            GL11.glEnable(2884);
+            GL11.glEnable(2884); 
         if (smoothing)
-            GL11.glShadeModel(7424);
+            GL11.glShadeModel(7424); 
         if (pass == 1) {
             if (modelSet.rollsignTexture != null)
-                renderRollsign(vehicle, modelSet);
+                renderRollsign(vehicle, modelSet); 
             if (!NGTUtilClient.usingShader()) {
                 GL11.glDisable(2884);
                 renderLightEffect(vehicle, modelSet);
                 GL11.glEnable(2884);
-            }
-        }
+            } 
+        } 
     }
 
     private void preRenderBody(ModelSetVehicleBase modelSet, byte lightState, boolean useInteriorLighting, boolean customLighting) {
@@ -117,23 +117,23 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
             for (int k = 0; k < lights.length; k++) {
                 float[] pos = (lights[k]).pos;
                 RenderUtil.enableCustomLighting(k, pos[0], pos[1], pos[2], r, 1.0F, 1.0F);
-            }
+            } 
         } else if (customLighting) {
             GLHelper.setLightmapMaxBrightness();
             RenderUtil.enableCustomLighting(3, 128.0F, 256.0F, 128.0F, 1.0F, 1.0F, 1.0F);
-        }
+        } 
     }
 
     private void postRenderBody(ModelSetVehicleBase modelSet, boolean useInteriorLighting, boolean customLighting) {
         VehicleBaseConfig.Light[] lights = ((VehicleBaseConfig)modelSet.getConfig()).interiorLights;
         if (useInteriorLighting) {
             for (int k = 0; k < lights.length; k++)
-                RenderUtil.disableCustomLighting(k);
+                RenderUtil.disableCustomLighting(k); 
             GLHelper.enableLighting();
         } else if (customLighting) {
             RenderUtil.disableCustomLighting(3);
             GLHelper.enableLighting();
-        }
+        } 
     }
 
     private void renderBody(EntityVehicleBase vehicle, ModelSetVehicleBase modelSet, int pass, float par4) {
@@ -151,10 +151,10 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
         preRenderBody(modelSet, state, useInteriorLighting, customLighting);
         boolean canUseColor = ((VehicleBaseConfig)modelSet.getConfig()).useCustomColor;
         if (canUseColor)
-            GLHelper.setColor((vehicle.getResourceState()).color, 255);
+            GLHelper.setColor((vehicle.getResourceState()).color, 255); 
         renderBody(vehicle, modelSet, RenderPass.NORMAL.id, par4);
         if (canUseColor)
-            GLHelper.setColor(16777215, 255);
+            GLHelper.setColor(16777215, 255); 
         postRenderBody(modelSet, useInteriorLighting, customLighting);
         GL11.glAlphaFunc(516, 0.1F);
     }
@@ -171,7 +171,7 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
             mode = train.getVehicleState(TrainState.TrainStateType.Light);
             isFrontEmpty = (train.getConnectedTrain(dir) == null);
             isBackEmpty = (train.getConnectedTrain(1 - dir) == null);
-        }
+        } 
         for (int i = 0; i < 3; i++) {
             boolean doRender = false;
             if (isTrain && ((TrainConfig)modelSet.getConfig()).isSingleTrain && isFrontEmpty && isBackEmpty) {
@@ -185,7 +185,7 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
                     case 2:
                         doRender = ((mode == 1 && dir == 1) || mode == 2);
                         break;
-                }
+                } 
             } else {
                 switch (i) {
                     case 0:
@@ -197,8 +197,8 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
                     case 2:
                         doRender = ((mode == 1 && !isFrontEmpty && isBackEmpty) || mode == 2);
                         break;
-                }
-            }
+                } 
+            } 
             if (doRender) {
                 boolean isLightON = (i > 0);
                 if (isLightON) {
@@ -207,23 +207,23 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
                     GL11.glBlendFunc(770, 771);
                     GL11.glColor4f(1.0F, 1.0F, 1.0F, 0.8F);
                     GLHelper.setLightmapMaxBrightness();
-                }
+                } 
                 renderBody(vehicle, modelSet, i + RenderPass.LIGHT.id, par4);
                 if (isLightON) {
                     GL11.glDisable(3042);
                     GL11.glEnable(3008);
                     GLHelper.enableLighting();
                     GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-                }
-            }
-        }
+                } 
+            } 
+        } 
         if (modelSet.modelObj.renderer.shouldRenderOutline(vehicle)) {
             GLHelper.disableLighting();
             GLHelper.setLightmapMaxBrightness();
             modelSet.modelObj.renderWithTexture(vehicle, RenderPass.OUTLINE.id, par4);
             GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
             GLHelper.enableLighting();
-        }
+        } 
     }
 
     private void renderBodyTransparent(EntityVehicleBase vehicle, ModelSetVehicleBase modelSet, float par4) {
@@ -243,7 +243,7 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
             if (!rollsign.disableLighting) {
                 GLHelper.disableLighting();
                 GLHelper.setLightmapMaxBrightness();
-            }
+            } 
             float f0 = (rollsign.uv[3] - rollsign.uv[2]) / ((VehicleBaseConfig)modelset.getConfig()).rollsignNames.length;
             float uMin = rollsign.uv[0];
             float uMax = rollsign.uv[1];
@@ -251,7 +251,7 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
             if (vehicle instanceof EntityTrainBase) {
                 EntityTrainBase train = (EntityTrainBase)vehicle;
                 f1 = rollsign.doAnimation ? train.getRollsignAnimation() : train.getVehicleState(TrainState.TrainStateType.Destination);
-            }
+            } 
             float vMin = rollsign.uv[2] + f0 * f1;
             float vMax = rollsign.uv[2] + f0 * (f1 + 1.0F);
             NGTTessellator tessellator = NGTTessellator.instance;
@@ -261,11 +261,11 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
                 tessellator.addVertexWithUV(rollsign.pos[j][2][0], rollsign.pos[j][2][1], rollsign.pos[j][2][2], uMin, vMax);
                 tessellator.addVertexWithUV(rollsign.pos[j][1][0], rollsign.pos[j][1][1], rollsign.pos[j][1][2], uMax, vMax);
                 tessellator.addVertexWithUV(rollsign.pos[j][0][0], rollsign.pos[j][0][1], rollsign.pos[j][0][2], uMax, vMin);
-            }
+            } 
             tessellator.draw();
             if (!rollsign.disableLighting)
-                GLHelper.enableLighting();
-        }
+                GLHelper.enableLighting(); 
+        } 
         GL11.glPopMatrix();
     }
 
@@ -295,9 +295,9 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
             b1 = (train.getConnectedTrain(1 - dir) == null);
         } else {
             b0 = b1 = true;
-        }
+        } 
         if (((VehicleBaseConfig)modelset.getConfig()).headLights == null || ((VehicleBaseConfig)modelset.getConfig()).tailLights == null || mode <= 0)
-            return;
+            return; 
         GL11.glPushMatrix();
         GLHelper.disableLighting();
         GLHelper.setLightmapMaxBrightness();
@@ -317,7 +317,7 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
         } else {
             renderModeHead = ((mode == 1 && b0) || mode == 2) ? 0 : -1;
             renderModeTail = ((mode == 1 && !b0 && b1) || mode == 2) ? 0 : -1;
-        }
+        } 
         Vec3 vec = PooledVec3.create(0.0D, 0.0D, 1.0D);
         vec = vec.rotateAroundY(vehicle.rotationYaw);
         vec = vec.rotateAroundZ(vehicle.rotationPitch);
@@ -325,13 +325,13 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
         if (renderModeHead >= 0)
             for (VehicleBaseConfig.Light light : ((VehicleBaseConfig)modelset.getConfig()).headLights) {
                 if (light.type != 1 || value <= 7)
-                    renderLightEffect(vehicle, this.lightVecF, light, renderModeHead);
-            }
+                    renderLightEffect(vehicle, this.lightVecF, light, renderModeHead); 
+            }  
         if (renderModeTail >= 0)
             for (VehicleBaseConfig.Light light : ((VehicleBaseConfig)modelset.getConfig()).tailLights) {
                 if (light.type != 1 || value <= 7)
-                    renderLightEffect(vehicle, this.lightVecF, light, renderModeTail);
-            }
+                    renderLightEffect(vehicle, this.lightVecF, light, renderModeTail); 
+            }  
         GL11.glDepthMask(true);
         GL11.glDisable(3042);
         GL11.glShadeModel(7424);
@@ -347,7 +347,7 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
             renderLightEffect(vehicle, normal, light, 0);
             renderLightEffect(vehicle, normal, light, 1);
             return;
-        }
+        } 
         Vec3 vec = PooledVec3.create(light.pos[0], light.pos[1], light.pos[2]);
         vec = vec.rotateAroundY(vehicle.rotationYaw);
         vec = vec.rotateAroundZ(vehicle.rotationPitch);
@@ -355,10 +355,10 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
         GL11.glPushMatrix();
         GL11.glTranslatef(light.pos[0], light.pos[1], (mode == 0) ? light.pos[2] : -light.pos[2]);
         if (mode == 1)
-            GL11.glScalef(1.0F, 1.0F, -1.0F);
+            GL11.glScalef(1.0F, 1.0F, -1.0F); 
         PartsRenderer.renderLightEffectS(normal, vec.getX(), vec.getY(), vec.getZ(), light.r, 0.0625F, 16.0F, light.color, light.type, (mode == 1));
         if (mode == 1)
-            GL11.glScalef(1.0F, 1.0F, -1.0F);
+            GL11.glScalef(1.0F, 1.0F, -1.0F); 
         GL11.glPopMatrix();
     }
 
@@ -367,15 +367,15 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
         GL11.glTranslatef(vngto.offsetX, vngto.offsetY, vngto.offsetZ);
         int pass = MinecraftForgeClient.getRenderPass();
         if (pass < 0 || pass > 1)
-            return;
+            return; 
         if (vngto.glLists == null)
-            vngto.glLists = new GLObject[2];
+            vngto.glLists = new GLObject[2]; 
         GLHelper.disableLighting();
         GLHelper.setLightmapMaxBrightness();
         bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
         boolean smoothing = ((NGTUtilClient.getMinecraft()).gameSettings.ambientOcclusion != 0);
         if (smoothing)
-            GL11.glShadeModel(7425);
+            GL11.glShadeModel(7425); 
         if (!GLHelper.isValid(vngto.glLists[pass])) {
             vngto.glLists[pass] = (GLObject)GLHelper.generateGLList(vngto.glLists[pass]);
             GLHelper.startCompile(vngto.glLists[pass]);
@@ -384,9 +384,9 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
             GLHelper.endCompile();
         } else {
             GLHelper.callList(vngto.glLists[pass]);
-        }
+        } 
         if (smoothing)
-            GL11.glShadeModel(7424);
+            GL11.glShadeModel(7424); 
         GLHelper.enableLighting();
         (NGTUtilClient.getMinecraft()).entityRenderer.enableLightmap();
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
@@ -408,13 +408,13 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
         return false;
     }
 
-    private void debugCollision(EntityVehicleBase<ModelSetVehicleBase> vehicle) {
+    private void debugCollision(EntityVehicleBase<? extends ModelSetVehicleBase> vehicle) {
         if (MinecraftForgeClient.getRenderPass() == 1) {
             ModelSetVehicleBase modelSet = vehicle.getResourceState().getResourceSet();
             if (modelSet != null)
                 if (modelSet.getCollisionObj() != null)
                     modelSet.getCollisionObj().checkAndRenderCollision(
-                            (EntityPlayer)(Minecraft.getMinecraft()).player, (Entity)vehicle, (vehicle.getResourceState()).exclusionParts);
-        }
+                            (EntityPlayer)(Minecraft.getMinecraft()).player, (Entity)vehicle, (vehicle.getResourceState()).exclusionParts);  
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/VehicleController.java b/src/api/rtm/jp/ngt/rtm/entity/vehicle/VehicleController.java
index c68ab42..487f8bc 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/VehicleController.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/vehicle/VehicleController.java
@@ -24,16 +24,16 @@ public final class VehicleController {
                 moveForward = 1.0F * (float)(1.0D - d0 / this.moveDistance);
             } else {
                 this.moveDistance = 0.0D;
-            }
-        }
+            } 
+        } 
         if (this.rotation != 0.0F) {
             float f0 = vehicle.rotationYaw - this.prevYaw;
             if (Math.abs(this.rotation) > Math.abs(f0)) {
                 moveStrafe = 1.0F;
             } else {
                 this.rotation = 0.0F;
-            }
-        }
+            } 
+        } 
         vehicle.updateMotion((EntityLivingBase)null, moveStrafe, moveForward);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/VehicleNGTO.java b/src/api/rtm/jp/ngt/rtm/entity/vehicle/VehicleNGTO.java
index a2ea333..6f7dd99 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/VehicleNGTO.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/vehicle/VehicleNGTO.java
@@ -50,7 +50,7 @@ public final class VehicleNGTO {
         nbt.setFloat("Scale", this.scale);
         nbt.setInteger("Type", this.type);
         if (this.ngto != null)
-            nbt.setTag("NGTO", (NBTBase)this.ngto.writeToNBT());
+            nbt.setTag("NGTO", (NBTBase)this.ngto.writeToNBT()); 
         return nbt;
     }
 
@@ -61,7 +61,7 @@ public final class VehicleNGTO {
         float sc = nbt.getFloat("Scale");
         NGTObject ngto = null;
         if (nbt.hasKey("NGTO"))
-            ngto = NGTObject.readFromNBT(nbt.getCompoundTag("NGTO"));
+            ngto = NGTObject.readFromNBT(nbt.getCompoundTag("NGTO")); 
         VehicleNGTO obj = new VehicleNGTO(ngto, ox, oy, oz, sc);
         obj.riderPosX = nbt.getFloat("RiderPosX");
         obj.riderPosY = nbt.getFloat("RiderPosY");
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/VehicleTrackerEntry.java b/src/api/rtm/jp/ngt/rtm/entity/vehicle/VehicleTrackerEntry.java
index 8a72d61..54e2383 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/VehicleTrackerEntry.java
+++ b/src/api/rtm/jp/ngt/rtm/entity/vehicle/VehicleTrackerEntry.java
@@ -73,17 +73,17 @@ public final class VehicleTrackerEntry extends EntityTrackerEntry {
             this.isDataInitialized = true;
             this.playerEntitiesUpdated = true;
             updatePlayerEntities(par1);
-        }
+        } 
         List<Entity> list = this.trackedEntity.getPassengers();
         if (!list.equals(this.passengers)) {
             this.passengers = list;
             sendPacketToTrackedPlayers((Packet<?>)new SPacketSetPassengers(this.trackedEntity));
-        }
+        } 
         if (this.updateCounter % this.updateFrequency == 0)
             if (this.trackedEntity.getRidingEntity() == null) {
                 RTMCore.NETWORK_WRAPPER.sendToAll(new PacketVehicleMovement(this.trackedEntity, false));
                 if (this.isTrain);
-            }
+            }  
         sendMetadataToAllAssociatedPlayers();
         this.updateCounter++;
     }
@@ -91,12 +91,12 @@ public final class VehicleTrackerEntry extends EntityTrackerEntry {
     private void sendMetadataToAllAssociatedPlayers() {
         EntityDataManager entitydatamanager = this.trackedEntity.getDataManager();
         if (entitydatamanager.isDirty())
-            sendToTrackingAndSelf((Packet<?>)new SPacketEntityMetadata(this.trackedEntity.getEntityId(), entitydatamanager, false));
+            sendToTrackingAndSelf((Packet<?>)new SPacketEntityMetadata(this.trackedEntity.getEntityId(), entitydatamanager, false)); 
     }
 
     public void sendPacketToTrackedPlayers(Packet<?> packetIn) {
         for (EntityPlayerMP entityplayermp : this.trackingPlayers)
-            entityplayermp.connection.sendPacket(packetIn);
+            entityplayermp.connection.sendPacket(packetIn); 
     }
 
     public void sendToTrackingAndSelf(Packet<?> packetIn) {
@@ -107,7 +107,7 @@ public final class VehicleTrackerEntry extends EntityTrackerEntry {
         for (EntityPlayerMP entityplayermp : this.trackingPlayers) {
             this.trackedEntity.removeTrackingPlayer(entityplayermp);
             entityplayermp.removeEntity(this.trackedEntity);
-        }
+        } 
     }
 
     public void removeFromTrackedPlayers(EntityPlayerMP playerMP) {
@@ -115,7 +115,7 @@ public final class VehicleTrackerEntry extends EntityTrackerEntry {
             this.trackedEntity.removeTrackingPlayer(playerMP);
             playerMP.removeEntity(this.trackedEntity);
             this.trackingPlayers.remove(playerMP);
-        }
+        } 
     }
 
     public void updatePlayerEntity(EntityPlayerMP par1) {
@@ -126,17 +126,17 @@ public final class VehicleTrackerEntry extends EntityTrackerEntry {
                     Packet packet = FMLNetworkHandler.getEntitySpawningPacket(this.trackedEntity);
                     par1.connection.sendPacket(packet);
                     if (!this.trackedEntity.getDataManager().isEmpty())
-                        par1.connection.sendPacket((Packet)new SPacketEntityMetadata(this.trackedEntity.getEntityId(), this.trackedEntity.getDataManager(), true));
+                        par1.connection.sendPacket((Packet)new SPacketEntityMetadata(this.trackedEntity.getEntityId(), this.trackedEntity.getDataManager(), true)); 
                     PacketNBT.sendToClient(this.trackedEntity);
                     if (this.trackedEntity.getRidingEntity() != null)
-                        par1.connection.sendPacket((Packet)new SPacketEntityAttach(this.trackedEntity, this.trackedEntity.getRidingEntity()));
+                        par1.connection.sendPacket((Packet)new SPacketEntityAttach(this.trackedEntity, this.trackedEntity.getRidingEntity())); 
                     ForgeEventFactory.onStartEntityTracking(this.trackedEntity, (EntityPlayer)par1);
-                }
+                } 
             } else if (this.trackingPlayers.contains(par1)) {
                 this.trackingPlayers.remove(par1);
                 par1.removeEntity(this.trackedEntity);
                 ForgeEventFactory.onStopEntityTracking(this.trackedEntity, (EntityPlayer)par1);
-            }
+            }  
     }
 
     public boolean isVisibleTo(EntityPlayerMP playerMP) {
@@ -149,35 +149,35 @@ public final class VehicleTrackerEntry extends EntityTrackerEntry {
 
     public void updatePlayerEntities(List<EntityPlayer> players) {
         for (int i = 0; i < players.size(); i++)
-            updatePlayerEntity((EntityPlayerMP)players.get(i));
+            updatePlayerEntity((EntityPlayerMP)players.get(i)); 
     }
 
     public static boolean trackingVehicle(Entity par1) {
         if (!(par1 instanceof EntityVehicleBase) && !(par1 instanceof jp.ngt.rtm.entity.train.EntityBogie))
-            throw new IllegalArgumentException("This entity is not Vehicle");
+            throw new IllegalArgumentException("This entity is not Vehicle"); 
         if (par1.world instanceof WorldServer) {
             EntityTracker tracker = ((WorldServer)par1.world).getEntityTracker();
             Set<VehicleTrackerEntry> trackedEntities = getTrackedEntities(tracker);
             if (trackedEntities != null) {
                 VehicleTrackerEntry tte = new VehicleTrackerEntry(par1);
                 EntityTrackerEntry trackerEntry = null;
-                Iterator<EntityTrackerEntry> iterator = trackedEntities.iterator();
+                Iterator<? extends EntityTrackerEntry> iterator = trackedEntities.iterator();
                 while (iterator.hasNext()) {
                     EntityTrackerEntry entry = iterator.next();
                     if (entry != null && entry.equals(tte)) {
                         if (!(entry instanceof VehicleTrackerEntry))
-                            trackerEntry = entry;
+                            trackerEntry = entry; 
                         break;
-                    }
-                }
+                    } 
+                } 
                 if (trackerEntry != null) {
                     trackedEntities.remove(trackerEntry);
                     tte.setPlayers(trackerEntry.trackingPlayers);
                     trackedEntities.add(tte);
                     return true;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         NGTLog.debug("Failed to change tracking entry (VTE)");
         return false;
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/event/RTMEventHandler.java b/src/api/rtm/jp/ngt/rtm/event/RTMEventHandler.java
index d11fdda..433d664 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/event/RTMEventHandler.java
+++ b/src/api/rtm/jp/ngt/rtm/event/RTMEventHandler.java
@@ -18,7 +18,7 @@ public final class RTMEventHandler {
     @SubscribeEvent
     public void onPlayerLoggedIn(PlayerEvent.PlayerLoggedInEvent event) {
         if (NGTUtil.isSMP() || NGTUtil.openedLANWorld())
-            ModelPackManager.INSTANCE.sendModelSetsToClient((EntityPlayerMP)event.player);
+            ModelPackManager.INSTANCE.sendModelSetsToClient((EntityPlayerMP)event.player); 
         DecorationStore.INSTANCE.loadModels(event.player.getEntityWorld());
         SpeakerSounds.getInstance(true).syncSoundList();
     }
@@ -29,7 +29,7 @@ public final class RTMEventHandler {
             if (RTMCore.deleteBat) {
                 event.setCanceled(true);
                 return;
-            }
+            }  
     }
 
     @SubscribeEvent
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/event/RTMEventHandlerClient.java b/src/api/rtm/jp/ngt/rtm/event/RTMEventHandlerClient.java
index 36a9a91..63bb6b9 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/event/RTMEventHandlerClient.java
+++ b/src/api/rtm/jp/ngt/rtm/event/RTMEventHandlerClient.java
@@ -58,7 +58,7 @@ public final class RTMEventHandlerClient {
     private boolean isPlayerSittingSeat(EntityPlayer player, byte type) {
         if (player.isRiding() && player.getRidingEntity() instanceof EntityFloor)
             if (((EntityFloor)player.getRidingEntity()).getSeatType() == type)
-                return true;
+                return true;  
         return false;
     }
 
@@ -69,7 +69,7 @@ public final class RTMEventHandlerClient {
             (event.getRenderer().getMainModel()).isRiding = false;
             GL11.glRotatef(90.0F, 0.0F, 0.0F, 1.0F);
             GL11.glRotatef(270.0F, 0.0F, 1.0F, 0.0F);
-        }
+        } 
     }
 
     @SubscribeEvent
@@ -77,7 +77,7 @@ public final class RTMEventHandlerClient {
         if (isPlayerSittingSeat(event.getEntityPlayer(), (byte)3)) {
             (event.getRenderer().getMainModel()).isRiding = true;
             GL11.glPopMatrix();
-        }
+        } 
         RenderBullet.onPlayerRender(event.getEntityPlayer(), false);
     }
 
@@ -91,7 +91,7 @@ public final class RTMEventHandlerClient {
         EntityLivingBase entity = event.getEntity();
         renderEntityPost(entity, event.getRenderer(), event.getX(), event.getY(), event.getZ());
         if (entity instanceof EntityNPC)
-            RenderBullet.onNPCRender((EntityNPC)entity, event.getX(), event.getY(), event.getZ());
+            RenderBullet.onNPCRender((EntityNPC)entity, event.getX(), event.getY(), event.getZ()); 
     }
 
     @SubscribeEvent
@@ -99,13 +99,13 @@ public final class RTMEventHandlerClient {
         EntityPlayerSP entityPlayerSP = (NGTUtilClient.getMinecraft()).player;
         byte viewMode = ClientProxy.getViewMode((EntityPlayer)entityPlayerSP);
         if (viewMode >= 0 && viewMode < 3)
-            event.setCanceled(true);
+            event.setCanceled(true); 
         RenderBullet.onPlayerRender((EntityPlayer)entityPlayerSP, true);
     }
 
     public void renderEntityPre(EntityLivingBase entity, RenderLivingBase renderer, double x, double y, double z) {
         if (!isPlayerWearedNVD(entity))
-            return;
+            return; 
         GLHelper.disableLighting();
         GL11.glColor4f(1.0F, 0.5F, 0.4F, 1.0F);
         GLHelper.setLightmapMaxBrightness();
@@ -113,7 +113,7 @@ public final class RTMEventHandlerClient {
 
     public void renderEntityPost(EntityLivingBase entity, RenderLivingBase renderer, double x, double y, double z) {
         if (!isPlayerWearedNVD(entity))
-            return;
+            return; 
         GLHelper.enableLighting();
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/event/RTMKeyHandlerClient.java b/src/api/rtm/jp/ngt/rtm/event/RTMKeyHandlerClient.java
index 61ac721..e2793a7 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/event/RTMKeyHandlerClient.java
+++ b/src/api/rtm/jp/ngt/rtm/event/RTMKeyHandlerClient.java
@@ -49,12 +49,12 @@ public final class RTMKeyHandlerClient {
         EntityPlayerSP entityPlayerSP = mc.player;
         if (Keyboard.isKeyDown(mc.gameSettings.keyBindJump.getKeyCode())) {
             if (entityPlayerSP.isRiding() && entityPlayerSP.getRidingEntity() instanceof jp.ngt.rtm.entity.vehicle.EntityVehicle)
-                sendKeyToServer((byte)9, "");
+                sendKeyToServer((byte)9, ""); 
         } else if (Keyboard.isKeyDown(mc.gameSettings.keyBindSneak.getKeyCode())) {
             if (entityPlayerSP.isRiding() && entityPlayerSP.getRidingEntity() instanceof EntityPlane)
                 if (!(entityPlayerSP.getRidingEntity()).onGround)
-                    sendKeyToServer((byte)10, "");
-        }
+                    sendKeyToServer((byte)10, "");  
+        } 
     }
 
     public void onTickEnd() {}
@@ -66,36 +66,36 @@ public final class RTMKeyHandlerClient {
         Entity riding = entityPlayerSP.getRidingEntity();
         if (mc.gameSettings.keyBindBack.isPressed()) {
             if (entityPlayerSP.isRiding() && riding instanceof EntityTrainBase)
-                ((EntityTrainBase)riding).syncNotch(1);
+                ((EntityTrainBase)riding).syncNotch(1); 
         } else if (mc.gameSettings.keyBindForward.isPressed()) {
             if (entityPlayerSP.isRiding() && riding instanceof EntityTrainBase)
-                ((EntityTrainBase)riding).syncNotch(-1);
+                ((EntityTrainBase)riding).syncNotch(-1); 
         } else if (!mc.gameSettings.keyBindJump.isKeyDown()) {
             if (mc.gameSettings.keyBindSneak.isKeyDown()) {
                 if (entityPlayerSP.isRiding() && riding instanceof EntityPlane)
                     if (((EntityPlane)riding).disableUnmount())
-                        unpressKey(mc.gameSettings.keyBindSneak);
+                        unpressKey(mc.gameSettings.keyBindSneak);  
             } else if (KEY_HORN.isPressed()) {
                 if (entityPlayerSP.isRiding())
                     if (riding instanceof EntityTrainBase) {
                         playSound((EntityPlayer)entityPlayerSP, (byte)2);
                     } else if (riding instanceof jp.ngt.rtm.entity.train.parts.EntityArtillery) {
                         sendKeyToServer((byte)5, "");
-                    }
+                    }  
             } else if (KEY_CHIME.isPressed()) {
                 playSound((EntityPlayer)entityPlayerSP, (byte)3);
             } else if (mc.gameSettings.keyBindInventory.isKeyDown()) {
                 if (entityPlayerSP.isRiding() && riding instanceof jp.ngt.rtm.entity.vehicle.EntityVehicleBase) {
                     mc.gameSettings.keyBindInventory.isPressed();
                     sendKeyToServer((byte)4, "");
-                }
+                } 
             } else if (KEY_ATS.isPressed()) {
                 sendKeyToServer((byte)6, "");
-            }
-        }
+            } 
+        } 
         if (entityPlayerSP.isRiding() && riding instanceof EntityTrainBase)
             if (KEY_EB.isPressed())
-                ((EntityTrainBase)riding).syncNotch(-13);
+                ((EntityTrainBase)riding).syncNotch(-13);  
     }
 
     private void unpressKey(KeyBinding key) {
@@ -122,11 +122,11 @@ public final class RTMKeyHandlerClient {
                     if (sa0 != null && index < sa0.length) {
                         sound = sa0[index][1];
                         MacroRecorder.INSTANCE.recChime(player.world, sa0[index][1]);
-                    }
-                }
+                    } 
+                } 
                 if (!sound.isEmpty())
-                    sendKeyToServer(key, sound);
-            }
-        }
+                    sendKeyToServer(key, sound); 
+            } 
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/event/RTMKeyHandlerServer.java b/src/api/rtm/jp/ngt/rtm/event/RTMKeyHandlerServer.java
index 4b928eb..a98b5be 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/event/RTMKeyHandlerServer.java
+++ b/src/api/rtm/jp/ngt/rtm/event/RTMKeyHandlerServer.java
@@ -29,25 +29,25 @@ public final class RTMKeyHandlerServer {
                 break;
             case 5:
                 if (player.isRiding() && player.getRidingEntity() instanceof EntityArtillery)
-                    ((EntityArtillery)player.getRidingEntity()).onFireKeyDown(player);
+                    ((EntityArtillery)player.getRidingEntity()).onFireKeyDown(player); 
                 break;
             case 6:
                 setATS(player);
                 break;
-        }
+        } 
     }
 
     private void setVehicleState(EntityPlayer player, int updown) {
         if (player.isRiding() && player.getRidingEntity() instanceof EntityVehicle) {
             EntityVehicle vehicle = (EntityVehicle)player.getRidingEntity();
             vehicle.setUpDown(updown);
-        }
+        } 
     }
 
     private void playSound(EntityPlayer player, String sound, float vol) {
         EntityTrainBase train = getRidingTrain(player);
         if (train != null && sound != null)
-            RTMCore.proxy.playSound((Entity)train, sound, vol, 1.0F);
+            RTMCore.proxy.playSound((Entity)train, sound, vol, 1.0F); 
     }
 
     private void setATS(EntityPlayer player) {
@@ -58,13 +58,13 @@ public final class RTMKeyHandlerServer {
                 train.setSignal2(-1);
             } else if (signal == -1 && train.getNotch() == -8) {
                 train.setSignal2(0);
-            }
-        }
+            } 
+        } 
     }
 
     private EntityTrainBase getRidingTrain(EntityPlayer player) {
         if (player.isRiding() && player.getRidingEntity() instanceof EntityTrainBase)
-            return (EntityTrainBase)player.getRidingEntity();
+            return (EntityTrainBase)player.getRidingEntity(); 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/event/RTMTickHandlerClient.java b/src/api/rtm/jp/ngt/rtm/event/RTMTickHandlerClient.java
index 4289746..24154e2 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/event/RTMTickHandlerClient.java
+++ b/src/api/rtm/jp/ngt/rtm/event/RTMTickHandlerClient.java
@@ -19,8 +19,8 @@ public final class RTMTickHandlerClient {
             if ((NGTUtilClient.getMinecraft()).inGameHasFocus && Display.isActive()) {
                 EntityPlayerSP entityPlayerSP = (NGTUtilClient.getMinecraft()).player;
                 if (entityPlayerSP.isRiding() && entityPlayerSP.getRidingEntity() instanceof EntityArtillery)
-                    ((EntityArtillery)entityPlayerSP.getRidingEntity()).updateYawAndPitch((EntityPlayer)entityPlayerSP);
-            }
+                    ((EntityArtillery)entityPlayerSP.getRidingEntity()).updateYawAndPitch((EntityPlayer)entityPlayerSP); 
+            }  
     }
 
     @SubscribeEvent
@@ -31,6 +31,6 @@ public final class RTMTickHandlerClient {
                 RTMKeyHandlerClient.INSTANCE.onTickStart();
             } else if (event.phase == TickEvent.Phase.END) {
                 RTMKeyHandlerClient.INSTANCE.onTickEnd();
-            }
+            }  
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerFreightCar.java b/src/api/rtm/jp/ngt/rtm/gui/ContainerFreightCar.java
index c0598b7..b2a31da 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerFreightCar.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/ContainerFreightCar.java
@@ -15,13 +15,13 @@ public class ContainerFreightCar extends Container {
         byte b0 = 51;
         int i;
         for (i = 0; i < par2Inv.getSizeInventory(); i++)
-            addSlotToContainer(new Slot(par2Inv, i, 44 + i * 18, 20));
+            addSlotToContainer(new Slot(par2Inv, i, 44 + i * 18, 20)); 
         for (i = 0; i < 3; i++) {
             for (int j = 0; j < 9; j++)
-                addSlotToContainer(new Slot((IInventory)player.inventory, j + i * 9 + 9, 8 + j * 18, i * 18 + b0));
-        }
+                addSlotToContainer(new Slot((IInventory)player.inventory, j + i * 9 + 9, 8 + j * 18, i * 18 + b0)); 
+        } 
         for (i = 0; i < 9; i++)
-            addSlotToContainer(new Slot((IInventory)player.inventory, i, 8 + i * 18, 58 + b0));
+            addSlotToContainer(new Slot((IInventory)player.inventory, i, 8 + i * 18, 58 + b0)); 
     }
 
     public boolean canInteractWith(EntityPlayer var1) {
@@ -36,16 +36,16 @@ public class ContainerFreightCar extends Container {
             itemstack = itemstack1.copy();
             if (par2 < this.inventory.getSizeInventory()) {
                 if (!mergeItemStack(itemstack1, this.inventory.getSizeInventory(), this.inventorySlots.size(), true))
-                    return null;
+                    return null; 
             } else if (!mergeItemStack(itemstack1, 0, this.inventory.getSizeInventory(), false)) {
                 return null;
-            }
+            } 
             if (itemstack1.getCount() == 0) {
                 slot.putStack(ItemStack.EMPTY);
             } else {
                 slot.onSlotChanged();
-            }
-        }
+            } 
+        } 
         return itemstack;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerItemContainer.java b/src/api/rtm/jp/ngt/rtm/gui/ContainerItemContainer.java
index c6750f9..0284dd8 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerItemContainer.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/ContainerItemContainer.java
@@ -32,14 +32,14 @@ public class ContainerItemContainer extends Container {
         int j;
         for (j = 0; j < this.numRows; j++) {
             for (int k = 0; k < 9; k++)
-                addSlotToContainer(new Slot(invMain, k + j * 9, 8 + k * 18, 18 + j * 18));
-        }
+                addSlotToContainer(new Slot(invMain, k + j * 9, 8 + k * 18, 18 + j * 18)); 
+        } 
         for (j = 0; j < 3; j++) {
             for (int k = 0; k < 9; k++)
-                addSlotToContainer(new Slot((IInventory)player.inventory, k + j * 9 + 9, 8 + k * 18, 103 + j * 18 + i));
-        }
+                addSlotToContainer(new Slot((IInventory)player.inventory, k + j * 9 + 9, 8 + k * 18, 103 + j * 18 + i)); 
+        } 
         for (j = 0; j < 9; j++)
-            addSlotToContainer(new Slot((IInventory)player.inventory, j, 8 + j * 18, 161 + i));
+            addSlotToContainer(new Slot((IInventory)player.inventory, j, 8 + j * 18, 161 + i)); 
         this.maxContainerSlotNumber = this.inventory.getSizeInventory() - 1;
     }
 
@@ -56,16 +56,16 @@ public class ContainerItemContainer extends Container {
                 itemstack = itemstack1.copy();
                 if (par2 < this.inventory.getSizeInventory()) {
                     if (!mergeItemStack(itemstack1, this.inventory.getSizeInventory(), this.inventorySlots.size(), true))
-                        return ItemStack.EMPTY;
+                        return ItemStack.EMPTY; 
                 } else if (!mergeItemStack(itemstack1, 0, this.inventory.getSizeInventory(), false)) {
                     return ItemStack.EMPTY;
-                }
+                } 
                 if (itemstack1.getCount() == 0) {
                     slot.putStack(ItemStack.EMPTY);
                 } else {
                     slot.onSlotChanged();
-                }
-            }
+                } 
+            }  
         return itemstack;
     }
 
@@ -91,11 +91,11 @@ public class ContainerItemContainer extends Container {
                     this.slots.clear();
                 } else {
                     resetDrag();
-                }
+                } 
             } else if (this.dragEvent == 1) {
                 Slot slot = this.inventorySlots.get(slotId);
                 if (slot != null && canAddItemToSlot(slot, invPlayer.getItemStack(), true) && slot.isItemValid(invPlayer.getItemStack()) && invPlayer.getItemStack().getCount() > this.slots.size() && canDragIntoSlot(slot))
-                    this.slots.add(slot);
+                    this.slots.add(slot); 
             } else if (this.dragEvent == 2) {
                 if (!this.slots.isEmpty()) {
                     ItemStack itemstack3 = invPlayer.getItemStack().copy();
@@ -106,22 +106,22 @@ public class ContainerItemContainer extends Container {
                             int j1 = slot1.getHasStack() ? slot1.getStack().getCount() : 0;
                             computeStackSize(this.slots, this.dragMode, itemstack1, j1);
                             if (itemstack1.getCount() > itemstack1.getMaxStackSize())
-                                itemstack1.setCount(itemstack1.getMaxStackSize());
+                                itemstack1.setCount(itemstack1.getMaxStackSize()); 
                             if (itemstack1.getCount() > slot1.getSlotStackLimit())
-                                itemstack1.setCount(slot1.getSlotStackLimit());
+                                itemstack1.setCount(slot1.getSlotStackLimit()); 
                             i1 -= itemstack1.getCount() - j1;
                             slot1.putStack(itemstack1);
-                        }
-                    }
+                        } 
+                    } 
                     itemstack3.setCount(i1);
                     if (itemstack3.getCount() <= 0)
-                        itemstack3 = ItemStack.EMPTY;
+                        itemstack3 = ItemStack.EMPTY; 
                     invPlayer.setItemStack(itemstack3);
-                }
+                } 
                 resetDrag();
             } else {
                 resetDrag();
-            }
+            } 
         } else if (this.dragEvent != 0) {
             resetDrag();
         } else if ((clickTypeIn == ClickType.PICKUP || clickTypeIn == ClickType.QUICK_MOVE) && (dragType == 0 || dragType == 1)) {
@@ -130,16 +130,16 @@ public class ContainerItemContainer extends Container {
                     if (dragType == 0) {
                         player.dropItem(invPlayer.getItemStack(), true);
                         invPlayer.setItemStack(ItemStack.EMPTY);
-                    }
+                    } 
                     if (dragType == 1) {
                         player.dropItem(invPlayer.getItemStack().splitStack(1), true);
                         if (invPlayer.getItemStack().getCount() == 0)
-                            invPlayer.setItemStack(ItemStack.EMPTY);
-                    }
-                }
+                            invPlayer.setItemStack(ItemStack.EMPTY); 
+                    } 
+                } 
             } else if (clickTypeIn == ClickType.QUICK_MOVE) {
                 if (slotId < 0)
-                    return ItemStack.EMPTY;
+                    return ItemStack.EMPTY; 
                 Slot slot2 = this.inventorySlots.get(slotId);
                 if (slot2 != null && slot2.canTakeStack(player)) {
                     ItemStack itemstack3 = transferStackInSlot(player, slotId);
@@ -147,78 +147,77 @@ public class ContainerItemContainer extends Container {
                         Item item = itemstack3.getItem();
                         itemstack = itemstack3.copy();
                         if (slot2.getStack() != ItemStack.EMPTY && slot2.getStack().getItem() == item)
-                            slotClick(slotId, dragType, ClickType.SWAP, player);
-                    }
-                }
+                            slotClick(slotId, dragType, ClickType.SWAP, player); 
+                    } 
+                } 
             } else {
                 if (slotId < 0)
-                    return ItemStack.EMPTY;
+                    return ItemStack.EMPTY; 
                 Slot slot2 = this.inventorySlots.get(slotId);
                 if (slot2 != null) {
                     ItemStack itemstack3 = slot2.getStack();
                     ItemStack itemstack4 = invPlayer.getItemStack();
                     if (itemstack3 != ItemStack.EMPTY)
-                        itemstack = itemstack3.copy();
+                        itemstack = itemstack3.copy(); 
                     if (itemstack3 == ItemStack.EMPTY) {
                         if (itemstack4 != ItemStack.EMPTY && slot2.isItemValid(itemstack4)) {
                             int l1 = (dragType == 0) ? itemstack4.getCount() : 1;
                             if (l1 > slot2.getSlotStackLimit())
-                                l1 = slot2.getSlotStackLimit();
+                                l1 = slot2.getSlotStackLimit(); 
                             if (itemstack4.getCount() >= l1)
-                                slot2.putStack(itemstack4.splitStack(l1));
+                                slot2.putStack(itemstack4.splitStack(l1)); 
                             if (itemstack4.getCount() == 0)
-                                invPlayer.setItemStack(ItemStack.EMPTY);
-                        }
+                                invPlayer.setItemStack(ItemStack.EMPTY); 
+                        } 
                     } else if (slot2.canTakeStack(player)) {
                         if (itemstack4 == ItemStack.EMPTY) {
                             int l1 = (dragType == 0) ? itemstack3.getCount() : ((itemstack3.getCount() + 1) / 2);
                             ItemStack itemstack5 = slot2.decrStackSize(l1);
                             invPlayer.setItemStack(itemstack5);
                             if (itemstack3.getCount() == 0)
-                                slot2.putStack(ItemStack.EMPTY);
+                                slot2.putStack(ItemStack.EMPTY); 
                             slot2.onTake(player, invPlayer.getItemStack());
                         } else if (slot2.isItemValid(itemstack4)) {
                             if (itemstack3.getItem() == itemstack4.getItem() && itemstack3.getItemDamage() == itemstack4.getItemDamage() && ItemStack.areItemStackTagsEqual(itemstack3, itemstack4)) {
                                 int l1 = (dragType == 0) ? itemstack4.getCount() : 1;
                                 if (l1 > slot2.getSlotStackLimit() - itemstack3.getCount())
-                                    l1 = slot2.getSlotStackLimit() - itemstack3.getCount();
+                                    l1 = slot2.getSlotStackLimit() - itemstack3.getCount(); 
                                 if (slot2.slotNumber > this.maxContainerSlotNumber)
                                     if (l1 > itemstack4.getMaxStackSize() - itemstack3.getCount())
-                                        l1 = itemstack4.getMaxStackSize() - itemstack3.getCount();
+                                        l1 = itemstack4.getMaxStackSize() - itemstack3.getCount();  
                                 itemstack4.splitStack(l1);
                                 if (itemstack4.getCount() == 0)
-                                    invPlayer.setItemStack(ItemStack.EMPTY);
+                                    invPlayer.setItemStack(ItemStack.EMPTY); 
                                 itemstack3.grow(l1);
                             } else if (itemstack4.getCount() <= slot2.getSlotStackLimit()) {
                                 slot2.putStack(itemstack4);
                                 invPlayer.setItemStack(itemstack3);
-                            }
+                            } 
                         } else if (itemstack3.getItem() == itemstack4.getItem() && itemstack4.getMaxStackSize() > 1 && (!itemstack3.getHasSubtypes() || itemstack3.getItemDamage() == itemstack4.getItemDamage()) && ItemStack.areItemStackTagsEqual(itemstack3, itemstack4)) {
                             int l1 = itemstack3.getCount();
                             if (l1 > 0 && l1 + itemstack4.getCount() <= itemstack4.getMaxStackSize()) {
                                 itemstack4.grow(l1);
                                 itemstack3 = slot2.decrStackSize(l1);
                                 if (itemstack3.getCount() == 0)
-                                    slot2.putStack(ItemStack.EMPTY);
+                                    slot2.putStack(ItemStack.EMPTY); 
                                 slot2.onTake(player, invPlayer.getItemStack());
-                            }
-                        }
-                    }
+                            } 
+                        } 
+                    } 
                     slot2.onSlotChanged();
-                }
-            }
+                } 
+            } 
         } else if (clickTypeIn == ClickType.SWAP && dragType >= 0 && dragType < 9) {
             Slot slot2 = this.inventorySlots.get(slotId);
             if (slot2.canTakeStack(player)) {
-                int i;
                 ItemStack itemstack3 = invPlayer.getStackInSlot(dragType);
                 boolean flag = (itemstack3 == ItemStack.EMPTY || (slot2.inventory == invPlayer && slot2.isItemValid(itemstack3)));
                 int l1 = -1;
                 if (!flag) {
                     l1 = invPlayer.getFirstEmptyStack();
-                    i = flag | ((l1 > -1) ? 1 : 0);
-                }
-                if (slot2.getHasStack() && i != 0) {
+                    flag |= (l1 > -1);
+                } 
+                if (slot2.getHasStack() && flag) {
                     ItemStack itemstack5 = slot2.getStack();
                     invPlayer.setInventorySlotContents(dragType, itemstack5.copy());
                     if ((slot2.inventory != invPlayer || !slot2.isItemValid(itemstack3)) && itemstack3 != ItemStack.EMPTY) {
@@ -227,31 +226,31 @@ public class ContainerItemContainer extends Container {
                             slot2.decrStackSize(itemstack5.getCount());
                             slot2.putStack(ItemStack.EMPTY);
                             slot2.onTake(player, itemstack5);
-                        }
+                        } 
                     } else {
                         slot2.decrStackSize(itemstack5.getCount());
                         slot2.putStack(itemstack3);
                         slot2.onTake(player, itemstack5);
-                    }
+                    } 
                 } else if (!slot2.getHasStack() && itemstack3 != ItemStack.EMPTY && slot2.isItemValid(itemstack3)) {
                     invPlayer.setInventorySlotContents(dragType, (ItemStack)null);
                     slot2.putStack(itemstack3);
-                }
-            }
+                } 
+            } 
         } else if (clickTypeIn == ClickType.CLONE && player.capabilities.isCreativeMode && invPlayer.getItemStack() == ItemStack.EMPTY && slotId >= 0) {
             Slot slot2 = this.inventorySlots.get(slotId);
             if (slot2 != null && slot2.getHasStack()) {
                 ItemStack itemstack3 = slot2.getStack().copy();
                 itemstack3.setCount(itemstack3.getMaxStackSize());
                 invPlayer.setItemStack(itemstack3);
-            }
+            } 
         } else if (clickTypeIn == ClickType.THROW && invPlayer.getItemStack().isEmpty() && slotId >= 0) {
             Slot slot2 = this.inventorySlots.get(slotId);
             if (slot2 != null && slot2.getHasStack() && slot2.canTakeStack(player)) {
                 ItemStack itemstack3 = slot2.decrStackSize((dragType == 0) ? 1 : slot2.getStack().getCount());
                 slot2.onTake(player, itemstack3);
                 player.dropItem(itemstack3, true);
-            }
+            } 
         } else if (clickTypeIn == ClickType.PICKUP_ALL && slotId >= 0) {
             Slot slot2 = this.inventorySlots.get(slotId);
             ItemStack itemstack3 = invPlayer.getItemStack();
@@ -267,36 +266,35 @@ public class ContainerItemContainer extends Container {
                             ItemStack itemstack2 = slot3.decrStackSize(k1);
                             itemstack3.grow(k1);
                             if (itemstack2.getCount() <= 0)
-                                slot3.putStack(ItemStack.EMPTY);
+                                slot3.putStack(ItemStack.EMPTY); 
                             slot3.onTake(player, itemstack2);
-                        }
-                    }
-                }
-            }
+                        } 
+                    } 
+                } 
+            } 
             detectAndSendChanges();
-        }
+        } 
         return itemstack;
     }
 
     public static boolean canAddItemToSlot(Slot slot, ItemStack itemStack, boolean par2) {
-        int i;
         boolean flag1 = (slot == null || !slot.getHasStack());
         if (slot != null && slot.getHasStack() && itemStack != null && itemStack.isItemEqual(slot.getStack()) && ItemStack.areItemStackTagsEqual(slot.getStack(), itemStack)) {
             int j = par2 ? 0 : itemStack.getCount();
             if (slot.slotNumber <= 53) {
-                i = flag1 | ((slot.getStack().getCount() + j <= slot.getSlotStackLimit()) ? 1 : 0);
+                flag1 |= slot.getStack().getCount() + j <= slot.getSlotStackLimit();
             } else {
-                i |= (slot.getStack().getCount() + j <= itemStack.getMaxStackSize()) ? 1 : 0;
-            }
-        }
-        return i;
+                flag1 |= slot.getStack().getCount() + j <= itemStack.getMaxStackSize();
+            } 
+        } 
+        return flag1;
     }
 
     protected boolean mergeItemStack(ItemStack itemStack, int par2, int par3, boolean par4) {
         boolean flag1 = false;
         int k = par2;
         if (par4)
-            k = par3 - 1;
+            k = par3 - 1; 
         if (itemStack.isStackable())
             while (itemStack.getCount() > 0 && ((!par4 && k < par3) || (par4 && k >= par2))) {
                 Slot slot = this.inventorySlots.get(k);
@@ -314,20 +312,20 @@ public class ContainerItemContainer extends Container {
                         itemstack1.setCount(maxSize);
                         slot.onSlotChanged();
                         flag1 = true;
-                    }
-                }
+                    } 
+                } 
                 if (par4) {
                     k--;
                     continue;
-                }
+                } 
                 k++;
-            }
+            }  
         if (itemStack.getCount() > 0) {
             if (par4) {
                 k = par3 - 1;
             } else {
                 k = par2;
-            }
+            } 
             while ((!par4 && k < par3) || (par4 && k >= par2)) {
                 Slot slot = this.inventorySlots.get(k);
                 ItemStack itemstack1 = slot.getStack();
@@ -337,14 +335,14 @@ public class ContainerItemContainer extends Container {
                     itemStack.setCount(0);
                     flag1 = true;
                     break;
-                }
+                } 
                 if (par4) {
                     k--;
                     continue;
-                }
+                } 
                 k++;
-            }
-        }
+            } 
+        } 
         return flag1;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerNPC.java b/src/api/rtm/jp/ngt/rtm/gui/ContainerNPC.java
index 9dc329b..2f7b4d1 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerNPC.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/ContainerNPC.java
@@ -32,22 +32,22 @@ public final class ContainerNPC extends Container {
             for (int j = 0; j < 9; j++) {
                 int index = j + i * 9 + 9;
                 addSlotToContainer(new Slot((IInventory)pPlayer.inventory, index, 8 + j * 18, y));
-            }
+            } 
             y += 18;
-        }
+        } 
         y += 4;
         for (i = 0; i < 9; i++)
-            addSlotToContainer(new Slot((IInventory)pPlayer.inventory, i, 8 + i * 18, y));
+            addSlotToContainer(new Slot((IInventory)pPlayer.inventory, i, 8 + i * 18, y)); 
         for (i = 0; i < 4; i++) {
             int index = i + 27;
             addSlotToContainer(new SlotNPCArmor(pNPC.inventory, index, 8, 8 + i * 18, i));
-        }
+        } 
         for (i = 0; i < 3; i++) {
             for (int j = 0; j < 9; j++) {
                 int index = j + i * 9;
                 addSlotToContainer(new Slot(pNPC.inventory, index, 8 + j * 18, 84 + i * 18));
-            }
-        }
+            } 
+        } 
     }
 
     public ItemStack transferStackInSlot(EntityPlayer playerIn, int index) {
@@ -58,16 +58,16 @@ public final class ContainerNPC extends Container {
             itemstack = slotItem.copy();
             if (index < 27) {
                 if (!mergeItemStack(slotItem, 27, this.inventorySlots.size(), true))
-                    return ItemStack.EMPTY;
+                    return ItemStack.EMPTY; 
             } else if (!mergeItemStack(slotItem, 0, 27, false)) {
                 return ItemStack.EMPTY;
-            }
+            } 
             if (slotItem.isEmpty()) {
                 slot.putStack(ItemStack.EMPTY);
             } else {
                 slot.onSlotChanged();
-            }
-        }
+            } 
+        } 
         return itemstack;
     }
 
@@ -89,7 +89,8 @@ public final class ContainerNPC extends Container {
 
         public boolean isItemValid(ItemStack item) {
             if (item == null)
-                return false;
+                return false; 
+            EntityEquipmentSlot slot = EntityEquipmentSlot.HEAD;
             switch (this.index) {
                 case 0:
                     slot = EntityEquipmentSlot.FEET;
@@ -104,7 +105,6 @@ public final class ContainerNPC extends Container {
                     slot = EntityEquipmentSlot.HEAD;
                     return item.getItem().isValidArmor(item, slot, (Entity)ContainerNPC.this.npc);
             }
-            EntityEquipmentSlot slot = EntityEquipmentSlot.HEAD;
             return item.getItem().isValidArmor(item, slot, (Entity)ContainerNPC.this.npc);
         }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerRTMWorkBench.java b/src/api/rtm/jp/ngt/rtm/gui/ContainerRTMWorkBench.java
index fa7a771..3e73265 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerRTMWorkBench.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/ContainerRTMWorkBench.java
@@ -68,36 +68,36 @@ public class ContainerRTMWorkBench extends Container {
         int i;
         for (i = 0; i < 5; i++) {
             for (int j = 0; j < 5; j++)
-                addSlotToContainer(new Slot((IInventory)this.craftMatrix, j + i * 5, 8 + j * 18, 12 + i * 18));
-        }
+                addSlotToContainer(new Slot((IInventory)this.craftMatrix, j + i * 5, 8 + j * 18, 12 + i * 18)); 
+        } 
         for (i = 0; i < 9; i++)
-            addSlotToContainer(new Slot((IInventory)inventory, i, 8 + i * 18, 164));
+            addSlotToContainer(new Slot((IInventory)inventory, i, 8 + i * 18, 164)); 
         if (this.workbenchType == 1) {
             for (i = 0; i < 5; i++)
-                addSlotToContainer(new Slot((IInventory)this.invBallast, i, 8 + i * 18, 104));
+                addSlotToContainer(new Slot((IInventory)this.invBallast, i, 8 + i * 18, 104)); 
         } else if (this.workbenchType == 0) {
             for (i = 0; i < 3; i++) {
                 for (int j = 0; j < 9; j++)
-                    addSlotToContainer(new Slot((IInventory)inventory, j + i * 9 + 9, 8 + j * 18, 106 + i * 18));
-            }
-        }
+                    addSlotToContainer(new Slot((IInventory)inventory, j + i * 9 + 9, 8 + j * 18, 106 + i * 18)); 
+            } 
+        } 
         onCraftMatrixChanged((IInventory)this.craftMatrix);
         if (this.workbenchType == 1 && this.isCreativeMode)
-            setItemToSampleSlot(ItemRail.getRailItem(ItemRail.getDefaultProperty()));
+            setItemToSampleSlot(ItemRail.getRailItem(ItemRail.getDefaultProperty())); 
     }
 
     public ItemStack slotClick(int slotId, int dragType, ClickType clickTypeIn, EntityPlayer player) {
         if (slotId >= 0 && slotId < this.inventorySlots.size()) {
             Slot slot = this.inventorySlots.get(slotId);
             if (slot != null && slot.inventory == this.sample)
-                return ItemStack.EMPTY;
-        }
+                return ItemStack.EMPTY; 
+        } 
         return super.slotClick(slotId, dragType, clickTypeIn, player);
     }
 
     public void onCraftMatrixChanged(IInventory inventory) {
         if (this.workBench.isCrafting())
-            return;
+            return; 
         IRecipe recipe = CraftingManager.findMatchingRecipe(this.craftMatrix, this.worldObj);
         ItemStack stack = ItemStack.EMPTY;
         if (recipe != null) {
@@ -108,11 +108,11 @@ public class ContainerRTMWorkBench extends Container {
                 } else if (this.workbenchType == 1) {
                     ResourceStateRail prop = getProperty();
                     stack = (prop == null) ? ItemStack.EMPTY : ItemRail.getRailItem(prop);
-                }
+                }  
         } else if (this.workbenchType == 1 && this.isCreativeMode) {
             ResourceStateRail prop = getProperty();
             stack = (prop == null) ? ItemStack.EMPTY : ItemRail.getRailItem(prop);
-        }
+        } 
         setItemToSampleSlot(stack);
     }
 
@@ -128,29 +128,29 @@ public class ContainerRTMWorkBench extends Container {
     private void consumeItemsInCraftMatrix() {
         int i;
         for (i = 0; i < this.craftMatrix.getSizeInventory(); i++)
-            decrSlotItem(this.craftMatrix, i);
+            decrSlotItem(this.craftMatrix, i); 
         for (i = 0; i < this.invBallast.getSizeInventory(); i++)
-            decrSlotItem(this.invBallast, i);
+            decrSlotItem(this.invBallast, i); 
     }
 
     private void decrSlotItem(InventoryCrafting inventory, int slotNum) {
         ItemStack itemInSlot = inventory.getStackInSlot(slotNum);
         if (itemInSlot.isEmpty())
-            return;
+            return; 
         inventory.decrStackSize(slotNum, 1);
         if (itemInSlot.getItem().hasContainerItem(itemInSlot)) {
             ItemStack itemstack2 = itemInSlot.getItem().getContainerItem(itemInSlot);
             if (!itemstack2.isEmpty() && itemstack2.isItemStackDamageable() && itemstack2.getItemDamage() > itemstack2.getMaxDamage()) {
                 MinecraftForge.EVENT_BUS.post((Event)new PlayerDestroyItemEvent(this.thePlayer, itemstack2, EnumHand.MAIN_HAND));
                 return;
-            }
+            } 
             if (!this.thePlayer.inventory.addItemStackToInventory(itemstack2))
                 if (inventory.getStackInSlot(slotNum).isEmpty()) {
                     inventory.setInventorySlotContents(slotNum, itemstack2);
                 } else {
                     this.thePlayer.dropItem(itemstack2, false);
-                }
-        }
+                }  
+        } 
     }
 
     private ResourceStateRail getProperty() {
@@ -163,13 +163,13 @@ public class ContainerRTMWorkBench extends Container {
                 if (stack2.isEmpty()) {
                     block = Blocks.AIR;
                     break;
-                }
+                } 
                 Block block2 = Block.getBlockFromItem(stack2.getItem());
                 if (block2 != block || stack2.getItemDamage() != damage) {
                     block = Blocks.AIR;
                     break;
-                }
-            }
+                } 
+            }  
         String name = this.modelName;
         if (block != null && name != null) {
             ResourceStateRail state = new ResourceStateRail(RTMResource.RAIL, null);
@@ -177,7 +177,7 @@ public class ContainerRTMWorkBench extends Container {
             state.setBlock(block, damage);
             state.setHeight(this.railHeight);
             return state;
-        }
+        } 
         return null;
     }
 
@@ -190,21 +190,21 @@ public class ContainerRTMWorkBench extends Container {
         if (this.workBench.getCraftingTime() == 64 && !getSampeItem().isEmpty()) {
             this.craftResult.setInventorySlotContents(0, getSampeItem().copy());
             if (this.workbenchType == 0 || !this.isCreativeMode)
-                this.sample.setInventorySlotContents(0, ItemStack.EMPTY);
-        }
+                this.sample.setInventorySlotContents(0, ItemStack.EMPTY); 
+        } 
         super.detectAndSendChanges();
         for (int i = 0; i < this.listeners.size(); i++) {
             IContainerListener icrafting = this.listeners.get(i);
             if (this.lastCraftingTime != this.workBench.getCraftingTime())
-                icrafting.sendWindowProperty(this, 0, this.workBench.getCraftingTime());
-        }
+                icrafting.sendWindowProperty(this, 0, this.workBench.getCraftingTime()); 
+        } 
         this.lastCraftingTime = this.workBench.getCraftingTime();
     }
 
     @SideOnly(Side.CLIENT)
     public void updateProgressBar(int par1, int par2) {
         if (par1 == 0)
-            this.workBench.setCraftingTime(par2);
+            this.workBench.setCraftingTime(par2); 
     }
 
     public void onContainerClosed(EntityPlayer player) {
@@ -212,7 +212,7 @@ public class ContainerRTMWorkBench extends Container {
         this.workBench.writeItemsToTile((IInventory)this.craftMatrix, (IInventory)this.invBallast);
         this.workBench.markDirty();
         if (!player.world.isRemote && !getResultItem().isEmpty())
-            player.entityDropItem(getResultItem(), 0.5F);
+            player.entityDropItem(getResultItem(), 0.5F); 
     }
 
     public boolean canInteractWith(EntityPlayer player) {
@@ -229,26 +229,26 @@ public class ContainerRTMWorkBench extends Container {
             if (slotIndex == 0) {
                 int index = (this.workbenchType == 1) ? 35 : 62;
                 if (!mergeItemStack(itemstack1, 27, index, true))
-                    return ItemStack.EMPTY;
+                    return ItemStack.EMPTY; 
                 slot.onSlotChange(itemstack1, itemstack);
             } else if (this.workbenchType == 0 && slotIndex >= 36 && slotIndex < 63) {
                 if (!mergeItemStack(itemstack1, 27, 35, false))
-                    return ItemStack.EMPTY;
+                    return ItemStack.EMPTY; 
             } else if (this.workbenchType == 0 && slotIndex >= 27 && slotIndex < 36) {
                 if (!mergeItemStack(itemstack1, 36, 62, false))
-                    return ItemStack.EMPTY;
+                    return ItemStack.EMPTY; 
             } else if (!mergeItemStack(itemstack1, 27, 35, false)) {
                 return ItemStack.EMPTY;
-            }
+            } 
             if (itemstack1.getCount() == 0) {
                 slot.putStack(ItemStack.EMPTY);
             } else {
                 slot.onSlotChanged();
-            }
+            } 
             if (itemstack1.getCount() == itemstack.getCount())
-                return ItemStack.EMPTY;
+                return ItemStack.EMPTY; 
             slot.onTake(player, itemstack1);
-        }
+        } 
         return itemstack;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerRecipe.java b/src/api/rtm/jp/ngt/rtm/gui/ContainerRecipe.java
index 68d247f..fff7328 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerRecipe.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/ContainerRecipe.java
@@ -52,12 +52,12 @@ public class ContainerRecipe extends Container {
             if (this.selectedItem == null) {
                 setCurrentPage(1);
                 return;
-            }
+            } 
             IRecipe recipe = RecipeManager.INSTANCE.getRecipe(this.selectedItem);
             if (recipe == null) {
                 setCurrentPage(1);
                 return;
-            }
+            } 
             ItemStack[] iarray = RecipeManager.INSTANCE.getRecipeItems(recipe);
             addSlotToContainer(new SlotSample(this.invCraftSample, this, 0, 138, 80));
             this.invCraftSample.setInventorySlotContents(0, recipe.getRecipeOutput());
@@ -65,12 +65,12 @@ public class ContainerRecipe extends Container {
                 for (int j = 0; j < 5; j++) {
                     int index = j + i * 5;
                     if (index >= iarray.length)
-                        break;
+                        break; 
                     addSlotToContainer(new SlotSample(this.invCraftSample, this, index + 1, 8 + j * 18, 44 + i * 18));
                     this.invCraftSample.setInventorySlotContents(index + 1, iarray[index]);
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     public static int getMaxScroll() {
@@ -86,20 +86,20 @@ public class ContainerRecipe extends Container {
                 int index = j + i * 9;
                 int index2 = j + (i + par1) * 9;
                 if (index2 >= list.size())
-                    break;
+                    break; 
                 addSlotToContainer(new SlotSample(this.invItems, this, index, 8 + j * 18, 8 + i * 18));
                 ItemStack itemstack = ((IRecipe)list.get(index2)).getRecipeOutput().copy();
                 itemstack.setCount(1);
                 this.invItems.setInventorySlotContents(index, itemstack);
-            }
-        }
+            } 
+        } 
     }
 
     public void onSlotClicked(Slot slot) {
         if (slot.getStack() != null) {
             this.selectedItem = slot.getStack();
             setCurrentPage(2);
-        }
+        } 
     }
 
     @SideOnly(Side.CLIENT)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerTicketVendor.java b/src/api/rtm/jp/ngt/rtm/gui/ContainerTicketVendor.java
index 2154de6..1af1680 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerTicketVendor.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/ContainerTicketVendor.java
@@ -21,10 +21,10 @@ public class ContainerTicketVendor extends Container {
         int i;
         for (i = 0; i < 3; i++) {
             for (int j = 0; j < 9; j++)
-                addSlotToContainer(new Slot((IInventory)inventory, j + i * 9 + 9, x0 + j * 18, y0 + i * 18));
-        }
+                addSlotToContainer(new Slot((IInventory)inventory, j + i * 9 + 9, x0 + j * 18, y0 + i * 18)); 
+        } 
         for (i = 0; i < 9; i++)
-            addSlotToContainer(new Slot((IInventory)inventory, i, x0 + i * 18, y0 + 58));
+            addSlotToContainer(new Slot((IInventory)inventory, i, x0 + i * 18, y0 + 58)); 
         for (i = 0; i < 12; i++) {
             if (i == 0) {
                 x0 = 232;
@@ -39,9 +39,9 @@ public class ContainerTicketVendor extends Container {
             } else {
                 x0 = 26;
                 y0 = 204;
-            }
+            } 
             addSlotToContainer(new Slot(this.invVendor, i, x0, y0));
-        }
+        } 
     }
 
     public boolean canInteractWith(EntityPlayer player) {
@@ -55,7 +55,7 @@ public class ContainerTicketVendor extends Container {
             for (int i = 0; i < this.invVendor.getSizeInventory(); i++) {
                 ItemStack itemstack = this.invVendor.removeStackFromSlot(i);
                 if (itemstack != null)
-                    player.dropItem(itemstack, false);
-            }
+                    player.dropItem(itemstack, false); 
+            }  
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerTrainControlPanel.java b/src/api/rtm/jp/ngt/rtm/gui/ContainerTrainControlPanel.java
index cbf8d61..46252bf 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerTrainControlPanel.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/ContainerTrainControlPanel.java
@@ -9,7 +9,7 @@ import net.minecraft.inventory.IInventory;
 import net.minecraft.inventory.Slot;
 
 public class ContainerTrainControlPanel extends ContainerPlayer {
-    public final EntityVehicleBase vehicle;
+    public final EntityVehicleBase<?> vehicle;
 
     public final EntityPlayer player;
 
@@ -35,7 +35,7 @@ public class ContainerTrainControlPanel extends ContainerPlayer {
                 Slot slot = new Slot((IInventory)this.player.inventory, i, 8 + i * 18, 142);
                 slot.slotNumber = this.inventorySlots.size();
                 this.inventorySlots.add(slot);
-            }
-        }
+            } 
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/DataMapEditor.java b/src/api/rtm/jp/ngt/rtm/gui/DataMapEditor.java
index 05ccbdd..27633c0 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/DataMapEditor.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/DataMapEditor.java
@@ -56,8 +56,8 @@ public class DataMapEditor extends JFrame {
             rowData[i++] = new String[3];
             IDataFilter filter = ((ResourceSet)state.getResourceSet()).dataFormatter.getFilter(entry.getKey());
             if (filter != null)
-                this.filterMap.put(entry.getKey(), filter);
-        }
+                this.filterMap.put(entry.getKey(), filter); 
+        } 
         String[] columnNames = { "Key", "Type", "Data" };
         JTable table = new DMEditorTable(font, fontSize, rowData, columnNames);
         JScrollPane scrollPane = new JScrollPane(table);
@@ -71,7 +71,7 @@ public class DataMapEditor extends JFrame {
                         String key = (String)table.getModel().getValueAt(j, 0);
                         String value = String.format("(%s)%s", new Object[] { table.getModel().getValueAt(j, 1), table.getModel().getValueAt(j, 2) });
                         state.dataMap.set(key, value, 3);
-                    }
+                    } 
                     this.parentGui.argField.setText(state.getArg());
                     this.parentGui.saveData(state);
                     dispose();
@@ -86,7 +86,7 @@ public class DataMapEditor extends JFrame {
 
     public class DMEditorTable extends JTable {
         public DMEditorTable(Font font, int fontSize, String[][] rowData, String[] columnNames) {
-            super(new DefaultTableModel((Object[][])rowData, (Object[])columnNames, DataMapEditor.this, rowData) {
+            super(new DefaultTableModel((Object[][])rowData, (Object[])columnNames) {
                         public boolean isCellEditable(int row, int column) {
                             return (column == 2);
                         }
@@ -96,8 +96,8 @@ public class DataMapEditor extends JFrame {
                                 String key = rowData[row][0];
                                 IDataFilter filter = (IDataFilter)DataMapEditor.this.filterMap.get(key);
                                 if (filter != null && !filter.check(aValue))
-                                    return;
-                            }
+                                    return; 
+                            } 
                             super.setValueAt(aValue, row, column);
                         }
                     });
@@ -111,8 +111,8 @@ public class DataMapEditor extends JFrame {
                     array[i] = new String[0];
                 } else {
                     array[i] = suggestions;
-                }
-            }
+                } 
+            } 
             getColumnModel().getColumn(2).setCellEditor(new DataMapEditor.DMECellEditor(font, array));
         }
     }
@@ -145,16 +145,16 @@ public class DataMapEditor extends JFrame {
         public boolean stopCellEditing() {
             if (this.editor instanceof JComboBox)
                 if (this.combo.isEditable())
-                    this.combo.actionPerformed(new ActionEvent(this, 0, ""));
+                    this.combo.actionPerformed(new ActionEvent(this, 0, ""));  
             this.value = getCellValue();
             return super.stopCellEditing();
         }
 
         private Object getCellValue() {
             if (this.editor instanceof JComboBox)
-                return ((JComboBox)this.editor).getSelectedItem();
+                return ((JComboBox)this.editor).getSelectedItem(); 
             if (this.editor instanceof JTextField)
-                return ((JTextField)this.editor).getText();
+                return ((JTextField)this.editor).getText(); 
             return "";
         }
 
@@ -163,13 +163,13 @@ public class DataMapEditor extends JFrame {
             if (sa.length > 0) {
                 this.combo.removeAllItems();
                 for (String s : sa)
-                    this.combo.addItem(s);
+                    this.combo.addItem(s); 
                 this.combo.setSelectedItem(value);
                 this.editor = this.combo;
             } else {
                 this.text.setText(value.toString());
                 this.editor = this.text;
-            }
+            } 
             return this.editor;
         }
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiButtonColored.java b/src/api/rtm/jp/ngt/rtm/gui/GuiButtonColored.java
index 2887cbd..347f5e5 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiButtonColored.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiButtonColored.java
@@ -34,7 +34,7 @@ public class GuiButtonColored extends GuiButton {
             renderBackground();
             mouseDragged(mc, x, y);
             drawCenteredString(fontrenderer, this.displayString, this.x + this.width / 2, this.y + (this.height - 8) / 2, this.textColor);
-        }
+        } 
     }
 
     private void renderBackground() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiButtonDoor.java b/src/api/rtm/jp/ngt/rtm/gui/GuiButtonDoor.java
index d922723..04b47fe 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiButtonDoor.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiButtonDoor.java
@@ -34,7 +34,7 @@ public class GuiButtonDoor extends GuiButton {
             int v = this.opened ? 80 : 88;
             drawTexturedModalRect(this.x + 44, this.y + 48, 224, v, 8, 8);
             mouseDragged(mc, x, y);
-        }
+        } 
     }
 
     public void playPressSound(SoundHandler handler) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiButtonSelectModel.java b/src/api/rtm/jp/ngt/rtm/gui/GuiButtonSelectModel.java
index 305441b..ca76527 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiButtonSelectModel.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiButtonSelectModel.java
@@ -50,7 +50,7 @@ public class GuiButtonSelectModel extends GuiButton {
                     box = this.modelSet.modelObj.model.getSize();
                 } else {
                     box = new float[] { -0.5F, 0.0F, -0.5F, 0.5F, 2.0F, 0.5F };
-                }
+                } 
                 GL11.glTranslatef(5.0F, 1.0F, -18.0F);
                 float scale = 10.0F * getScale(box);
                 GL11.glScalef(scale, scale, scale);
@@ -62,9 +62,9 @@ public class GuiButtonSelectModel extends GuiButton {
                 postRenderModelInGui(mc);
             } else if (this.isSelected) {
                 renderButtonOverlay(mc);
-            }
+            } 
             GL11.glPopMatrix();
-        }
+        } 
     }
 
     private final float getScale(float[] box) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiButtonSelectTexture.java b/src/api/rtm/jp/ngt/rtm/gui/GuiButtonSelectTexture.java
index 930464f..be11048 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiButtonSelectTexture.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiButtonSelectTexture.java
@@ -36,8 +36,8 @@ public class GuiButtonSelectTexture extends GuiButton {
         if (this.type.equals(RTMResource.SIGNBOARD)) {
             int frame = (((TextureSetSignboard)this.property).getConfig()).frame;
             if (frame > 1)
-                maxV = 1.0F / (((TextureSetSignboard)this.property).getConfig()).frame;
-        }
+                maxV = 1.0F / (((TextureSetSignboard)this.property).getConfig()).frame; 
+        } 
         NGTTessellator tessellator = NGTTessellator.instance;
         tessellator.startDrawingQuads();
         tessellator.addVertexWithUV((this.x + this.width), (this.y + this.height), this.zLevel, 1.0F, maxV);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiConvertModel.java b/src/api/rtm/jp/ngt/rtm/gui/GuiConvertModel.java
index 2a68ddd..6bc6b34 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiConvertModel.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiConvertModel.java
@@ -52,16 +52,16 @@ public class GuiConvertModel extends GuiScreenCustom {
             selectModel();
         } else if (button.id == 101) {
             selectJSON();
-        }
+        } 
     }
 
     public void drawScreen(int par1, int par2, float par3) {
         drawDefaultBackground();
         super.drawScreen(par1, par2, par3);
         if (this.modelFile != null)
-            drawString(this.fontRenderer, this.modelFile.getAbsolutePath(), 140, 45, 16777215);
+            drawString(this.fontRenderer, this.modelFile.getAbsolutePath(), 140, 45, 16777215); 
         for (int i = 0; i < this.jsonList.size(); i++)
-            drawString(this.fontRenderer, ((File)this.jsonList.get(i)).getAbsolutePath(), 140, 75 + i * 20, 16777215);
+            drawString(this.fontRenderer, ((File)this.jsonList.get(i)).getAbsolutePath(), 140, 75 + i * 20, 16777215); 
     }
 
     private void selectModel() {
@@ -70,7 +70,7 @@ public class GuiConvertModel extends GuiScreenCustom {
             this.buttonDone.enabled = true;
             this.modelFile = file;
             NGTLog.debug("Add model file : %s", new Object[] { file.getAbsolutePath() });
-        }
+        } 
     }
 
     private void selectJSON() {
@@ -78,7 +78,7 @@ public class GuiConvertModel extends GuiScreenCustom {
         if (file != null) {
             this.jsonList.add(file);
             NGTLog.debug("Add json file : %s", new Object[] { file.getAbsolutePath() });
-        }
+        } 
     }
 
     private void exportFile() {
@@ -94,6 +94,6 @@ public class GuiConvertModel extends GuiScreenCustom {
         } catch (IOException e) {
             e.printStackTrace();
             NGTLog.sendChatMessage((ICommandSender)this.player, "Failed to export file.", new Object[0]);
-        }
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiDecorationBlock.java b/src/api/rtm/jp/ngt/rtm/gui/GuiDecorationBlock.java
index fd807e4..6a80e10 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiDecorationBlock.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiDecorationBlock.java
@@ -138,10 +138,10 @@ public class GuiDecorationBlock extends GuiScreenCustom {
             this.elementList.add(field);
             field.setListner(() -> setElement(element, field));
             if (element == this.selectedElemnt)
-                this.selectedElemntField = field;
+                this.selectedElemntField = field; 
             if (element == this.selectedObject)
-                this.selectedObjectField = field;
-        }
+                this.selectedObjectField = field; 
+        } 
         startX += 66;
         this.buttonList.add(new GuiButton(110, startX, buttonY, 20, 20, "+"));
         this.buttonList.add(new GuiButton(111, startX + 20, buttonY, 20, 20, "C"));
@@ -153,10 +153,10 @@ public class GuiDecorationBlock extends GuiScreenCustom {
             this.faceList.add(field);
             field.setListner(() -> setFace(face, field));
             if (face == this.selectedFace)
-                this.selectedFaceField = field;
+                this.selectedFaceField = field; 
             if (face == this.selectedObject)
-                this.selectedObjectField = field;
-        }
+                this.selectedObjectField = field; 
+        } 
         startX += 66;
         this.buttonList.add(new GuiButtonIcon(120, startX, 23, 32, 32, new IconElementTexture(this.selectedFace.texture)));
         this.buttonList.add(new GuiButton(121, startX + 35, 35, 40, 20, this.selectedFace.type.toString()));
@@ -171,8 +171,8 @@ public class GuiDecorationBlock extends GuiScreenCustom {
             this.vertexList.add(field);
             field.setListner(() -> setVertex(vtx, field));
             if (vtx == this.selectedObject)
-                this.selectedObjectField = field;
-        }
+                this.selectedObjectField = field; 
+        } 
         startX += 66;
         this.uvList.clear();
         for (i = 0; i < this.selectedFace.vertex.length; i++) {
@@ -183,7 +183,7 @@ public class GuiDecorationBlock extends GuiScreenCustom {
                         saveFieldToModel();
                     });
             this.uvList.add(field);
-        }
+        } 
     }
 
     protected void setElement(Element par1, GuiTextFieldCustom field) {
@@ -194,7 +194,7 @@ public class GuiDecorationBlock extends GuiScreenCustom {
             this.selectedFace = this.selectedElemnt.faces[0];
             this.selectedVertex = this.selectedFace.vertex[0];
             initGui();
-        }
+        } 
     }
 
     protected void setFace(Face par1, GuiTextFieldCustom field) {
@@ -204,7 +204,7 @@ public class GuiDecorationBlock extends GuiScreenCustom {
             this.selectedObject = par1;
             this.selectedVertex = this.selectedFace.vertex[0];
             initGui();
-        }
+        } 
     }
 
     protected void setVertex(float[] par1, GuiTextFieldCustom field) {
@@ -213,20 +213,20 @@ public class GuiDecorationBlock extends GuiScreenCustom {
             this.selectedVertex = par1;
             this.selectedObject = par1;
             initGui();
-        }
+        } 
     }
 
     protected void saveFieldToModel() {
         this.selectedFace.shadow = getFloat(this.faceShadowField.getText(), this.selectedFace.shadow);
         int i;
         for (i = 0; i < this.selectedFace.vertex.length; i++)
-            strToVtx(((GuiTextFieldCustom)this.vertexList.get(i)).getText(), this.selectedFace.vertex[i], 0);
+            strToVtx(((GuiTextFieldCustom)this.vertexList.get(i)).getText(), this.selectedFace.vertex[i], 0); 
         for (i = 0; i < this.selectedFace.vertex.length; i++)
-            strToVtx(((GuiTextFieldCustom)this.uvList.get(i)).getText(), this.selectedFace.vertex[i], 3);
+            strToVtx(((GuiTextFieldCustom)this.uvList.get(i)).getText(), this.selectedFace.vertex[i], 3); 
         for (i = 0; i < this.selectedElemnt.faces.length; i++)
-            (this.selectedElemnt.faces[i]).name = ((GuiTextFieldCustom)this.faceList.get(i)).getText();
+            (this.selectedElemnt.faces[i]).name = ((GuiTextFieldCustom)this.faceList.get(i)).getText(); 
         for (i = 0; i < this.model.elements.length; i++)
-            (this.model.elements[i]).name = ((GuiTextFieldCustom)this.elementList.get(i)).getText();
+            (this.model.elements[i]).name = ((GuiTextFieldCustom)this.elementList.get(i)).getText(); 
         this.model.name = this.modelNameField.getText();
     }
 
@@ -235,15 +235,15 @@ public class GuiDecorationBlock extends GuiScreenCustom {
         for (int i = start; i < start + len; i++) {
             sb.append(String.valueOf(vtx[i]));
             if (i < start + len - 1)
-                sb.append(", ");
-        }
+                sb.append(", "); 
+        } 
         return sb.toString();
     }
 
     private void strToVtx(String s, float[] fa, int start) {
         String[] sa = s.split(",");
         for (int i = 0; i < sa.length; i++)
-            fa[i + start] = getFloat(sa[i], fa[i + start]);
+            fa[i + start] = getFloat(sa[i], fa[i + start]); 
     }
 
     private float getFloat(String s, float def) {
@@ -252,7 +252,7 @@ public class GuiDecorationBlock extends GuiScreenCustom {
             return f;
         } catch (NumberFormatException e) {
             return def;
-        }
+        } 
     }
 
     private void editElement(int par1) {
@@ -260,21 +260,21 @@ public class GuiDecorationBlock extends GuiScreenCustom {
         if (par1 == 0 || par1 == 1) {
             Element newElement;
             List<Element> list = new ArrayList<>();
-            NGTUtil.addArray(list, (Object[])this.model.elements);
+            NGTUtil.addArray(list, this.model.elements);
             if (par1 == 0) {
                 newElement = Element.getDefaultElement();
             } else {
                 newElement = this.selectedElemnt.clone();
-            }
+            } 
             newElement.name = "element" + list.size() + '\001';
             list.add(newElement);
             this.model.elements = list.<Element>toArray(new Element[list.size()]);
         } else if (this.model.elements.length >= 2) {
             List<Element> list = new ArrayList<>();
-            NGTUtil.addArray(list, (Object[])this.model.elements);
+            NGTUtil.addArray(list, this.model.elements);
             list.remove(this.selectedElemnt);
             this.model.elements = list.<Element>toArray(new Element[list.size()]);
-        }
+        } 
         initGui();
     }
 
@@ -283,21 +283,21 @@ public class GuiDecorationBlock extends GuiScreenCustom {
         if (par1 == 0 || par1 == 1) {
             Face newFace;
             List<Face> list = new ArrayList<>();
-            NGTUtil.addArray(list, (Object[])this.selectedElemnt.faces);
+            NGTUtil.addArray(list, this.selectedElemnt.faces);
             if (par1 == 0) {
                 newFace = Face.getDefaultFace();
             } else {
                 newFace = this.selectedFace.clone();
-            }
+            } 
             newFace.name = "face" + list.size() + '\001';
             list.add(newFace);
             this.selectedElemnt.faces = list.<Face>toArray(new Face[list.size()]);
         } else if (this.selectedElemnt.faces.length >= 2) {
             List<Face> list = new ArrayList<>();
-            NGTUtil.addArray(list, (Object[])this.selectedElemnt.faces);
+            NGTUtil.addArray(list, this.selectedElemnt.faces);
             list.remove(this.selectedFace);
             this.selectedElemnt.faces = list.<Face>toArray(new Face[list.size()]);
-        }
+        } 
         initGui();
     }
 
@@ -309,7 +309,7 @@ public class GuiDecorationBlock extends GuiScreenCustom {
         List<DecorationModel> list1 = DecorationStore.INSTANCE.getModels();
         List<GuiButtonIcon.IconElement> list2 = new ArrayList<>();
         for (DecorationModel res : list1)
-            list2.add(new IconElementModel(res));
+            list2.add(new IconElementModel(res)); 
         this.mc.displayGuiScreen((GuiScreen)new GuiSelectIcon(this, list2, 64));
     }
 
@@ -317,7 +317,7 @@ public class GuiDecorationBlock extends GuiScreenCustom {
         List<ResourceLocation> list1 = DecorationStore.INSTANCE.getAllIcon();
         List<GuiButtonIcon.IconElement> list2 = new ArrayList<>();
         for (ResourceLocation res : list1)
-            list2.add(new IconElementTexture(res.toString()));
+            list2.add(new IconElementTexture(res.toString())); 
         this.mc.displayGuiScreen((GuiScreen)new GuiSelectIcon(this, list2, 32));
     }
 
@@ -354,9 +354,9 @@ public class GuiDecorationBlock extends GuiScreenCustom {
             moveObject();
             initGui();
         } else if (button.id == 211) {
-            this.lockUV ^= 0x1;
+            this.lockUV ^= true;
             button.displayString = "lock UV : " + this.lockUV;
-        }
+        } 
     }
 
     private void moveObject() {
@@ -366,7 +366,7 @@ public class GuiDecorationBlock extends GuiScreenCustom {
             ((Face)this.selectedObject).addVec(this.moveVec, this.lockUV);
         } else if (this.selectedObject instanceof float[]) {
             Face.addVecToVertex((float[])this.selectedObject, this.selectedFace.type, this.moveVec, this.lockUV);
-        }
+        } 
     }
 
     protected void onTextFieldClicked(GuiTextField field) {
@@ -407,14 +407,14 @@ public class GuiDecorationBlock extends GuiScreenCustom {
             int h = this.selectedObjectField.height + t2;
             NGTRenderHelper.addQuadGuiFrameWithSize(sx, sy, w, h, this.zLevel);
             tessellator.draw();
-        }
+        } 
         GL11.glEnable(3553);
         super.drawScreen(mouseX, mouseY, partialTicks);
         float speed = 1.0F;
         if (Mouse.isButtonDown(1)) {
             this.rotationYaw = (this.width / 2 - mouseX) * speed;
             this.rotationPitch = (this.height / 2 - mouseY) * speed;
-        }
+        } 
         preRenderModel();
         GL11.glPushMatrix();
         GL11.glTranslatef(-7.5F, 0.0F, -8.0F);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiIngameCustom.java b/src/api/rtm/jp/ngt/rtm/gui/GuiIngameCustom.java
index 812061d..5c5706e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiIngameCustom.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiIngameCustom.java
@@ -45,14 +45,14 @@ public class GuiIngameCustom extends GuiScreen {
     public void onRenderGui(RenderGameOverlayEvent.Pre event) {
         if (event.getType() == RenderGameOverlayEvent.ElementType.HOTBAR) {
             if (!this.mc.player.isRiding() || this.mc.gameSettings.thirdPersonView != 0)
-                return;
+                return; 
             setScale(event.getResolution());
             Entity ridingEntity = this.mc.player.getRidingEntity();
             if (ridingEntity instanceof EntityVehicleBase) {
                 renderVehicleGui((EntityVehicleBase)ridingEntity);
             } else if (ridingEntity instanceof EntityArtillery) {
                 renderArtilleryGui((EntityArtillery)ridingEntity);
-            }
+            } 
             NGTUtilClient.bindTexture(ICONS);
         } else if (event.getType() == RenderGameOverlayEvent.ElementType.HELMET) {
             byte viewMode = ClientProxy.getViewMode((EntityPlayer)this.mc.player);
@@ -63,13 +63,13 @@ public class GuiIngameCustom extends GuiScreen {
                     renderNVD(w, h);
                 } else {
                     renderScope(w, h);
-                }
+                } 
                 event.setCanceled(true);
-            }
-        }
+            } 
+        } 
     }
 
-    private void renderVehicleGui(EntityVehicleBase<ModelSetVehicleBase> vehicle) {
+    private void renderVehicleGui(EntityVehicleBase<? extends ModelSetVehicleBase> vehicle) {
         ModelSetVehicleBase modelSet = vehicle.getResourceState().getResourceSet();
         if (modelSet != null && !((VehicleBaseConfig)modelSet.getConfig()).notDisplayCab) {
             NGTUtilClient.bindTexture((modelSet.guiTexture != null) ? modelSet.guiTexture : TEX_CAB);
@@ -78,8 +78,8 @@ public class GuiIngameCustom extends GuiScreen {
             } else if (vehicle instanceof EntityTrainBase) {
                 renderDefaultTrainGui((EntityTrainBase)vehicle);
                 renderTimeTable((EntityTrainBase)vehicle);
-            }
-        }
+            } 
+        } 
     }
 
     private void renderDefaultTrainGui(EntityTrainBase train) {
@@ -97,9 +97,9 @@ public class GuiIngameCustom extends GuiScreen {
     private void renderTimeTable(EntityTrainBase train) {
         String trainName = train.getResourceState().getName();
         if (this.timeTable == null || !trainName.equals(this.timeTable.train))
-            this.timeTable = new TrainTimeTable(trainName);
+            this.timeTable = new TrainTimeTable(trainName); 
         if (this.timeTable.colIndex < 0)
-            return;
+            return; 
         TimeTable.TTEntry[][] tt = this.timeTable.timeTable.ttData;
         int fontH = 15;
         int x0 = 5;
@@ -125,7 +125,7 @@ public class GuiIngameCustom extends GuiScreen {
             int k = y0 + (i + 1) * fontH;
             tessellator.addVertex(x0, k, this.zLevel);
             tessellator.addVertex((x0 + w1 + w2 + w3), k, this.zLevel);
-        }
+        } 
         tessellator.draw();
         GL11.glEnable(3553);
         FontRenderer renderer = this.mc.fontRenderer;
@@ -146,7 +146,7 @@ public class GuiIngameCustom extends GuiScreen {
             renderer.drawString(map.get(Integer.valueOf(j)), x, y + fontH * j, color);
             renderer.drawString(entry.data[1], x + w1, y + fontH * j, color);
             renderer.drawString(entry.data[2], x + w1 + w2, y + fontH * j, color);
-        }
+        } 
     }
 
     private void renderArtilleryGui(EntityArtillery artillery) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiMotorman.java b/src/api/rtm/jp/ngt/rtm/gui/GuiMotorman.java
index a2244a9..f225a03 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiMotorman.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiMotorman.java
@@ -21,10 +21,10 @@ public class GuiMotorman extends GuiSelect {
         List<File> list = new ArrayList<>();
         for (File child : macroFolder.listFiles()) {
             if (child.isFile() && child.getName().endsWith(".txt"))
-                list.add(child);
-        }
+                list.add(child); 
+        } 
         if (list.isEmpty())
-            return null;
+            return null; 
         ItemStack icon = new ItemStack(Items.BOOK);
         GuiSlotCustom.SlotElement[] elements = new GuiSlotCustom.SlotElement[list.size()];
         for (int i = 0; i < elements.length; i++) {
@@ -34,9 +34,9 @@ public class GuiMotorman extends GuiSelect {
                             entity.setMacro((File)obj);
                         } catch (IOException e) {
                             e.printStackTrace();
-                        }
-                    }file, file.getName(), icon);
-        }
+                        } 
+                    }, file, file.getName(), icon);
+        } 
         return new GuiMotorman(entity, elements);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiMovingMachine.java b/src/api/rtm/jp/ngt/rtm/gui/GuiMovingMachine.java
index 9d99bde..68ca657 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiMovingMachine.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiMovingMachine.java
@@ -86,7 +86,7 @@ public class GuiMovingMachine extends GuiScreenCustom {
             h += 24;
             this.vngtoSetting[3] = (GuiTextField)setTextField(w, h, 60, 20, String.valueOf(f3));
             h += 24;
-        }
+        } 
     }
 
     protected void actionPerformed(GuiButton button) {
@@ -96,12 +96,12 @@ public class GuiMovingMachine extends GuiScreenCustom {
         } else if (button.id == 1) {
             this.mc.displayGuiScreen(null);
         } else if (button.id == 100) {
-            this.guideVisibility ^= 0x1;
+            this.guideVisibility ^= true;
             this.buttonV.displayString = "GuideVisibility : " + this.guideVisibility;
         } else if (button.id == 101) {
             this.type = (this.type + 1) % VEHICLE_TYPE.length;
             this.buttonType.displayString = VEHICLE_TYPE[this.type];
-        }
+        } 
         super.actionPerformed(button);
     }
 
@@ -127,7 +127,7 @@ public class GuiMovingMachine extends GuiScreenCustom {
             this.tileEntity.vngto.riderPosY = f2;
             this.tileEntity.vngto.riderPosZ = f3;
             this.tileEntity.vngto.type = this.type;
-        }
+        } 
         this.tileEntity.guideVisibility = this.guideVisibility;
         PacketNBT.sendToServer((TileEntity)this.tileEntity);
     }
@@ -162,6 +162,6 @@ public class GuiMovingMachine extends GuiScreenCustom {
             h += 24;
             drawString(this.fontRenderer, "VehicleOffsetZ", w2, h, 16777215);
             h += 24;
-        }
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiNPC.java b/src/api/rtm/jp/ngt/rtm/gui/GuiNPC.java
index 052a530..2a8cdfa 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiNPC.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiNPC.java
@@ -47,7 +47,7 @@ public class GuiNPC extends GuiContainer {
         this.buttonList.add(new GuiButtonNPC(101, this.guiLeft + 26, this.guiTop + 78 - 15, 1));
         this.index = this.modelList.indexOf(this.npc.getResourceState().getResourceSet());
         if (this.index == -1)
-            this.index = 0;
+            this.index = 0; 
     }
 
     protected void drawGuiContainerBackgroundLayer(float p_146976_1_, int x, int y) {
@@ -64,7 +64,7 @@ public class GuiNPC extends GuiContainer {
             setModel(++this.index);
         } else if (button.id == 101) {
             setModel(--this.index);
-        }
+        } 
     }
 
     private void setModel(int par1) {
@@ -72,7 +72,7 @@ public class GuiNPC extends GuiContainer {
             par1 = 0;
         } else if (par1 < 0) {
             par1 = this.modelList.size() - 1;
-        }
+        } 
         this.index = par1;
         String s = ((ResourceSet)this.modelList.get(par1)).getConfig().getName();
         this.npc.getResourceState().setResourceName(s);
@@ -108,7 +108,7 @@ public class GuiNPC extends GuiContainer {
                 int v = (this.type == 1) ? 16 : 0;
                 drawTexturedModalRect(this.x, this.y, u, v, 10, 15);
                 mouseDragged(mc, x, y);
-            }
+            } 
         }
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiPaintTool.java b/src/api/rtm/jp/ngt/rtm/gui/GuiPaintTool.java
index 993a009..c3d2f45 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiPaintTool.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiPaintTool.java
@@ -75,13 +75,13 @@ public class GuiPaintTool extends GuiScreenCustom {
         this.color = c;
         this.prop.color = c;
         if ((flag & 0x1) != 0)
-            this.colorR.setText(String.valueOf(ColorUtil.getR(this.color)));
+            this.colorR.setText(String.valueOf(ColorUtil.getR(this.color))); 
         if ((flag & 0x2) != 0)
-            this.colorG.setText(String.valueOf(ColorUtil.getG(this.color)));
+            this.colorG.setText(String.valueOf(ColorUtil.getG(this.color))); 
         if ((flag & 0x4) != 0)
-            this.colorB.setText(String.valueOf(ColorUtil.getB(this.color)));
+            this.colorB.setText(String.valueOf(ColorUtil.getB(this.color))); 
         if ((flag & 0x8) != 0)
-            this.colorHex.setText(ColorUtil.toString(this.color));
+            this.colorHex.setText(ColorUtil.toString(this.color)); 
     }
 
     protected void actionPerformed(GuiButton button) {
@@ -93,9 +93,9 @@ public class GuiPaintTool extends GuiScreenCustom {
         } else if (button.id == 100) {
             this.paintTypeIndex++;
             if (this.paintTypeIndex >= (PaintProperty.EnumPaintType.values()).length)
-                this.paintTypeIndex = 0;
+                this.paintTypeIndex = 0; 
             this.prop.type = this.paintTypeIndex;
-        }
+        } 
     }
 
     protected void keyTyped(char par1, int par2) throws IOException {
@@ -123,8 +123,8 @@ public class GuiPaintTool extends GuiScreenCustom {
                 } else if (this.currentTextField == this.radius) {
                     int r = Integer.valueOf(this.radius.getText()).intValue();
                     this.prop.radius = r;
-                }
-            } catch (NumberFormatException numberFormatException) {}
+                } 
+            } catch (NumberFormatException numberFormatException) {} 
     }
 
     private void sendPacket() {
@@ -171,7 +171,7 @@ public class GuiPaintTool extends GuiScreenCustom {
                 GL11.glBlendFunc(770, 771);
                 drawTexturedModalRect(this.x, this.y, pType.iconU, pType.iconV, this.width, this.height);
                 mouseDragged(mc, x, y);
-            }
+            } 
         }
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiRTMWorkBench.java b/src/api/rtm/jp/ngt/rtm/gui/GuiRTMWorkBench.java
index db2eeeb..8dccb06 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiRTMWorkBench.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiRTMWorkBench.java
@@ -104,7 +104,7 @@ public class GuiRTMWorkBench extends GuiContainerCustom implements IResourceSele
                 String h = String.valueOf(this.containerWorkBench.railHeight);
                 this.heightField = (GuiTextField)setTextField(this.guiLeft + 100, this.guiTop + 100, 70, 20, h);
                 setSelectButtonAndModelset(this.containerWorkBench.modelName);
-            }
+            } 
         } else if (this.pageIndex == 1) {
             this.inventorySlots = this.containerRecipe;
             this.button = new GuiButtonBack(112, this.guiLeft + 151, this.guiTop + 171);
@@ -113,7 +113,7 @@ public class GuiRTMWorkBench extends GuiContainerCustom implements IResourceSele
         } else if (this.pageIndex == 2) {
             this.containerRecipe.setCurrentPage(2);
             this.button = null;
-        }
+        } 
     }
 
     private void setSelectButtonAndModelset(String name) {
@@ -125,8 +125,8 @@ public class GuiRTMWorkBench extends GuiContainerCustom implements IResourceSele
             if (button.id == 121) {
                 this.buttonList.remove(i);
                 break;
-            }
-        }
+            } 
+        } 
         this.buttonList.add(this.buttonSelect);
         sendRailProp();
     }
@@ -146,7 +146,7 @@ public class GuiRTMWorkBench extends GuiContainerCustom implements IResourceSele
             case 2:
                 this.mc.getTextureManager().bindTexture(tex_2);
                 break;
-        }
+        } 
         int k = (this.width - this.xSize) / 2;
         int l = (this.height - this.ySize) / 2;
         drawTexturedModalRect(k, l, 0, 0, this.xSize, this.ySize);
@@ -155,9 +155,9 @@ public class GuiRTMWorkBench extends GuiContainerCustom implements IResourceSele
             if (this.workBench.getCraftingTime() > 0) {
                 int i1 = (int)(22.0F * this.workBench.getCraftingTime() / 64.0F);
                 drawTexturedModalRect(k + 104, l + 38, 176, 0, i1, 15);
-            }
+            }  
         if (this.workbenchType == 1 && this.pageIndex == 0)
-            this.heightField.drawTextBox();
+            this.heightField.drawTextBox(); 
     }
 
     protected void actionPerformed(GuiButton button) {
@@ -167,9 +167,9 @@ public class GuiRTMWorkBench extends GuiContainerCustom implements IResourceSele
             ItemStack stackSample = container.getSampeItem();
             if (stackInResult.isEmpty() && !stackSample.isEmpty() && this.workBench.getCraftingTime() <= 0) {
                 if (this.workbenchType == 1)
-                    sendRailProp();
+                    sendRailProp(); 
                 this.workBench.startCrafting(this.containerWorkBench.thePlayer, true);
-            }
+            } 
         } else if (button.id == 111) {
             setPage(1);
         } else if (button.id == 112) {
@@ -177,7 +177,7 @@ public class GuiRTMWorkBench extends GuiContainerCustom implements IResourceSele
             setPage(i);
         } else if (button.id == 121) {
             this.mc.displayGuiScreen((GuiScreen)new GuiSelectModel(this.workBench.getWorld(), this));
-        }
+        } 
     }
 
     protected void mouseClicked(int par1, int par2, int par3) throws IOException {
@@ -188,7 +188,7 @@ public class GuiRTMWorkBench extends GuiContainerCustom implements IResourceSele
     protected void keyTyped(char par1, int par2) throws IOException {
         super.keyTyped(par1, par2);
         if (this.workbenchType == 1 && this.pageIndex == 0)
-            sendRailProp();
+            sendRailProp(); 
     }
 
     protected void handleMouseClick(Slot slot, int slotId, int mouseButton, ClickType type) {
@@ -199,8 +199,8 @@ public class GuiRTMWorkBench extends GuiContainerCustom implements IResourceSele
                 if (slot != null) {
                     slotId = slot.slotNumber;
                     this.containerRecipe.onSlotClicked(slot);
-                }
-            }
+                } 
+            }  
     }
 
     public void handleMouseInput() throws IOException {
@@ -211,12 +211,12 @@ public class GuiRTMWorkBench extends GuiContainerCustom implements IResourceSele
             scroll = (scroll > 0) ? 1 : ((scroll < 0) ? -1 : 0);
             this.currentScroll -= scroll;
             if (this.currentScroll < 0)
-                this.currentScroll = 0;
+                this.currentScroll = 0; 
             if (this.currentScroll > ContainerRecipe.getMaxScroll())
-                this.currentScroll = ContainerRecipe.getMaxScroll();
+                this.currentScroll = ContainerRecipe.getMaxScroll(); 
             if (this.pageIndex == 1)
-                this.containerRecipe.setItemList(this.currentScroll);
-        }
+                this.containerRecipe.setItemList(this.currentScroll); 
+        } 
     }
 
     private boolean isMouseOveredButton(GuiButton par1, int par2, int par3) {
@@ -229,7 +229,7 @@ public class GuiRTMWorkBench extends GuiContainerCustom implements IResourceSele
             f0 = Float.valueOf(this.heightField.getText()).floatValue();
         } catch (NumberFormatException e) {
             f0 = 0.0625F;
-        }
+        } 
         String name = ((ModelSetRail)this.state.getResourceSet()).getConfig().getName();
         String s = "workbench," + name + "," + f0;
         RTMCore.NETWORK_WRAPPER.sendToServer((IMessage)new PacketNotice((byte)0, s, (TileEntity)this.workBench));
@@ -270,7 +270,7 @@ public class GuiRTMWorkBench extends GuiContainerCustom implements IResourceSele
                 GL11.glBlendFunc(770, 771);
                 drawTexturedModalRect(this.x, this.y, 176, 30 + k * 12, this.width, this.height);
                 mouseDragged(mc, x, y);
-            }
+            } 
         }
     }
 
@@ -291,7 +291,7 @@ public class GuiRTMWorkBench extends GuiContainerCustom implements IResourceSele
                 int k = (GuiRTMWorkBench.this.pageIndex == 0) ? 0 : 16;
                 drawTexturedModalRect(this.x, this.y, 240, k, this.width, this.height);
                 mouseDragged(mc, x, y);
-            }
+            } 
         }
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSelectIcon.java b/src/api/rtm/jp/ngt/rtm/gui/GuiSelectIcon.java
index a0a7745..8330f83 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSelectIcon.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiSelectIcon.java
@@ -41,7 +41,7 @@ public class GuiSelectIcon extends GuiScreenCustom {
             GuiButtonIcon button = new GuiButtonIcon(1000 + index, x * this.iconSize, y * this.iconSize, this.iconSize, this.iconSize, icon);
             this.buttonList.add(button);
             this.iconButtons.add(button);
-        }
+        } 
     }
 
     protected void actionPerformed(GuiButton button) {
@@ -50,7 +50,7 @@ public class GuiSelectIcon extends GuiScreenCustom {
                 ((GuiButtonIcon)button).icon.onClick();
                 closeGui();
                 return;
-            }
+            }  
     }
 
     private void closeGui() {
@@ -62,14 +62,14 @@ public class GuiSelectIcon extends GuiScreenCustom {
         int scroll = Mouse.getEventDWheel();
         if (scroll != 0)
             for (GuiButtonIcon button : this.iconButtons)
-                button.moveButton(scroll);
+                button.moveButton(scroll);  
     }
 
     protected void keyTyped(char par1, int par2) throws IOException {
         if (par2 == 1) {
             closeGui();
             return;
-        }
+        } 
         super.keyTyped(par1, par2);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSelectModel.java b/src/api/rtm/jp/ngt/rtm/gui/GuiSelectModel.java
index b18d63b..7ccbd62 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSelectModel.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiSelectModel.java
@@ -69,11 +69,11 @@ public class GuiSelectModel extends GuiScreenCustom {
             String subType = state.type.subType;
             List<ResourceSet> list = ModelPackManager.INSTANCE.getModelList(state.type);
             this.modelListAll = new ArrayList<>();
-            for (ResourceSet<IConfigWithType> modelSet : list) {
+            for (ResourceSet<? extends IConfigWithType> modelSet : list) {
                 if (((IConfigWithType)modelSet.getConfig()).getSubType().equals(subType))
-                    this.modelListAll.add(modelSet);
-            }
-        }
+                    this.modelListAll.add(modelSet); 
+            } 
+        } 
         this.modelListSelect = new ArrayList<>();
     }
 
@@ -93,7 +93,7 @@ public class GuiSelectModel extends GuiScreenCustom {
 
     private void resetModelList() {
         if (this.selectButtons != null)
-            this.buttonList.removeAll(Arrays.asList((Object[])this.selectButtons));
+            this.buttonList.removeAll(Arrays.asList((Object[])this.selectButtons)); 
         this.modelListSelect.clear();
         this.currentScroll = 0;
         String keyword = this.searchField.getText();
@@ -102,9 +102,9 @@ public class GuiSelectModel extends GuiScreenCustom {
         } else {
             for (ResourceSet set : this.modelListAll) {
                 if (((ResourceConfig)set.getConfig()).tags.contains(keyword))
-                    this.modelListSelect.add(set);
-            }
-        }
+                    this.modelListSelect.add(set); 
+            } 
+        } 
         Collections.sort(this.modelListSelect, (o1, o2) -> o1.getConfig().getName().compareTo(o2.getConfig().getName()));
         int i0 = this.height / 2 - 16;
         this.selectButtons = new GuiButtonSelectModel[this.modelListSelect.size()];
@@ -116,8 +116,8 @@ public class GuiSelectModel extends GuiScreenCustom {
             if (modelSet.getConfig().getName().equals(this.selector.getResourceState().getResourceName())) {
                 this.currentScroll = i;
                 (this.selectButtons[i]).isSelected = true;
-            }
-        }
+            } 
+        } 
         resetButtonPos();
         this.buttonList.add(new GuiButton(10900, this.width + 36, this.height - 20, 100, 20, "cansel"));
     }
@@ -133,19 +133,19 @@ public class GuiSelectModel extends GuiScreenCustom {
             (this.selector.getResourceState()).color = this.modelColor;
         } catch (NumberFormatException e) {
             e.printStackTrace();
-        }
+        } 
     }
 
     protected void drawGuiContainerBackgroundLayer(float par1, int par2, int par3) {
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
         if (this.modelListSelect.size() > 0)
-            drawScrollBar(par2, par3);
+            drawScrollBar(par2, par3); 
         drawColorPalet();
     }
 
     protected void drawGuiContainerForegroundLayer(int par1, int par2) {
         if (this.modelListAll.size() == 0)
-            this.fontRenderer.drawString("Can't get list", (this.width - this.xSize) / 2, (this.height - this.ySize) / 2, 16711680);
+            this.fontRenderer.drawString("Can't get list", (this.width - this.xSize) / 2, (this.height - this.ySize) / 2, 16711680); 
     }
 
     public void drawScreen(int par1, int par2, float par3) {
@@ -155,7 +155,7 @@ public class GuiSelectModel extends GuiScreenCustom {
             int mouseY = (par2 < 8) ? 8 : ((par2 >= this.height) ? this.height : par2);
             int i1 = NGTMath.floor(mouseY * (this.modelListSelect.size() + 1) / (this.height - 16));
             scroll(i1);
-        }
+        } 
         float z = this.zLevel;
         this.zLevel = -1000.0F;
         drawDefaultBackground();
@@ -192,7 +192,7 @@ public class GuiSelectModel extends GuiScreenCustom {
             buttonY = ((mouseY < 8) ? 8 : ((mouseY >= this.height - 8) ? (this.height - 8) : mouseY)) - 8;
         } else if (this.modelListSelect.size() > 1) {
             buttonY = this.currentScroll * (this.height - 16) / (this.modelListSelect.size() - 1);
-        }
+        } 
         this.mc.getTextureManager().bindTexture(ButtonBlue);
         tessellator.startDrawingQuads();
         tessellator.addVertexWithUV(this.width, (buttonY + 16), this.zLevel, 1.0F, 0.0625F);
@@ -227,7 +227,7 @@ public class GuiSelectModel extends GuiScreenCustom {
     protected void actionPerformed(GuiButton button) {
         if (button.id == 10900) {
             if (this.selector.closeGui(null))
-                this.mc.displayGuiScreen(null);
+                this.mc.displayGuiScreen(null); 
         } else if (button.id == 10000) {
             openColorChooser();
         } else if (button.id == 10001) {
@@ -243,8 +243,8 @@ public class GuiSelectModel extends GuiScreenCustom {
             if (saveData(state)) {
                 RTMCore.NETWORK_WRAPPER.sendToServer(new PacketSelectResource(this.selector));
                 this.mc.displayGuiScreen(null);
-            }
-        }
+            } 
+        } 
     }
 
     private void openColorChooser() {
@@ -274,7 +274,7 @@ public class GuiSelectModel extends GuiScreenCustom {
         super.handleMouseInput();
         int i0 = Mouse.getEventDWheel();
         if (i0 != 0)
-            scroll(this.currentScroll - ((i0 > 0) ? 1 : -1));
+            scroll(this.currentScroll - ((i0 > 0) ? 1 : -1)); 
     }
 
     private void scroll(int par1) {
@@ -283,13 +283,13 @@ public class GuiSelectModel extends GuiScreenCustom {
             this.currentScroll = 0;
         } else if (this.currentScroll >= this.selectButtons.length) {
             this.currentScroll = this.selectButtons.length - 1;
-        }
+        } 
         resetButtonPos();
     }
 
     private void resetButtonPos() {
         int i0 = this.height / 2 - 16;
         for (int i = 0; i < this.selectButtons.length; i++)
-            (this.selectButtons[i]).y = i0 + 32 * (i - this.currentScroll);
+            (this.selectButtons[i]).y = i0 + 32 * (i - this.currentScroll); 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSelectTexture.java b/src/api/rtm/jp/ngt/rtm/gui/GuiSelectTexture.java
index f31e2da..ccb5126 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSelectTexture.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiSelectTexture.java
@@ -52,7 +52,7 @@ public class GuiSelectTexture extends GuiScreenCustom {
             for (int u = 0; u < this.uCount; u++) {
                 int index = v * this.uCount + u;
                 if (index >= this.resourceSets.size())
-                    break;
+                    break; 
                 TextureSetBase<TextureConfig> set = (TextureSetBase)this.resourceSets.get(index);
                 TextureConfig prop = set.getConfig();
                 float f0 = 1.0F;
@@ -60,15 +60,15 @@ public class GuiSelectTexture extends GuiScreenCustom {
                     f0 = x / prop.width;
                 } else {
                     f0 = y / prop.height;
-                }
+                } 
                 int w = (int)(prop.width * f0);
                 int h = (int)(prop.height * f0);
                 int xPos = x * u + (x - w) / 2;
                 int yPos = y * v + (y - h) / 2;
-                this.buttonList.add(new GuiButtonSelectTexture(index, xPos, yPos, w, h,
+                this.buttonList.add(new GuiButtonSelectTexture(index, xPos, yPos, w, h, 
                             (this.holder.getResourceState()).type, set));
-            }
-        }
+            } 
+        } 
     }
 
     public void drawScreen(int par1, int par2, float par3) {
@@ -78,15 +78,15 @@ public class GuiSelectTexture extends GuiScreenCustom {
 
     protected void actionPerformed(GuiButton button) {
         if (button.id == 256)
-            this.mc.displayGuiScreen(this.parent);
+            this.mc.displayGuiScreen(this.parent); 
         if (button.id < this.resourceSets.size()) {
             String name = ((GuiButtonSelectTexture)button).property.getConfig().getName();
             ResourceState state = this.holder.getResourceState();
             state.setResourceName(name);
             if (this.holder.closeGui(state))
-                RTMCore.NETWORK_WRAPPER.sendToServer(new PacketSelectResource(this.holder));
+                RTMCore.NETWORK_WRAPPER.sendToServer(new PacketSelectResource(this.holder)); 
             this.mc.displayGuiScreen(this.parent);
-        }
+        } 
     }
 
     public void handleMouseInput() throws IOException {
@@ -97,21 +97,21 @@ public class GuiSelectTexture extends GuiScreenCustom {
             scroll = (scroll > 0) ? 1 : ((scroll < 0) ? -1 : 0);
             this.currentScroll -= scroll;
             if (this.currentScroll < 0)
-                this.currentScroll = 0;
+                this.currentScroll = 0; 
             int size2 = this.resourceSets.size() / this.uCount;
             if (this.currentScroll >= size2)
-                this.currentScroll = size2 - 1;
+                this.currentScroll = size2 - 1; 
             renewButton(this.currentScroll);
-        }
+        } 
     }
 
     protected void renewButton(int scroll) {
         if (this.currentScroll != this.prevScroll) {
             int y = this.height / this.vCount;
             if (this.prevScroll > this.currentScroll)
-                y = -y;
+                y = -y; 
             for (int i = 0; i < this.buttonList.size(); i++)
-                ((GuiButtonSelectTexture)this.buttonList.get(i)).moveButton(y);
-        }
+                ((GuiButtonSelectTexture)this.buttonList.get(i)).moveButton(y); 
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSignalConverter.java b/src/api/rtm/jp/ngt/rtm/gui/GuiSignalConverter.java
index 14dcc73..3db0a4d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSignalConverter.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiSignalConverter.java
@@ -42,13 +42,13 @@ public class GuiSignalConverter extends GuiScreenCustom {
             this.button = new GuiButton(100, this.width / 2 - 36, 60, 30, 20, type.operator);
             this.buttonList.add(this.button);
             i0 = 16;
-        }
+        } 
         int[] ia = this.tileEntity.getSignalLevel();
         this.textFields.clear();
         this.signalValues = new GuiTextField[(this.scType == SignalConverterType.RSOut) ? 1 : 2];
         this.signalValues[0] = (GuiTextField)setTextField(this.width / 2 - 20 + i0, 60, 40, 20, String.valueOf(ia[0]));
         if (this.scType == SignalConverterType.RSIn || this.scType == SignalConverterType.Wireless)
-            this.signalValues[1] = (GuiTextField)setTextField(this.width / 2 - 20 + i0, 100, 40, 20, String.valueOf(ia[1]));
+            this.signalValues[1] = (GuiTextField)setTextField(this.width / 2 - 20 + i0, 100, 40, 20, String.valueOf(ia[1])); 
     }
 
     protected void actionPerformed(GuiButton button) {
@@ -60,14 +60,14 @@ public class GuiSignalConverter extends GuiScreenCustom {
         } else if (button.id == 100) {
             this.comparatorIndex = (this.comparatorIndex + 1) % (TileEntitySignalConverter.ComparatorType.values()).length;
             this.button.displayString = (TileEntitySignalConverter.ComparatorType.getType(this.comparatorIndex)).operator;
-        }
+        } 
         super.actionPerformed(button);
     }
 
     private void sendPacket() {
         int[] ia = formatSignalLevel();
         if (this.scType != SignalConverterType.RSIn && this.scType != SignalConverterType.Wireless)
-            ia[1] = 0;
+            ia[1] = 0; 
         RTMCore.NETWORK_WRAPPER.sendToServer((IMessage)new PacketSignalConverter(this.tileEntity, this.comparatorIndex, ia[0], ia[1]));
     }
 
@@ -77,25 +77,25 @@ public class GuiSignalConverter extends GuiScreenCustom {
             int max = 32767;
             if (this.scType == SignalConverterType.Wireless) {
                 if (i == 1)
-                    max = 25;
+                    max = 25; 
             } else {
                 max = 127;
-            }
+            } 
             int i0 = NGTMath.getIntFromString(this.signalValues[i].getText(), 0, max, 0);
             this.signalValues[i].setText(String.valueOf(i0));
             ia[i] = i0;
-        }
+        } 
         return ia;
     }
 
     protected void keyTyped(char par1, int par2) {
         if (par2 == 1 || par2 == this.mc.gameSettings.keyBindInventory.getKeyCode())
-            this.mc.player.closeScreen();
+            this.mc.player.closeScreen(); 
         if (this.currentTextField != null)
             if ((par2 >= 2 && par2 <= 11) || (par2 >= 200 && par2 <= 205) || par2 == 12 || par2 == 14 || par2 == 211)
-                this.currentTextField.textboxKeyTyped(par1, par2);
+                this.currentTextField.textboxKeyTyped(par1, par2);  
         if (par2 == 28)
-            formatSignalLevel();
+            formatSignalLevel(); 
     }
 
     public void drawScreen(int par1, int par2, float par3) {
@@ -110,6 +110,6 @@ public class GuiSignalConverter extends GuiScreenCustom {
         } else if (this.scType == SignalConverterType.Wireless) {
             drawCenteredString(this.fontRenderer, "Channel", this.width / 2, 45, 16777215);
             drawCenteredString(this.fontRenderer, "Chunk Load Range", this.width / 2, 85, 16777215);
-        }
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSignboard.java b/src/api/rtm/jp/ngt/rtm/gui/GuiSignboard.java
index 6f28121..a9a6c7e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSignboard.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiSignboard.java
@@ -101,7 +101,7 @@ public class GuiSignboard extends GuiScreenCustom {
         if (this.resetState) {
             this.state = (ResourceStateSignboard)this.selector.getResourceState();
             this.resetState = false;
-        }
+        } 
         int hw = this.width / 2;
         int buttonArea = 130;
         int ba1 = this.width - buttonArea;
@@ -111,7 +111,7 @@ public class GuiSignboard extends GuiScreenCustom {
         TextureSetSignboard set = this.state.getResourceSet();
         float sbw = (set.getConfig()).width;
         if ((set.getConfig()).backTexture == 1)
-            sbw *= 2.0F;
+            sbw *= 2.0F; 
         float ratioTex = (set.getConfig()).height / sbw;
         float ratioGui = h2 / ba1;
         int sizeX = 0;
@@ -122,7 +122,7 @@ public class GuiSignboard extends GuiScreenCustom {
         } else {
             sizeX = ba1;
             sizeY = (int)(ba1 * ratioTex);
-        }
+        } 
         this.scale = sizeY / (set.getConfig()).height;
         this.dummyButton = new GuiButtonSelectTexture(300, 0, 0, sizeX, sizeY, RTMResource.SIGNBOARD, set);
         addButton(new GuiButton(0, hw - 155, this.height - 25, 150, 20, I18n.format("gui.done", new Object[0])));
@@ -134,7 +134,7 @@ public class GuiSignboard extends GuiScreenCustom {
         addButton(new GuiButton(104, ba2 + 90, 25, 30, 20, "Redraw"));
         List<SignboardText> list = this.state.texts;
         if (this.currentTextObj == null && !list.isEmpty())
-            this.currentTextObj = list.get(0);
+            this.currentTextObj = list.get(0); 
         if (this.currentTextObj != null) {
             this.fieldText = setTextField(ba2, 48, 120, 20, this.currentTextObj.getRawText());
             this.fieldText.addTips("If use timetable -> tt(col=<colmun_num>,offset=<offset_num>)");
@@ -156,7 +156,7 @@ public class GuiSignboard extends GuiScreenCustom {
             this.style = this.currentTextObj.getText().getStyle();
             this.buttonBold.packedFGColour = ((this.style & 0x1) != 0) ? 16777215 : 10526880;
             this.buttonItalic.packedFGColour = ((this.style & 0x2) != 0) ? 16777215 : 10526880;
-        }
+        } 
     }
 
     public void drawScreen(int par1, int par2, float par3) {
@@ -168,8 +168,8 @@ public class GuiSignboard extends GuiScreenCustom {
             float y = text.posV * this.scale;
             text.render(x, y, this.zLevel, this.scale);
             if (text == this.currentTextObj)
-                drawSelectedText(text, x, y, par1, par2);
-        }
+                drawSelectedText(text, x, y, par1, par2); 
+        } 
         if (this.currentTextObj != null) {
             int buttonArea = 130;
             int ba1 = this.width - buttonArea;
@@ -179,9 +179,9 @@ public class GuiSignboard extends GuiScreenCustom {
             drawString(this.fontRenderer, " PosU           PosV", ba2, 151, 16777215);
             drawString(this.fontRenderer, " AnimeType      AnimeSpeed", ba2, 181, 16777215);
             drawString(this.fontRenderer, " StationSetting", ba2, 211, 16777215);
-        }
+        } 
         if (this.draging)
-            updateDragState(par1, par2);
+            updateDragState(par1, par2); 
     }
 
     private void drawSelectedText(SignboardText text, float x, float y, int mouseX, int mouseY) {
@@ -219,13 +219,13 @@ public class GuiSignboard extends GuiScreenCustom {
             NGTRenderHelper.addQuadGuiFace(centerX - hSize, minY - hSize, centerX + hSize, minY + hSize, this.zLevel);
             NGTRenderHelper.addQuadGuiFace(centerX - hSize, maxY - hSize, centerX + hSize, maxY + hSize, this.zLevel);
             tessellator.draw();
-        }
+        } 
         GL11.glEnable(3553);
     }
 
     private void updateDragState(int x, int y) {
         if (!Mouse.isButtonDown(0))
-            this.draging = false;
+            this.draging = false; 
         if (this.currentTextObj != null) {
             float difX = (x - this.prevDragX) / this.scale;
             float difY = (y - this.prevDragY) / this.scale;
@@ -240,23 +240,23 @@ public class GuiSignboard extends GuiScreenCustom {
                 if (moveNX) {
                     this.currentTextObj.posU += difX;
                     this.currentTextObj.width -= difX;
-                }
+                } 
                 if (movePX)
-                    this.currentTextObj.width += difX;
+                    this.currentTextObj.width += difX; 
                 if (moveNY) {
                     this.currentTextObj.posV += difY;
                     this.currentTextObj.size -= difY;
-                }
+                } 
                 if (movePY)
-                    this.currentTextObj.size += difY;
-            }
+                    this.currentTextObj.size += difY; 
+            } 
             this.fieldTextPosU.setText(String.valueOf(this.currentTextObj.posU));
             this.fieldTextPosV.setText(String.valueOf(this.currentTextObj.posV));
             this.fieldTextSize.setText(String.valueOf(this.currentTextObj.size));
             this.fieldTextWidth.setText(String.valueOf(this.currentTextObj.width));
             this.prevDragX = x;
             this.prevDragY = y;
-        }
+        } 
     }
 
     protected void mouseClicked(int x, int y, int button) throws IOException {
@@ -271,8 +271,8 @@ public class GuiSignboard extends GuiScreenCustom {
             if (x >= minX - 3.0F && x <= maxX + 3.0F && y >= minY - 3.0F && y <= maxY + 3.0F) {
                 clickedObj = text;
                 break;
-            }
-        }
+            } 
+        } 
         boolean selected = (this.currentTextObj != null && this.currentTextObj == clickedObj);
         if (clickedObj != null) {
             updateText();
@@ -283,8 +283,8 @@ public class GuiSignboard extends GuiScreenCustom {
                 this.prevDragX = x;
                 this.prevDragY = y;
                 this.dragState = getClickState(clickedObj, x, y);
-            }
-        }
+            } 
+        } 
     }
 
     private int getClickState(SignboardText text, int x, int y) {
@@ -294,13 +294,13 @@ public class GuiSignboard extends GuiScreenCustom {
         float maxX = text.width * this.scale + minX;
         float maxY = text.size * this.scale + minY;
         if (inRange(x, minX, 3.0F))
-            state += 8;
+            state += 8; 
         if (inRange(x, maxX, 3.0F))
-            state += 4;
+            state += 4; 
         if (inRange(y, minY, 3.0F))
-            state += 2;
+            state += 2; 
         if (inRange(y, maxY, 3.0F))
-            state++;
+            state++; 
         return state;
     }
 
@@ -329,13 +329,13 @@ public class GuiSignboard extends GuiScreenCustom {
                 this.currentTextObj = this.currentTextObj.copy();
                 this.state.texts.add(this.currentTextObj);
                 initGui();
-            }
+            } 
         } else if (button.id == 103) {
             if (this.currentTextObj != null) {
                 this.state.texts.remove(this.currentTextObj);
                 this.currentTextObj = null;
                 initGui();
-            }
+            } 
         } else if (button.id == 104) {
             updateText();
         } else if (button.id == 200) {
@@ -349,7 +349,7 @@ public class GuiSignboard extends GuiScreenCustom {
         } else if (button.id == 203) {
             this.animeTypeIndex = (this.animeTypeIndex + 1) % (SignboardText.AnimeType.values()).length;
             this.buttonAnimeType.displayString = SignboardText.AnimeType.values()[this.animeTypeIndex].toString();
-        }
+        } 
         super.actionPerformed(button);
     }
 
@@ -359,14 +359,14 @@ public class GuiSignboard extends GuiScreenCustom {
 
     private void saveState() {
         if (this.currentTextObj != null)
-            this.state.setTTSetting(this.fieldStationSetting.getText());
+            this.state.setTTSetting(this.fieldStationSetting.getText()); 
         if (this.selector.closeGui(this.state))
-            RTMCore.NETWORK_WRAPPER.sendToServer(new PacketSelectResource(this.selector));
+            RTMCore.NETWORK_WRAPPER.sendToServer(new PacketSelectResource(this.selector)); 
     }
 
     private void updateText() {
         if (this.currentTextObj == null)
-            return;
+            return; 
         String text = this.fieldText.getText();
         String font = this.buttonFont.displayString;
         int color = Integer.decode(this.fieldColor.getText()).intValue();
@@ -387,8 +387,8 @@ public class GuiSignboard extends GuiScreenCustom {
             if (prevFont.equals(fonts[i].getFontName())) {
                 index = i;
                 break;
-            }
-        }
+            } 
+        } 
         JComboBox<Font> box = new JComboBox<>(fonts);
         box.setSelectedIndex(index);
         box.setRenderer(new ComboItemFont());
@@ -441,6 +441,7 @@ public class GuiSignboard extends GuiScreenCustom {
                 setForeground(Color.black);
                 setBackground(Color.white);
             }
+            return this;
         }
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSpeaker.java b/src/api/rtm/jp/ngt/rtm/gui/GuiSpeaker.java
index a8bb364..16b3f2f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSpeaker.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiSpeaker.java
@@ -45,8 +45,8 @@ public class GuiSpeaker extends GuiScreenCustom {
             this.buttonList.add(button);
             this.selectButtons.add(button);
             if (i == this.chooseSoundId - 1)
-                button.enabled = false;
-        }
+                button.enabled = false; 
+        } 
         initSoundList();
     }
 
@@ -55,7 +55,7 @@ public class GuiSpeaker extends GuiScreenCustom {
         int sndWidth = 200;
         this.currentScrollSub = 0;
         if (!this.soundButtons.isEmpty())
-            this.buttonList.removeAll(this.soundButtons);
+            this.buttonList.removeAll(this.soundButtons); 
         this.soundButtons.clear();
         if (this.chooseSoundId > 0) {
             String searchWrd = this.searchField.getText();
@@ -68,9 +68,9 @@ public class GuiSpeaker extends GuiScreenCustom {
                     this.buttonList.add(button);
                     this.soundButtons.add(button);
                     i++;
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     public void drawScreen(int par1, int par2, float par3) {
@@ -80,7 +80,7 @@ public class GuiSpeaker extends GuiScreenCustom {
             int posY = (i - this.currentScrollMain) * 20 + 4;
             String s = String.format("%d : %s", new Object[] { Integer.valueOf(i + 1), SpeakerSounds.getInstance(false).getSound(i + 1) });
             drawString(this.fontRenderer, s, 20, posY, 16777215);
-        }
+        } 
     }
 
     protected void actionPerformed(GuiButton button) {
@@ -96,7 +96,7 @@ public class GuiSpeaker extends GuiScreenCustom {
             SpeakerSounds.getInstance(false).setSound(this.chooseSoundId, button.displayString, true);
             this.chooseSoundId = 0;
             initGui();
-        }
+        } 
         super.actionPerformed(button);
     }
 
@@ -106,7 +106,7 @@ public class GuiSpeaker extends GuiScreenCustom {
         if (i0 != 0) {
             i0 = (i0 > 0) ? 1 : -1;
             scroll(i0);
-        }
+        } 
     }
 
     protected void keyTyped(char par1, int par2) throws IOException {
@@ -119,25 +119,25 @@ public class GuiSpeaker extends GuiScreenCustom {
             this.currentScrollSub = scroll(this.currentScrollSub - par1, this.soundButtons.size());
         } else {
             this.currentScrollMain = scroll(this.currentScrollMain - par1, this.selectButtons.size());
-        }
+        } 
         resetButtonPos();
     }
 
     private int scroll(int scroll, int max) {
         if (scroll < 0)
-            return 0;
+            return 0; 
         if (scroll >= max)
-            return max - 1;
+            return max - 1; 
         return scroll;
     }
 
     private void resetButtonPos() {
         if (this.chooseSoundId > 0) {
             for (int i = 0; i < this.soundButtons.size(); i++)
-                ((GuiButton)this.soundButtons.get(i)).y = (i - this.currentScrollSub) * 20;
+                ((GuiButton)this.soundButtons.get(i)).y = (i - this.currentScrollSub) * 20; 
         } else {
             for (int i = 0; i < this.selectButtons.size(); i++)
-                ((GuiButton)this.selectButtons.get(i)).y = (i - this.currentScrollMain) * 20;
-        }
+                ((GuiButton)this.selectButtons.get(i)).y = (i - this.currentScrollMain) * 20; 
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiStation.java b/src/api/rtm/jp/ngt/rtm/gui/GuiStation.java
index 05c7d10..d951871 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiStation.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiStation.java
@@ -42,7 +42,7 @@ public class GuiStation extends GuiScreenCustom {
             sendPacket();
         } else if (button.id == 1) {
             this.mc.displayGuiScreen(null);
-        }
+        } 
         super.actionPerformed(button);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiVehicleControlPanel.java b/src/api/rtm/jp/ngt/rtm/gui/GuiVehicleControlPanel.java
index e81591b..369bfbd 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiVehicleControlPanel.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/GuiVehicleControlPanel.java
@@ -61,7 +61,7 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
 
     protected final EntityPlayer player;
 
-    protected final ModelSetVehicleBase<VehicleBaseConfig> modelset;
+    protected final ModelSetVehicleBase<? extends VehicleBaseConfig> modelset;
 
     private GuiButton buttonChunkLoader;
 
@@ -98,7 +98,7 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
             this.buttonList.add(new GuiButton(101, this.guiLeft, this.guiTop - 50, 20, 20, "<"));
             this.buttonList.add(new GuiButton(102, this.guiLeft + this.xSize - 20, this.guiTop - 50, 20, 20, ">"));
             this.maxPages = (tabCount - 12) / 10 + 1;
-        }
+        } 
     }
 
     public void onGuiClosed() {
@@ -107,12 +107,12 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
 
     private void setCurrentTab(TabTrainControlPanel tab) {
         if (tab == null)
-            return;
+            return; 
         this.selectedTabIndex = tab.getTabIndex();
         ContainerTrainControlPanel containerTrain = (ContainerTrainControlPanel)this.inventorySlots;
         this.dragSplittingSlots.clear();
         if (this.slotsList == null)
-            this.slotsList = containerTrain.inventorySlots;
+            this.slotsList = containerTrain.inventorySlots; 
         if (tab == TabTrainControlPanel.TAB_Inventory) {
             containerTrain.inventorySlots = this.slotsList;
             this.buttonList.clear();
@@ -122,7 +122,7 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
                 Slot slot = new Slot((IInventory)this.player.inventory, i, 8 + i * 18, 142);
                 slot.slotNumber = containerTrain.inventorySlots.size();
                 containerTrain.inventorySlots.add(slot);
-            }
+            } 
             this.buttonList.clear();
             this.buttonList.add(new GuiButton(124, this.guiLeft + 4, this.guiTop + 4, 82, 20, getFormattedText(TrainState.TrainStateType.InteriorLight, this.vehicle.getVehicleState(TrainState.TrainStateType.InteriorLight))));
             this.buttonList.add(new GuiButton(125, this.guiLeft + 90, this.guiTop + 4, 82, 20, getFormattedText(TrainState.TrainStateType.Light, this.vehicle.getVehicleState(TrainState.TrainStateType.Light))));
@@ -132,8 +132,8 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
                 this.buttonDirection[j] = new GuiButton(140 + j, this.guiLeft + 91 + 27 * j, this.guiTop + 28, 27, 20, getFormattedText(TrainState.TrainStateType.Role, (byte)j));
                 this.buttonList.add(this.buttonDirection[j]);
                 if (j == i0)
-                    (this.buttonDirection[j]).enabled = false;
-            }
+                    (this.buttonDirection[j]).enabled = false; 
+            } 
             this.buttonChunkLoader = new GuiButton(127, this.guiLeft + 28, this.guiTop + 52, 120, 20, getFormattedText(TrainState.TrainStateType.ChunkLoader, this.vehicle.getVehicleState(TrainState.TrainStateType.ChunkLoader)));
             this.buttonList.add(this.buttonChunkLoader);
             this.buttonList.add(new GuiButton(110, this.guiLeft + 4, this.guiTop + 52, 20, 20, "<"));
@@ -143,7 +143,7 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
                 this.buttonList.add(this.buttonDestination);
                 this.buttonList.add(new GuiButton(112, this.guiLeft + 4, this.guiTop + 76, 20, 20, "<"));
                 this.buttonList.add(new GuiButton(113, this.guiLeft + 152, this.guiTop + 76, 20, 20, ">"));
-            }
+            } 
             this.buttonAnnouncement = new GuiButton(129, this.guiLeft + 28, this.guiTop + 100, 120, 20, getFormattedText(TrainState.TrainStateType.Announcement, this.vehicle.getVehicleState(TrainState.TrainStateType.Announcement)));
             this.buttonList.add(this.buttonAnnouncement);
             this.buttonList.add(new GuiButton(114, this.guiLeft + 4, this.guiTop + 100, 20, 20, "<"));
@@ -154,7 +154,7 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
                 Slot slot = new Slot((IInventory)this.player.inventory, i, 8 + i * 18, 142);
                 slot.slotNumber = containerTrain.inventorySlots.size();
                 containerTrain.inventorySlots.add(slot);
-            }
+            } 
             this.buttonList.clear();
             String[][] buttons = getCustomButtons();
             String[] tips = getCustomButtonTips();
@@ -167,14 +167,14 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
                 button.addTips(tips[j]);
                 this.buttonList.add(button);
                 this.dataValues[j] = value;
-            }
+            } 
         } else if (tab == TabTrainControlPanel.TAB_Formation) {
             containerTrain.inventorySlots = new ArrayList();
             for (int i = 0; i < 9; i++) {
                 Slot slot = new Slot((IInventory)this.player.inventory, i, 8 + i * 18, 142);
                 slot.slotNumber = containerTrain.inventorySlots.size();
                 containerTrain.inventorySlots.add(slot);
-            }
+            } 
             this.buttonList.clear();
             Formation formation = this.vehicle.getFormation();
             if (formation != null)
@@ -185,9 +185,9 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
                         int x = this.guiLeft + 8 + j % 5 * 32;
                         int y = this.guiTop + 25 + j / 5 * 32;
                         this.buttonList.add(new GuiButtonFormation(200 + j, entry, x, y, v));
-                    }
-                }
-        }
+                    } 
+                }  
+        } 
         this.buttonDoor[0] = new GuiButtonDoor(300, this.guiLeft + this.xSize + 20, this.guiTop + 20, 64, 80);
         this.buttonDoor[1] = new GuiButtonDoor(301, this.guiLeft - 84, this.guiTop + 20, 64, 80);
         int state = this.vehicle.getVehicleState(TrainState.TrainStateType.Door);
@@ -210,7 +210,7 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
     protected void drawGuiContainerForegroundLayer(int p_146979_1_, int p_146979_2_) {
         TabTrainControlPanel tab = TabTrainControlPanel.tabArray[this.selectedTabIndex];
         if (tab != null)
-            GL11.glDisable(3042);
+            GL11.glDisable(3042); 
     }
 
     protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
@@ -221,18 +221,18 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
             for (int i = 0; i < tabs.length; i++) {
                 TabTrainControlPanel tab = tabs[i];
                 if (tab != null && isMouseOverTab(tab, l, i1))
-                    return;
-            }
+                    return; 
+            } 
         } else if (mouseButton == 1) {
             for (int i = 0; i < this.buttonList.size(); i++) {
                 GuiButton guibutton = this.buttonList.get(i);
                 if (guibutton.mousePressed(this.mc, mouseX, mouseY)) {
                     guibutton.playPressSound(this.mc.getSoundHandler());
                     buttonRightClicked(guibutton);
-                }
-            }
+                } 
+            } 
             return;
-        }
+        } 
         super.mouseClicked(mouseX, mouseY, mouseButton);
     }
 
@@ -246,15 +246,15 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
                 if (tab != null && isMouseOverTab(tab, l, i1)) {
                     setCurrentTab(tab);
                     return;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         super.mouseReleased(par1, par2, par3);
     }
 
     private boolean needsScrollBars() {
         if (TabTrainControlPanel.tabArray[this.selectedTabIndex] == null)
-            return false;
+            return false; 
         return false;
     }
 
@@ -266,7 +266,7 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
             i = (i > 0) ? 1 : ((i < 0) ? -1 : i);
             float scroll = (float)(this.currentScroll - i / j);
             this.currentScroll = (scroll < 0.0F) ? 0.0F : ((scroll > 1.0F) ? 1.0F : scroll);
-        }
+        } 
     }
 
     public void drawScreen(int par1, int par2, float par3) {
@@ -276,20 +276,20 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
         int k1 = i1 + 14;
         int l1 = j1 + 112;
         if (!this.wasClicking && flag && par1 >= i1 && par2 >= j1 && par1 < k1 && par2 < l1)
-            this.isScrolling = needsScrollBars();
+            this.isScrolling = needsScrollBars(); 
         if (!flag)
-            this.isScrolling = false;
+            this.isScrolling = false; 
         this.wasClicking = flag;
         if (this.isScrolling) {
             float scroll = ((par2 - j1) - 7.5F) / ((l1 - j1) - 15.0F);
             this.currentScroll = (scroll < 0.0F) ? 0.0F : ((scroll > 1.0F) ? 1.0F : scroll);
-        }
+        } 
         super.drawScreen(par1, par2, par3);
         TabTrainControlPanel[] tabs = TabTrainControlPanel.tabArray;
         int start = tabPage * 10;
         int i2 = Math.min(tabs.length, (tabPage + 1) * 10 + 2);
         if (tabPage != 0)
-            start += 2;
+            start += 2; 
         boolean rendered = false;
         for (int j2 = start; j2 < i2; j2++) {
             TabTrainControlPanel TabTrainControlPanel = tabs[j2];
@@ -297,12 +297,12 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
                 if (renderCreativeInventoryHoveringText(TabTrainControlPanel, par1, par2)) {
                     rendered = true;
                     break;
-                }
-        }
+                }  
+        } 
         if (!rendered)
-            renderCreativeInventoryHoveringText(TabTrainControlPanel.TAB_Inventory, par1, par2);
+            renderCreativeInventoryHoveringText(TabTrainControlPanel.TAB_Inventory, par1, par2); 
         if (this.slot != null && this.selectedTabIndex == TabTrainControlPanel.TAB_Inventory.getTabIndex() && isPointInRegion(this.slot.xPos, this.slot.xPos, 16, 16, par1, par2))
-            drawHoveringText(I18n.format("inventory.binSlot", new Object[0]), par1, par2);
+            drawHoveringText(I18n.format("inventory.binSlot", new Object[0]), par1, par2); 
         if (this.maxPages != 0) {
             String page = String.format("%d / %d", new Object[] { Integer.valueOf(tabPage + 1), Integer.valueOf(this.maxPages + 1) });
             int width = this.fontRenderer.getStringWidth(page);
@@ -312,7 +312,7 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
             this.fontRenderer.drawString(page, this.guiLeft + this.xSize / 2 - width / 2, this.guiTop - 44, -1);
             this.zLevel = 0.0F;
             this.itemRender.zLevel = 0.0F;
-        }
+        } 
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
         GL11.glDisable(2896);
     }
@@ -326,41 +326,41 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
         int start = tabPage * 10;
         int k = Math.min(tabs.length, (tabPage + 1) * 10 + 2);
         if (tabPage != 0)
-            start += 2;
+            start += 2; 
         for (int l = start; l < k; l++) {
             TabTrainControlPanel tab1 = tabs[l];
             this.mc.getTextureManager().bindTexture(tabTexture);
             if (tab1 != null)
                 if (tab1.getTabIndex() != this.selectedTabIndex)
-                    renderTabItem(tab1);
-        }
+                    renderTabItem(tab1);  
+        } 
         if (tabPage != 0 && tab != TabTrainControlPanel.TAB_Inventory) {
             this.mc.getTextureManager().bindTexture(tabTexture);
             renderTabItem(TabTrainControlPanel.TAB_Inventory);
-        }
+        } 
         this.mc.getTextureManager().bindTexture(tab.getTexture());
         drawTexturedModalRect(this.guiLeft - 1, this.guiTop - 1, 0, 0, this.xSize, this.ySize);
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
         this.mc.getTextureManager().bindTexture(tabTexture);
         if (tab == null || tab.getTabPage() != tabPage)
             if (tab != TabTrainControlPanel.TAB_Inventory)
-                return;
+                return;  
         renderTabItem(tab);
         if (tab == TabTrainControlPanel.TAB_Inventory)
-            GuiInventory.drawEntityOnScreen(this.guiLeft + 51, this.guiTop + 75, 30, (this.guiLeft + 51 - par2), (this.guiTop + 75 - 50 - par3), (EntityLivingBase)this.mc.player);
+            GuiInventory.drawEntityOnScreen(this.guiLeft + 51, this.guiTop + 75, 30, (this.guiLeft + 51 - par2), (this.guiTop + 75 - 50 - par3), (EntityLivingBase)this.mc.player); 
     }
 
     protected boolean isMouseOverTab(TabTrainControlPanel tab, int x, int y) {
         if (tab.getTabPage() != tabPage)
             if (tab != TabTrainControlPanel.TAB_Inventory)
-                return false;
+                return false;  
         int k = tab.getTabColumn();
         int l = 28 * k;
         if (k == 5) {
             l = this.xSize - 28 + 2;
         } else if (k > 0) {
             l += k;
-        }
+        } 
         int i1 = tab.isTabInFirstRow() ? -32 : this.ySize;
         return (x >= l && x <= l + 28 && y >= i1 && y <= i1 + 32);
     }
@@ -372,12 +372,12 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
             l = this.xSize - 28 + 2;
         } else if (k > 0) {
             l += k;
-        }
+        } 
         int i1 = tab.isTabInFirstRow() ? -32 : this.ySize;
         if (isPointInRegion(l + 3, i1 + 3, 23, 27, par2, par3)) {
             drawHoveringText(I18n.format(tab.getTranslatedTabLabel(), new Object[0]), par2, par3);
             return true;
-        }
+        } 
         return false;
     }
 
@@ -391,18 +391,18 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
         int i1 = this.guiTop;
         byte b0 = 32;
         if (flag)
-            k += 32;
+            k += 32; 
         if (i == 5) {
             l = this.guiLeft + this.xSize - 28;
         } else if (i > 0) {
             l += i;
-        }
+        } 
         if (flag1) {
             i1 -= 28;
         } else {
             k += 64;
             i1 += this.ySize - 4;
-        }
+        } 
         GL11.glDisable(2896);
         GL11.glColor3f(1.0F, 1.0F, 1.0F);
         GL11.glEnable(3042);
@@ -424,11 +424,11 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
     protected void actionPerformed(GuiButton button) {
         if (button.id == 0);
         if (button.id == 1)
-            this.mc.displayGuiScreen((GuiScreen)new GuiStats((GuiScreen)this, this.mc.player.getStatFileWriter()));
+            this.mc.displayGuiScreen((GuiScreen)new GuiStats((GuiScreen)this, this.mc.player.getStatFileWriter())); 
         if (button.id == 101)
-            tabPage = Math.max(tabPage - 1, 0);
+            tabPage = Math.max(tabPage - 1, 0); 
         if (button.id == 102)
-            tabPage = Math.min(tabPage + 1, this.maxPages);
+            tabPage = Math.min(tabPage + 1, this.maxPages); 
         if ((button.id >= 110 && button.id <= 115) || (button.id >= 124 && button.id <= 129) || (button.id >= 140 && button.id <= 142)) {
             TrainState.TrainStateType type = null;
             int i1 = 0;
@@ -442,12 +442,12 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
                 type = TrainState.TrainStateType.Destination;
                 i1 = this.vehicle.getVehicleState(type) - 1;
                 if (i1 < 0)
-                    i1 = ((VehicleBaseConfig)this.modelset.getConfig()).rollsignNames.length - 1;
+                    i1 = ((VehicleBaseConfig)this.modelset.getConfig()).rollsignNames.length - 1; 
             } else if (button.id == 113) {
                 type = TrainState.TrainStateType.Destination;
                 i1 = this.vehicle.getVehicleState(type) + 1;
                 if (i1 >= ((VehicleBaseConfig)this.modelset.getConfig()).rollsignNames.length)
-                    i1 = 0;
+                    i1 = 0; 
             } else if (button.id == 114) {
                 type = TrainState.TrainStateType.Announcement;
                 i1 = this.vehicle.getVehicleState(type) - 1;
@@ -456,18 +456,18 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
                 i1 = this.vehicle.getVehicleState(type) + 1;
             } else {
                 if (button.id == 128)
-                    return;
+                    return; 
                 if (button.id == 129) {
                     int index = this.vehicle.getVehicleState(TrainState.TrainStateType.Announcement);
                     String[][] sa0 = ((VehicleBaseConfig)this.modelset.getConfig()).sound_Announcement;
                     if (sa0 != null && index < sa0.length)
-                        RTMCore.proxy.playSound((Entity)this.vehicle, sa0[index][1], 1.0F, 1.0F);
+                        RTMCore.proxy.playSound((Entity)this.vehicle, sa0[index][1], 1.0F, 1.0F); 
                     return;
-                }
+                } 
                 if (button.id >= 124 && button.id <= 129) {
                     type = TrainState.getStateType(button.id - 120);
                     if (button.id == 124)
-                        type = TrainState.TrainStateType.InteriorLight;
+                        type = TrainState.TrainStateType.InteriorLight; 
                     i1 = this.vehicle.getVehicleState(type) + 1;
                 } else if (button.id >= 140 && button.id <= 142) {
                     type = TrainState.TrainStateType.Role;
@@ -477,10 +477,10 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
                             (this.buttonDirection[i]).enabled = false;
                         } else {
                             (this.buttonDirection[i]).enabled = true;
-                        }
-                    }
-                }
-            }
+                        } 
+                    } 
+                } 
+            } 
             int i2 = (i1 < type.min) ? type.max : ((i1 > type.max) ? type.min : i1);
             this.vehicle.syncVehicleState(type, (byte)i2);
             if (button.id == 110 || button.id == 111) {
@@ -491,10 +491,10 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
                 this.buttonAnnouncement.displayString = getFormattedText(type, (byte)i2);
             } else {
                 button.displayString = getFormattedText(type, (byte)i2);
-            }
-        }
+            } 
+        } 
         if (button.id == 300 || button.id == 301) {
-            ((GuiButtonDoor)button).opened ^= 0x1;
+            ((GuiButtonDoor)button).opened ^= true;
             int r = (this.buttonDoor[0]).opened ? 1 : 0;
             int l = (this.buttonDoor[1]).opened ? 1 : 0;
             int state = r << 1 | l;
@@ -513,19 +513,19 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
                 case 3:
                     type = TrainState.Door_OpenAll;
                     break;
-            }
+            } 
             MacroRecorder.INSTANCE.recDoor(this.vehicle.world, type);
-        }
+        } 
         if (button.id >= 2000) {
             int index = button.id - 2000;
             String[] sa = getCustomButtons()[index];
             int val = this.dataValues[index] + 1;
             if (val >= sa.length)
-                val = 0;
+                val = 0; 
             button.displayString = sa[val];
             this.dataValues[index] = val;
             onCustomButtonClick(index, val);
-        }
+        } 
     }
 
     protected void buttonRightClicked(GuiButton button) {
@@ -534,11 +534,11 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
             String[] sa = getCustomButtons()[index];
             int val = this.dataValues[index] - 1;
             if (val < 0)
-                val = sa.length - 1;
+                val = sa.length - 1; 
             button.displayString = sa[val];
             this.dataValues[index] = val;
             onCustomButtonClick(index, val);
-        }
+        } 
     }
 
     private void onCustomButtonClick(int index, int val) {
@@ -549,20 +549,20 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
         if (stateType == TrainState.TrainStateType.ChunkLoader) {
             String str = "state." + stateType.stateName;
             return I18n.format(str, new Object[0]) + par2;
-        }
+        } 
         if (stateType == TrainState.TrainStateType.Destination) {
             if (par2 >= ((VehicleBaseConfig)this.modelset.getConfig()).rollsignNames.length)
-                par2 = (byte)(((VehicleBaseConfig)this.modelset.getConfig()).rollsignNames.length - 1);
+                par2 = (byte)(((VehicleBaseConfig)this.modelset.getConfig()).rollsignNames.length - 1); 
             String str = "state." + stateType.stateName;
             return I18n.format(str, new Object[0]) + " " + ((VehicleBaseConfig)this.modelset.getConfig()).rollsignNames[par2];
-        }
+        } 
         if (stateType == TrainState.TrainStateType.Announcement) {
             String str = "state." + stateType.stateName;
             String[][] sa = ((VehicleBaseConfig)this.modelset.getConfig()).sound_Announcement;
             if (sa != null && par2 < sa.length)
-                return I18n.format(str, new Object[0]) + " " + sa[par2][0];
+                return I18n.format(str, new Object[0]) + " " + sa[par2][0]; 
             return I18n.format(str, new Object[0]) + " null";
-        }
+        } 
         String s = "state." + stateType.stateName + "." + (TrainState.getState(stateType, par2)).stateName;
         return I18n.format(s, new Object[0]);
     }
@@ -588,7 +588,7 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
 
         public void drawButton(Minecraft mc, int x, int y, float ptick) {
             if (!this.visible)
-                return;
+                return; 
             mc.getTextureManager().bindTexture(TabTrainControlPanel.TAB_Formation.getTexture());
             GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
             GL11.glEnable(3008);
@@ -597,16 +597,16 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
             drawTexturedModalRect(this.x, this.y, 192 + u * 32, this.v * 16, this.width, this.height);
             mouseDragged(mc, x, y);
             if (this.car.train.getFirstPassenger() == mc.player)
-                drawTexturedModalRect(this.x + 12, this.y - 16, 180, 0, 10, 16);
+                drawTexturedModalRect(this.x + 12, this.y - 16, 180, 0, 10, 16); 
             drawCenteredString(mc.fontRenderer, this.displayString, this.x + this.width / 2, this.y + 2, 0);
         }
 
         public boolean mousePressed(Minecraft mx, int x, int y) {
             if (super.mousePressed(GuiVehicleControlPanel.this.mc, x, y)) {
                 if (y - this.y >= 12)
-                    if (x - this.x < 12);
+                    if (x - this.x < 12); 
                 return true;
-            }
+            } 
             return false;
         }
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/InternalButton.java b/src/api/rtm/jp/ngt/rtm/gui/InternalButton.java
index dc145b9..b1c01bd 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/InternalButton.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/InternalButton.java
@@ -42,14 +42,17 @@ public class InternalButton {
         this.text = text;
         this.textColor = color;
         this.textScale = scale;
+        return this;
     }
 
     public InternalButton setColor(int par1) {
         this.color = par1;
+        return this;
     }
 
     public InternalButton setListner(ButtonListner par1) {
         this.listner = par1;
+        return this;
     }
 
     public ButtonListner getListner() {
@@ -74,7 +77,7 @@ public class InternalButton {
             float y = -this.startY / this.textScale - 10.0F;
             fontRenderer.drawString(this.text, x, y, this.textColor, false);
             GL11.glPopMatrix();
-        }
+        } 
     }
 
     public static interface ButtonListner {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/InternalGUI.java b/src/api/rtm/jp/ngt/rtm/gui/InternalGUI.java
index fcaa35f..3a081e0 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/InternalGUI.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/InternalGUI.java
@@ -37,6 +37,7 @@ public class InternalGUI {
 
     public InternalGUI setColor(int par1) {
         this.color = par1;
+        return this;
     }
 
     public InternalButton addButton(InternalButton button) {
@@ -59,17 +60,17 @@ public class InternalGUI {
             boolean pickMode = (i == 0);
             if (pickMode) {
                 if (!Mouse.isButtonDown(1))
-                    this.mouseClicked = false;
+                    this.mouseClicked = false; 
                 GLHelper.startMousePicking(2.0F);
-            }
+            } 
             int id = 1;
             for (InternalButton button : this.buttons) {
                 if (pickMode) {
                     GL11.glLoadName(id++);
                     button.hovered = false;
-                }
+                } 
                 button.render(pickMode);
-            }
+            } 
             if (pickMode) {
                 int hits = GLHelper.finishMousePicking();
                 if (hits > 0) {
@@ -79,10 +80,10 @@ public class InternalGUI {
                     if (!this.mouseClicked && Mouse.isButtonDown(1)) {
                         clickButton(button);
                         this.mouseClicked = true;
-                    }
-                }
-            }
-        }
+                    } 
+                } 
+            } 
+        } 
         GL11.glPopMatrix();
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/InventoryUneditable.java b/src/api/rtm/jp/ngt/rtm/gui/InventoryUneditable.java
index 804b93e..1d452f4 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/InventoryUneditable.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/InventoryUneditable.java
@@ -50,7 +50,7 @@ public class InventoryUneditable implements IInventory {
 
     public void setInventorySlotContents(int index, ItemStack stack) {
         if (index < this.stackList.length)
-            this.stackList[index] = stack;
+            this.stackList[index] = stack; 
     }
 
     public int getInventoryStackLimit() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/InventoryVendor.java b/src/api/rtm/jp/ngt/rtm/gui/InventoryVendor.java
index 9a688d7..ec5d1d9 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/InventoryVendor.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/InventoryVendor.java
@@ -45,18 +45,18 @@ public class InventoryVendor implements IInventory {
             if (stack.getCount() <= par2) {
                 setInventorySlotContents(par1, ItemStack.EMPTY);
                 return stack;
-            }
+            } 
             stack = stack.splitStack(par2);
             if (getStackInSlot(par1).getCount() == 0)
-                setInventorySlotContents(par1, ItemStack.EMPTY);
+                setInventorySlotContents(par1, ItemStack.EMPTY); 
             return stack;
-        }
+        } 
         return ItemStack.EMPTY;
     }
 
     public void setInventorySlotContents(int index, ItemStack stack) {
         if (index < this.stackList.length)
-            this.stackList[index] = stack;
+            this.stackList[index] = stack; 
     }
 
     public int getInventoryStackLimit() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/RTMGuiHandler.java b/src/api/rtm/jp/ngt/rtm/gui/RTMGuiHandler.java
index cd29d6b..7842579 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/RTMGuiHandler.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/RTMGuiHandler.java
@@ -29,31 +29,31 @@ public class RTMGuiHandler implements IGuiHandler {
         if (ID == RTMCore.guiIdFreightCar) {
             Entity entity = world.getEntityByID(x);
             if (entity instanceof EntityFreightCar)
-                return new ContainerFreightCar(player, (EntityFreightCar)entity);
+                return new ContainerFreightCar(player, (EntityFreightCar)entity); 
         } else if (ID == RTMCore.guiIdItemContainer) {
             Entity entity = world.getEntityByID(x);
             if (entity instanceof EntityContainer)
-                return new ContainerItemContainer(player, (EntityContainer)entity);
+                return new ContainerItemContainer(player, (EntityContainer)entity); 
         } else if (ID == RTMCore.guiIdTrainControlPanel) {
             Entity entity0 = world.getEntityByID(x);
             if (entity0 instanceof EntityVehicleBase) {
                 EntityVehicleBase vehicle = (EntityVehicleBase)entity0;
                 if (vehicle.getFirstPassenger() instanceof EntityPlayer)
-                    return new ContainerTrainControlPanel(vehicle, (EntityPlayer)vehicle.getFirstPassenger());
-            }
+                    return new ContainerTrainControlPanel(vehicle, (EntityPlayer)vehicle.getFirstPassenger()); 
+            } 
         } else {
             if (ID == RTMCore.guiIdTrainWorkBench) {
                 TileEntityTrainWorkBench tile = (TileEntityTrainWorkBench)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
                 return new ContainerRTMWorkBench(player.inventory, world, tile, player.capabilities.isCreativeMode);
-            }
+            } 
             if (ID == RTMCore.guiIdTicketVendor) {
                 TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
                 if (tile instanceof TileEntityTicketVendor)
-                    return new ContainerTicketVendor(player.inventory, (TileEntityTicketVendor)tile);
+                    return new ContainerTicketVendor(player.inventory, (TileEntityTicketVendor)tile); 
             } else if (ID == RTMCore.guiIdNPC) {
                 return new ContainerNPC(player, (EntityNPC)world.getEntityByID(x));
-            }
-        }
+            } 
+        } 
         return null;
     }
 
@@ -61,85 +61,85 @@ public class RTMGuiHandler implements IGuiHandler {
         if (ID == RTMCore.guiIdSelectEntityModel) {
             Entity entity = world.getEntityByID(x);
             return new GuiSelectModel(world, (IResourceSelector)entity);
-        }
+        } 
         if (ID == RTMCore.guiIdSelectTileEntityModel) {
             TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
             return new GuiSelectModel(world, (IResourceSelector)tile);
-        }
+        } 
         if (ID == RTMCore.guiIdSelectItemModel) {
             Item item = player.inventory.getCurrentItem().getItem();
             return new GuiSelectModel(world, (IResourceSelector)item);
-        }
+        } 
         if (ID == RTMCore.guiIdSelectTileEntityTexture)
-            return new GuiSelectTexture((IResourceSelector)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z), null);
+            return new GuiSelectTexture((IResourceSelector)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z), null); 
         if (ID == RTMCore.guiIdSelectItemTexture) {
             Item item = player.inventory.getCurrentItem().getItem();
             return new GuiSelectTexture((IResourceSelector)item, null);
-        }
+        } 
         if (ID == RTMCore.guiIdFreightCar) {
             Entity entity = world.getEntityByID(x);
             if (entity instanceof EntityFreightCar)
-                return new GuiFreightCar(player, (EntityFreightCar)entity);
+                return new GuiFreightCar(player, (EntityFreightCar)entity); 
         } else if (ID == RTMCore.guiIdItemContainer) {
             Entity entity = world.getEntityByID(x);
             if (entity instanceof EntityContainer)
-                return new GuiItemContainer(player, (EntityContainer)entity);
+                return new GuiItemContainer(player, (EntityContainer)entity); 
         } else if (ID == RTMCore.guiIdTrainControlPanel) {
             Entity entity0 = world.getEntityByID(x);
             if (entity0 instanceof EntityVehicleBase) {
                 EntityVehicleBase vehicle = (EntityVehicleBase)entity0;
                 if (vehicle.getFirstPassenger() instanceof EntityPlayer)
-                    return new GuiVehicleControlPanel(new ContainerTrainControlPanel(vehicle, (EntityPlayer)vehicle.getFirstPassenger()));
-            }
+                    return new GuiVehicleControlPanel(new ContainerTrainControlPanel(vehicle, (EntityPlayer)vehicle.getFirstPassenger())); 
+            } 
         } else {
             if (ID == RTMCore.guiIdTrainWorkBench) {
                 TileEntityTrainWorkBench tile = (TileEntityTrainWorkBench)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
                 return new GuiRTMWorkBench(player.inventory, world, tile, player.capabilities.isCreativeMode);
-            }
+            } 
             if (ID == RTMCore.guiIdSignalConverter)
-                return new GuiSignalConverter((TileEntitySignalConverter)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z));
+                return new GuiSignalConverter((TileEntitySignalConverter)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z)); 
             if (ID == RTMCore.guiIdTicketVendor) {
                 TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
                 if (tile instanceof TileEntityTicketVendor)
-                    return new GuiTicketVendor(player.inventory, (TileEntityTicketVendor)tile);
+                    return new GuiTicketVendor(player.inventory, (TileEntityTicketVendor)tile); 
             } else if (ID == RTMCore.guiIdStation) {
                 TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
                 if (tile instanceof TileEntityStation)
-                    return new GuiStation((TileEntityStation)tile);
+                    return new GuiStation((TileEntityStation)tile); 
             } else if (ID == RTMCore.guiIdPaintTool) {
                 Entity entity = world.getEntityByID(x);
                 if (entity instanceof EntityPlayer)
-                    return new GuiPaintTool((EntityPlayer)entity);
+                    return new GuiPaintTool((EntityPlayer)entity); 
             } else if (ID == RTMCore.guiIdMovingMachine) {
                 TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
                 if (tile instanceof TileEntityMovingMachine)
-                    return new GuiMovingMachine((TileEntityMovingMachine)tile);
+                    return new GuiMovingMachine((TileEntityMovingMachine)tile); 
             } else {
                 if (ID == RTMCore.guiIdNPC)
-                    return new GuiNPC(player, (EntityNPC)world.getEntityByID(x));
+                    return new GuiNPC(player, (EntityNPC)world.getEntityByID(x)); 
                 if (ID == RTMCore.guiIdMotorman)
-                    return GuiMotorman.getGui((EntityMotorman)world.getEntityByID(x));
+                    return GuiMotorman.getGui((EntityMotorman)world.getEntityByID(x)); 
                 if (ID == RTMCore.guiIdRailMarker)
-                    return new GuiRailMarker((TileEntityMarker)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z));
+                    return new GuiRailMarker((TileEntityMarker)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z)); 
                 if (ID == RTMCore.guiIdCamera)
-                    return new GuiCamera(player);
+                    return new GuiCamera(player); 
                 if (ID == RTMCore.guiIdConvertModel)
-                    return new GuiConvertModel(player);
+                    return new GuiConvertModel(player); 
                 if (ID == RTMCore.guiIdDecoration)
-                    return new GuiDecorationBlock(player);
+                    return new GuiDecorationBlock(player); 
                 if (ID == RTMCore.guiIdSignboard) {
                     IResourceSelector selector;
                     if (y < 0) {
                         selector = (IResourceSelector)player.inventory.getCurrentItem().getItem();
                     } else {
                         selector = (IResourceSelector)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
-                    }
+                    } 
                     return new GuiSignboard(selector);
-                }
+                } 
                 if (ID == RTMCore.guiIdSpeaker)
-                    return new GuiSpeaker((TileEntitySpeaker)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z));
-            }
-        }
+                    return new GuiSpeaker((TileEntitySpeaker)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z)); 
+            } 
+        } 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/SlotWorkBench.java b/src/api/rtm/jp/ngt/rtm/gui/SlotWorkBench.java
index 6e1c14f..c69ef54 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/SlotWorkBench.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/SlotWorkBench.java
@@ -25,7 +25,7 @@ public class SlotWorkBench extends Slot {
 
     public ItemStack decrStackSize(int p_75209_1_) {
         if (getHasStack())
-            this.amountCrafted += Math.min(p_75209_1_, getStack().getCount());
+            this.amountCrafted += Math.min(p_75209_1_, getStack().getCount()); 
         return super.decrStackSize(p_75209_1_);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/TabTrainControlPanel.java b/src/api/rtm/jp/ngt/rtm/gui/TabTrainControlPanel.java
index fde5c23..3348a2f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/TabTrainControlPanel.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/TabTrainControlPanel.java
@@ -40,15 +40,15 @@ public class TabTrainControlPanel {
         if (this.tabIndex >= tabArray.length) {
             TabTrainControlPanel[] a0 = new TabTrainControlPanel[this.tabIndex + 1];
             for (int i = 0; i < tabArray.length; i++)
-                a0[i] = tabArray[i];
+                a0[i] = tabArray[i]; 
             tabArray = a0;
-        }
+        } 
     }
 
     @SideOnly(Side.CLIENT)
     public ItemStack getIconItemStack() {
         if (this.itemstack == null)
-            this.itemstack = new ItemStack(getTabIconItem(), 1, 0);
+            this.itemstack = new ItemStack(getTabIconItem(), 1, 0); 
         return this.itemstack;
     }
 
@@ -77,21 +77,21 @@ public class TabTrainControlPanel {
 
     public int getTabPage() {
         if (this.tabIndex > 11)
-            return (this.tabIndex - 12) / 10 + 1;
+            return (this.tabIndex - 12) / 10 + 1; 
         return 0;
     }
 
     @SideOnly(Side.CLIENT)
     public int getTabColumn() {
         if (this.tabIndex > 11)
-            return (this.tabIndex - 12) % 10 % 5;
+            return (this.tabIndex - 12) % 10 % 5; 
         return this.tabIndex % 6;
     }
 
     @SideOnly(Side.CLIENT)
     public boolean isTabInFirstRow() {
         if (this.tabIndex > 11)
-            return ((this.tabIndex - 12) % 10 < 5);
+            return ((this.tabIndex - 12) % 10 < 5); 
         return (this.tabIndex < 6);
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/rail/GuiRailMarker.java b/src/api/rtm/jp/ngt/rtm/gui/rail/GuiRailMarker.java
index 08d693f..7146368 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/rail/GuiRailMarker.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/rail/GuiRailMarker.java
@@ -57,7 +57,7 @@ public class GuiRailMarker extends GuiScreenCustom {
             this.fieldAncV.setEnabled(false);
             this.fieldCantCenter.setEnabled(false);
             this.fieldCantEdge.setEnabled(false);
-        }
+        } 
     }
 
     public void drawScreen(int par1, int par2, float par3) {
@@ -81,16 +81,16 @@ public class GuiRailMarker extends GuiScreenCustom {
             sendPacket();
         } else if (button.id == 1) {
             this.mc.displayGuiScreen(null);
-        }
+        } 
         super.actionPerformed(button);
     }
 
     protected void keyTyped(char par1, int par2) {
         if (par2 == 1 || par2 == this.mc.gameSettings.keyBindInventory.getKeyCode())
-            this.mc.player.closeScreen();
+            this.mc.player.closeScreen(); 
         if (this.currentTextField != null)
             if ((par2 >= 2 && par2 <= 11) || (par2 >= 200 && par2 <= 205) || par2 == 12 || par2 == 14 || par2 == 211 || par2 == 52)
-                this.currentTextField.textboxKeyTyped(par1, par2);
+                this.currentTextField.textboxKeyTyped(par1, par2);  
         if (par2 == 28);
     }
 
@@ -109,7 +109,7 @@ public class GuiRailMarker extends GuiScreenCustom {
             return Float.valueOf(field.getText()).floatValue();
         } catch (NumberFormatException e) {
             return defaultVal;
-        }
+        } 
     }
 
     private void sendPacket() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/vendor/VendorScreenSelectPrice.java b/src/api/rtm/jp/ngt/rtm/gui/vendor/VendorScreenSelectPrice.java
index f4a33dc..99618a3 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/vendor/VendorScreenSelectPrice.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/vendor/VendorScreenSelectPrice.java
@@ -25,8 +25,8 @@ public class VendorScreenSelectPrice extends VendorScreen {
                 int y = guiTop + 10 + i * (sizeY + 5);
                 String s = String.valueOf(160 + id * 60);
                 this.vendor.addButtonToGUI(new GuiButtonColored(id, x, y, sizeX, sizeY, s, 65535, 0));
-            }
-        }
+            } 
+        } 
     }
 
     public void onClickButton(GuiButton button) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/vendor/VendorScreenSelectTicket.java b/src/api/rtm/jp/ngt/rtm/gui/vendor/VendorScreenSelectTicket.java
index eebfb72..f88bf6c 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/vendor/VendorScreenSelectTicket.java
+++ b/src/api/rtm/jp/ngt/rtm/gui/vendor/VendorScreenSelectTicket.java
@@ -26,7 +26,7 @@ public class VendorScreenSelectTicket extends VendorScreen {
             sendTicket("vendor:ticket");
         } else if (button.id == 11) {
             sendTicket("vendor:ticketbook");
-        }
+        } 
     }
 
     private void sendTicket(String par1) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemAmmunition.java b/src/api/rtm/jp/ngt/rtm/item/ItemAmmunition.java
index 8b7a49a..0017534 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemAmmunition.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemAmmunition.java
@@ -29,15 +29,15 @@ public class ItemAmmunition extends Item {
     @SideOnly(Side.CLIENT)
     public void getSubItems(CreativeTabs tab, NonNullList<ItemStack> list) {
         if (!isInCreativeTab(tab))
-            return;
+            return; 
         for (BulletType type : BulletType.values()) {
             if (type != BulletType.rifle_5_56mm) {
                 int i0 = type.id * 4;
                 list.add(new ItemStack(this, 1, i0));
                 list.add(new ItemStack(this, 1, i0 + 1));
                 list.add(new ItemStack(this, 1, i0 + 2));
-            }
-        }
+            } 
+        } 
     }
 
     public enum BulletIconType {
@@ -71,8 +71,8 @@ public class ItemAmmunition extends Item {
         public static BulletType getBulletType(int id) {
             for (BulletType type : values()) {
                 if (type.id == id)
-                    return type;
-            }
+                    return type; 
+            } 
             return handgun_9mm;
         }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemBellows.java b/src/api/rtm/jp/ngt/rtm/item/ItemBellows.java
index 84684c7..4cc0e3f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemBellows.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemBellows.java
@@ -29,7 +29,7 @@ public class ItemBellows extends ItemCustom {
                 int sy = x - ia[1];
                 int sz = x - ia[2];
                 blow(holder.getWorld(), sx, sy, sz, sx, sy, sz);
-            }
+            }  
         return holder.success();
     }
 
@@ -39,8 +39,8 @@ public class ItemBellows extends ItemCustom {
             if (fluid.getFluidType() == FluidType.COKE && fluid.countAir() <= 2) {
                 float temp = fluid.getTemperature();
                 if (temp > 300.0F && temp < 2000.0F)
-                    fluid.setTemperture(temp + 50.0F);
-            }
-        }
+                    fluid.setTemperture(temp + 50.0F); 
+            } 
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemBucketLiquid.java b/src/api/rtm/jp/ngt/rtm/item/ItemBucketLiquid.java
index 14171b0..791936b 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemBucketLiquid.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemBucketLiquid.java
@@ -41,13 +41,13 @@ public class ItemBucketLiquid extends ItemCustom {
         EntityPlayer player = holder.getPlayer();
         RayTraceResult mop = rayTrace(world, player, false);
         if (mop == null)
-            return holder.success();
+            return holder.success(); 
         FluidType type = getFluidType(holder.getItemStack());
         if (type != null) {
             int amount = 16 - itemStack.getItemDamage();
             holder.setItemStack(useBucket(world, player, mop, type, amount, holder
                         .getItemStack(), player.capabilities.isCreativeMode));
-        }
+        } 
         return holder.success();
     }
 
@@ -60,14 +60,14 @@ public class ItemBucketLiquid extends ItemCustom {
                 x += target.sideHit.getDirectionVec().getX();
                 y += target.sideHit.getDirectionVec().getY();
                 z += target.sideHit.getDirectionVec().getZ();
-            }
+            } 
             if (type != null)
                 if (player.canPlayerEdit(new BlockPos(x, y, z), target.sideHit, item)) {
                     float temp = getTemperture(item);
                     if (setFluid(world, x, y, z, type, amount, temp))
-                        return isCreative ? item : new ItemStack(Items.BUCKET);
-                }
-        }
+                        return isCreative ? item : new ItemStack(Items.BUCKET); 
+                }  
+        } 
         return item;
     }
 
@@ -88,8 +88,8 @@ public class ItemBucketLiquid extends ItemCustom {
                 fluid.setTemperture(temperture);
                 fluid.setFluidType(type);
                 world.spawnEntity(fluid);
-            }
-        }
+            } 
+        } 
         return true;
     }
 
@@ -98,10 +98,10 @@ public class ItemBucketLiquid extends ItemCustom {
         if (NGTUtil.isEquippedItem(player, RTMItem.bucketLiquid)) {
             count = 16 - player.getHeldItemMainhand().getItemDamage();
             if (count >= 16)
-                return false;
+                return false; 
             if (getFluidType(player.getHeldItemMainhand()) != fluid.getFluidType())
-                return false;
-        }
+                return false; 
+        } 
         int oldCount = count;
         if (!(player.getEntityWorld()).isRemote) {
             List<EntityFluid> list = player.getEntityWorld().getEntitiesWithinAABB(EntityFluid.class, fluid
@@ -110,22 +110,22 @@ public class ItemBucketLiquid extends ItemCustom {
                 if (fluid2.getFluidType() == fluid.getFluidType() && count < 16) {
                     fluid2.setDead();
                     count++;
-                }
-            }
+                } 
+            } 
             if (!player.isCreative() && count > oldCount) {
                 ItemStack itemstack = getItem(fluid.getFluidType(), count - 1, fluid.getTemperature());
                 player.setHeldItem(EnumHand.MAIN_HAND, itemstack);
-            }
-        }
+            } 
+        } 
         return true;
     }
 
     @SideOnly(Side.CLIENT)
     public void getSubItems(CreativeTabs tab, NonNullList<ItemStack> list) {
         if (!isInCreativeTab(tab))
-            return;
+            return; 
         for (FluidType type : FLUID_LIST)
-            list.add(getItem(type, 15, type.meltingPoint));
+            list.add(getItem(type, 15, type.meltingPoint)); 
     }
 
     protected void addInformation(ItemArgHolderBase.ItemArgHolder holder, List<String> list, ITooltipFlag flag) {
@@ -134,7 +134,7 @@ public class ItemBucketLiquid extends ItemCustom {
             list.add(TextFormatting.GRAY + type.toString());
             int amount = 16 - holder.getItemStack().getItemDamage();
             list.add(TextFormatting.GRAY + String.format("%d/16", new Object[] { Integer.valueOf(amount) }));
-        }
+        } 
     }
 
     private static ItemStack getItem(FluidType type, int amount, float temperture) {
@@ -151,14 +151,14 @@ public class ItemBucketLiquid extends ItemCustom {
         if (stack.hasTagCompound()) {
             String type = stack.getTagCompound().getString("type");
             if (type != null && !type.isEmpty())
-                return FluidType.valueOf(type);
-        }
+                return FluidType.valueOf(type); 
+        } 
         return null;
     }
 
     public static float getTemperture(ItemStack stack) {
         if (stack.hasTagCompound())
-            return stack.getTagCompound().getFloat("temperture");
+            return stack.getTagCompound().getFloat("temperture"); 
         return 0.0F;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemCamera.java b/src/api/rtm/jp/ngt/rtm/item/ItemCamera.java
index 999eca9..eccf839 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemCamera.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemCamera.java
@@ -14,7 +14,7 @@ public class ItemCamera extends ItemCustom {
         World world = holder.getWorld();
         EntityPlayer player = holder.getPlayer();
         if (world.isRemote)
-            player.openGui(RTMCore.instance, RTMCore.guiIdCamera, world, player.getEntityId(), 0, 0);
+            player.openGui(RTMCore.instance, RTMCore.guiIdCamera, world, player.getEntityId(), 0, 0); 
         return holder.success();
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemCargo.java b/src/api/rtm/jp/ngt/rtm/item/ItemCargo.java
index 947c458..38d2d48 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemCargo.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemCargo.java
@@ -29,7 +29,7 @@ import net.minecraftforge.fml.relauncher.SideOnly;
 public class ItemCargo extends ItemWithModel {
     protected ActionResult<ItemStack> onItemRightClick(ItemArgHolderBase.ItemArgHolder holder) {
         if (holder.getItemStack().getItemDamage() != 2)
-            return super.onItemRightClick(holder);
+            return super.onItemRightClick(holder); 
         return holder.success();
     }
 
@@ -56,9 +56,9 @@ public class ItemCargo extends ItemWithModel {
                 EntityCargoWithModel cwm = (EntityCargoWithModel)cargo;
                 cwm.getResourceState().readFromNBT(getModelState(itemstack).writeToNBT());
                 cwm.updateResourceState();
-            }
+            } 
             itemstack.shrink(1);
-        }
+        } 
         return holder.success();
     }
 
@@ -70,7 +70,7 @@ public class ItemCargo extends ItemWithModel {
                 return new EntityArtillery(world, itemstack, x, y, z);
             case 2:
                 return new EntityTie(world, itemstack, x, y, z);
-        }
+        } 
         return new EntityContainer(world, itemstack, x, y, z);
     }
 
@@ -82,9 +82,9 @@ public class ItemCargo extends ItemWithModel {
     @SideOnly(Side.CLIENT)
     public void getSubItems(CreativeTabs tab, NonNullList<ItemStack> list) {
         if (!isInCreativeTab(tab))
-            return;
+            return; 
         for (int j = 0; j < 3; j++)
-            list.add(new ItemStack((Item)this, 1, j));
+            list.add(new ItemStack((Item)this, 1, j)); 
     }
 
     protected ResourceType getModelType(ItemStack itemStack) {
@@ -95,7 +95,7 @@ public class ItemCargo extends ItemWithModel {
                 return RTMResource.FIREARM;
             case 2:
                 return null;
-        }
+        } 
         return RTMResource.CONTAINER;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemCoke.java b/src/api/rtm/jp/ngt/rtm/item/ItemCoke.java
index be84707..8c8216d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemCoke.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemCoke.java
@@ -12,7 +12,7 @@ public class ItemCoke extends ItemCustom {
             ItemBucketLiquid.setFluid(holder.getWorld(), (holder
                     .getBlockPos().getX() + hitX), (holder.getBlockPos().getY() + hitY), (holder.getBlockPos().getZ() + hitZ), FluidType.COKE, 1, 0.0F);
             holder.getItemStack().shrink(1);
-        }
+        } 
         return holder.success();
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemCrowbar.java b/src/api/rtm/jp/ngt/rtm/item/ItemCrowbar.java
index dc090c3..455b5cc 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemCrowbar.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemCrowbar.java
@@ -33,13 +33,13 @@ public class ItemCrowbar extends ItemSword {
         int bz = pos.getZ();
         if (world.isRemote) {
             if (BlockUtil.getBlock((IBlockAccess)world, pos) == Blocks.IRON_BLOCK)
-                player.openGui(RTMCore.instance, RTMCore.guiIdConvertModel, world, player.getEntityId(), 0, 0);
+                player.openGui(RTMCore.instance, RTMCore.guiIdConvertModel, world, player.getEntityId(), 0, 0); 
         } else if (BlockUtil.getBlock((IBlockAccess)world, pos) == Blocks.COBBLESTONE) {
             byte b0 = BlockConverter.shouldCreateConverter(world, bx, by, bz);
             if (b0 >= 0) {
                 BlockConverter.createConverter(world, bx, by, bz, b0, false);
                 return EnumActionResult.SUCCESS;
-            }
+            } 
         } else {
             for (int i = 0; i < 64; i++) {
                 for (int j = 0; j < 64; j++) {
@@ -49,10 +49,10 @@ public class ItemCrowbar extends ItemSword {
                     BlockPos pos2 = new BlockPos(x, y, z);
                     TileEntity tile0 = world.getTileEntity(pos2);
                     if (tile0 instanceof TileEntityLargeRailBase && ((TileEntityLargeRailBase)tile0).getRailCore() == null)
-                        world.setBlockToAir(pos2);
-                }
-            }
-        }
+                        world.setBlockToAir(pos2); 
+                } 
+            } 
+        } 
         return EnumActionResult.SUCCESS;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemDecoration.java b/src/api/rtm/jp/ngt/rtm/item/ItemDecoration.java
index 2b77ccf..7b77521 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemDecoration.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemDecoration.java
@@ -27,7 +27,7 @@ public class ItemDecoration extends ItemCustom {
         World world = holder.getWorld();
         EntityPlayer player = holder.getPlayer();
         if (world.isRemote)
-            player.openGui(RTMCore.instance, RTMCore.guiIdDecoration, world, player.getEntityId(), 0, 0);
+            player.openGui(RTMCore.instance, RTMCore.guiIdDecoration, world, player.getEntityId(), 0, 0); 
         return holder.success();
     }
 
@@ -37,7 +37,7 @@ public class ItemDecoration extends ItemCustom {
             BlockUtil.setBlock(holder.getWorld(), pos, RTMBlock.decoration, 0, 3);
             TileEntityDecoration tile = (TileEntityDecoration)holder.getWorld().getTileEntity(pos);
             tile.setModelName(getModelName(holder.getItemStack()));
-        }
+        } 
         return holder.success();
     }
 
@@ -51,13 +51,13 @@ public class ItemDecoration extends ItemCustom {
         if (nbt == null) {
             nbt = new NBTTagCompound();
             stack.setTagCompound(nbt);
-        }
+        } 
         nbt.setString("ModelName", modelName);
     }
 
     public static String getModelName(ItemStack stack) {
         if (stack.hasTagCompound())
-            return stack.getTagCompound().getString("ModelName");
+            return stack.getTagCompound().getString("ModelName"); 
         return DecorationModel.DEFAULT_MODEL.name;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemGun.java b/src/api/rtm/jp/ngt/rtm/item/ItemGun.java
index 2f87f4b..5459be1 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemGun.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemGun.java
@@ -43,8 +43,8 @@ public class ItemGun extends ItemCustom {
             if (i0 < itemstack.getMaxDamage()) {
                 itemstack.setItemDamage(i0);
                 player.entityDropItem(new ItemStack(getMagazineFromGunType(), 1, itemstack.getMaxDamage()), 1.0F);
-            }
-        }
+            } 
+        } 
         return holder.success();
     }
 
@@ -56,8 +56,8 @@ public class ItemGun extends ItemCustom {
                 if (stack.getItemDamage() < magazineItem.getMaxDamage()) {
                     player.inventory.setInventorySlotContents(i, null);
                     return stack.getItemDamage();
-                }
-        }
+                }  
+        } 
         return 1024;
     }
 
@@ -70,7 +70,7 @@ public class ItemGun extends ItemCustom {
             if (onUsingGun(stack, player.world, player, count))
                 if (!player.capabilities.isCreativeMode)
                     if (stack.isItemStackDamageable())
-                        stack.setItemDamage(stack.getItemDamage() + 1);
+                        stack.setItemDamage(stack.getItemDamage() + 1);    
     }
 
     public int getMaxItemUseDuration(ItemStack itemStack) {
@@ -92,30 +92,30 @@ public class ItemGun extends ItemCustom {
 
     protected boolean onUsingGun(ItemStack itemstack, World world, EntityPlayer player, int count) {
         if (count % 2 > 0)
-            return false;
+            return false; 
         if (!this.gunType.rapidFire && count < this.gunType.useDuration)
-            return false;
+            return false; 
         if (!world.isRemote)
             if (this.gunType == GunType.razer_gun) {
                 if (PermissionManager.INSTANCE.hasPermission(player, "useRazer")) {
                     RazerBullet bullet = new RazerBullet(player);
                     TickProcessQueue.getInstance(Side.SERVER).add(bullet);
                     return true;
-                }
+                } 
             } else if (PermissionManager.INSTANCE.hasPermission(player, "useGun")) {
                 EntityBullet bullet;
                 if (player instanceof EntityDummyPlayer) {
                     bullet = ((EntityDummyPlayer)player).npc.getBullet(this.gunType);
                 } else {
                     bullet = new EntityBullet(world, (EntityLivingBase)player, this.gunType.speed, this.gunType.bulletType);
-                }
+                } 
                 world.spawnEntity((Entity)bullet);
                 RTMCore.proxy.playSound((Entity)player, "rtm:sounds/item/gun.ogg", RTMCore.gunSoundVol, 1.0F);
                 if (!player.capabilities.isCreativeMode) {
                     int damage = this.gunType.bulletType.id * 4 + 2;
                     player.entityDropItem(new ItemStack(RTMItem.bullet, 1, damage), 0.5F);
-                }
-            }
+                } 
+            }  
         return false;
     }
 
@@ -140,18 +140,18 @@ public class ItemGun extends ItemCustom {
                 return RTMItem.magazine_amr;
             case razer_gun:
                 return RTMItem.razer_gun;
-        }
+        } 
         return RTMItem.magazine_handgun;
     }
 
     public enum GunType {
-        handgun((String)ItemAmmunition.BulletType.handgun_9mm, 10, 16, 4.5F, false),
-        rifle((String)ItemAmmunition.BulletType.rifle_7_62mm, 5, 16, 7.5F, false),
-        autoloading_rifle((String)ItemAmmunition.BulletType.rifle_7_62mm, 30, 6, 7.5F, true),
-        sniper_rifle((String)ItemAmmunition.BulletType.rifle_7_62mm, 10, 20, 7.5F, false),
-        smg((String)ItemAmmunition.BulletType.handgun_9mm, 30, 6, 4.5F, true),
-        amr((String)ItemAmmunition.BulletType.rifle_12_7mm, 10, 24, 9.0F, false),
-        razer_gun((String)ItemAmmunition.BulletType.rifle_12_7mm, 10, 60, 150.0F, false);
+        handgun(ItemAmmunition.BulletType.handgun_9mm, 10, 16, 4.5F, false),
+        rifle(ItemAmmunition.BulletType.rifle_7_62mm, 5, 16, 7.5F, false),
+        autoloading_rifle(ItemAmmunition.BulletType.rifle_7_62mm, 30, 6, 7.5F, true),
+        sniper_rifle(ItemAmmunition.BulletType.rifle_7_62mm, 10, 20, 7.5F, false),
+        smg(ItemAmmunition.BulletType.handgun_9mm, 30, 6, 4.5F, true),
+        amr(ItemAmmunition.BulletType.rifle_12_7mm, 10, 24, 9.0F, false),
+        razer_gun(ItemAmmunition.BulletType.rifle_12_7mm, 10, 60, 150.0F, false);
 
         public final ItemAmmunition.BulletType bulletType;
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemHacksaw.java b/src/api/rtm/jp/ngt/rtm/item/ItemHacksaw.java
index 6bafde5..599218f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemHacksaw.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemHacksaw.java
@@ -27,16 +27,16 @@ public class ItemHacksaw extends ItemCustom {
         EntityPlayer player = holder.getPlayer();
         BlockPos pos = holder.getBlockPos();
         if (!player.canPlayerEdit(pos, holder.getFacing(), itemStack))
-            return holder.fail();
+            return holder.fail(); 
         IBlockState state = world.getBlockState(pos);
         if (state.getBlock() == RTMBlock.steelSlab && state.getBlock().getMetaFromState(state) == 0) {
             if (world.isRemote)
-                return holder.success();
+                return holder.success(); 
             player.entityDropItem(new ItemStack(RTMItem.steel_ingot, 1, 0), 0.5F);
             world.setBlockToAir(pos);
             itemStack.damageItem(1, (EntityLivingBase)player);
             return holder.success();
-        }
+        } 
         return holder.fail();
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemInstalledObject.java b/src/api/rtm/jp/ngt/rtm/item/ItemInstalledObject.java
index 36f6e83..e2d0196 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemInstalledObject.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemInstalledObject.java
@@ -76,8 +76,8 @@ public class ItemInstalledObject extends ItemWithModel {
             if (!world.getBlockState(pos).getBlock().isReplaceable((IBlockAccess)world, pos)) {
                 newPos = pos.offset(side);
                 if (!world.isAirBlock(newPos))
-                    return holder.success();
-            }
+                    return holder.success(); 
+            } 
             int x = newPos.getX();
             int y = newPos.getY();
             int z = newPos.getZ();
@@ -96,17 +96,17 @@ public class ItemInstalledObject extends ItemWithModel {
                             if (i1 == 0 || i1 == 2) {
                                 dir = 0;
                                 break;
-                            }
+                            } 
                             if (i1 == 1 || i1 == 3)
-                                dir = 4;
+                                dir = 4; 
                             break;
                         case 1:
                             if (i1 == 0 || i1 == 2) {
                                 dir = 2;
                                 break;
-                            }
+                            } 
                             if (i1 == 1 || i1 == 3)
-                                dir = 6;
+                                dir = 6; 
                             break;
                         case 2:
                             dir = 1;
@@ -120,11 +120,11 @@ public class ItemInstalledObject extends ItemWithModel {
                         case 5:
                             dir = 7;
                             break;
-                    }
+                    } 
                     TileEntityFluorescent tile = (TileEntityFluorescent)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
                     tile.setDir(dir);
                     updateResource(tile, itemStack);
-                }
+                } 
             } else if (type == IstlObjType.CROSSING) {
                 if (side == EnumFacing.UP) {
                     block = RTMBlock.crossingGate;
@@ -132,7 +132,7 @@ public class ItemInstalledObject extends ItemWithModel {
                     TileEntityCrossingGate tile = (TileEntityCrossingGate)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
                     tile.setRotation(player, 15.0F, true);
                     updateResource(tile, itemStack);
-                }
+                } 
             } else if (type == IstlObjType.RAILLOAD_SIGN) {
                 if (side == EnumFacing.UP || side == EnumFacing.DOWN) {
                     block = RTMBlock.railroadSign;
@@ -140,7 +140,7 @@ public class ItemInstalledObject extends ItemWithModel {
                     TileEntityRailroadSign tile = (TileEntityRailroadSign)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
                     tile.setRotation(player, 15.0F, true);
                     updateResource(tile, itemStack);
-                }
+                } 
             } else if (type == IstlObjType.SIGNAL) {
                 if (side != EnumFacing.UP && side != EnumFacing.DOWN) {
                     x = pos.getX();
@@ -151,7 +151,7 @@ public class ItemInstalledObject extends ItemWithModel {
                     if (target != RTMBlock.signal) {
                         TileEntity origTile = null;
                         if (target.hasTileEntity(state))
-                            origTile = world.getTileEntity(pos);
+                            origTile = world.getTileEntity(pos); 
                         int meta2 = BlockUtil.getMetadata((IBlockAccess)world, pos);
                         BlockUtil.setBlock(world, x, y, z, RTMBlock.signal, meta2, 3);
                         TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
@@ -160,9 +160,9 @@ public class ItemInstalledObject extends ItemWithModel {
                             int dir = (sideIndex == 2) ? 2 : ((sideIndex == 4) ? 3 : ((sideIndex == 3) ? 0 : 1));
                             teSignal.setSignalProperty(getModelState(itemStack).getResourceName(), target, dir, player, origTile);
                             block = RTMBlock.signal;
-                        }
-                    }
-                }
+                        } 
+                    } 
+                } 
             } else if (type == IstlObjType.TURNSTILE) {
                 BlockTurnstile blockTurnstile = RTMBlock.turnstile;
                 int dir = NGTMath.floor(NGTMath.normalizeAngle(player.rotationYaw + 180.0D) / 90.0D + 0.5D) & 0x3;
@@ -172,7 +172,7 @@ public class ItemInstalledObject extends ItemWithModel {
                 updateResource(tile, itemStack);
             } else if (type == IstlObjType.BUMPING_POST) {
                 if (side == EnumFacing.UP && setEntityOnRail(world, new EntityBumpingPost(world), x, y - 1, z, player, itemStack))
-                    block = Blocks.STONE;
+                    block = Blocks.STONE; 
             } else if (type == IstlObjType.LINEPOLE) {
                 block = RTMBlock.linePole;
                 BlockUtil.setBlock(world, x, y, z, block, 0, 3);
@@ -197,7 +197,7 @@ public class ItemInstalledObject extends ItemWithModel {
                     TileEntityPoint tile = (TileEntityPoint)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
                     tile.setRotation(player, 15.0F, false);
                     updateResource(tile, itemStack);
-                }
+                } 
             } else if (type == IstlObjType.SIGNBOARD) {
                 block = RTMBlock.signboard;
                 BlockUtil.setBlock(world, x, y, z, block, sideIndex, 3);
@@ -224,10 +224,10 @@ public class ItemInstalledObject extends ItemWithModel {
                 updateResource(tile, itemStack);
             } else if (type == IstlObjType.ATC) {
                 if (side == EnumFacing.UP && setEntityOnRail(world, new EntityATC(world), x, y - 1, z, player, itemStack))
-                    block = Blocks.STONE;
+                    block = Blocks.STONE; 
             } else if (type == IstlObjType.TRAIN_DETECTOR) {
                 if (side == EnumFacing.UP && setEntityOnRail(world, new EntityTrainDetector(world), x, y - 1, z, player, itemStack))
-                    block = Blocks.STONE;
+                    block = Blocks.STONE; 
             } else if (type == IstlObjType.INSULATOR) {
                 block = RTMBlock.insulator;
                 BlockUtil.setBlock(world, x, y, z, block, sideIndex, 3);
@@ -237,13 +237,13 @@ public class ItemInstalledObject extends ItemWithModel {
                 Block target = BlockUtil.getBlock((IBlockAccess)world, pos);
                 if (target instanceof IBlockConnective && ((IBlockConnective)target).canConnect(world, x, y, z)) {
                     if (type == IstlObjType.CONNECTOR_OUT)
-                        sideIndex += 6;
+                        sideIndex += 6; 
                     block = RTMBlock.connector;
                     BlockUtil.setBlock(world, x, y, z, block, sideIndex, 3);
                     TileEntityConnector tile = (TileEntityConnector)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
                     updateResource(tile, itemStack);
                     tile.setConnectionTo(pos.getX(), pos.getY(), pos.getZ(), Connection.ConnectionType.DIRECT, null);
-                }
+                } 
             } else if (type == IstlObjType.PIPE) {
                 block = RTMBlock.pipe;
                 BlockUtil.setBlock(world, x, y, z, block, 0, 3);
@@ -263,13 +263,13 @@ public class ItemInstalledObject extends ItemWithModel {
                 TileEntitySpeaker tile = (TileEntitySpeaker)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
                 tile.setRotation(player, 15.0F, true);
                 updateResource(tile, itemStack);
-            }
+            } 
             if (block != null) {
                 SoundType soundtype = block.getSoundType(world.getBlockState(pos), world, pos, (Entity)player);
                 RTMCore.proxy.playSound((Entity)player, "block.stone.place", (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
                 itemStack.shrink(1);
-            }
-        }
+            } 
+        } 
         return holder.success();
     }
 
@@ -281,7 +281,7 @@ public class ItemInstalledObject extends ItemWithModel {
     private boolean setEntityOnRail(World world, EntityInstalledObject entity, int x, int y, int z, EntityPlayer player, ItemStack stack) {
         RailMap rm0 = TileEntityLargeRailBase.getRailMapFromCoordinates(world, null, x, y, z);
         if (rm0 == null)
-            return false;
+            return false; 
         int split = 128;
         int i0 = rm0.getNearlestPoint(split, x + 0.5D, z + 0.5D);
         double posX = rm0.getRailPos(split, i0)[1];
@@ -294,7 +294,7 @@ public class ItemInstalledObject extends ItemWithModel {
         if (Math.abs(dif) > 90.0F) {
             yaw += 180.0F;
             invert = true;
-        }
+        } 
         ResourceState<ModelSetMachine> itemState = (ResourceState)getModelState(stack);
         entity.setPosition(posX, posY, posZ);
         entity.rotationYaw = yaw;
@@ -313,11 +313,11 @@ public class ItemInstalledObject extends ItemWithModel {
     @SideOnly(Side.CLIENT)
     public void getSubItems(CreativeTabs tab, NonNullList<ItemStack> list) {
         if (!isInCreativeTab(tab))
-            return;
+            return; 
         for (IstlObjType type : IstlObjType.values()) {
             if (type != IstlObjType.NONE)
-                list.add(new ItemStack((Item)this, 1, type.id));
-        }
+                list.add(new ItemStack((Item)this, 1, type.id)); 
+        } 
     }
 
     protected ResourceType getModelType(ItemStack itemStack) {
@@ -361,8 +361,8 @@ public class ItemInstalledObject extends ItemWithModel {
         public static IstlObjType getType(int id) {
             for (IstlObjType type : values()) {
                 if (type.id == id)
-                    return type;
-            }
+                    return type; 
+            } 
             return NONE;
         }
 
@@ -375,16 +375,16 @@ public class ItemInstalledObject extends ItemWithModel {
         int meta = stack.getItemDamage();
         IstlObjType type = IstlObjType.getType(meta);
         if (type == IstlObjType.RAILLOAD_SIGN || type == IstlObjType.FLAG)
-            return RTMCore.guiIdSelectItemTexture;
+            return RTMCore.guiIdSelectItemTexture; 
         if (type == IstlObjType.SIGNBOARD)
-            return RTMCore.guiIdSignboard;
+            return RTMCore.guiIdSignboard; 
         return RTMCore.guiIdSelectItemModel;
     }
 
     protected ResourceState getNewState(ItemStack itemStack, ResourceType type) {
         IstlObjType type2 = IstlObjType.getType(itemStack.getItemDamage());
         if (type2 == IstlObjType.SIGNBOARD)
-            return new ResourceStateSignboard(type, null);
+            return new ResourceStateSignboard(type, null); 
         return new ResourceState<>(type, null);
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemMirror.java b/src/api/rtm/jp/ngt/rtm/item/ItemMirror.java
index dcccd16..5a2988b 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemMirror.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemMirror.java
@@ -26,7 +26,7 @@ public class ItemMirror extends ItemMultiIcon {
         switch (meta) {
             case 0:
                 return getTranslationKey() + ".plate";
-        }
+        } 
         return getTranslationKey() + ".block." + (meta - 20);
     }
 
@@ -44,19 +44,19 @@ public class ItemMirror extends ItemMultiIcon {
             int z = newPos.getZ();
             Block block = null;
             if (!world.isAirBlock(newPos) || !player.canPlayerEdit(newPos, side, itemStack))
-                return holder.success();
+                return holder.success(); 
             if (meta == 0) {
                 BlockUtil.setBlock(world, x, y, z, RTMBlock.mirror, side.getIndex(), 3);
                 block = RTMBlock.mirror;
             } else {
                 BlockUtil.setBlock(world, x, y, z, RTMBlock.mirrorCube, meta - 20, 3);
                 block = RTMBlock.mirror;
-            }
+            } 
             if (block != null) {
                 world.playSound(x + 0.5D, y + 0.5D, z + 0.5D, SoundEvents.BLOCK_GLASS_PLACE, SoundCategory.BLOCKS, 1.0F, 1.0F, true);
                 itemStack.shrink(1);
-            }
-        }
+            } 
+        } 
         return holder.success();
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemNPC.java b/src/api/rtm/jp/ngt/rtm/item/ItemNPC.java
index a3d524d..ec1929b 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemNPC.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemNPC.java
@@ -44,8 +44,8 @@ public class ItemNPC extends ItemWithModel {
             if (itemStack.getItemDamage() == 1) {
                 entity.getResourceState().readFromNBT(getModelState(itemStack).writeToNBT());
                 entity.updateResourceState();
-            }
-        }
+            } 
+        } 
         return holder.success();
     }
 
@@ -57,9 +57,9 @@ public class ItemNPC extends ItemWithModel {
     @SideOnly(Side.CLIENT)
     public void getSubItems(CreativeTabs tab, NonNullList<ItemStack> list) {
         if (!isInCreativeTab(tab))
-            return;
+            return; 
         for (int j = 0; j < 2; j++)
-            list.add(new ItemStack((Item)this, 1, j));
+            list.add(new ItemStack((Item)this, 1, j)); 
     }
 
     public int getGuiId(ItemStack stack) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemPaddle.java b/src/api/rtm/jp/ngt/rtm/item/ItemPaddle.java
index 34e4147..e9a9c16 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemPaddle.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemPaddle.java
@@ -42,17 +42,17 @@ public final class ItemPaddle extends ItemCustom {
         float temp = checkFurnaceEnv(fluid.world, player, pos.getX(), pos.getY(), pos.getZ());
         if (temp > 0.0F) {
             if (temp > fluid.getTemperature())
-                fluid.setTemperture(temp);
+                fluid.setTemperture(temp); 
             if (temp >= FluidType.STEEL.meltingPoint) {
                 if ((player.getEntityWorld()).rand.nextInt(4) == 0) {
                     NGTLog.sendChatMessage((ICommandSender)player, "message.paddle.get_steel", new Object[0]);
                     fluid.setFluidType(FluidType.STEEL);
                     return true;
-                }
+                } 
             } else {
                 NGTLog.sendChatMessage((ICommandSender)player, "Low temperature (%5.1f)", new Object[] { Float.valueOf(temp) });
-            }
-        }
+            } 
+        } 
         return false;
     }
 
@@ -77,11 +77,11 @@ public final class ItemPaddle extends ItemCustom {
                         heatSource = (heatSource == 1) ? heatSource : (fHeatSource ? 1 : 0);
                         if (fHeatSource)
                             if (tempNew > temp)
-                                temp = tempNew;
-                    }
-                }
-            }
-        }
+                                temp = tempNew;  
+                    } 
+                } 
+            } 
+        } 
         NGTLog.sendChatMessage((ICommandSender)player, "Chimney:%s, Ceiling:%s, Coke:%s, HeatSource:s%", new Object[] { getMessage(chimney), getMessage(ceiling), getMessage(coke), getMessage(heatSource) });
         return temp;
     }
@@ -94,8 +94,8 @@ public final class ItemPaddle extends ItemCustom {
         List<EntityFluid> list = world.getEntitiesWithinAABB(EntityFluid.class, new AxisAlignedBB(x, y, z, (x + 1), (y + 1), (z + 1)));
         for (EntityFluid fluid : list) {
             if (fluid.getFluidType() == FluidType.COKE)
-                return false;
-        }
+                return false; 
+        } 
         return true;
     }
 
@@ -104,9 +104,9 @@ public final class ItemPaddle extends ItemCustom {
         for (int i = start[0]; i <= end[0]; i++) {
             for (int j = start[1]; j <= end[1]; j++) {
                 for (int k = start[2]; k <= end[2]; k++)
-                    flag |= world.canSeeSky(new BlockPos(x + i, y + j, z + k));
-            }
-        }
+                    flag |= world.canSeeSky(new BlockPos(x + i, y + j, z + k)); 
+            } 
+        } 
         return flag;
     }
 
@@ -115,10 +115,10 @@ public final class ItemPaddle extends ItemCustom {
             for (int j = start[1]; j <= end[1]; j++) {
                 for (int k = start[2]; k <= end[2]; k++) {
                     if (world.canSeeSky(new BlockPos(x + i, y + j, z + k)))
-                        return false;
-                }
-            }
-        }
+                        return false; 
+                } 
+            } 
+        } 
         return true;
     }
 
@@ -130,15 +130,15 @@ public final class ItemPaddle extends ItemCustom {
             if (fluid.getFluidType() == FluidType.COKE) {
                 sum += fluid.getTemperature();
                 count++;
-            }
-        }
+            } 
+        } 
         return (count > 0) ? (float)(sum / count) : 0.0F;
     }
 
     public static void pushPull(EntityPlayer player, EntityFluid fluid, float dir) {
         if (fluid.getFluidType() == FluidType.PIG_IRON)
             if (stir(player, fluid))
-                return;
+                return;  
         double x = fluid.posX - player.posX;
         double z = fluid.posZ - player.posZ;
         double len = NGTMath.firstSqrt(x * x + z * z);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemPaintTool.java b/src/api/rtm/jp/ngt/rtm/item/ItemPaintTool.java
index e2be0ee..5762bad 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemPaintTool.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemPaintTool.java
@@ -33,10 +33,10 @@ public class ItemPaintTool extends ItemCustom {
         EntityPlayer player = holder.getPlayer();
         if (player.isSneaking()) {
             if (world.isRemote)
-                player.openGui(RTMCore.instance, RTMCore.guiIdPaintTool, world, player.getEntityId(), 0, 0);
+                player.openGui(RTMCore.instance, RTMCore.guiIdPaintTool, world, player.getEntityId(), 0, 0); 
         } else {
             player.setActiveHand(holder.getHand());
-        }
+        } 
         return holder.success();
     }
 
@@ -46,7 +46,7 @@ public class ItemPaintTool extends ItemCustom {
 
     public void usePaintTool(ItemStack itemStack, EntityPlayer player, World world, int x, int y, int z, int dir, float fx, float fy, float fz) {
         if (world.isRemote)
-            return;
+            return; 
         PaintProperty prop = PaintProperty.getProperty(itemStack);
         int[] ia = BlockUtil.facing[dir];
         int bx = (int)(fx * 16.0F);
@@ -64,9 +64,9 @@ public class ItemPaintTool extends ItemCustom {
             for (; j <= maxY >> 4; j++) {
                 int k = (minZ >= 0) ? (minZ >> 4) : (-(Math.abs(minZ - 1) >> 4) - 1);
                 for (; k <= maxZ >> 4; k++)
-                    paint(world, x + i, y + j, z + k, dir, bx - (i << 4), by - (j << 4), bz - (k << 4), prop);
-            }
-        }
+                    paint(world, x + i, y + j, z + k, dir, bx - (i << 4), by - (j << 4), bz - (k << 4), prop); 
+            } 
+        } 
     }
 
     public void onUsingTick(ItemStack stack, EntityLivingBase living, int count) {
@@ -82,8 +82,8 @@ public class ItemPaintTool extends ItemCustom {
                 float fy = (float)mop.hitVec.y - y;
                 float fz = (float)mop.hitVec.z - z;
                 usePaintTool(stack, player, player.world, x, y, z, mop.sideHit.getIndex(), fx, fy, fz);
-            }
-        }
+            } 
+        } 
     }
 
     public void onPlayerStoppedUsing(ItemStack stack, World worldIn, EntityLivingBase entityLiving, int timeLeft) {}
@@ -91,7 +91,7 @@ public class ItemPaintTool extends ItemCustom {
     private void paint(World world, int x, int y, int z, int dir, int paintX, int paintY, int paintZ, PaintProperty prop) {
         IBlockState state = BlockUtil.getBlockState((IBlockAccess)world, x, y, z);
         if (!state.isOpaqueCube())
-            return;
+            return; 
         int[] ia = BlockUtil.facing[dir];
         x += ia[0];
         y += ia[1];
@@ -102,7 +102,7 @@ public class ItemPaintTool extends ItemCustom {
             BlockUtil.setBlock(world, pos, RTMBlock.paint, 0, 3);
         } else if (block != RTMBlock.paint) {
             return;
-        }
+        } 
         int p1 = -1;
         int p2 = -1;
         switch (dir) {
@@ -121,7 +121,7 @@ public class ItemPaintTool extends ItemCustom {
                 p1 = paintY;
                 p2 = paintZ;
                 break;
-        }
+        } 
         TileEntity tile = world.getTileEntity(pos);
         if (tile instanceof TileEntityPaint) {
             TileEntityPaint paint = (TileEntityPaint)tile;
@@ -136,21 +136,21 @@ public class ItemPaintTool extends ItemCustom {
                         int rad2 = r * r;
                         flag = (disQ <= rad2);
                         if (type == PaintProperty.EnumPaintType.brush && rad2 > 0)
-                            alpha -= alpha * disQ / rad2;
+                            alpha -= alpha * disQ / rad2; 
                     } else if (type == PaintProperty.EnumPaintType.pen_square || type == PaintProperty.EnumPaintType.eraser_square) {
                         flag = (Math.abs(i - p1) <= r && Math.abs(j - p2) <= r);
-                    }
+                    } 
                     if (flag)
                         if (type == PaintProperty.EnumPaintType.eraser_circle || type == PaintProperty.EnumPaintType.eraser_square) {
                             paint.clearColor(i, j, dir);
                         } else {
                             paint.setColor(prop.color, alpha, i, j, dir);
-                        }
-                }
-            }
+                        }  
+                } 
+            } 
             paint.markDirty();
             BlockUtil.markBlockForUpdate(world, paint.getPos());
-        }
+        } 
     }
 
     public int getMaxItemUseDuration(ItemStack itemStack) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemRail.java b/src/api/rtm/jp/ngt/rtm/item/ItemRail.java
index d63634e..9c1331c 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemRail.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemRail.java
@@ -13,6 +13,7 @@ import jp.ngt.rtm.RTMResource;
 import jp.ngt.rtm.modelpack.ModelPackManager;
 import jp.ngt.rtm.modelpack.ResourceType;
 import jp.ngt.rtm.modelpack.cfg.RailConfig;
+import jp.ngt.rtm.modelpack.modelset.ModelSetRail;
 import jp.ngt.rtm.modelpack.modelset.ResourceSet;
 import jp.ngt.rtm.modelpack.state.ResourceState;
 import jp.ngt.rtm.modelpack.state.ResourceStateRail;
@@ -40,7 +41,7 @@ import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class ItemRail extends ItemWithModel {
+public class ItemRail extends ItemWithModel<ModelSetRail> {
     public ItemRail() {
         setMaxStackSize(1);
     }
@@ -49,7 +50,7 @@ public class ItemRail extends ItemWithModel {
         World world = holder.getWorld();
         IBlockState blockState = world.getBlockState(holder.getBlockPos());
         if (blockState.getBlock() instanceof BlockMarker)
-            return holder.pass();
+            return holder.pass(); 
         if (!world.isRemote) {
             TileEntityLargeRailCore core = BlockLargeRailBase.getCore((IBlockAccess)world, holder.getBlockPos());
             if (core != null) {
@@ -59,8 +60,8 @@ public class ItemRail extends ItemWithModel {
             } else {
                 BlockPos newPos = holder.getBlockPos().up();
                 placeRail(world, newPos, holder.getItemStack(), holder.getPlayer());
-            }
-        }
+            } 
+        } 
         return holder.success();
     }
 
@@ -75,27 +76,27 @@ public class ItemRail extends ItemWithModel {
                 NBTTagCompound nbt = new NBTTagCompound();
                 nbt.setTag("State", (NBTBase)state.writeToNBT());
                 itemStack.setTagCompound(nbt);
-            }
+            } 
             return state;
-        }
+        } 
         return null;
     }
 
     @SideOnly(Side.CLIENT)
     public void getSubItems(CreativeTabs tab, NonNullList<ItemStack> list) {
         if (!isInCreativeTab(tab))
-            return;
+            return; 
         List<ResourceSet> rails = ModelPackManager.INSTANCE.getModelList(RTMResource.RAIL);
         for (ResourceSet<RailConfig> modelSet : rails) {
             RailConfig cfg = modelSet.getConfig();
             if (cfg.defaultBallast == null)
-                continue;
+                continue; 
             for (RailConfig.BallastSet set : cfg.defaultBallast) {
                 Block block = Block.getBlockFromName(set.blockName);
                 int meta = set.blockMetadata;
                 float h = (set.height <= 0.0F) ? 0.0625F : set.height;
                 if (block == null)
-                    block = Blocks.AIR;
+                    block = Blocks.AIR; 
                 ItemStack itemStack = new ItemStack(RTMItem.itemLargeRail, 1, 0);
                 ResourceStateRail state = getModelState(itemStack);
                 state.setResourceName(cfg.getName());
@@ -103,18 +104,18 @@ public class ItemRail extends ItemWithModel {
                 state.setHeight(h);
                 setModelState(itemStack, state);
                 list.add(itemStack);
-            }
-        }
+            } 
+        } 
     }
 
     public String getItemStackDisplayName(ItemStack itemStack) {
         String s = super.getItemStackDisplayName(itemStack);
         ResourceStateRail state = getModelState(itemStack);
         if (state == null)
-            return s;
+            return s; 
         String localizedName = "";
         if (I18n.canTranslate(state.unlocalizedName))
-            localizedName = ", " + NGTUtil.translate(state.unlocalizedName);
+            localizedName = ", " + NGTUtil.translate(state.unlocalizedName); 
         return s + "(" + state.getResourceSet().getConfig().getName() + localizedName + ")";
     }
 
@@ -122,12 +123,12 @@ public class ItemRail extends ItemWithModel {
         super.addInformation(holder, list, flag);
         ResourceStateRail state = getModelState(holder.getItemStack());
         if (state == null)
-            return;
+            return; 
         list.add(TextFormatting.GRAY + "Height:" + state.blockHeight);
         if (holder.getItemStack().hasTagCompound() && holder.getItemStack().getTagCompound().hasKey("ShapeName")) {
             String shape = holder.getItemStack().getTagCompound().getString("ShapeName");
             list.add(TextFormatting.GRAY + shape);
-        }
+        } 
     }
 
     public static ItemStack getRailItem(ResourceStateRail prop) {
@@ -160,18 +161,18 @@ public class ItemRail extends ItemWithModel {
         if (nbt != null) {
             byte size = nbt.getByte("Size");
             for (int i = 0; i < size; i++)
-                list.add(RailPosition.readFromNBT(nbt.getCompoundTag("RP" + i)));
-        }
+                list.add(RailPosition.readFromNBT(nbt.getCompoundTag("RP" + i))); 
+        } 
         return list;
     }
 
     private static void setRPToItem(ItemStack stack, RailPosition[] rps) {
         if (!stack.hasTagCompound())
-            stack.setTagCompound(new NBTTagCompound());
+            stack.setTagCompound(new NBTTagCompound()); 
         NBTTagCompound nbt = stack.getTagCompound();
         nbt.setByte("Size", (byte)rps.length);
         for (int i = 0; i < rps.length; i++)
-            nbt.setTag("RP" + i, (NBTBase)rps[i].writeToNBT());
+            nbt.setTag("RP" + i, (NBTBase)rps[i].writeToNBT()); 
     }
 
     public static ItemStack copyItemFromRail(TileEntityLargeRailCore core) {
@@ -204,11 +205,11 @@ public class ItemRail extends ItemWithModel {
                 rp.direction = (byte)(rp.direction + difDir + 8 & 0x7);
                 rp.anchorYaw = NGTMath.wrapAngle(rp.anchorYaw + difDir * 45.0F);
                 rp.init();
-            }
+            } 
             ResourceStateRail state = getModelState(stack);
             boolean isCreative = player.capabilities.isCreativeMode;
             return BlockMarker.createRail(world, pos.getX(), pos.getY(), pos.getZ(), rps, state, true, isCreative);
-        }
+        } 
         return false;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemTicket.java b/src/api/rtm/jp/ngt/rtm/item/ItemTicket.java
index 00e250f..a5f80ef 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemTicket.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemTicket.java
@@ -26,7 +26,7 @@ public class ItemTicket extends Item {
     @SideOnly(Side.CLIENT)
     public void getSubItems(CreativeTabs tab, NonNullList<ItemStack> list) {
         if (!isInCreativeTab(tab))
-            return;
+            return; 
         switch (this.ticketType) {
             case 0:
                 list.add(new ItemStack(this, 1, 1));
@@ -37,7 +37,7 @@ public class ItemTicket extends Item {
             case 2:
                 list.add(new ItemStack(this, 1, 0));
                 break;
-        }
+        } 
     }
 
     @SideOnly(Side.CLIENT)
@@ -45,12 +45,12 @@ public class ItemTicket extends Item {
         if (this.ticketType == 1) {
             String s = NGTUtil.translate("tooltip.item.ticket.remaining");
             tooltip.add(TextFormatting.GRAY + s + ":" + String.valueOf(stack.getItemDamage()));
-        }
+        } 
         NBTTagCompound nbt = stack.getTagCompound();
         if (nbt != null && nbt.getBoolean("Entered")) {
             String s = NGTUtil.translate("tooltip.item.ticket.entered");
             tooltip.add(TextFormatting.GRAY + s);
-        }
+        } 
     }
 
     @SideOnly(Side.CLIENT)
@@ -65,16 +65,16 @@ public class ItemTicket extends Item {
         itemStack.shrink(1);
         if (nbt != null && nbt.getBoolean("Entered")) {
             if (damage == 0)
-                return null;
+                return null; 
             return new ItemStack(item, 1, damage);
-        }
+        } 
         if (damage > 0) {
             ItemStack itemStack2 = new ItemStack(item, 1, --damage);
             NBTTagCompound nbt2 = new NBTTagCompound();
             nbt2.setBoolean("Entered", true);
             itemStack2.setTagCompound(nbt2);
             return itemStack2;
-        }
+        } 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemTrain.java b/src/api/rtm/jp/ngt/rtm/item/ItemTrain.java
index f60184b..0f5e394 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemTrain.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemTrain.java
@@ -45,16 +45,16 @@ import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public final class ItemTrain extends ItemWithModel {
+public final class ItemTrain extends ItemWithModel<ModelSetTrain> {
     private static final int SPLIT = 128;
 
     protected ActionResult<ItemStack> onItemRightClick(ItemArgHolderBase.ItemArgHolder holder) {
         if ((holder.getWorld()).isRemote) {
             List<TrainSet> trainSets = getFormationFromItem(holder.getItemStack());
             if (!trainSets.isEmpty())
-                return holder.success();
+                return holder.success(); 
             return super.onItemRightClick(holder);
-        }
+        } 
         return holder.success();
     }
 
@@ -64,16 +64,16 @@ public final class ItemTrain extends ItemWithModel {
         BlockPos pos = holder.getBlockPos();
         EntityPlayer player = holder.getPlayer();
         if (world.isRemote || !PermissionManager.INSTANCE.hasPermission(player, "editVehicle"))
-            return holder.success();
+            return holder.success(); 
         int x = pos.getX();
         int y = pos.getY();
         int z = pos.getZ();
         ResourceState<ModelSetTrain> state = (ResourceState)getModelState(itemStack);
         RailMap rm0 = TileEntityLargeRailBase.getRailMapFromCoordinates(world, (Entity)player, x, y, z);
         if (rm0 == null)
-            return holder.success();
+            return holder.success(); 
         if (!checkObstacle(((ModelSetTrain)state.getResourceSet()).getConfig(), player, world, x, y, z, rm0))
-            return holder.success();
+            return holder.success(); 
         int spIndex = rm0.getNearlestPoint(128, x + 0.5D, z + 0.5D);
         float yw0 = NGTMath.wrapAngle(rm0.getRailRotation(128, spIndex));
         float yaw = EntityBogie.fixBogieYaw(-player.rotationYaw, yw0);
@@ -100,8 +100,8 @@ public final class ItemTrain extends ItemWithModel {
                 (train.getBogie(0)).isActivated = true;
                 (train.getBogie(1)).isActivated = true;
                 train.setNotch(1);
-            }
-        }
+            } 
+        } 
         itemStack.shrink(1);
         return holder.success();
     }
@@ -116,9 +116,9 @@ public final class ItemTrain extends ItemWithModel {
                 if (distanceSq < (range * range) && rm0.equals(rm1)) {
                     NGTLog.sendChatMessage((ICommandSender)player, "message.train.obstacle", new Object[] { entity.toString() });
                     return false;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         return true;
     }
 
@@ -132,7 +132,7 @@ public final class ItemTrain extends ItemWithModel {
                 return new EntityTanker(world, "");
             case 127:
                 return new EntityTrainTest(world, "");
-        }
+        } 
         return new EntityTrainDieselCar(world, "");
     }
 
@@ -143,7 +143,7 @@ public final class ItemTrain extends ItemWithModel {
     @SideOnly(Side.CLIENT)
     public void getSubItems(CreativeTabs tab, NonNullList<ItemStack> list) {
         if (!isInCreativeTab(tab))
-            return;
+            return; 
         list.add(new ItemStack((Item)this, 1, 0));
         list.add(new ItemStack((Item)this, 1, 1));
         list.add(new ItemStack((Item)this, 1, 2));
@@ -163,7 +163,7 @@ public final class ItemTrain extends ItemWithModel {
                 return RTMResource.TRAIN_TC;
             case 127:
                 return RTMResource.TRAIN_TEST;
-        }
+        } 
         return RTMResource.TRAIN_DC;
     }
 
@@ -184,28 +184,28 @@ public final class ItemTrain extends ItemWithModel {
             for (TrainSet set : trainSets) {
                 sb.append(set.modelName);
                 sb.append(",");
-            }
+            } 
             sb.append("}");
             list.add(TextFormatting.GRAY + sb.toString());
-        }
+        } 
     }
 
     private static ItemStack getItem(ResourceType<TrainConfig, ModelSetTrain> type) {
         if (type == RTMResource.TRAIN_DC)
-            return new ItemStack(RTMItem.itemtrain, 1, 0);
+            return new ItemStack(RTMItem.itemtrain, 1, 0); 
         if (type == RTMResource.TRAIN_EC)
-            return new ItemStack(RTMItem.itemtrain, 1, 1);
+            return new ItemStack(RTMItem.itemtrain, 1, 1); 
         if (type == RTMResource.TRAIN_CC)
-            return new ItemStack(RTMItem.itemtrain, 1, 2);
+            return new ItemStack(RTMItem.itemtrain, 1, 2); 
         if (type == RTMResource.TRAIN_TC)
-            return new ItemStack(RTMItem.itemtrain, 1, 3);
+            return new ItemStack(RTMItem.itemtrain, 1, 3); 
         if (type == RTMResource.TRAIN_TEST)
-            return new ItemStack(RTMItem.itemtrain, 1, 127);
+            return new ItemStack(RTMItem.itemtrain, 1, 127); 
         return new ItemStack(RTMItem.itemtrain, 1, 0);
     }
 
     public static ItemStack convertFormationAsItem(EntityTrainBase train) {
-        ItemStack stack = getItem((train.getResourceState()).type);
+        ItemStack stack = getItem((ResourceType<TrainConfig, ModelSetTrain>) (train.getResourceState()).type);
         NBTTagList tagList = new NBTTagList();
         for (FormationEntry entry : (train.getFormation()).entries) {
             if (entry != null) {
@@ -214,8 +214,8 @@ public final class ItemTrain extends ItemWithModel {
                 vec = vec.rotateAroundY(NGTMath.wrapAngle(-train.rotationYaw));
                 TrainSet set = new TrainSet(train2.getResourceState().getResourceName(), entry.entryId, (float)vec.getX(), (float)vec.getY(), (float)vec.getZ(), train2.rotationYaw - train.rotationYaw, train2.rotationPitch - train.rotationPitch);
                 tagList.appendTag((NBTBase)set.writeToNBT());
-            }
-        }
+            } 
+        } 
         NBTTagCompound nbt = new NBTTagCompound();
         nbt.setTag("formations", (NBTBase)tagList);
         stack.setTagCompound(nbt);
@@ -227,8 +227,8 @@ public final class ItemTrain extends ItemWithModel {
         if (stack.hasTagCompound()) {
             NBTTagList tagList = stack.getTagCompound().getTagList("formations", 10);
             for (int i = 0; i < tagList.tagCount(); i++)
-                list.add(TrainSet.readFromNBT(tagList.getCompoundTagAt(i)));
-        }
+                list.add(TrainSet.readFromNBT(tagList.getCompoundTagAt(i))); 
+        } 
         return list;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemVehicle.java b/src/api/rtm/jp/ngt/rtm/item/ItemVehicle.java
index 228e238..5f5951e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemVehicle.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemVehicle.java
@@ -40,11 +40,11 @@ public class ItemVehicle extends ItemWithModel {
                 int z = mop.getBlockPos().getZ();
                 if (world.getBlockState(mop.getBlockPos()).getMaterial().isLiquid()) {
                     if (!world.isRemote)
-                        setVehicle(itemStack, world, player, new EntityShip(world), x, y, z);
+                        setVehicle(itemStack, world, player, new EntityShip(world), x, y, z); 
                     return holder.success();
-                }
-            }
-        }
+                } 
+            } 
+        } 
         return super.onItemRightClick(holder);
     }
 
@@ -54,7 +54,7 @@ public class ItemVehicle extends ItemWithModel {
         BlockPos pos = holder.getBlockPos();
         EntityPlayer player = holder.getPlayer();
         if (holder.getFacing() != EnumFacing.UP)
-            return holder.success();
+            return holder.success(); 
         if (!world.isRemote) {
             EntityVehicle vehicle = null;
             switch (itemStack.getItemDamage()) {
@@ -64,14 +64,14 @@ public class ItemVehicle extends ItemWithModel {
                 case 2:
                     vehicle = new EntityPlane(world);
                     break;
-            }
+            } 
             if (vehicle != null) {
                 int x = pos.getX();
                 int y = pos.getY();
                 int z = pos.getZ();
                 setVehicle(itemStack, world, player, vehicle, x, y, z);
-            }
-        }
+            } 
+        } 
         return holder.success();
     }
 
@@ -82,9 +82,9 @@ public class ItemVehicle extends ItemWithModel {
             world.spawnEntity((Entity)vehicle);
             vehicle.getResourceState().readFromNBT(getModelState(itemStack).writeToNBT());
             vehicle.updateResourceState();
-        }
+        } 
         if (!player.capabilities.isCreativeMode)
-            itemStack.shrink(1);
+            itemStack.shrink(1); 
     }
 
     public String getTranslationKey(ItemStack par1) {
@@ -94,7 +94,7 @@ public class ItemVehicle extends ItemWithModel {
     @SideOnly(Side.CLIENT)
     public void getSubItems(CreativeTabs tab, NonNullList<ItemStack> list) {
         if (!isInCreativeTab(tab))
-            return;
+            return; 
         list.add(new ItemStack((Item)this, 1, 0));
         list.add(new ItemStack((Item)this, 1, 1));
         list.add(new ItemStack((Item)this, 1, 2));
@@ -108,7 +108,7 @@ public class ItemVehicle extends ItemWithModel {
                 return RTMResource.VEHICLE_SHIP;
             case 2:
                 return RTMResource.VEHICLE_PLANE;
-        }
+        } 
         return RTMResource.VEHICLE_CAR;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemWithModel.java b/src/api/rtm/jp/ngt/rtm/item/ItemWithModel.java
index fcd837d..5aa3d59 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemWithModel.java
+++ b/src/api/rtm/jp/ngt/rtm/item/ItemWithModel.java
@@ -19,7 +19,7 @@ import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.ActionResult;
 import net.minecraft.util.text.TextFormatting;
 
-public abstract class ItemWithModel<T extends ResourceSet> extends ItemCustom implements IResourceSelector {
+public abstract class ItemWithModel<T extends ResourceSet<?>> extends ItemCustom implements IResourceSelector<T> {
     private ItemStack selectedItem;
 
     private EntityPlayer selectedPlayer;
@@ -36,7 +36,7 @@ public abstract class ItemWithModel<T extends ResourceSet> extends ItemCustom im
                 holder.getPlayer().openGui(RTMCore.instance, getGuiId(holder.getItemStack()), holder.getWorld(), 0, -1, 0);
             } else {
                 NGTLog.debug("No Type");
-            }
+            }  
         return holder.success();
     }
 
@@ -46,8 +46,8 @@ public abstract class ItemWithModel<T extends ResourceSet> extends ItemCustom im
         if (ModelPackManager.INSTANCE.modelLoaded) {
             ResourceState<T> state = getModelState(holder.getItemStack());
             if (state != null)
-                list.add(TextFormatting.GRAY + state.getResourceName());
-        }
+                list.add(TextFormatting.GRAY + state.getResourceName()); 
+        } 
     }
 
     protected abstract ResourceType getModelType(ItemStack paramItemStack);
@@ -63,9 +63,9 @@ public abstract class ItemWithModel<T extends ResourceSet> extends ItemCustom im
                 NBTTagCompound nbt = new NBTTagCompound();
                 nbt.setTag("State", (NBTBase)state.writeToNBT());
                 itemStack.setTagCompound(nbt);
-            }
+            } 
             return state;
-        }
+        } 
         return null;
     }
 
@@ -73,10 +73,10 @@ public abstract class ItemWithModel<T extends ResourceSet> extends ItemCustom im
 
     public void setModelState(ItemStack itemStack, ResourceState<T> state) {
         if (!itemStack.hasTagCompound())
-            itemStack.setTagCompound(new NBTTagCompound());
+            itemStack.setTagCompound(new NBTTagCompound()); 
         itemStack.getTagCompound().setTag("State", (NBTBase)state.writeToNBT());
         if (this.selectedPlayer != null)
-            PacketNBT.sendToServer(this.selectedPlayer, this.selectedItem);
+            PacketNBT.sendToServer(this.selectedPlayer, this.selectedItem); 
     }
 
     public ResourceState<T> getResourceState() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/PaintProperty.java b/src/api/rtm/jp/ngt/rtm/item/PaintProperty.java
index cb4912f..ccc17d5 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/PaintProperty.java
+++ b/src/api/rtm/jp/ngt/rtm/item/PaintProperty.java
@@ -31,7 +31,7 @@ public class PaintProperty {
 
     public static PaintProperty getProperty(ItemStack stack) {
         if (stack.hasTagCompound() && stack.getTagCompound().hasKey("PaintProp"))
-            return readFromNBT(stack.getTagCompound().getCompoundTag("PaintProp"));
+            return readFromNBT(stack.getTagCompound().getCompoundTag("PaintProp")); 
         return new PaintProperty();
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/RazerBullet.java b/src/api/rtm/jp/ngt/rtm/item/RazerBullet.java
index cedf0d3..f392488 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/RazerBullet.java
+++ b/src/api/rtm/jp/ngt/rtm/item/RazerBullet.java
@@ -66,8 +66,8 @@ public class RazerBullet implements TickProcessEntry {
             deleteBlocks(this.shooter.getEntityWorld());
             deleteEntities(this.shooter.getEntityWorld());
             if (this.posY < 0.0D || this.posY > 256.0D)
-                return true;
-        }
+                return true; 
+        } 
         return true;
     }
 
@@ -88,11 +88,11 @@ public class RazerBullet implements TickProcessEntry {
                                 BlockUtil.setBlock(world, pos, Blocks.MAGMA, 0, 3);
                             } else {
                                 BlockUtil.setBlock(world, pos, Blocks.AIR, 0, 3);
-                            }
-                    }
-                }
-            }
-        }
+                            }  
+                    } 
+                } 
+            } 
+        } 
     }
 
     protected void deleteEntities(World world) {
@@ -100,7 +100,7 @@ public class RazerBullet implements TickProcessEntry {
         double rng2 = 16.0D;
         for (Entity entity : list) {
             if (entity.getDistanceSq(this.posX, this.posY, this.posZ) <= rng2)
-                entity.attackEntityFrom(DamageSource.MAGIC, 10000.0F);
-        }
+                entity.attackEntityFrom(DamageSource.MAGIC, 10000.0F); 
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/IResourceSelector.java b/src/api/rtm/jp/ngt/rtm/modelpack/IResourceSelector.java
index 20f1cf6..60e76a4 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/IResourceSelector.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/IResourceSelector.java
@@ -4,7 +4,7 @@ import jp.ngt.rtm.modelpack.state.ResourceState;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public interface IResourceSelector<T extends jp.ngt.rtm.modelpack.modelset.ResourceSet> {
+public interface IResourceSelector<T extends jp.ngt.rtm.modelpack.modelset.ResourceSet<?>> {
     ResourceState<T> getResourceState();
 
     void updateResourceState();
@@ -12,5 +12,5 @@ public interface IResourceSelector<T extends jp.ngt.rtm.modelpack.modelset.Resou
     int[] getSelectorPos();
 
     @SideOnly(Side.CLIENT)
-    boolean closeGui(ResourceState paramResourceState);
+    boolean closeGui(ResourceState<T> paramResourceState);
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ModelPackManager.java b/src/api/rtm/jp/ngt/rtm/modelpack/ModelPackManager.java
index 5bb1855..8344f3c 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ModelPackManager.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/ModelPackManager.java
@@ -95,11 +95,11 @@ public final class ModelPackManager {
         int count = 0;
         for (File file : fileList) {
             if (!file.getName().contains("_"))
-                continue;
+                continue; 
             String typeName = file.getName().split("_")[0];
             par1.setBarValue(1, count + 1, file.getName());
             if (!this.typeMap.containsKey(typeName))
-                continue;
+                continue; 
             ResourceType type = this.typeMap.get(typeName);
             try {
                 registerResourceSet(type, file);
@@ -107,13 +107,13 @@ public final class ModelPackManager {
                 throw e;
             } catch (Throwable e) {
                 throw new ModelPackException("Can't load model", file.getAbsolutePath(), e);
-            }
+            } 
             count++;
-        }
+        } 
         NGTLog.debug("[ModelPack] Register %d json", new Object[] { Integer.valueOf(count) });
         par1.setBarValue(0, ProgressStateHolder.ProgressState.SEARCHING_RRS);
         par1.setBarMaxValue(1, 0, "Loading...");
-        List<File> fileList2 = NGTFileLoader.findFile(file ->
+        List<File> fileList2 = NGTFileLoader.findFile(file -> 
                 (file.getName().startsWith("rrs_") && file.getName().endsWith(".png")));
         par1.setBarValue(0, ProgressStateHolder.ProgressState.LOADING_RRS);
         par1.setBarMaxValue(1, fileList2.size(), "");
@@ -124,7 +124,7 @@ public final class ModelPackManager {
             par1.setBarValue(1, count, name);
             RRSConfig cfg = new RRSConfig(name);
             registerResourceSet(RTMResource.RRS, cfg, "dummy_str");
-        }
+        } 
         TimeTableManager.INSTANCE.load();
         par1.loadFinished = true;
         this.modelLoaded = true;
@@ -142,7 +142,7 @@ public final class ModelPackManager {
             this.smpModelSetMap.put(type, new HashMap<>());
             ResourceSet dummy = getNewModelSet(type, new Class[0], new Object[0]);
             this.dummyMap.put(type.name, dummy);
-        }
+        } 
     }
 
     public ResourceType getType(String name) {
@@ -157,8 +157,8 @@ public final class ModelPackManager {
                 return registerResourceSet(type, cfg, json);
             } catch (IOException e) {
                 e.printStackTrace();
-            }
-        }
+            } 
+        } 
         throw new ModelPackException("Can't load model", file.getAbsolutePath());
     }
 
@@ -171,7 +171,7 @@ public final class ModelPackManager {
             this.unconstructSets.add(set);
             set.md5 = EncryptedModel.getMD5(EncryptedModel.formatJson(origJson));
             return cfg.getName();
-        }
+        } 
         throw new ModelPackException("Failed to create ResourceSet", cfg.getName());
     }
 
@@ -183,23 +183,23 @@ public final class ModelPackManager {
                 RTMCore.NETWORK_WRAPPER.sendTo(new PacketModelSet(count, ((ResourceType)entry.getKey()).name, cfg.getName()), player);
                 NGTLog.debug("[RTM] Send model to client : " + cfg.getName());
                 count++;
-            }
-        }
+            } 
+        } 
     }
 
     public void addModelSetName(int count, String typeName, String name) {
         assert NGTUtil.isSMP() && !NGTUtil.isServer();
         if (count == 0)
             for (Map<String, ResourceSet> map : this.smpModelSetMap.values())
-                map.clear();
+                map.clear();  
         ResourceType type = this.typeMap.get(typeName);
         ResourceSet modelSet = (ResourceSet)((Map)this.allModelSetMap.get(type)).get(name);
         if (modelSet != null) {
             ((Map<String, ResourceSet>)this.smpModelSetMap.get(type)).put(name, modelSet);
             NGTLog.debug("[RTM] Add model to SMP map : " + name);
             if (modelSet instanceof ModelSetBase)
-                CollisionHelper.INSTANCE.syncCollisionObj(type, (ModelSetBase)modelSet);
-        }
+                CollisionHelper.INSTANCE.syncCollisionObj(type, (ModelSetBase)modelSet); 
+        } 
     }
 
     private ResourceSet getNewModelSet(ResourceType type, Class[] parameterTypes, Object... parameters) {
@@ -209,29 +209,29 @@ public final class ModelPackManager {
         } catch (ReflectiveOperationException e) {
             String name = "";
             if (parameters.length > 0)
-                name = ((ResourceConfig)parameters[0]).getName();
+                name = ((ResourceConfig)parameters[0]).getName(); 
             throw new ModelPackException("On construct ModelSet", name, e);
-        }
+        } 
     }
 
     public <T extends ResourceSet> T getResourceSet(ResourceType type, String name) {
         ResourceType parent = type;
         if (type.parent != null)
-            parent = type.parent;
+            parent = type.parent; 
         boolean isSMPClient = (NGTUtil.isSMP() && !NGTUtil.isServer());
         Map<ResourceType, Map<String, ResourceSet>> map = isSMPClient ? this.smpModelSetMap : this.allModelSetMap;
         ResourceSet resourceSet = (ResourceSet)((Map)map.get(parent)).get(name);
         if (resourceSet == null) {
             resourceSet = this.dummyMap.get(type.hasSubType ? type.subType : type.name);
             if (resourceSet == null)
-                throw new ModelPackException("Default model is not registered.", name);
-        }
+                throw new ModelPackException("Default model is not registered.", name); 
+        } 
         return (T)resourceSet;
     }
 
     public List<ResourceSet> getModelList(ResourceType type) {
         if (type.parent != null)
-            type = type.parent;
+            type = type.parent; 
         List<ResourceSet> list = new ArrayList<>();
         Map<ResourceType, Map<String, ResourceSet>> map = NGTUtil.isSMP() ? this.smpModelSetMap : this.allModelSetMap;
         list.addAll(((Map)map.get(type)).values());
@@ -241,30 +241,29 @@ public final class ModelPackManager {
 
     @SideOnly(Side.CLIENT)
     public IModelNGT loadModel(String modelName, int drawMode, boolean addModelMap, ModelConfig cfg, byte[] md5) {
-        PolygonModel polygonModel;
         if (addModelMap && this.modelCache.containsKey(modelName))
-            return this.modelCache.get(modelName);
+            return this.modelCache.get(modelName); 
         VecAccuracy accuracy = (cfg.accuracy == null || cfg.accuracy.equals(VecAccuracy.MEDIUM.toString())) ? VecAccuracy.MEDIUM : VecAccuracy.LOW;
         String resource = "models/" + modelName;
         IModelNGT model = null;
         try {
             if (FileType.CLASS.match(modelName)) {
-                MCModel mCModel = RTMClassModels.getModel(modelName);
+                model = RTMClassModels.getModel(modelName);
             } else if (FileType.NGTO.match(modelName)) {
-                NGTOModel nGTOModel = new NGTOModel((ResourceLocation)new ResourceLocationCustom("minecraft", resource), cfg.scale);
+                model = new NGTOModel((ResourceLocation)new ResourceLocationCustom("minecraft", resource), cfg.scale);
             } else if (FileType.NGTZ.match(modelName)) {
-                NGTZModel nGTZModel = new NGTZModel((ResourceLocation)new ResourceLocationCustom("minecraft", resource), cfg.scale);
+                model = new NGTZModel((ResourceLocation)new ResourceLocationCustom("minecraft", resource), cfg.scale);
             } else {
-                polygonModel = ModelLoader.loadModel(resource, accuracy, new Object[] { Integer.valueOf(drawMode), md5 });
-            }
+                model = ModelLoader.loadModel(resource, accuracy, new Object[] { Integer.valueOf(drawMode), md5 });
+            } 
         } catch (ModelFormatException e) {
             throw new ModelFormatException("Can't load model : " + modelName, e);
-        }
-        if (polygonModel == null)
-            throw new ModelPackException("Can't find model file", cfg.getName());
+        } 
+        if (model == null)
+            throw new ModelPackException("Can't find model file", cfg.getName()); 
         if (addModelMap)
-            this.modelCache.put(modelName, polygonModel);
-        return (IModelNGT)polygonModel;
+            this.modelCache.put(modelName, model);
+        return (IModelNGT)model;
     }
 
     public ResourceLocation getResource(String path) {
@@ -273,7 +272,7 @@ public final class ModelPackManager {
             String[] sa = path.split(":");
             domain = sa[0];
             path = sa[1];
-        }
+        } 
         return getResource(domain, path);
     }
 
@@ -284,7 +283,7 @@ public final class ModelPackManager {
             this.resourceCache.put(domain, map);
         } else if (map.containsKey(path)) {
             return map.get(path);
-        }
+        } 
         ResourceLocationCustom resourceLocationCustom = new ResourceLocationCustom(domain, path);
         map.put(path, resourceLocationCustom);
         return (ResourceLocation)resourceLocationCustom;
@@ -295,12 +294,12 @@ public final class ModelPackManager {
             return loadScript(fileName);
         } catch (IOException e) {
             throw new ModelPackException("Failed to load script", fileName, e);
-        }
+        } 
     }
 
     private String loadScript(String fileName) throws IOException {
         if (this.scriptCache.containsKey(fileName))
-            return this.scriptCache.get(fileName);
+            return this.scriptCache.get(fileName); 
         String rawScript = NGTText.append(NGTText.readText(getResource(fileName)), true);
         while (true) {
             Matcher matcher = SC_INCLUDE.matcher(rawScript);
@@ -309,9 +308,9 @@ public final class ModelPackManager {
                 String rep = loadScript(path);
                 rawScript = matcher.replaceFirst(rep);
                 continue;
-            }
+            } 
             break;
-        }
+        } 
         this.scriptCache.put(fileName, rawScript);
         return rawScript;
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/RTMResourceManager.java b/src/api/rtm/jp/ngt/rtm/modelpack/RTMResourceManager.java
index 3c913b9..fa9add4 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/RTMResourceManager.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/RTMResourceManager.java
@@ -41,9 +41,9 @@ public final class RTMResourceManager implements IResourceManager {
 
     public IResource getResource(ResourceLocation par1) throws IOException {
         if (this.domain == null)
-            throw new FileNotFoundException(par1.toString());
+            throw new FileNotFoundException(par1.toString()); 
         if (this.resourceCache.containsKey(par1))
-            return this.resourceCache.get(par1);
+            return this.resourceCache.get(par1); 
         String absPath = this.domain.getAbsolutePath();
         if (absPath.contains(par1.getNamespace())) {
             InputStream stream = null;
@@ -59,30 +59,30 @@ public final class RTMResourceManager implements IResourceManager {
                         if (!ze.isDirectory()) {
                             File fileInZip = new File(zipPath, ze.getName());
                             if (s.contains(fileInZip.getName()))
-                                stream = zip.getInputStream(ze);
-                        }
-                    }
+                                stream = zip.getInputStream(ze); 
+                        } 
+                    } 
                 } catch (IOException e) {
                     e.printStackTrace();
-                }
+                } 
             } else {
                 File resource = new File(this.domain, par1.getPath());
                 stream = new FileInputStream(resource);
-            }
+            } 
             if (stream != null) {
                 SimpleResource simpleResource = new SimpleResource("RTMCustom", par1, stream, null, this.serializer);
                 this.resourceCache.put(par1, simpleResource);
                 return (IResource)simpleResource;
-            }
-        }
+            } 
+        } 
         throw new ModelPackException("[RTMResourceManager] Can't get input stream", par1.getPath());
     }
 
     public List getAllResources(ResourceLocation par1) throws IOException {
-        List<?> list = Lists.newArrayList();
+        List list = Lists.newArrayList();
         list.add(getResource(par1));
         if (!list.isEmpty())
-            return list;
+            return list; 
         throw new FileNotFoundException(par1.toString());
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ResourceType.java b/src/api/rtm/jp/ngt/rtm/modelpack/ResourceType.java
index e02115f..0c0728d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ResourceType.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/ResourceType.java
@@ -3,7 +3,7 @@ package jp.ngt.rtm.modelpack;
 import jp.ngt.rtm.modelpack.cfg.ResourceConfig;
 import jp.ngt.rtm.modelpack.modelset.ResourceSet;
 
-public class ResourceType<C extends ResourceConfig, S extends ResourceSet> implements Cloneable, Comparable<ResourceType> {
+public class ResourceType<C extends ResourceConfig, S extends ResourceSet<C>> implements Cloneable, Comparable<ResourceType<C, S>> {
     public final String name;
 
     public final Class<C> cfgClass;
@@ -30,10 +30,12 @@ public class ResourceType<C extends ResourceConfig, S extends ResourceSet> imple
 
     public ResourceType<C, S> setDefault(String s) {
         this.defaultName = s;
+        return this;
     }
 
     public ResourceType<C, S> setCustomLoading(boolean par1) {
         this.useCustomLoading = par1;
+        return this;
     }
 
     public ResourceType<C, S> getSubType(String s) {
@@ -49,7 +51,7 @@ public class ResourceType<C extends ResourceConfig, S extends ResourceSet> imple
             copy = (ResourceType<C, S>)super.clone();
         } catch (Exception e) {
             e.printStackTrace();
-        }
+        } 
         return copy;
     }
 
@@ -59,9 +61,9 @@ public class ResourceType<C extends ResourceConfig, S extends ResourceSet> imple
 
     public boolean equals(Object obj) {
         if (this == obj)
-            return true;
+            return true; 
         if (obj instanceof ResourceType)
-            ((ResourceType)obj).name.equals(this.name);
+            ((ResourceType)obj).name.equals(this.name); 
         return false;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ScriptExecuter.java b/src/api/rtm/jp/ngt/rtm/modelpack/ScriptExecuter.java
index 23a127e..ad6b192 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ScriptExecuter.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/ScriptExecuter.java
@@ -22,10 +22,10 @@ public class ScriptExecuter implements ICommandSender {
 
     public long count;
 
-    protected Object callMethod(IResourceSelector<ModelSetBase> selector, String name, Object... args) {
+    protected Object callMethod(IResourceSelector<ModelSetBase<?>> selector, String name, Object... args) {
         ModelSetBase set = selector.getResourceState().getResourceSet();
         if (set.serverSE != null)
-            return ScriptUtil.doScriptIgnoreError(set.serverSE, name, args);
+            return ScriptUtil.doScriptIgnoreError(set.serverSE, name, args); 
         return null;
     }
 
@@ -43,8 +43,8 @@ public class ScriptExecuter implements ICommandSender {
                 icommandmanager.executeCommand(this, command);
             } catch (Throwable throwable) {
                 throwable.printStackTrace();
-            }
-        }
+            } 
+        } 
     }
 
     public void fireBullet(World world, Entity shooter, String type, double posX, double posY, double posZ, double speedX, double speedY, double speedZ) {
@@ -70,25 +70,25 @@ public class ScriptExecuter implements ICommandSender {
 
     public Vec3d getPositionVector() {
         if (this.caller instanceof Entity)
-            return ((Entity)this.caller).getPositionVector();
+            return ((Entity)this.caller).getPositionVector(); 
         if (this.caller instanceof TileEntity) {
             BlockPos pos = ((TileEntity)this.caller).getPos();
             return new Vec3d(pos.getX(), pos.getY(), pos.getZ());
-        }
+        } 
         return null;
     }
 
     public World getEntityWorld() {
         if (this.caller instanceof Entity)
-            return ((Entity)this.caller).getEntityWorld();
+            return ((Entity)this.caller).getEntityWorld(); 
         if (this.caller instanceof TileEntity)
-            return ((TileEntity)this.caller).getWorld();
+            return ((TileEntity)this.caller).getWorld(); 
         return null;
     }
 
     public Entity getCommandSenderEntity() {
         if (this.caller instanceof Entity)
-            return (Entity)this.caller;
+            return (Entity)this.caller; 
         return null;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/ConnectorConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/ConnectorConfig.java
index 5ad53bf..a0ccac8 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/ConnectorConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/ConnectorConfig.java
@@ -12,7 +12,7 @@ public class ConnectorConfig extends ModelConfig implements IConfigWithType {
     public void init() {
         super.init();
         if (this.wirePos == null)
-            this.wirePos = new float[] { 0.0F, 0.0F, 0.0F };
+            this.wirePos = new float[] { 0.0F, 0.0F, 0.0F }; 
     }
 
     public String getName() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/ContainerConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/ContainerConfig.java
index 96ade8a..cba2f58 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/ContainerConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/ContainerConfig.java
@@ -20,17 +20,17 @@ public class ContainerConfig extends ModelConfig {
     public void init() {
         super.init();
         if (this.model == null) {
-            this.model = new ModelConfig.ModelSource(this);
+            this.model = new ModelConfig.ModelSource();
             this.model.modelFile = this.containerModel;
             this.model.textures = new String[][] { { "default", this.containerTexture } };
             this.model.rendererPath = null;
-        }
+        } 
         if (this.containerWidth <= 0.0F)
-            this.containerWidth = 1.0F;
+            this.containerWidth = 1.0F; 
         if (this.containerHeight <= 0.0F)
-            this.containerHeight = 1.0F;
+            this.containerHeight = 1.0F; 
         if (this.containerLength <= 0.0F)
-            this.containerLength = 1.0F;
+            this.containerLength = 1.0F; 
     }
 
     public String getName() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/FirearmConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/FirearmConfig.java
index bb9bc77..4d28467 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/FirearmConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/FirearmConfig.java
@@ -46,36 +46,36 @@ public class FirearmConfig extends ModelConfig {
     public void init() {
         super.init();
         if (this.model == null) {
-            this.model = new ModelConfig.ModelSource(this);
+            this.model = new ModelConfig.ModelSource();
             this.model.modelFile = this.firearmModel;
             this.model.textures = new String[][] { { "default", this.firearmTexture } };
             this.model.rendererPath = null;
             this.useOldSystem = true;
-        }
+        } 
         if (this.modelPartsN == null)
-            this.modelPartsN = new ModelConfig.Parts(this);
+            this.modelPartsN = new ModelConfig.Parts();
         if (this.modelPartsY == null)
-            this.modelPartsY = new ModelConfig.Parts(this);
+            this.modelPartsY = new ModelConfig.Parts();
         if (this.modelPartsX == null)
-            this.modelPartsX = new ModelConfig.Parts(this);
+            this.modelPartsX = new ModelConfig.Parts();
         if (this.modelPartsBarrel == null)
-            this.modelPartsBarrel = new ModelConfig.Parts(this);
+            this.modelPartsBarrel = new ModelConfig.Parts();
         this.modelPartsN.initParts();
         this.modelPartsY.initParts();
         this.modelPartsX.initParts();
         this.modelPartsBarrel.initParts();
         if (this.muzzlePos == null || this.muzzlePos.length != 3)
-            this.muzzlePos = new float[] { 0.0F, 0.0F, 5.0F };
+            this.muzzlePos = new float[] { 0.0F, 0.0F, 5.0F }; 
         if (this.playerPos == null || this.playerPos.length != 3)
-            this.playerPos = new float[] { 0.0F, 2.0F, -1.0F };
+            this.playerPos = new float[] { 0.0F, 2.0F, -1.0F }; 
         if (this.yaw == null || this.yaw.length != 2)
-            this.yaw = new float[] { 0.0F, 0.0F };
+            this.yaw = new float[] { 0.0F, 0.0F }; 
         if (this.pitch == null || this.pitch.length != 2)
-            this.pitch = new float[] { 0.0F, 0.0F };
+            this.pitch = new float[] { 0.0F, 0.0F }; 
         if (this.rateOfFire < 0)
-            this.rateOfFire = 20;
+            this.rateOfFire = 20; 
         if (this.magazineSize < 0)
-            this.magazineSize = 1;
+            this.magazineSize = 1; 
     }
 
     public String getName() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/FlagConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/FlagConfig.java
index 7122eb7..7a63a62 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/FlagConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/FlagConfig.java
@@ -10,10 +10,10 @@ public class FlagConfig extends TextureConfig {
     public void init() {
         super.init();
         if (this.resolutionU <= 0)
-            this.resolutionU = 24;
+            this.resolutionU = 24; 
         if (this.resolutionV <= 0)
-            this.resolutionV = 16;
+            this.resolutionV = 16; 
         if (this.poleLength <= 0.0F)
-            this.poleLength = 1.0F;
+            this.poleLength = 1.0F; 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/MachineConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/MachineConfig.java
index 88d3e39..ea26b4d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/MachineConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/MachineConfig.java
@@ -22,7 +22,7 @@ public class MachineConfig extends ModelConfig implements IConfigWithType {
         this.sound_OnActivate = fixSoundPath(this.sound_OnActivate);
         this.sound_Running = fixSoundPath(this.sound_Running);
         if (this.brightness == null || this.brightness.length < 2)
-            this.brightness = new int[] { 0, 0 };
+            this.brightness = new int[] { 0, 0 }; 
     }
 
     public String getName() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/ModelConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/ModelConfig.java
index 1c14247..8f9edb8 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/ModelConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/ModelConfig.java
@@ -25,13 +25,13 @@ public abstract class ModelConfig extends ResourceConfig {
 
     public void init() {
         if (this.tags == null)
-            this.tags = "";
+            this.tags = ""; 
         if (this.scale <= 0.0F)
-            this.scale = 1.0F;
+            this.scale = 1.0F; 
         if (this.offset == null || this.offset.length != 3)
-            this.offset = new float[3];
+            this.offset = new float[3]; 
         if (this.renderAABB == null || this.renderAABB.length != 6)
-            this.renderAABB = new float[] { 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F };
+            this.renderAABB = new float[] { 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F }; 
     }
 
     public class Parts {
@@ -41,9 +41,9 @@ public abstract class ModelConfig extends ResourceConfig {
 
         public void initParts() {
             if (this.objects == null)
-                this.objects = new String[0];
+                this.objects = new String[0]; 
             if (this.pos == null || this.pos.length != 3)
-                this.pos = new float[3];
+                this.pos = new float[3]; 
         }
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/NPCConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/NPCConfig.java
index f642be6..0a45a6c 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/NPCConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/NPCConfig.java
@@ -20,11 +20,11 @@ public class NPCConfig extends ModelConfig {
     public void init() {
         super.init();
         if (this.health <= 0.0F)
-            this.health = 40.0F;
+            this.health = 40.0F; 
         if (this.speed <= 0.0F)
-            this.speed = 0.45F;
+            this.speed = 0.45F; 
         if (this.damage <= 0.0F)
-            this.damage = 1.0F;
+            this.damage = 1.0F; 
     }
 
     public String getName() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/OrnamentConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/OrnamentConfig.java
index c8a5662..4dbfa00 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/OrnamentConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/OrnamentConfig.java
@@ -14,7 +14,7 @@ public class OrnamentConfig extends ModelConfig implements IConfigWithType {
     public void init() {
         super.init();
         if (this.minRandomScale <= 0.0F)
-            this.minRandomScale = 1.0F;
+            this.minRandomScale = 1.0F; 
     }
 
     public String getName() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/RRSConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/RRSConfig.java
index 74c1a15..f195fee 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/RRSConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/RRSConfig.java
@@ -13,7 +13,7 @@ public class RRSConfig extends TextureConfig {
 
     public static String fixName(String par1) {
         if (!par1.contains("textures"))
-            return "textures/rrs/" + par1;
+            return "textures/rrs/" + par1; 
         return par1;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/RailConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/RailConfig.java
index 243247c..07ad97f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/RailConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/RailConfig.java
@@ -20,16 +20,16 @@ public class RailConfig extends ModelConfig {
     public void init() {
         super.init();
         if (this.model == null) {
-            this.model = new ModelConfig.ModelSource(this);
+            this.model = new ModelConfig.ModelSource();
             this.model.modelFile = this.railModel;
             this.model.textures = new String[][] { { "default", this.railTexture } };
             this.model.rendererPath = null;
-        }
+        } 
         if (this.ballastWidth <= 0) {
             this.ballastWidth = 3;
         } else if ((this.ballastWidth & 0x1) == 0) {
             this.ballastWidth++;
-        }
+        } 
     }
 
     public String getName() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/ResourceConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/ResourceConfig.java
index dc0c0d9..a7c7ba7 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/ResourceConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/ResourceConfig.java
@@ -26,15 +26,15 @@ public abstract class ResourceConfig {
                 dmiv.type = array[i][1];
                 dmiv.value = array[i][2];
                 this.defaultValues[i] = dmiv;
-            }
-        }
+            } 
+        } 
     }
 
     protected String fixSoundPath(String path) {
         if (path == null || path.length() == 0)
-            return null;
+            return null; 
         if (!path.contains(":"))
-            return "rtm:" + path;
+            return "rtm:" + path; 
         return path;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/SignalConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/SignalConfig.java
index a70f8b0..853af19 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/SignalConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/SignalConfig.java
@@ -32,14 +32,14 @@ public class SignalConfig extends ModelConfig {
     public void init() {
         super.init();
         if (this.model == null) {
-            this.model = new ModelConfig.ModelSource(this);
+            this.model = new ModelConfig.ModelSource();
             this.model.modelFile = this.signalModel;
             this.model.textures = new String[][] { { "default", this.signalTexture, "Light", this.lightTexture } };
-        }
+        } 
         if (this.modelPartsFixture == null)
-            this.modelPartsFixture = new ModelConfig.Parts(this);
+            this.modelPartsFixture = new ModelConfig.Parts();
         if (this.modelPartsBody == null)
-            this.modelPartsBody = new ModelConfig.Parts(this);
+            this.modelPartsBody = new ModelConfig.Parts();
         this.modelPartsFixture.initParts();
         this.modelPartsBody.initParts();
         if (this.maxSignalLevel == 0 && this.lights != null) {
@@ -47,10 +47,10 @@ public class SignalConfig extends ModelConfig {
             ModelSetSignal.LightParts[] parts = ModelSetSignal.parseLightParts(this.lights);
             for (ModelSetSignal.LightParts light : parts) {
                 if (light.signalLevel > i)
-                    i = light.signalLevel;
-            }
+                    i = light.signalLevel; 
+            } 
             this.maxSignalLevel = i;
-        }
+        } 
     }
 
     public String getName() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/SignboardConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/SignboardConfig.java
index a440fe9..3e0851a 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/SignboardConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/SignboardConfig.java
@@ -15,16 +15,16 @@ public class SignboardConfig extends TextureConfig {
         super.init();
         this.texture = fixName(this.texture);
         if (this.frame <= 0)
-            this.frame = 1;
+            this.frame = 1; 
         if (this.animationCycle <= 0)
-            this.animationCycle = 1;
+            this.animationCycle = 1; 
         if (this.color < 0)
-            this.color = 1052688;
+            this.color = 1052688; 
     }
 
     public static String fixName(String par1) {
         if (!par1.contains("textures"))
-            return "textures/signboard/" + par1 + ".png";
+            return "textures/signboard/" + par1 + ".png"; 
         return par1;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/TrainConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/TrainConfig.java
index d75c2a4..8ced490 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/TrainConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/TrainConfig.java
@@ -55,38 +55,38 @@ public class TrainConfig extends VehicleBaseConfig implements IConfigWithType {
     public void init() {
         super.init();
         if (this.trainModel2 == null) {
-            this.trainModel2 = new ModelConfig.ModelSource(this);
+            this.trainModel2 = new ModelConfig.ModelSource();
             this.trainModel2.modelFile = this.trainModel;
             this.trainModel2.textures = new String[][] { { "default", this.trainTexture } };
-        }
+        } 
         if (this.bogieModel3 == null) {
             this.bogieModel3 = new ModelConfig.ModelSource[2];
             if (this.bogieModel2 != null) {
                 this.bogieModel3[1] = this.bogieModel2;
                 this.bogieModel3[0] = this.bogieModel2;
             } else {
-                ModelConfig.ModelSource model = new ModelConfig.ModelSource(this);
+                ModelConfig.ModelSource model = new ModelConfig.ModelSource();
                 model.modelFile = this.bogieModel;
                 model.textures = new String[][] { { "default", this.bogieTexture } };
                 this.bogieModel3[1] = model;
                 this.bogieModel3[0] = model;
-            }
-        }
+            } 
+        } 
         this.sound_BrakeRelease = fixSoundPath(this.sound_BrakeRelease);
         this.sound_BrakeRelease2 = fixSoundPath(this.sound_BrakeRelease2);
         if (this.bogiePos == null)
-            this.bogiePos = new float[][] { { 0.0F, 0.0F, 7.125F }, { 0.0F, 0.0F, -7.125F } };
+            this.bogiePos = new float[][] { { 0.0F, 0.0F, 7.125F }, { 0.0F, 0.0F, -7.125F } }; 
         if (this.trainDistance <= 0.0F)
-            this.trainDistance = 10.125F;
+            this.trainDistance = 10.125F; 
         if (this.accelerateion <= 0.0F)
-            this.accelerateion = 0.001736F;
+            this.accelerateion = 0.001736F; 
         if (this.maxSpeed == null || this.maxSpeed.length < 5)
-            this.maxSpeed = new float[] { 0.36F, 0.72F, 1.08F, 1.44F, 1.8F };
+            this.maxSpeed = new float[] { 0.36F, 0.72F, 1.08F, 1.44F, 1.8F }; 
         this.rolling *= 5.0F;
         if (this.jointDelay == null) {
             float f0 = 1.9F;
             this.jointDelay = new float[][] { { 0.0F, f0 }, { 0.0F, f0 } };
-        }
+        } 
     }
 
     public String getName() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/VehicleBaseConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/VehicleBaseConfig.java
index d43d25a..683b409 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/VehicleBaseConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/VehicleBaseConfig.java
@@ -63,7 +63,7 @@ public abstract class VehicleBaseConfig extends ModelConfig {
     public void init() {
         super.init();
         if (this.size == null)
-            this.size = new float[] { 2.75F, 1.25F };
+            this.size = new float[] { 2.75F, 1.25F }; 
         this.sound_Stop = fixSoundPath(this.sound_Stop);
         this.sound_S_A = fixSoundPath(this.sound_S_A);
         this.sound_Acceleration = fixSoundPath(this.sound_Acceleration);
@@ -74,7 +74,7 @@ public abstract class VehicleBaseConfig extends ModelConfig {
         this.sound_DoorClose = fixSoundPath(this.sound_DoorClose);
         if (this.sound_Announcement != null)
             for (int i = 0; i < this.sound_Announcement.length; i++)
-                this.sound_Announcement[i][1] = fixSoundPath(this.sound_Announcement[i][1]);
+                this.sound_Announcement[i][1] = fixSoundPath(this.sound_Announcement[i][1]);  
         if (this.seatPosF == null)
             if (this.seatPos != null) {
                 this.seatPosF = new float[this.seatPos.length][];
@@ -88,18 +88,18 @@ public abstract class VehicleBaseConfig extends ModelConfig {
                     (new float[4])[2] = z;
                     (new float[4])[3] = type;
                     this.seatPosF[i] = new float[4];
-                }
+                } 
             } else {
                 this.seatPosF = new float[0][];
-            }
+            }  
         if (this.playerPos == null)
-            this.playerPos = new float[][] { { 0.8F, 0.0F, 9.187F }, { -0.8F, 0.0F, -9.187F } };
+            this.playerPos = new float[][] { { 0.8F, 0.0F, 9.187F }, { -0.8F, 0.0F, -9.187F } }; 
         if (this.wheelRotationSpeed <= 0.0F)
-            this.wheelRotationSpeed = 1.0F;
+            this.wheelRotationSpeed = 1.0F; 
         if (this.customButtons == null)
-            this.customButtons = new String[0][];
+            this.customButtons = new String[0][]; 
         if (this.customButtonTips == null)
-            this.customButtonTips = new String[this.customButtons.length];
+            this.customButtonTips = new String[this.customButtons.length]; 
     }
 
     public abstract ModelConfig.ModelSource getModel();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/VehicleConfig.java b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/VehicleConfig.java
index 0adb604..7c04a06 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/VehicleConfig.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/cfg/VehicleConfig.java
@@ -30,9 +30,9 @@ public class VehicleConfig extends VehicleBaseConfig implements IConfigWithType
     public void init() {
         super.init();
         if (this.playerPos == null || this.playerPos.length != 1)
-            this.playerPos = new float[][] { { 0.0F, 0.0F, 0.0F } };
+            this.playerPos = new float[][] { { 0.0F, 0.0F, 0.0F } }; 
         if (this.vibration == null)
-            this.vibration = new float[] { 0.0F, 0.0F };
+            this.vibration = new float[] { 0.0F, 0.0F }; 
     }
 
     public ModelConfig.ModelSource getModel() {
@@ -41,43 +41,43 @@ public class VehicleConfig extends VehicleBaseConfig implements IConfigWithType
 
     public float getFriction(boolean onGround) {
         if (this.friction == null)
-            return 0.9F;
+            return 0.9F; 
         return this.friction[onGround ? 0 : 1];
     }
 
     public float getAcceleration(boolean onGround) {
         if (this.acceleration == null)
-            return 0.0125F;
+            return 0.0125F; 
         return this.acceleration[onGround ? 0 : 1];
     }
 
     public float getMaxSpeed(boolean onGround) {
         if (this.maxSpeed == null)
-            return 0.8F;
+            return 0.8F; 
         return this.maxSpeed[onGround ? 0 : 1];
     }
 
     public float getMaxYaw(boolean onGround) {
         if (this.maxYaw == null)
-            return 15.0F;
+            return 15.0F; 
         return this.maxYaw[onGround ? 0 : 1];
     }
 
     public float getYawCoefficient(boolean onGround) {
         if (this.yawCoefficient == null)
-            return 4.5F;
+            return 4.5F; 
         return this.yawCoefficient[onGround ? 0 : 1];
     }
 
     public float getPitchCoefficient(boolean onGround) {
         if (this.pitchCoefficient == null)
-            return 2.5F;
+            return 2.5F; 
         return this.pitchCoefficient[onGround ? 0 : 1];
     }
 
     public float getRollCoefficient(boolean onGround) {
         if (this.rollCoefficient == null)
-            return 45.0F;
+            return 45.0F; 
         return this.rollCoefficient[onGround ? 0 : 1];
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/MPLAdButton.java b/src/api/rtm/jp/ngt/rtm/modelpack/init/MPLAdButton.java
index 7155768..161e171 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/MPLAdButton.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/init/MPLAdButton.java
@@ -60,7 +60,7 @@ public final class MPLAdButton extends JButton {
             loadImages(scale);
             changeImage(0);
             addActionListener(event -> onClick());
-        }
+        } 
     }
 
     private Advertisement[] getAds() {
@@ -72,13 +72,13 @@ public final class MPLAdButton extends JButton {
             e.printStackTrace();
         } catch (IOException e) {
             e.printStackTrace();
-        }
+        } 
         return null;
     }
 
     private void shuffleAds() {
         List<Advertisement> list = new ArrayList<>();
-        NGTUtil.addArray(list, (Object[])this.ads);
+        NGTUtil.addArray(list, this.ads);
         Collections.shuffle(list);
         this.ads = list.<Advertisement>toArray(new Advertisement[list.size()]);
     }
@@ -103,42 +103,42 @@ public final class MPLAdButton extends JButton {
                     SSLContext sslContext = SSLContext.getInstance("SSL");
                     sslContext.init(null, (TrustManager[])new X509TrustManager[] { x509mng }, new SecureRandom());
                     ((HttpsURLConnection)urlc).setSSLSocketFactory(sslContext.getSocketFactory());
-                }
+                } 
                 InputStream istream = urlc.getInputStream();
                 ImageInputStream stream = ImageIO.createImageInputStream(istream);
                 try {
                     bi = ImageIO.read(stream);
                     if (bi == null)
-                        stream.close();
+                        stream.close(); 
                 } finally {
                     istream.close();
-                }
+                } 
                 image = bi;
             } catch (IOException|java.security.KeyManagementException|java.security.NoSuchAlgorithmException e) {
                 e.printStackTrace();
                 image = new BufferedImage(1024, 576, 2);
                 NGTLog.debug("[ModelPack] Failed to load image : " + (this.ads[i]).picture);
-            }
+            } 
             Image img2 = image.getScaledInstance(400 * scale, 225 * scale, 2);
             this.images[i] = new ImageIcon(img2);
-        }
+        } 
     }
 
     public void changeImage(int move) {
         if (this.ads == null)
-            return;
+            return; 
         this.index += move;
         if (this.index < 0) {
             this.index += this.ads.length;
         } else if (this.index >= this.ads.length) {
             this.index -= this.ads.length;
-        }
+        } 
         setIcon(this.images[this.index]);
     }
 
     private void onClick() {
         if (this.ads == null)
-            return;
+            return; 
         try {
             URI uri = new URI((this.ads[this.index]).url);
             Desktop.getDesktop().browse(uri);
@@ -146,6 +146,6 @@ public final class MPLAdButton extends JButton {
             e.printStackTrace();
         } catch (IOException e) {
             e.printStackTrace();
-        }
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/ModelPackConstructThread.java b/src/api/rtm/jp/ngt/rtm/modelpack/init/ModelPackConstructThread.java
index 74c1438..222cc31 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/ModelPackConstructThread.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/init/ModelPackConstructThread.java
@@ -36,8 +36,8 @@ public final class ModelPackConstructThread extends Thread {
                 NGTUtilClient.getMinecraft().displayCrashReport(crashReport);
             } else {
                 e.printStackTrace();
-            }
-        }
+            } 
+        } 
     }
 
     private void runThread() throws InterruptedException {
@@ -49,8 +49,8 @@ public final class ModelPackConstructThread extends Thread {
                 } else {
                     set.constructOnClient();
                     set.finishConstruct();
-                }
-                NGTLog.debug("Construct Model : %s (%d / %d)", new Object[] { set.getConfig().getName(),
+                } 
+                NGTLog.debug("Construct Model : %s (%d / %d)", new Object[] { set.getConfig().getName(), 
                             Integer.valueOf(this.index + 1), Integer.valueOf(ModelPackManager.INSTANCE.unconstructSets.size()) });
                 this.index++;
                 if (this.parent.loadFinished) {
@@ -59,12 +59,12 @@ public final class ModelPackConstructThread extends Thread {
                         int size = ModelPackManager.INSTANCE.unconstructSets.size();
                         this.parent.setBarMaxValue(1, size, "");
                         this.barStateChanged = true;
-                    }
+                    } 
                     this.parent.setBarValue(1, this.index, set.getConfig().getName());
-                }
-            }
+                } 
+            } 
             sleep(500L);
-        }
+        } 
     }
 
     public boolean setFinish() {
@@ -73,7 +73,7 @@ public final class ModelPackConstructThread extends Thread {
             ModelPackManager.INSTANCE.clearCache();
             this.loading = false;
             return true;
-        }
+        } 
         return false;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/ModelPackDownloadThread.java b/src/api/rtm/jp/ngt/rtm/modelpack/init/ModelPackDownloadThread.java
index 51ea5aa..428e5ee 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/ModelPackDownloadThread.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/init/ModelPackDownloadThread.java
@@ -35,7 +35,7 @@ public class ModelPackDownloadThread extends Thread {
                     setState(2);
                     while (this.writingStatus == 2) {
                         sleep(50L);
-                    }
+                    } 
                     this.channel.close();
                 } catch (FileNotFoundException e) {
                     e.printStackTrace();
@@ -43,14 +43,14 @@ public class ModelPackDownloadThread extends Thread {
                     e.printStackTrace();
                 } catch (InterruptedException e) {
                     e.printStackTrace();
-                }
-            }
+                } 
+            } 
             try {
                 sleep(50L);
             } catch (InterruptedException e) {
                 e.printStackTrace();
-            }
-        }
+            } 
+        } 
         NGTLog.debug("[RTM](DownloadThread) Finish downloading ModelPack");
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/ModelPackLoadThread.java b/src/api/rtm/jp/ngt/rtm/modelpack/init/ModelPackLoadThread.java
index 7617124..7eac9ee 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/ModelPackLoadThread.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/init/ModelPackLoadThread.java
@@ -43,7 +43,7 @@ public final class ModelPackLoadThread extends Thread {
         this.threadSide = par1;
         this.displayWindow = (par1 == Side.CLIENT && !GraphicsEnvironment.isHeadless());
         if (this.displayWindow)
-            initWindow();
+            initWindow(); 
     }
 
     private void initWindow() {
@@ -77,7 +77,7 @@ public final class ModelPackLoadThread extends Thread {
 
     public void run() {
         if (this.displayWindow)
-            this.mainFrame.setVisible(true);
+            this.mainFrame.setVisible(true); 
         try {
             Thread winUpdate = new Thread() {
                     private int count;
@@ -89,14 +89,14 @@ public final class ModelPackLoadThread extends Thread {
                                 if (this.count >= 30) {
                                     ModelPackLoadThread.this.adButton.changeImage(1);
                                     this.count = 0;
-                                }
-                            }
+                                } 
+                            } 
                             try {
                                 sleep(150L);
                             } catch (InterruptedException e) {
                                 e.printStackTrace();
-                            }
-                        }
+                            } 
+                        } 
                     }
                 };
             winUpdate.start();
@@ -110,11 +110,11 @@ public final class ModelPackLoadThread extends Thread {
                 NGTUtilClient.getMinecraft().displayCrashReport(crashReport);
             } else {
                 e.printStackTrace();
-            }
+            } 
         } finally {
             if (this.displayWindow && !this.debug)
-                this.mainFrame.dispose();
-        }
+                this.mainFrame.dispose(); 
+        } 
     }
 
     private void runThread() throws InterruptedException {
@@ -124,17 +124,17 @@ public final class ModelPackLoadThread extends Thread {
             while (RTMCore.proxy.getConnectionState() == 0) {
                 RTMCore.NETWORK_WRAPPER.sendToServer((IMessage)new PacketNotice((byte)0, "getModelPack"));
                 sleep(500L);
-            }
+            } 
             while (!PacketModelPack.MP_WRITER.finish)
-                sleep(500L);
-        }
+                sleep(500L); 
+        } 
         setBarMaxValue(0, (ProgressStateHolder.ProgressState.values()).length, "");
         NGTLog.startTimer();
         ModelPackConstructThread thread2 = new ModelPackConstructThread(this.threadSide, this);
         thread2.start();
         ModelPackManager.INSTANCE.load(this);
         while (!thread2.setFinish())
-            sleep(500L);
+            sleep(500L); 
         finish();
         NGTLog.stopTimer("Model load time");
     }
@@ -145,16 +145,16 @@ public final class ModelPackLoadThread extends Thread {
 
     public void setBarMaxValue(int barId, int value, String label) {
         if (!this.displayWindow)
-            return;
+            return; 
         if (value > 0) {
             if (this.bars[barId].isIndeterminate())
-                this.bars[barId].setIndeterminate(false);
+                this.bars[barId].setIndeterminate(false); 
             this.maxValue[barId] = value;
         } else {
             this.bars[barId].setIndeterminate(true);
-        }
+        } 
         if (label != null && label.length() > 0)
-            this.labels[barId].setText(label);
+            this.labels[barId].setText(label); 
     }
 
     public void setBarValue(int barId, ProgressStateHolder.ProgressState state) {
@@ -163,13 +163,13 @@ public final class ModelPackLoadThread extends Thread {
 
     public void setBarValue(int barId, int value, String label) {
         if (!this.displayWindow)
-            return;
+            return; 
         int max = this.maxValue[barId];
         int i = (int)(value / max * 100.0F);
         this.bars[barId].setValue(i);
         this.bars[barId].setStringPainted(true);
         this.bars[barId].setString(String.format("%d/%d", new Object[] { Integer.valueOf(value), Integer.valueOf(max) }));
         if (label != null && label.length() > 0)
-            this.labels[barId].setText(label);
+            this.labels[barId].setText(label); 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/ModelPackUploadThread.java b/src/api/rtm/jp/ngt/rtm/modelpack/init/ModelPackUploadThread.java
index 2998049..7705431 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/ModelPackUploadThread.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/init/ModelPackUploadThread.java
@@ -20,7 +20,7 @@ public class ModelPackUploadThread extends Thread {
 
     public static void startThread() {
         if (!RTMCore.useServerModelPack)
-            return;
+            return; 
         ModelPackUploadThread thread = new ModelPackUploadThread();
         thread.start();
     }
@@ -39,14 +39,14 @@ public class ModelPackUploadThread extends Thread {
                     RTMCore.NETWORK_WRAPPER.sendToAll(new PacketModelPack(file.getName(), size, this.buffer));
                     this.buffer.clear();
                     sleep(100L);
-                }
+                } 
                 channel.close();
             } catch (IOException e) {
                 e.printStackTrace();
             } catch (InterruptedException e) {
                 e.printStackTrace();
-            }
-        }
+            } 
+        } 
         RTMCore.NETWORK_WRAPPER.sendToAll(new PacketModelPack("finish", 0L, ByteBuffer.allocate(512)));
         NGTLog.debug("[RTM](UploadThread) Finish uploading ModelPack");
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/ModelPackWriter.java b/src/api/rtm/jp/ngt/rtm/modelpack/init/ModelPackWriter.java
index 14dea7a..38b657e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/ModelPackWriter.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/init/ModelPackWriter.java
@@ -24,7 +24,7 @@ public class ModelPackWriter {
             this.finish = true;
         } else {
             writeModelPack(par1, par2, ByteBuffer.wrap(par3));
-        }
+        } 
     }
 
     public void writeModelPack(String par1, long par2, ByteBuffer par3) {
@@ -36,7 +36,7 @@ public class ModelPackWriter {
             e.printStackTrace();
         } catch (IOException e) {
             e.printStackTrace();
-        }
+        } 
     }
 
     public void deleteModelPack(String par1) {
@@ -45,7 +45,7 @@ public class ModelPackWriter {
         if (file.exists()) {
             file.delete();
             NGTLog.debug("[RTM](Client) Delete ModelPack : " + name);
-        }
+        } 
     }
 
     public synchronized void startWriting(String par1Name) {
@@ -54,7 +54,7 @@ public class ModelPackWriter {
                 NGTLog.debug("wait (start writing)");
                 wait();
             } catch (InterruptedException interruptedException) {}
-        }
+        } 
         NGTLog.debug("start writing");
         this.thread.writingStatus = 1;
         this.thread.fileName = "Temp_" + par1Name;
@@ -66,14 +66,14 @@ public class ModelPackWriter {
                 NGTLog.debug("wait (write bytes)");
                 wait();
             } catch (InterruptedException interruptedException) {}
-        }
+        } 
         ByteBuffer buffer = par3;
         buffer.position(0);
         try {
             this.thread.channel.write(buffer);
         } catch (IOException e) {
             e.printStackTrace();
-        }
+        } 
     }
 
     public synchronized void endWriting() {
@@ -82,7 +82,7 @@ public class ModelPackWriter {
                 NGTLog.debug("wait (end writing)");
                 wait();
             } catch (InterruptedException interruptedException) {}
-        }
+        } 
         NGTLog.debug("end writing");
         this.thread.writingStatus = 0;
     }
@@ -92,7 +92,7 @@ public class ModelPackWriter {
             try {
                 wait();
             } catch (InterruptedException interruptedException) {}
-        }
+        } 
         NGTLog.debug("finish writing");
         this.thread.writingStatus = 3;
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/model/RTMClassModels.java b/src/api/rtm/jp/ngt/rtm/modelpack/model/RTMClassModels.java
index 3d880a0..d7003bc 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/model/RTMClassModels.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/model/RTMClassModels.java
@@ -19,7 +19,7 @@ public class RTMClassModels {
 
     public static MCModel getModel(String key) {
         if (MODELS.isEmpty())
-            init();
+            init(); 
         return MODELS.get(key);
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetBase.java b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetBase.java
index 4ff6187..9959f3d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetBase.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetBase.java
@@ -40,25 +40,25 @@ public abstract class ModelSetBase<T extends ModelConfig> extends ResourceSet<T>
 
     public void constructOnServer() {
         if (((ModelConfig)this.cfg).serverScriptPath != null)
-            this.serverSE = ScriptUtil.doScript(ModelPackManager.INSTANCE.getScript(((ModelConfig)this.cfg).serverScriptPath));
+            this.serverSE = ScriptUtil.doScript(ModelPackManager.INSTANCE.getScript(((ModelConfig)this.cfg).serverScriptPath)); 
     }
 
     @SideOnly(Side.CLIENT)
     public void constructOnClient() {
         if (!isDummy()) {
             if (((ModelConfig)this.cfg).serverScriptPath != null)
-                this.serverSE = ScriptUtil.doScript(ModelPackManager.INSTANCE.getScript(((ModelConfig)this.cfg).serverScriptPath));
+                this.serverSE = ScriptUtil.doScript(ModelPackManager.INSTANCE.getScript(((ModelConfig)this.cfg).serverScriptPath)); 
             if (((ModelConfig)this.cfg).guiScriptPath != null) {
                 this.guiSE = ScriptUtil.doScript(ModelPackManager.INSTANCE.getScript(((ModelConfig)this.cfg).guiScriptPath));
                 this.guiTexture = ModelPackManager.INSTANCE.getResource(((ModelConfig)this.cfg).guiTexture);
-            }
-        }
+            } 
+        } 
     }
 
     @SideOnly(Side.CLIENT)
     public void finishConstruct() {
         if (this.modelObj != null)
-            this.collisionObj = new CollisionObj(this.modelObj.model, (ModelConfig)getConfig());
+            this.collisionObj = new CollisionObj(this.modelObj.model, (ModelConfig)getConfig()); 
     }
 
     public T getConfig() {
@@ -73,10 +73,10 @@ public abstract class ModelSetBase<T extends ModelConfig> extends ResourceSet<T>
     public void addColFace(String partsName, ColFace face, byte status) {
         if (!this.syncFinished) {
             if (this.collisionObj == null)
-                this.collisionObj = new CollisionObj();
+                this.collisionObj = new CollisionObj(); 
             this.collisionObj.addColFace(partsName, face, status);
             this.syncFinished = (status == 2);
-        }
+        } 
     }
 
     public CollisionObj getCollisionObj() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetConnector.java b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetConnector.java
index 8035999..c0fdd27 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetConnector.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetConnector.java
@@ -26,7 +26,7 @@ public class ModelSetConnector extends ModelSetBase<ConnectorConfig> {
             ConnectorConfig cfg = getConfig();
             this.modelObj = new ModelObject(cfg.model, this, null, new Object[0]);
             this.buttonTexture = ModelPackManager.INSTANCE.getResource(cfg.buttonTexture);
-        }
+        } 
     }
 
     public ConnectorConfig getDummyConfig() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetContainer.java b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetContainer.java
index c621acf..43a1c9a 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetContainer.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetContainer.java
@@ -24,7 +24,7 @@ public class ModelSetContainer extends ModelSetBase<ContainerConfig> {
             ContainerConfig cfg = getConfig();
             this.modelObj = new ModelObject(cfg.model, this, null, new Object[0]);
             this.buttonTexture = ModelPackManager.INSTANCE.getResource(cfg.buttonTexture);
-        }
+        } 
     }
 
     public ContainerConfig getDummyConfig() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetFirearm.java b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetFirearm.java
index 820d26a..338aa86 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetFirearm.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetFirearm.java
@@ -24,7 +24,7 @@ public class ModelSetFirearm extends ModelSetBase<FirearmConfig> {
             FirearmConfig cfg = getConfig();
             this.modelObj = new ModelObject(cfg.model, this, null, new Object[0]);
             this.buttonTexture = ModelPackManager.INSTANCE.getResource(cfg.buttonTexture);
-        }
+        } 
     }
 
     public FirearmConfig getDummyConfig() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetMachine.java b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetMachine.java
index f10188b..8b60165 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetMachine.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetMachine.java
@@ -24,7 +24,7 @@ public class ModelSetMachine extends ModelSetBase<MachineConfig> {
             MachineConfig cfg = getConfig();
             this.modelObj = new ModelObject(cfg.model, this, null, new Object[0]);
             this.buttonTexture = ModelPackManager.INSTANCE.getResource(cfg.buttonTexture);
-        }
+        } 
     }
 
     public MachineConfig getDummyConfig() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetNPC.java b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetNPC.java
index 1531b43..088d8a8 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetNPC.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetNPC.java
@@ -35,9 +35,9 @@ public class ModelSetNPC extends ModelSetBase<NPCConfig> {
         } else {
             NPCConfig cfg = getConfig();
             if (cfg.model != null)
-                this.modelObj = new ModelObject(cfg.model, this, null, new Object[0]);
+                this.modelObj = new ModelObject(cfg.model, this, null, new Object[0]); 
             this.buttonTexture = ModelPackManager.INSTANCE.getResource(cfg.buttonTexture);
-        }
+        } 
     }
 
     public NPCConfig getDummyConfig() {
@@ -47,7 +47,7 @@ public class ModelSetNPC extends ModelSetBase<NPCConfig> {
     @SideOnly(Side.CLIENT)
     public void renderModelInGui(Minecraft par1) {
         if (this.modelObj != null)
-            this.modelObj.render(null, getConfig(), 0, 0.0F);
+            this.modelObj.render(null, getConfig(), 0, 0.0F); 
     }
 
     public CollisionObj getCollisionObj() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetOrnament.java b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetOrnament.java
index 720efa0..32c6388 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetOrnament.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetOrnament.java
@@ -24,7 +24,7 @@ public class ModelSetOrnament extends ModelSetBase<OrnamentConfig> {
             OrnamentConfig cfg = getConfig();
             this.modelObj = new ModelObject(cfg.model, this, null, new Object[0]);
             this.buttonTexture = ModelPackManager.INSTANCE.getResource(cfg.buttonTexture);
-        }
+        } 
     }
 
     public OrnamentConfig getDummyConfig() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetRail.java b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetRail.java
index a40a7e9..941eeed 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetRail.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetRail.java
@@ -30,7 +30,7 @@ public class ModelSetRail extends ModelSetBase<RailConfig> {
             PartsRenderer renderer = !PartsRenderer.validPath(cfg.model.rendererPath) ? new BasicRailPartsRenderer() : null;
             this.modelObj = new ModelObject(cfg.model, this, renderer, new Object[0]);
             this.buttonTexture = ModelPackManager.INSTANCE.getResource(cfg.buttonTexture);
-        }
+        } 
     }
 
     public RailConfig getDummyConfig() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetSignal.java b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetSignal.java
index a5f2ebd..7210436 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetSignal.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetSignal.java
@@ -39,7 +39,7 @@ public class ModelSetSignal extends ModelSetBase<SignalConfig> {
             PartsRenderer renderer = !PartsRenderer.validPath(cfg.model.rendererPath) ? new BasicSignalPartsRenderer(cfg, new String[0]) : null;
             this.modelObj = new ModelObject(cfg.model, this, renderer, new Object[0]);
             this.buttonTexture = ModelPackManager.INSTANCE.getResource(cfg.buttonTexture);
-        }
+        } 
     }
 
     public SignalConfig getDummyConfig() {
@@ -63,7 +63,7 @@ public class ModelSetSignal extends ModelSetBase<SignalConfig> {
             String s2 = getMatchedString(par1[i], PARTS_PATTERN);
             String[] sa = s2.split(" ");
             list.add(new LightParts(i0, i1, sa));
-        }
+        } 
         Collections.sort(list);
         return list.<LightParts>toArray(new LightParts[list.size()]);
     }
@@ -71,7 +71,7 @@ public class ModelSetSignal extends ModelSetBase<SignalConfig> {
     private static String getMatchedString(String par1, Pattern par2) {
         Matcher matcher = par2.matcher(par1);
         if (matcher.find())
-            return matcher.group(1);
+            return matcher.group(1); 
         return "";
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetTrain.java b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetTrain.java
index 3bec245..dd87b5d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetTrain.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetTrain.java
@@ -31,7 +31,7 @@ public class ModelSetTrain extends ModelSetVehicleBase<TrainConfig> {
             this.bogieModels[0] = ModelObject.getDummy();
         } else {
             this.bogieModels = registerBogieModel();
-        }
+        } 
     }
 
     @SideOnly(Side.CLIENT)
@@ -39,7 +39,7 @@ public class ModelSetTrain extends ModelSetVehicleBase<TrainConfig> {
         ModelObject[] modelBogies = new ModelObject[2];
         for (int i = 0; i < 2; i++) {
             modelBogies[i] = new ModelObject(getConfig().getBogieModel(i), this, null, new Object[] { "isBogie" });
-        }
+        } 
         return modelBogies;
     }
 
@@ -57,6 +57,6 @@ public class ModelSetTrain extends ModelSetVehicleBase<TrainConfig> {
             GL11.glRotatef(180.0F * i, 0.0F, 1.0F, 0.0F);
             this.bogieModels[i].render(null, cfg, 0, 0.0F);
             GL11.glPopMatrix();
-        }
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetVehicleBase.java b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetVehicleBase.java
index 650466c..444a473 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetVehicleBase.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetVehicleBase.java
@@ -45,8 +45,8 @@ public abstract class ModelSetVehicleBase<T extends VehicleBaseConfig> extends M
             this.buttonTexture = ModelPackManager.INSTANCE.getResource(((VehicleBaseConfig)this.cfg).buttonTexture);
             this.rollsignTexture = (((VehicleBaseConfig)this.cfg).rollsignTexture == null) ? null : ModelPackManager.INSTANCE.getResource(((VehicleBaseConfig)this.cfg).rollsignTexture);
             if (((VehicleBaseConfig)this.cfg).soundScriptPath != null)
-                this.soundSE = ScriptUtil.doScript(ModelPackManager.INSTANCE.getScript(((VehicleBaseConfig)getConfig()).soundScriptPath));
-        }
+                this.soundSE = ScriptUtil.doScript(ModelPackManager.INSTANCE.getScript(((VehicleBaseConfig)getConfig()).soundScriptPath)); 
+        } 
     }
 
     public T getConfig() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetWire.java b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetWire.java
index 025b9f0..5d528be 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetWire.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetWire.java
@@ -28,10 +28,10 @@ public class ModelSetWire extends ModelSetBase<WireConfig> {
             WireConfig cfg = getConfig();
             PartsRenderer renderer = null;
             if (cfg.model.rendererPath == null || cfg.model.rendererPath.isEmpty())
-                renderer = new WirePartsRenderer(false, new String[0]);
+                renderer = new WirePartsRenderer(false, new String[0]); 
             this.modelObj = new ModelObject(cfg.model, this, renderer, new Object[0]);
             this.buttonTexture = ModelPackManager.INSTANCE.getResource(cfg.buttonTexture);
-        }
+        } 
     }
 
     public WireConfig getDummyConfig() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/TextureSetSignboard.java b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/TextureSetSignboard.java
index 30e0b2a..6383a14 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/TextureSetSignboard.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/modelset/TextureSetSignboard.java
@@ -21,7 +21,7 @@ public class TextureSetSignboard extends TextureSetBase<SignboardConfig> {
             this.texture = new ResourceLocation(cfg.texture);
         } else {
             this.texture = new ResourceLocation("textures/signboard/" + cfg.texture + ".png");
-        }
+        } 
     }
 
     public SignboardConfig getDummyConfig() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/DataEntry.java b/src/api/rtm/jp/ngt/rtm/modelpack/state/DataEntry.java
index 091c5a6..d1d79f0 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/DataEntry.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/state/DataEntry.java
@@ -28,25 +28,25 @@ public abstract class DataEntry<T> {
         if (dType == DataType.INT) {
             int i = data.isEmpty() ? 0 : Integer.valueOf(data).intValue();
             return new DataEntryInt(Integer.valueOf(i), flag);
-        }
+        } 
         if (dType == DataType.DOUBLE) {
             double d = data.isEmpty() ? 0.0D : Double.valueOf(data).doubleValue();
             return new DataEntryDouble(Double.valueOf(d), flag);
-        }
+        } 
         if (dType == DataType.BOOLEAN) {
             boolean b = data.isEmpty() ? false : Boolean.valueOf(data).booleanValue();
             return new DataEntryBoolean(Boolean.valueOf(b), flag);
-        }
+        } 
         if (dType == DataType.STRING)
-            return new DataEntryString(data, flag);
+            return new DataEntryString(data, flag); 
         if (dType == DataType.VEC) {
             Vec3 vec = DataEntryVec.fromString(data);
             return new DataEntryVec(vec, flag);
-        }
+        } 
         if (dType == DataType.HEX) {
             int i = data.isEmpty() ? 0 : Integer.decode(data).intValue();
             return new DataEntryHex(Integer.valueOf(i), flag);
-        }
+        } 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/DataFormatter.java b/src/api/rtm/jp/ngt/rtm/modelpack/state/DataFormatter.java
index 299d74f..84cc5e8 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/DataFormatter.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/state/DataFormatter.java
@@ -25,9 +25,9 @@ public final class DataFormatter {
             for (ResourceConfig.DMInitValue val : cfg.defaultValues) {
                 DataType type = DataType.getType(val.type);
                 if (type != null)
-                    addValue(type, val);
-            }
-        }
+                    addValue(type, val); 
+            } 
+        } 
     }
 
     private void addValue(DataType type, ResourceConfig.DMInitValue val) {
@@ -37,13 +37,13 @@ public final class DataFormatter {
                 filter = (data -> {
                         int iData = (data instanceof String) ? Integer.valueOf((String)data).intValue() : ((Integer)data).intValue();
                         return (iData >= val.minmax[0] && iData <= val.minmax[1]);
-                    });
+                    }); 
         } else if (type == DataType.DOUBLE) {
             if (val.minmax != null)
                 filter = (data -> {
                         double dData = (data instanceof String) ? Double.valueOf((String)data).doubleValue() : ((Double)data).doubleValue();
                         return (dData >= val.minmax[0] && dData <= val.minmax[1]);
-                    });
+                    }); 
         } else if (type == DataType.STRING) {
             if (val.pattern != null)
                 filter = (data -> {
@@ -52,10 +52,10 @@ public final class DataFormatter {
                         String contains = val.pattern[1];
                         String end = val.pattern[2];
                         return ((start.isEmpty() || s0.startsWith(start)) && (contains.isEmpty() || s0.contains(contains)) && (end.isEmpty() || s0.endsWith(end)));
-                    });
-        }
+                    }); 
+        } 
         if (filter != null)
-            this.filterMap.put(val.key, filter);
+            this.filterMap.put(val.key, filter); 
         if (type == DataType.BOOLEAN) {
             val.suggestions = new String[] { String.valueOf(false), String.valueOf(true) };
         } else if (val.suggestions != null) {
@@ -66,20 +66,20 @@ public final class DataFormatter {
                     for (File file : list) {
                         String path = file.getAbsolutePath();
                         if (filter.check(path))
-                            tempList.add(pathToRL(path));
-                    }
+                            tempList.add(pathToRL(path)); 
+                    } 
                     val.suggestions = tempList.<String>toArray(new String[tempList.size()]);
-                }
+                } 
             } else if (val.suggestions[0].equals("-value")) {
                 int min = (int)Double.valueOf(val.minmax[0]).doubleValue();
                 int max = (int)Double.valueOf(val.minmax[1]).doubleValue();
                 val.suggestions = new String[max - min + 1];
                 for (int i = 0; i < val.suggestions.length; i++)
-                    val.suggestions[i] = String.valueOf(i + min);
-            }
-        }
+                    val.suggestions[i] = String.valueOf(i + min); 
+            } 
+        } 
         if (val.suggestions != null)
-            this.suggestionMap.put(val.key, val.suggestions);
+            this.suggestionMap.put(val.key, val.suggestions); 
     }
 
     private static String pathToRL(String path) {
@@ -99,14 +99,14 @@ public final class DataFormatter {
             String value = String.format("(%s)%s", new Object[] { val.type, val.value });
             if (!dm.contains(key))
                 if (!dm.set(key, value, 3))
-                    NGTLog.debug("Failed to set value : %s=%s", new Object[] { key, value });
-        }
+                    NGTLog.debug("Failed to set value : %s=%s", new Object[] { key, value });  
+        } 
     }
 
     public boolean check(String key, DataEntry value) {
         IDataFilter filter = this.filterMap.get(key);
         if (filter != null)
-            return filter.check(value.get());
+            return filter.check(value.get()); 
         return true;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/DataMap.java b/src/api/rtm/jp/ngt/rtm/modelpack/state/DataMap.java
index bd6a06d..544f34e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/DataMap.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/state/DataMap.java
@@ -50,7 +50,7 @@ public final class DataMap {
             DataEntry de = DataEntry.getEntry(type, "", flag);
             de.readFromNBT(entry);
             set(name, de, flag);
-        }
+        } 
     }
 
     public NBTTagCompound writeToNBT() {
@@ -63,8 +63,8 @@ public final class DataMap {
                 nbt2.setInteger("Flag", ((DataEntry)entry.getValue()).flag);
                 ((DataEntry)entry.getValue()).writeToNBT(nbt2);
                 list.appendTag((NBTBase)nbt2);
-            }
-        }
+            } 
+        } 
         nbt.setTag("DataList", (NBTBase)list);
         return nbt;
     }
@@ -73,30 +73,30 @@ public final class DataMap {
         PacketNotice packet = null;
         if (this.entity instanceof Entity) {
             Entity entity = (Entity)this.entity;
-            String msg = String.format("DM,%s,%d,%s,%s,%s,%d", new Object[] { "E",
+            String msg = String.format("DM,%s,%d,%s,%s,%s,%d", new Object[] { "E", 
 
-                        Integer.valueOf(entity.getEntityId()), key,
+                        Integer.valueOf(entity.getEntityId()), key, 
 
                         (value.getType()).key, value
-                        .toString(),
+                        .toString(), 
                         Integer.valueOf(value.flag) });
             packet = toClient ? new PacketNotice((byte)1, msg, entity) : new PacketNotice((byte)0, msg, entity);
         } else if (this.entity instanceof TileEntity) {
             TileEntity te = (TileEntity)this.entity;
             String pos = String.format("%d %d %d", new Object[] { Integer.valueOf(te.getPos().getX()), Integer.valueOf(te.getPos().getY()), Integer.valueOf(te.getPos().getZ()) });
-            String msg = String.format("DM,%s,%s,%s,%s,%s,%d", new Object[] { "T", pos, key,
+            String msg = String.format("DM,%s,%s,%s,%s,%s,%d", new Object[] { "T", pos, key, 
 
                         (value.getType()).key, value
-                        .toString(),
+                        .toString(), 
                         Integer.valueOf(value.flag) });
             packet = toClient ? new PacketNotice((byte)1, msg, te) : new PacketNotice((byte)0, msg, te);
-        }
+        } 
         if (packet != null)
             if (toClient) {
                 RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)packet);
             } else {
                 RTMCore.NETWORK_WRAPPER.sendToServer((IMessage)packet);
-            }
+            }  
     }
 
     public static void receivePacket(String msg, PacketNotice packet, World world, boolean onClient) {
@@ -110,21 +110,21 @@ public final class DataMap {
         int fSync = flag & 0x1;
         int fSave = flag & 0x2;
         if (onClient)
-            fSync = 0;
+            fSync = 0; 
         flag = fSync | fSave;
         DataEntry de = DataEntry.getEntry(type, data, flag);
         if (target.equals("E")) {
             int id = Integer.valueOf(targetId).intValue();
             Entity entity = world.getEntityByID(id);
             if (entity instanceof IResourceSelector)
-                ((IResourceSelector)entity).getResourceState().getDataMap().set(key, de, flag);
+                ((IResourceSelector)entity).getResourceState().getDataMap().set(key, de, flag); 
         } else if (target.equals("T")) {
             String[] sa2 = targetId.split(" ");
             BlockPos pos = new BlockPos(Integer.valueOf(sa2[0]).intValue(), Integer.valueOf(sa2[1]).intValue(), Integer.valueOf(sa2[2]).intValue());
             TileEntity entity = world.getTileEntity(pos);
             if (entity instanceof IResourceSelector)
-                ((IResourceSelector)entity).getResourceState().getDataMap().set(key, de, flag);
-        }
+                ((IResourceSelector)entity).getResourceState().getDataMap().set(key, de, flag); 
+        } 
     }
 
     public boolean contains(String key) {
@@ -139,13 +139,13 @@ public final class DataMap {
         if (!this.dataFormatter.check(key, value)) {
             NGTLog.debug("Invalid data : %s=%s", new Object[] { key, value.toString() });
             return;
-        }
+        } 
         boolean sync = ((flag & 0x1) != 0);
         boolean onServerSide = NGTUtil.isServer();
         if (onServerSide || !sync || this.entity == null)
-            this.map.put(key, value);
+            this.map.put(key, value); 
         if (sync)
-            sendPacket(key, value, onServerSide);
+            sendPacket(key, value, onServerSide); 
     }
 
     public boolean set(String key, String value, int flag) {
@@ -158,11 +158,11 @@ public final class DataMap {
         } else {
             entry = get(key);
             entry = DataEntry.getEntry((entry.getType()).key, value, flag);
-        }
+        } 
         if (entry != null) {
             set(key, entry, flag);
             return true;
-        }
+        } 
         NGTLog.debug("[DataMap] Invalid Data (Key:%s, Value:%s)", new Object[] { key, value });
         return false;
     }
@@ -182,8 +182,8 @@ public final class DataMap {
             sb.append(")");
             sb.append(((DataEntry)entry.getValue()).data.toString());
             if (count < this.map.size())
-                sb.append(",");
-        }
+                sb.append(","); 
+        } 
         return sb.toString();
     }
 
@@ -191,8 +191,8 @@ public final class DataMap {
         String[][] array = convertArg(par1);
         for (String[] sa : array) {
             if (!this.map.containsKey(sa[0]) || overwrite)
-                set(sa[0], String.format("(%s)%s", new Object[] { sa[1], sa[2] }), 3);
-        }
+                set(sa[0], String.format("(%s)%s", new Object[] { sa[1], sa[2] }), 3); 
+        } 
     }
 
     public static String[][] convertArg(String par1) {
@@ -213,8 +213,8 @@ public final class DataMap {
             } else {
                 NGTLog.debug("Invalid data : %s", new Object[] { s });
                 return new String[0][0];
-            }
-        }
+            } 
+        } 
         return array;
     }
 
@@ -225,7 +225,7 @@ public final class DataMap {
         } catch (Exception e) {
             NGTLog.debug("%s is not Integer", new Object[] { key });
             return 0;
-        }
+        } 
     }
 
     public void setInt(String key, int value, int flag) {
@@ -240,7 +240,7 @@ public final class DataMap {
         } catch (Exception e) {
             NGTLog.debug("%s is not Double", new Object[] { key });
             return 0.0D;
-        }
+        } 
     }
 
     public void setDouble(String key, double value, int flag) {
@@ -254,7 +254,7 @@ public final class DataMap {
         } catch (Exception e) {
             NGTLog.debug("%s is not Boolean", new Object[] { key });
             return false;
-        }
+        } 
     }
 
     public void setBoolean(String key, boolean value, int flag) {
@@ -268,7 +268,7 @@ public final class DataMap {
         } catch (Exception e) {
             NGTLog.debug("%s is not String", new Object[] { key });
             return "";
-        }
+        } 
     }
 
     public void setString(String key, String value, int flag) {
@@ -282,7 +282,7 @@ public final class DataMap {
         } catch (Exception e) {
             NGTLog.debug("%s is not Vec", new Object[] { key });
             return Vec3.ZERO;
-        }
+        } 
     }
 
     public void setVec(String key, Vec3 value, int flag) {
@@ -296,7 +296,7 @@ public final class DataMap {
         } catch (Exception e) {
             NGTLog.debug("%s is not Hex", new Object[] { key });
             return 0;
-        }
+        } 
     }
 
     public void setHex(String key, int value, int flag) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/DataType.java b/src/api/rtm/jp/ngt/rtm/modelpack/state/DataType.java
index 70a03d1..26e0274 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/DataType.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/state/DataType.java
@@ -17,8 +17,8 @@ public enum DataType {
     public static DataType getType(String s) {
         for (DataType type : values()) {
             if (type.key.equals(s))
-                return type;
-        }
+                return type; 
+        } 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/ResourceState.java b/src/api/rtm/jp/ngt/rtm/modelpack/state/ResourceState.java
index 4a2b9b0..3266e79 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/ResourceState.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/state/ResourceState.java
@@ -13,8 +13,8 @@ import net.minecraft.nbt.NBTBase;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.math.AxisAlignedBB;
 
-public class ResourceState<T extends ResourceSet> {
-    public final ResourceType type;
+public class ResourceState<T extends ResourceSet<?>> {
+    public final ResourceType<?, T> type;
 
     public final DataMap dataMap = new DataMap();
 
@@ -30,7 +30,7 @@ public class ResourceState<T extends ResourceSet> {
 
     public int color = 16777215;
 
-    public ResourceState(ResourceType type, @Nullable Object entity) {
+    public ResourceState(ResourceType<?, T> type, @Nullable Object entity) {
         this.type = type;
         this.modelName = type.defaultName;
         this.dataMap.setEntity(entity);
@@ -62,7 +62,7 @@ public class ResourceState<T extends ResourceSet> {
 
     public void setName(String par1) {
         if (par1 == null || par1.isEmpty())
-            par1 = "no_name";
+            par1 = "no_name"; 
         this.name = par1;
     }
 
@@ -82,7 +82,7 @@ public class ResourceState<T extends ResourceSet> {
         if (!par1.isEmpty()) {
             this.modelName = par1;
             this.modelSet = null;
-        }
+        } 
     }
 
     public void setResourceToDefault() {
@@ -93,8 +93,8 @@ public class ResourceState<T extends ResourceSet> {
         if (this.modelSet == null || this.modelSet.isDummy()) {
             this.modelSet = ModelPackManager.INSTANCE.getResourceSet(this.type, this.modelName);
             if (!this.modelSet.isDummy())
-                ((ResourceSet)this.modelSet).dataFormatter.initDataMap(this.dataMap);
-        }
+                ((ResourceSet)this.modelSet).dataFormatter.initDataMap(this.dataMap); 
+        } 
         return this.modelSet;
     }
 
@@ -107,21 +107,21 @@ public class ResourceState<T extends ResourceSet> {
         if (this.modelSet instanceof ModelSetBase) {
             CollisionObj obj = ((ModelSetBase)this.modelSet).getCollisionObj();
             if (obj != null)
-                obj.applyCollison(target, myself, playerAABB, list, this.exclusionParts);
-        }
+                obj.applyCollison(target, myself, playerAABB, list, this.exclusionParts); 
+        } 
     }
 
     public void addExclusionParts(String... names) {
         for (String name : names) {
             if (!this.exclusionParts.contains(name))
-                this.exclusionParts.add(name);
-        }
+                this.exclusionParts.add(name); 
+        } 
     }
 
     public void removeExclusionParts(String... names) {
         for (String name : names) {
             if (this.exclusionParts.contains(name))
-                this.exclusionParts.remove(name);
-        }
+                this.exclusionParts.remove(name); 
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/ResourceStateSignboard.java b/src/api/rtm/jp/ngt/rtm/modelpack/state/ResourceStateSignboard.java
index 501e24b..3fa35b9 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/ResourceStateSignboard.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/state/ResourceStateSignboard.java
@@ -23,20 +23,20 @@ public class ResourceStateSignboard extends ResourceState<TextureSetSignboard> {
     public void readFromNBT(NBTTagCompound nbt) {
         super.readFromNBT(nbt);
         if (nbt.hasKey("TimeTableSetting"))
-            setTTSetting(nbt.getString("TimeTableSetting"));
+            setTTSetting(nbt.getString("TimeTableSetting")); 
         this.texts.clear();
         NBTTagList list = nbt.getTagList("Texts", 10);
         for (int i = 0; i < list.tagCount(); i++) {
             NBTTagCompound nbt2 = list.getCompoundTagAt(i);
             this.texts.add(SignboardText.readFromNBT(nbt2, this.timeTable));
-        }
+        } 
     }
 
     public NBTTagCompound writeToNBT() {
         NBTTagCompound nbt = super.writeToNBT();
         NBTTagList list = new NBTTagList();
         for (SignboardText text : this.texts)
-            list.appendTag((NBTBase)text.writeToNBT());
+            list.appendTag((NBTBase)text.writeToNBT()); 
         nbt.setTag("Texts", (NBTBase)list);
         nbt.setString("TimeTableSetting", getTTSetting());
         return nbt;
@@ -54,8 +54,8 @@ public class ResourceStateSignboard extends ResourceState<TextureSetSignboard> {
                 stationName = s.split("=")[1];
             } else if (s.startsWith("track")) {
                 track = Byte.valueOf(s.split("=")[1]).byteValue();
-            }
-        }
+            } 
+        } 
         this.timeTable = new StationTimeTable(ttName, stationName, track);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/ResourceStateWithBlock.java b/src/api/rtm/jp/ngt/rtm/modelpack/state/ResourceStateWithBlock.java
index bdf5927..726d51d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/ResourceStateWithBlock.java
+++ b/src/api/rtm/jp/ngt/rtm/modelpack/state/ResourceStateWithBlock.java
@@ -10,7 +10,7 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.ResourceLocation;
 
-public class ResourceStateWithBlock<T extends ModelSetBase> extends ResourceState<T> {
+public class ResourceStateWithBlock<T extends ModelSetBase<?>> extends ResourceState<T> {
     public Block block = Blocks.AIR;
 
     public byte meta;
@@ -19,7 +19,7 @@ public class ResourceStateWithBlock<T extends ModelSetBase> extends ResourceStat
 
     private IBlockState state;
 
-    public ResourceStateWithBlock(ResourceType type, Object entity) {
+    public ResourceStateWithBlock(ResourceType<?, T> type, Object entity) {
         super(type, entity);
     }
 
@@ -41,7 +41,7 @@ public class ResourceStateWithBlock<T extends ModelSetBase> extends ResourceStat
         String s = nbt.getString("BlockName");
         this.block = Block.getBlockFromName(s);
         if (this.block == null)
-            this.block = Blocks.AIR;
+            this.block = Blocks.AIR; 
         this.meta = nbt.getByte("BlockMetadata");
         initBlockName();
     }
@@ -55,7 +55,7 @@ public class ResourceStateWithBlock<T extends ModelSetBase> extends ResourceStat
 
     public IBlockState getBlockState() {
         if (this.state == null)
-            this.state = this.block.getStateFromMeta(this.meta);
+            this.state = this.block.getStateFromMeta(this.meta); 
         return this.state;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketCollisionObj.java b/src/api/rtm/jp/ngt/rtm/network/PacketCollisionObj.java
index 076b1f8..e050f8b 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketCollisionObj.java
+++ b/src/api/rtm/jp/ngt/rtm/network/PacketCollisionObj.java
@@ -43,7 +43,7 @@ public class PacketCollisionObj implements IMessage, IMessageHandler<PacketColli
             buffer.writeFloat((float)vec.getX());
             buffer.writeFloat((float)vec.getY());
             buffer.writeFloat((float)vec.getZ());
-        }
+        } 
         buffer.writeFloat((float)this.face.normal.getX());
         buffer.writeFloat((float)this.face.normal.getY());
         buffer.writeFloat((float)this.face.normal.getZ());
@@ -63,7 +63,7 @@ public class PacketCollisionObj implements IMessage, IMessageHandler<PacketColli
             float f2 = buffer.readFloat();
             float f3 = buffer.readFloat();
             this.face.vertices[j] = new Vec3(f1, f2, f3);
-        }
+        } 
         float x = buffer.readFloat();
         float y = buffer.readFloat();
         float z = buffer.readFloat();
@@ -74,7 +74,7 @@ public class PacketCollisionObj implements IMessage, IMessageHandler<PacketColli
     public IMessage onMessage(PacketCollisionObj message, MessageContext ctx) {
         ResourceSet set = ModelPackManager.INSTANCE.getResourceSet(message.type, message.modelName);
         if (set instanceof ModelSetBase)
-            ((ModelSetBase)set).addColFace(message.partsName, message.face, message.status);
+            ((ModelSetBase)set).addColFace(message.partsName, message.face, message.status); 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketLargeRailBase.java b/src/api/rtm/jp/ngt/rtm/network/PacketLargeRailBase.java
index bce2e3e..dac9f44 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketLargeRailBase.java
+++ b/src/api/rtm/jp/ngt/rtm/network/PacketLargeRailBase.java
@@ -58,9 +58,9 @@ public class PacketLargeRailBase extends PacketCustom implements IMessageHandler
                         if (tile instanceof TileEntityLargeRailBase) {
                             ((TileEntityLargeRailBase)tile).setStartPoint(message.sX, message.sY, message.sZ);
                             return true;
-                        }
+                        } 
                         return false;
                     }
-                }50, 5);
+                }, 50, 5);
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketLargeRailCore.java b/src/api/rtm/jp/ngt/rtm/network/PacketLargeRailCore.java
index 40f8126..ed94242 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketLargeRailCore.java
+++ b/src/api/rtm/jp/ngt/rtm/network/PacketLargeRailCore.java
@@ -55,7 +55,7 @@ public class PacketLargeRailCore extends PacketCustom implements IMessageHandler
                 st = tile1.getSwitch();
                 this.type = (st != null) ? st.id : -1;
                 break;
-        }
+        } 
     }
 
     public void toBytes(ByteBuf buffer) {
@@ -68,7 +68,7 @@ public class PacketLargeRailCore extends PacketCustom implements IMessageHandler
         buffer.writeByte(this.type);
         buffer.writeByte(this.railPositions.length);
         for (RailPosition rp : this.railPositions)
-            ByteBufUtils.writeTag(buffer, rp.writeToNBT());
+            ByteBufUtils.writeTag(buffer, rp.writeToNBT()); 
     }
 
     public void fromBytes(ByteBuf buffer) {
@@ -85,8 +85,8 @@ public class PacketLargeRailCore extends PacketCustom implements IMessageHandler
             for (int i = 0; i < size; i++) {
                 NBTTagCompound nbt = ByteBufUtils.readTag(buffer);
                 this.railPositions[i] = RailPosition.readFromNBT(nbt);
-            }
-        }
+            } 
+        } 
     }
 
     public IMessage onMessage(final PacketLargeRailCore message, MessageContext ctx) {
@@ -107,11 +107,12 @@ public class PacketLargeRailCore extends PacketCustom implements IMessageHandler
             tile0.getResourceState().readFromNBT(message.property);
             tile0.setRailPositions(message.railPositions);
             if (message.dataType != 0 || !(tile instanceof jp.ngt.rtm.rail.TileEntityLargeRailNormalCore))
-                if (message.dataType == 2 && tile instanceof TileEntityLargeRailSwitchCore)
-                    TileEntityLargeRailSwitchCore tileEntityLargeRailSwitchCore = (TileEntityLargeRailSwitchCore)tile;
+                if (message.dataType == 2 && tile instanceof TileEntityLargeRailSwitchCore) {
+                    TileEntityLargeRailSwitchCore tileEntityLargeRailSwitchCore = (TileEntityLargeRailSwitchCore) tile;
+                }
             tile0.updateResourceState();
             return true;
-        }
+        } 
         return false;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketMarker.java b/src/api/rtm/jp/ngt/rtm/network/PacketMarker.java
index 9a0de17..6cda79d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketMarker.java
+++ b/src/api/rtm/jp/ngt/rtm/network/PacketMarker.java
@@ -29,7 +29,7 @@ public class PacketMarker extends PacketCustom implements IMessageHandler<Packet
             buffer.writeInt(ia[0]);
             buffer.writeInt(ia[1]);
             buffer.writeInt(ia[2]);
-        }
+        } 
     }
 
     public void fromBytes(ByteBuf buffer) {
@@ -41,14 +41,14 @@ public class PacketMarker extends PacketCustom implements IMessageHandler<Packet
             int i1 = buffer.readInt();
             int i2 = buffer.readInt();
             this.list.add(new int[] { i0, i1, i2 });
-        }
+        } 
     }
 
     public IMessage onMessage(PacketMarker message, MessageContext ctx) {
         World world = NGTUtil.getClientWorld();
         TileEntity tile = message.getTileEntity(world);
         if (tile instanceof TileEntityMarker)
-            ((TileEntityMarker)tile).setMarkersPos(message.list, true);
+            ((TileEntityMarker)tile).setMarkersPos(message.list, true); 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketMarkerRPClient.java b/src/api/rtm/jp/ngt/rtm/network/PacketMarkerRPClient.java
index 1d3c92d..0efc532 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketMarkerRPClient.java
+++ b/src/api/rtm/jp/ngt/rtm/network/PacketMarkerRPClient.java
@@ -30,7 +30,7 @@ public class PacketMarkerRPClient extends PacketCustom implements IMessageHandle
         super.toBytes(buffer);
         buffer.writeByte(this.railPositions.length);
         for (RailPosition rp : this.railPositions)
-            ByteBufUtils.writeTag(buffer, rp.writeToNBT());
+            ByteBufUtils.writeTag(buffer, rp.writeToNBT()); 
     }
 
     public void fromBytes(ByteBuf buffer) {
@@ -41,8 +41,8 @@ public class PacketMarkerRPClient extends PacketCustom implements IMessageHandle
             for (int i = 0; i < size; i++) {
                 NBTTagCompound nbt = ByteBufUtils.readTag(buffer);
                 this.railPositions[i] = RailPosition.readFromNBT(nbt);
-            }
-        }
+            } 
+        } 
     }
 
     public IMessage onMessage(PacketMarkerRPClient message, MessageContext ctx) {
@@ -50,13 +50,13 @@ public class PacketMarkerRPClient extends PacketCustom implements IMessageHandle
         for (RailPosition rp : message.railPositions) {
             TileEntity tileEntity = BlockUtil.getTileEntity((IBlockAccess)world, rp.blockX, rp.blockY, rp.blockZ);
             if (tileEntity instanceof TileEntityMarker)
-                ((TileEntityMarker)tileEntity).setMarkerRP(rp);
-        }
+                ((TileEntityMarker)tileEntity).setMarkerRP(rp); 
+        } 
         TileEntity tile = message.getTileEntity(world);
         if (tile instanceof TileEntityMarker) {
             TileEntityMarker marker = (TileEntityMarker)tile;
             RTMBlock.marker.onMarkerActivated(world, marker.getPos().getX(), marker.getPos().getY(), marker.getPos().getZ(), (EntityPlayer)(ctx.getServerHandler()).player, false);
-        }
+        } 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketModelPack.java b/src/api/rtm/jp/ngt/rtm/network/PacketModelPack.java
index 0517092..aec3b3b 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketModelPack.java
+++ b/src/api/rtm/jp/ngt/rtm/network/PacketModelPack.java
@@ -41,7 +41,7 @@ public class PacketModelPack implements IMessage, IMessageHandler<PacketModelPac
         int index = 512;
         int i0 = buffer.writerIndex() - buffer.readerIndex();
         if (index > i0)
-            index = i0;
+            index = i0; 
         this.bytes = buffer.readBytes(index).array();
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketMoveMM.java b/src/api/rtm/jp/ngt/rtm/network/PacketMoveMM.java
index 04417b0..c1e0cfb 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketMoveMM.java
+++ b/src/api/rtm/jp/ngt/rtm/network/PacketMoveMM.java
@@ -29,7 +29,7 @@ public class PacketMoveMM implements IMessage, IMessageHandler<PacketMoveMM, IMe
     public void toBytes(ByteBuf buffer) {
         buffer.writeInt(this.entityIds.length);
         for (int i : this.entityIds)
-            buffer.writeInt(i);
+            buffer.writeInt(i); 
         buffer.writeDouble(this.moveX);
         buffer.writeDouble(this.moveY);
         buffer.writeDouble(this.moveZ);
@@ -39,7 +39,7 @@ public class PacketMoveMM implements IMessage, IMessageHandler<PacketMoveMM, IMe
         int size = buffer.readInt();
         this.entityIds = new int[size];
         for (int i = 0; i < size; i++)
-            this.entityIds[i] = buffer.readInt();
+            this.entityIds[i] = buffer.readInt(); 
         this.moveX = buffer.readDouble();
         this.moveY = buffer.readDouble();
         this.moveZ = buffer.readDouble();
@@ -48,7 +48,7 @@ public class PacketMoveMM implements IMessage, IMessageHandler<PacketMoveMM, IMe
     public IMessage onMessage(PacketMoveMM message, MessageContext ctx) {
         World world = NGTUtil.getClientWorld();
         if (world != null)
-            EntityMMBoundingBox.handleMMMovement(world, message.entityIds, message.moveX, message.moveY, message.moveZ);
+            EntityMMBoundingBox.handleMMMovement(world, message.entityIds, message.moveX, message.moveY, message.moveZ); 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketNoticeHandlerClient.java b/src/api/rtm/jp/ngt/rtm/network/PacketNoticeHandlerClient.java
index 0db672f..c6da3fb 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketNoticeHandlerClient.java
+++ b/src/api/rtm/jp/ngt/rtm/network/PacketNoticeHandlerClient.java
@@ -27,37 +27,37 @@ public class PacketNoticeHandlerClient implements IMessageHandler<PacketNotice,
                 if (msg.startsWith("fire")) {
                     Entity entity = message.getEntity(world);
                     if (entity instanceof EntityArtillery)
-                        ((EntityArtillery)entity).onFirePacket(msg);
+                        ((EntityArtillery)entity).onFirePacket(msg); 
                 } else if (msg.startsWith("MM")) {
                     String[] sa0 = msg.split(",");
                     int v = Integer.parseInt(sa0[1]);
                     TileEntity tile = message.getTileEntity(world);
                     if (tile instanceof TileEntityMovingMachine)
-                        ((TileEntityMovingMachine)tile).setMovement((byte)v);
+                        ((TileEntityMovingMachine)tile).setMovement((byte)v); 
                 } else if (msg.startsWith("TRec")) {
                     if (MacroRecorder.INSTANCE.isRecording()) {
                         MacroRecorder.INSTANCE.stop(world);
                     } else {
                         MacroRecorder.INSTANCE.start(world);
-                    }
+                    } 
                 } else if (msg.startsWith("DM")) {
                     if (world == null)
-                        return null;
+                        return null; 
                     DataMap.receivePacket(msg, message, world, true);
                 } else if (msg.startsWith("TT")) {
                     TileEntity tile = message.getTileEntity(world);
                     if (tile instanceof TileEntityTurnTableCore) {
                         float f0 = Float.valueOf(msg.split(":")[1]).floatValue();
                         ((TileEntityTurnTableCore)tile).setRotation(f0);
-                    }
+                    } 
                 } else if (message.notice.startsWith("decoration")) {
                     String json = message.notice.replace("decoration:", "");
                     DecorationStore.INSTANCE.setModel(json);
                 } else if (msg.startsWith("speaker")) {
                     SpeakerSounds.getInstance(false).onGetPacket(msg, false);
-                }
-            }
-        }
+                } 
+            } 
+        } 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketNoticeHandlerServer.java b/src/api/rtm/jp/ngt/rtm/network/PacketNoticeHandlerServer.java
index 1d52d93..fe7f96e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketNoticeHandlerServer.java
+++ b/src/api/rtm/jp/ngt/rtm/network/PacketNoticeHandlerServer.java
@@ -37,7 +37,7 @@ public class PacketNoticeHandlerServer implements IMessageHandler<PacketNotice,
             } else if (msg.startsWith("StartCrafting")) {
                 TileEntity tile = message.getTileEntity(world);
                 if (tile instanceof TileEntityTrainWorkBench)
-                    ((TileEntityTrainWorkBench)tile).startCrafting((EntityPlayer)entityPlayerMP, false);
+                    ((TileEntityTrainWorkBench)tile).startCrafting((EntityPlayer)entityPlayerMP, false); 
             } else if (msg.startsWith("setTrainTab")) {
                 String[] sa = msg.split(",");
                 int tabIndex = Integer.valueOf(sa[1]).intValue();
@@ -45,21 +45,21 @@ public class PacketNoticeHandlerServer implements IMessageHandler<PacketNotice,
                 if (entity instanceof EntityPlayer) {
                     Container container = ((EntityPlayer)entity).openContainer;
                     if (container instanceof ContainerTrainControlPanel)
-                        ((ContainerTrainControlPanel)container).setCurrentTab(tabIndex);
-                }
+                        ((ContainerTrainControlPanel)container).setCurrentTab(tabIndex); 
+                } 
             } else if (msg.startsWith("workbench")) {
                 String[] sa = msg.split(",");
                 String name = sa[1];
                 float h = Float.valueOf(sa[2]).floatValue();
                 if (((EntityPlayer)entityPlayerMP).openContainer instanceof ContainerRTMWorkBench)
-                    ((ContainerRTMWorkBench)((EntityPlayer)entityPlayerMP).openContainer).setRailProp(name, h);
+                    ((ContainerRTMWorkBench)((EntityPlayer)entityPlayerMP).openContainer).setRailProp(name, h); 
             } else if (msg.startsWith("TMacro")) {
                 Entity entity = message.getEntity(world);
                 if (entity instanceof EntityMotorman) {
                     String s2 = msg.replace("TMacro//", "");
                     String[] sa = s2.split("//");
                     ((EntityMotorman)entity).setMacro(sa);
-                }
+                } 
             } else if (msg.startsWith("decoration")) {
                 String json = msg.replace("decoration:", "");
                 DecorationStore.INSTANCE.registerModel(json, world);
@@ -72,21 +72,21 @@ public class PacketNoticeHandlerServer implements IMessageHandler<PacketNotice,
                     stack = new ItemStack(RTMItem.ticketBook, 1, 11);
                 } else {
                     stack = new ItemStack(RTMItem.ticket, 1, 1);
-                }
+                } 
                 entityPlayerMP.dropItem(stack, false);
             } else if (msg.startsWith("notch")) {
                 Entity entity = message.getEntity(world);
                 if (entity instanceof EntityTrainBase) {
                     int notchInc = Integer.valueOf(msg.split(":")[1]).intValue();
                     ((EntityTrainBase)entity).addNotch((Entity)entityPlayerMP, notchInc);
-                }
+                } 
             } else if (msg.equals("marker_update")) {
                 TileEntity tile = message.getTileEntity(world);
                 if (tile instanceof TileEntityMarker)
-                    ((TileEntityMarker)tile).updateMarkerRM((EntityPlayer)entityPlayerMP);
+                    ((TileEntityMarker)tile).updateMarkerRM((EntityPlayer)entityPlayerMP); 
             } else if (msg.startsWith("speaker")) {
                 SpeakerSounds.getInstance(true).onGetPacket(msg, true);
-            }
+            }  
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketPlaySound.java b/src/api/rtm/jp/ngt/rtm/network/PacketPlaySound.java
index cfb2c21..e873bf8 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketPlaySound.java
+++ b/src/api/rtm/jp/ngt/rtm/network/PacketPlaySound.java
@@ -54,12 +54,12 @@ public class PacketPlaySound extends PacketCustom implements IMessageHandler<Pac
         if (message.forEntity()) {
             Entity entity = message.getEntity(world);
             if (entity != null)
-                RTMCore.proxy.playSound(entity, message.sound, message.volume, message.pitch);
+                RTMCore.proxy.playSound(entity, message.sound, message.volume, message.pitch); 
         } else {
             TileEntity entity = message.getTileEntity(world);
             if (entity != null)
-                RTMCore.proxy.playSound(entity, message.sound, message.volume, message.pitch);
-        }
+                RTMCore.proxy.playSound(entity, message.sound, message.volume, message.pitch); 
+        } 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketSelectResource.java b/src/api/rtm/jp/ngt/rtm/network/PacketSelectResource.java
index b663ab7..4a5f696 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketSelectResource.java
+++ b/src/api/rtm/jp/ngt/rtm/network/PacketSelectResource.java
@@ -49,16 +49,16 @@ public class PacketSelectResource implements IMessage, IMessageHandler<PacketSel
         if (message.pos[1] >= 0) {
             TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)world, message.pos[0], message.pos[1], message.pos[2]);
             if (tile instanceof IResourceSelector)
-                selector = (IResourceSelector)tile;
+                selector = (IResourceSelector)tile; 
         } else {
             Entity entity = world.getEntityByID(message.pos[0]);
             if (entity instanceof IResourceSelector)
-                selector = (IResourceSelector)entity;
-        }
+                selector = (IResourceSelector)entity; 
+        } 
         if (selector != null) {
             selector.getResourceState().readFromNBT(message.data);
             selector.updateResourceState();
-        }
+        } 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketSetTrainState.java b/src/api/rtm/jp/ngt/rtm/network/PacketSetTrainState.java
index 808c978..6f4ca87 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketSetTrainState.java
+++ b/src/api/rtm/jp/ngt/rtm/network/PacketSetTrainState.java
@@ -42,7 +42,7 @@ public class PacketSetTrainState extends PacketCustom implements IMessageHandler
         World world = ((EntityPlayer)entityPlayerMP).world;
         Entity entity = message.getEntity(world);
         if (entity instanceof EntityVehicleBase)
-            ((EntityVehicleBase)entity).setVehicleState(message.stateId, message.stateData);
+            ((EntityVehicleBase)entity).setVehicleState(message.stateId, message.stateData); 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketSignal.java b/src/api/rtm/jp/ngt/rtm/network/PacketSignal.java
index ec2305f..a8e4feb 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketSignal.java
+++ b/src/api/rtm/jp/ngt/rtm/network/PacketSignal.java
@@ -34,7 +34,7 @@ public class PacketSignal extends PacketCustom implements IMessageHandler<Packet
         World world = NGTUtil.getClientWorld();
         TileEntity tile = message.getTileEntity(world);
         if (tile instanceof TileEntitySignal)
-            ((TileEntitySignal)tile).setSignal(message.level);
+            ((TileEntitySignal)tile).setSignal(message.level); 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketVehicleMovement.java b/src/api/rtm/jp/ngt/rtm/network/PacketVehicleMovement.java
index fd4c52e..1c1e477 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketVehicleMovement.java
+++ b/src/api/rtm/jp/ngt/rtm/network/PacketVehicleMovement.java
@@ -50,9 +50,9 @@ public class PacketVehicleMovement implements IMessage, IMessageHandler<PacketVe
             this.vehicleSpeed = ((EntityVehicleBase)par1).getSpeed();
         } else {
             this.vehicleRoll = ((EntityBogie)par1).rotationRoll;
-        }
+        } 
         if (onDead)
-            this.vehicleY = -1;
+            this.vehicleY = -1; 
     }
 
     public void toBytes(ByteBuf buffer) {
@@ -82,7 +82,7 @@ public class PacketVehicleMovement implements IMessage, IMessageHandler<PacketVe
     public IMessage onMessage(PacketVehicleMovement message, MessageContext ctx) {
         World world = NGTUtil.getClientWorld();
         if (world == null)
-            return null;
+            return null; 
         if (message.vehicleY < 0) {
             Entity entity1 = world.getEntityByID(message.entityId);
             if (entity1 == null)
@@ -90,13 +90,13 @@ public class PacketVehicleMovement implements IMessage, IMessageHandler<PacketVe
                     if (entity2.getEntityId() == message.entityId) {
                         entity1 = entity2;
                         break;
-                    }
-                }
+                    } 
+                }  
             if (entity1 != null) {
                 entity1.setDead();
                 return null;
-            }
-        }
+            } 
+        } 
         Entity entity = world.getEntityByID(message.entityId);
         if (entity != null) {
             entity.serverPosX = message.vehicleX;
@@ -110,8 +110,8 @@ public class PacketVehicleMovement implements IMessage, IMessageHandler<PacketVe
                 ((EntityVehicleBase)entity).setRollAndSpeed(message.vehicleSpeed, message.vehicleRoll);
             } else {
                 ((EntityBogie)entity).setRoll(message.vehicleRoll);
-            }
-        }
+            } 
+        } 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketWire.java b/src/api/rtm/jp/ngt/rtm/network/PacketWire.java
index ac49c89..32610cf 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketWire.java
+++ b/src/api/rtm/jp/ngt/rtm/network/PacketWire.java
@@ -73,17 +73,17 @@ public class PacketWire extends PacketCustom implements IMessageHandler<PacketWi
         if (message.isBlock) {
             TileEntity tile1 = message.getTileEntity(world);
             if (tile1 instanceof TileEntityElectricalWiring)
-                tile = (TileEntityElectricalWiring)tile1;
+                tile = (TileEntityElectricalWiring)tile1; 
         } else {
             Entity entity = message.getEntity(world);
             if (entity instanceof EntityElectricalWiring)
-                tile = ((EntityElectricalWiring)entity).tileEW;
-        }
+                tile = ((EntityElectricalWiring)entity).tileEW; 
+        } 
         if (tile != null) {
             tile.isActivated = message.isActivated;
             tile.readFromNBT(message.nbtData);
             return true;
-        }
+        } 
         return false;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/BlockLargeRailBase.java b/src/api/rtm/jp/ngt/rtm/rail/BlockLargeRailBase.java
index 5c470e1..45302b4 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/BlockLargeRailBase.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/BlockLargeRailBase.java
@@ -61,7 +61,7 @@ public class BlockLargeRailBase extends BlockContainerCustomWithMeta {
         boolean flag = (preventMobMovement((IBlockAccess)world, pos) && entity instanceof net.minecraft.entity.EntityLiving);
         AxisAlignedBB aabb2 = getAABB((IBlockAccess)world, x, y, z, flag);
         if (entityBox.intersects(aabb2))
-            collidingBoxes.add(aabb2);
+            collidingBoxes.add(aabb2); 
     }
 
     public AxisAlignedBB getCollisionBoundingBox(IBlockState state, IBlockAccess world, BlockPos pos) {
@@ -80,7 +80,7 @@ public class BlockLargeRailBase extends BlockContainerCustomWithMeta {
         if (core != null) {
             ModelSetRail set = core.getResourceState().getResourceSet();
             return !(set.getConfig()).allowCrossing;
-        }
+        } 
         return false;
     }
 
@@ -92,14 +92,14 @@ public class BlockLargeRailBase extends BlockContainerCustomWithMeta {
     protected AxisAlignedBB getAABBWithState(IBlockAccess world, BlockPos pos) {
         TileEntity tile = world.getTileEntity(pos);
         if (tile == null)
-            return FULL_BLOCK_AABB;
+            return FULL_BLOCK_AABB; 
         int x = pos.getX();
         int y = pos.getY();
         int z = pos.getZ();
         float[] fa = ((TileEntityLargeRailBase)tile).getBlockHeights(x, y, z, 0.0625F, false);
         float height2 = 0.0F;
         for (int i = 0; i < 4; i++)
-            height2 += fa[i];
+            height2 += fa[i]; 
         height2 *= 0.25F;
         return new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, ((height2 < 0.0625F) ? 0.0625F : height2), 1.0D);
     }
@@ -109,7 +109,7 @@ public class BlockLargeRailBase extends BlockContainerCustomWithMeta {
         EntityPlayer player = holder.getPlayer();
         BlockPos pos = holder.getBlockPos();
         if (world.isRemote)
-            return super.removedByPlayer(holder, willHarvest);
+            return super.removedByPlayer(holder, willHarvest); 
         if (PermissionManager.INSTANCE.hasPermission(player, "editRail")) {
             if (!player.capabilities.isCreativeMode) {
                 int x = pos.getX();
@@ -117,16 +117,16 @@ public class BlockLargeRailBase extends BlockContainerCustomWithMeta {
                 int z = pos.getZ();
                 TileEntityLargeRailCore tile1 = getCore((IBlockAccess)world, pos);
                 if (tile1 != null)
-                    dropRail(world, x, y, z, tile1.getResourceState());
-            }
+                    dropRail(world, x, y, z, tile1.getResourceState()); 
+            } 
             return super.removedByPlayer(holder, willHarvest);
-        }
+        } 
         return false;
     }
 
     protected void dropRail(World world, int x, int y, int z, ResourceStateRail prop) {
         if (!world.isRemote)
-            spawnAsEntity(world, new BlockPos(x, y, z), ItemRail.getRailItem(prop));
+            spawnAsEntity(world, new BlockPos(x, y, z), ItemRail.getRailItem(prop)); 
     }
 
     public void breakBlock(World world, BlockPos pos, IBlockState state) {
@@ -134,8 +134,8 @@ public class BlockLargeRailBase extends BlockContainerCustomWithMeta {
         if (!world.isRemote && core != null) {
             RailMap[] railmaps = core.getAllRailMaps();
             for (RailMap rm : railmaps)
-                rm.breakRail(world, core.getResourceState(), core);
-        }
+                rm.breakRail(world, core.getResourceState(), core); 
+        } 
         super.breakBlock(world, pos, state);
     }
 
@@ -143,7 +143,7 @@ public class BlockLargeRailBase extends BlockContainerCustomWithMeta {
         if (world.isRemote) {
             TileEntityLargeRailCore rail = getCore((IBlockAccess)world, pos);
             if (rail == null || rail.getResourceState() == null)
-                return;
+                return; 
             Block base = (rail.getResourceState()).block;
             boolean isSnow = (base.getMaterial(base.getDefaultState()) == Material.SNOW);
             if (isSnow && entity instanceof EntityBogie) {
@@ -157,14 +157,14 @@ public class BlockLargeRailBase extends BlockContainerCustomWithMeta {
                         double vx = (d0 - entity.posX) * speed;
                         double vz = (d2 - entity.posZ) * speed;
                         world.spawnParticle(EnumParticleTypes.SNOW_SHOVEL, d0, d1, d2, vx, 0.125D, vz, new int[0]);
-                    }
-                }
-            }
+                    } 
+                } 
+            } 
         } else if (entity instanceof EntityTrainBase) {
             TileEntityLargeRailCore rail = getCore((IBlockAccess)world, pos);
             if (rail != null)
-                rail.colliding = true;
-        }
+                rail.colliding = true; 
+        } 
     }
 
     public boolean isCore() {
@@ -174,14 +174,14 @@ public class BlockLargeRailBase extends BlockContainerCustomWithMeta {
     public static TileEntityLargeRailCore getCore(IBlockAccess world, BlockPos pos) {
         TileEntity tile = world.getTileEntity(pos);
         if (tile instanceof TileEntityLargeRailBase)
-            return ((TileEntityLargeRailBase)tile).getRailCore();
+            return ((TileEntityLargeRailBase)tile).getRailCore(); 
         return null;
     }
 
     public ItemStack getPickBlock(IBlockState state, RayTraceResult target, World world, BlockPos pos, EntityPlayer player) {
         TileEntityLargeRailCore core = getCore((IBlockAccess)world, pos);
         if (core != null)
-            return ItemRail.copyItemFromRail(core);
+            return ItemRail.copyItemFromRail(core); 
         return null;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/BlockMarker.java b/src/api/rtm/jp/ngt/rtm/rail/BlockMarker.java
index 8b32c39..e6b72e7 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/BlockMarker.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/BlockMarker.java
@@ -73,7 +73,7 @@ public class BlockMarker extends BlockContainerCustomWithMeta {
                 items.add(new ItemStack((Block)this, 1, 0));
                 items.add(new ItemStack((Block)this, 1, 4));
                 break;
-        }
+        } 
     }
 
     public TileEntity createNewTileEntity(World world, int par2) {
@@ -82,7 +82,7 @@ public class BlockMarker extends BlockContainerCustomWithMeta {
 
     public static int getFacing(EntityLivingBase placer, boolean isDiagonal) {
         if (isDiagonal)
-            return NGTMath.floor(NGTMath.normalizeAngle(placer.rotationYaw + 180.0D) / 90.0D) & 0x3;
+            return NGTMath.floor(NGTMath.normalizeAngle(placer.rotationYaw + 180.0D) / 90.0D) & 0x3; 
         return NGTMath.floor(NGTMath.normalizeAngle(placer.rotationYaw + 180.0D) / 90.0D + 0.5D) & 0x3;
     }
 
@@ -103,20 +103,20 @@ public class BlockMarker extends BlockContainerCustomWithMeta {
         if (item != null) {
             TileEntity tile = world.getTileEntity(holder.getBlockPos());
             if (!(tile instanceof TileEntityMarker))
-                return true;
+                return true; 
             TileEntityMarker marker = (TileEntityMarker)tile;
             if (item.getItem() == Item.getItemFromBlock((Block)RTMBlock.marker) || item.getItem() == Item.getItemFromBlock((Block)RTMBlock.markerSwitch)) {
                 if (world.isRemote) {
                     makeRailMap(marker, x, y, z, player);
                     player.openGui(RTMCore.instance, RTMCore.guiIdRailMarker, world, x, y, z);
-                }
+                } 
                 return true;
-            }
-        }
+            } 
+        } 
         if (!world.isRemote)
             if (onMarkerActivated(world, x, y, z, player, true))
                 if (!player.capabilities.isCreativeMode)
-                    item.shrink(1);
+                    item.shrink(1);   
         return true;
     }
 
@@ -125,7 +125,7 @@ public class BlockMarker extends BlockContainerCustomWithMeta {
             onMarkerActivated(marker.getWorld(), x, y, z, player, false);
         } else {
             onMarkerActivated(marker.getWorld(), marker.startX, marker.startY, marker.startZ, player, false);
-        }
+        } 
     }
 
     public boolean onMarkerActivated(World world, int x, int y, int z, EntityPlayer player, boolean makeRail) {
@@ -134,9 +134,9 @@ public class BlockMarker extends BlockContainerCustomWithMeta {
             boolean isCreative = player.capabilities.isCreativeMode;
             List<RailPosition> rps = searchAllMarker(world, x, y, z);
             for (RailPosition rp : rps)
-                rp.addHeight((prop.blockHeight - 0.0625F));
+                rp.addHeight((prop.blockHeight - 0.0625F)); 
             return createRail(world, x, y, z, rps, prop, makeRail, isCreative);
-        }
+        } 
         return false;
     }
 
@@ -154,10 +154,10 @@ public class BlockMarker extends BlockContainerCustomWithMeta {
                     int z0 = z - dis1 + k;
                     RailPosition rp = getRailPosition(world, x0, y0, z0);
                     if (rp != null)
-                        list.add(rp);
-                }
-            }
-        }
+                        list.add(rp); 
+                } 
+            } 
+        } 
         list.sort((arg0, arg1) -> (arg0.switchType != arg1.switchType) ? (arg1.switchType - arg0.switchType) : ((arg0.blockY != arg1.blockY) ? (arg0.blockY - arg1.blockY) : (arg0.hashCode() - arg1.hashCode())));
         return list;
     }
@@ -172,10 +172,10 @@ public class BlockMarker extends BlockContainerCustomWithMeta {
                 RailPosition start = (rp2.blockY >= rp1.blockY) ? rp1 : rp2;
                 RailPosition end = (rp2.blockY >= rp1.blockY) ? rp2 : rp1;
                 createNormalRail(world, start, end, state, makeRail, isCreative);
-            }
+            } 
         } else if (rps.size() > 2) {
             createSwitchRail(world, x, y, z, rps, state, makeRail, isCreative);
-        }
+        } 
         return false;
     }
 
@@ -191,16 +191,16 @@ public class BlockMarker extends BlockContainerCustomWithMeta {
             tileEntityLargeRailCore.createRailMap();
             tileEntityLargeRailCore.sendPacket();
             if (BlockUtil.getBlock((IBlockAccess)world, end.blockX, end.blockY, end.blockZ) instanceof BlockMarker)
-                BlockUtil.setAir(world, end.blockX, end.blockY, end.blockZ);
+                BlockUtil.setAir(world, end.blockX, end.blockY, end.blockZ); 
             return true;
-        }
+        } 
         TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)world, start.blockX, start.blockY, start.blockZ);
         if (tile instanceof TileEntityMarker) {
             List<int[]> list = (List)new ArrayList<>();
             list.add(new int[] { start.blockX, start.blockY, start.blockZ });
             list.add(new int[] { end.blockX, end.blockY, end.blockZ });
             ((TileEntityMarker)tile).setMarkersPos(list, false);
-        }
+        } 
         return false;
     }
 
@@ -208,15 +208,15 @@ public class BlockMarker extends BlockContainerCustomWithMeta {
         RailMaker railMaker = new RailMaker(world, list);
         SwitchType st = railMaker.getSwitch();
         if (st == null)
-            return false;
+            return false; 
         RailMapSwitch[] arrayOfRailMapSwitch = st.getAllRailMap();
         if (arrayOfRailMapSwitch == null)
-            return false;
+            return false; 
         boolean flag = false;
         for (RailMap rm : arrayOfRailMapSwitch) {
             if (!rm.canPlaceRail(world, isCreative, prop))
-                flag = true;
-        }
+                flag = true; 
+        } 
         if (!makeRail || flag) {
             TileEntity tileEntity = BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
             if (tileEntity instanceof TileEntityMarker) {
@@ -224,22 +224,22 @@ public class BlockMarker extends BlockContainerCustomWithMeta {
                 for (int i = 0; i < list.size(); i++) {
                     RailPosition rp = list.get(i);
                     posList.add(new int[] { rp.blockX, rp.blockY, rp.blockZ });
-                }
+                } 
                 ((TileEntityMarker)tileEntity).setMarkersPos(posList, false);
-            }
+            } 
             return false;
-        }
+        } 
         RailPosition rps = list.get(0);
         x = rps.blockX;
         y = rps.blockY;
         z = rps.blockZ;
         for (RailMap rm : arrayOfRailMapSwitch)
-            rm.setRail(world, RTMRail.largeRailBase, x, y, z, prop);
+            rm.setRail(world, RTMRail.largeRailBase, x, y, z, prop); 
         for (RailPosition rp : list) {
             BlockUtil.setBlock(world, rp.blockX, rp.blockY, rp.blockZ, RTMRail.largeRailSwitchBase, 0, 3);
             TileEntityLargeRailSwitchBase tileEntityLargeRailSwitchBase = (TileEntityLargeRailSwitchBase)BlockUtil.getTileEntity((IBlockAccess)world, rp.blockX, rp.blockY, rp.blockZ);
             tileEntityLargeRailSwitchBase.setStartPoint(x, y, z);
-        }
+        } 
         BlockUtil.setBlock(world, x, y, z, RTMRail.largeRailSwitchCore, 0, 3);
         TileEntityLargeRailSwitchCore tile = (TileEntityLargeRailSwitchCore)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
         tile.setRailPositions(list.<RailPosition>toArray(new RailPosition[list.size()]));
@@ -259,14 +259,14 @@ public class BlockMarker extends BlockContainerCustomWithMeta {
             cx = start.blockX;
             cz = (start.blockZ + end.blockZ) / 2;
             r = Math.abs(start.blockZ - end.blockZ) / 2;
-        }
+        } 
         if (start.blockZ == end.blockZ && (start.blockX - end.blockX) % 2 == 0) {
             cx = (start.blockX + end.blockX) / 2;
             cz = start.blockZ;
             r = Math.abs(start.blockX - end.blockX) / 2;
-        }
+        } 
         if (r == 0)
-            return false;
+            return false; 
         RailMapTurntable railMap = new RailMapTurntable(start, end, cx, cy, cz, r);
         if (makeRail && railMap.canPlaceRail(world, isCreative, prop)) {
             railMap.setRail(world, RTMRail.largeRailBase, cx, cy, cz, prop);
@@ -278,7 +278,7 @@ public class BlockMarker extends BlockContainerCustomWithMeta {
             tile.createRailMap();
             tile.sendPacket();
             return true;
-        }
+        } 
         return false;
     }
 
@@ -286,14 +286,14 @@ public class BlockMarker extends BlockContainerCustomWithMeta {
         int i0 = meta & 0x3;
         int i1 = (6 - i0 & 0x3) * 2;
         if ((block == RTMBlock.marker || block == RTMBlock.markerSwitch) && meta >= 4)
-            i1 = i1 + 7 & 0x7;
+            i1 = i1 + 7 & 0x7; 
         return (byte)i1;
     }
 
     private RailPosition getRailPosition(World world, int x, int y, int z) {
         TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
         if (tile instanceof TileEntityMarker)
-            return ((TileEntityMarker)tile).getMarkerRP();
+            return ((TileEntityMarker)tile).getMarkerRP(); 
         return null;
     }
 
@@ -301,10 +301,10 @@ public class BlockMarker extends BlockContainerCustomWithMeta {
         if (PermissionManager.INSTANCE.hasPermission(player, "editRail")) {
             ItemStack item = player.inventory.getCurrentItem();
             if (item.getItem() == RTMItem.itemLargeRail)
-                return ((ItemRail)RTMItem.itemLargeRail).getModelState(item);
+                return ((ItemRail)RTMItem.itemLargeRail).getModelState(item); 
             if (player.capabilities.isCreativeMode || !par2)
-                return ItemRail.getDefaultProperty();
-        }
+                return ItemRail.getDefaultProperty(); 
+        } 
         return null;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/RenderLargeRail.java b/src/api/rtm/jp/ngt/rtm/rail/RenderLargeRail.java
index da4c193..155fbae 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/RenderLargeRail.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/RenderLargeRail.java
@@ -30,7 +30,7 @@ public class RenderLargeRail extends TileEntitySpecialRenderer<TileEntityLargeRa
 
     private void renderTileEntityLargeRail(TileEntityLargeRailCore tileEntity, double par2, double par4, double par6, float par8) {
         if (!tileEntity.isLoaded())
-            return;
+            return; 
         GL11.glPushMatrix();
         GL11.glEnable(32826);
         GL11.glEnable(2884);
@@ -47,7 +47,7 @@ public class RenderLargeRail extends TileEntitySpecialRenderer<TileEntityLargeRa
                 RailPartsRendererBase renderer = (RailPartsRendererBase)modelSet.modelObj.renderer;
                 renderer.renderRail(tileEntity, par2, par4, par6, par8);
             } catch (ClassCastException classCastException) {}
-        }
+        } 
         GL11.glPopAttrib();
         GL11.glDisable(32826);
         GL11.glPopMatrix();
@@ -59,12 +59,12 @@ public class RenderLargeRail extends TileEntitySpecialRenderer<TileEntityLargeRa
             tileEntity.railBlocks = (GLObject)GLHelper.generateVA();
         } else if (tileEntity.shouldRerenderBlock) {
             hasGLList = false;
-        }
+        } 
         if (!hasGLList)
             if (BLOCK_RENDERER.renderBlocks(tileEntity, (IRenderer)tileEntity.railBlocks)) {
                 tileEntity.shouldRerenderBlock = false;
                 hasGLList = true;
-            }
+            }  
         if (hasGLList) {
             GL11.glPushMatrix();
             GL11.glTranslatef((float)(par2 - tileEntity.getX()), (float)(par4 - tileEntity.getY()), (float)(par6 - tileEntity.getZ()));
@@ -73,6 +73,6 @@ public class RenderLargeRail extends TileEntitySpecialRenderer<TileEntityLargeRa
             GL11.glPopMatrix();
         } else {
             tileEntity.railBlocks = null;
-        }
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/RenderMarkerBlock.java b/src/api/rtm/jp/ngt/rtm/rail/RenderMarkerBlock.java
index 62c9477..bc66850 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/RenderMarkerBlock.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/RenderMarkerBlock.java
@@ -39,7 +39,7 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
 
     private RenderMarkerBlock() {
         for (int i = 0; i < this.displayStrings.length; i++)
-            this.displayStrings[i] = String.valueOf((i + 1) * 10) + "m";
+            this.displayStrings[i] = String.valueOf((i + 1) * 10) + "m"; 
     }
 
     public boolean isGlobalRenderer(TileEntityMarker tileEntity) {
@@ -55,19 +55,19 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
         renderGUI(tileEntity);
         GL11.glDisable(3553);
         if (tileEntity.displayGrid && tileEntity.getGrid() != null)
-            renderGrid(tileEntity);
+            renderGrid(tileEntity); 
         if (tileEntity.displayLine) {
             RailPosition rp0 = tileEntity.getMarkerRP();
             float x = (float)(rp0.posX - rp0.blockX);
             float y = (float)(rp0.posY - rp0.blockY);
             float z = (float)(rp0.posZ - rp0.blockZ);
             if (tileEntity.getRailMaps() != null)
-                renderLine(tileEntity, x, y, z);
+                renderLine(tileEntity, x, y, z); 
             if (tileEntity.startY > 0)
-                renderAnchor(tileEntity, x, y, z);
-        }
+                renderAnchor(tileEntity, x, y, z); 
+        } 
         if (tileEntity.displayDistance)
-            renderDistanceMark(tileEntity);
+            renderDistanceMark(tileEntity); 
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
         GLHelper.enableLighting();
         GL11.glEnable(3553);
@@ -84,41 +84,41 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
             marker.gui.addButton(new InternalButton(-2.4F, startY, 4.8F, 0.5F))
                 .setColor(buttonColor).setText("Anchor mode 2-1 : " + marker.displayLine, 16777215, 0.05F)
                 .setListner(button -> {
-                        marker.anchor21 ^= 0x1;
+                        marker.anchor21 ^= true;
                         if (marker.getCoreMarker() != null)
-                            (marker.getCoreMarker()).anchor21 = marker.anchor21;
+                            (marker.getCoreMarker()).anchor21 = marker.anchor21; 
                         button.setText("Anchor mode 2-1 : " + marker.anchor21, 16777215, 0.05F);
                     });
             startY += 0.6F;
             marker.gui.addButton(new InternalButton(-2.4F, startY, 4.8F, 0.5F))
                 .setColor(buttonColor).setText("Display line : " + marker.displayLine, 16777215, 0.05F)
                 .setListner(button -> {
-                        marker.displayLine ^= 0x1;
+                        marker.displayLine ^= true;
                         if (marker.getCoreMarker() != null)
-                            (marker.getCoreMarker()).displayLine = marker.displayLine;
+                            (marker.getCoreMarker()).displayLine = marker.displayLine; 
                         button.setText("Display line : " + marker.displayLine, 16777215, 0.05F);
                         if (marker.displayLine)
-                            marker.syncMarkerRM();
+                            marker.syncMarkerRM(); 
                     });
             startY += 0.6F;
             marker.gui.addButton(new InternalButton(-2.4F, startY, 4.8F, 0.5F))
                 .setColor(buttonColor).setText("Display grid : " + marker.displayGrid, 16777215, 0.05F)
                 .setListner(button -> {
-                        marker.displayGrid ^= 0x1;
+                        marker.displayGrid ^= true;
                         if (marker.getCoreMarker() != null)
-                            (marker.getCoreMarker()).displayGrid = marker.displayGrid;
+                            (marker.getCoreMarker()).displayGrid = marker.displayGrid; 
                         button.setText("Display grid : " + marker.displayGrid, 16777215, 0.05F);
                         if (marker.displayGrid)
-                            marker.syncMarkerRM();
+                            marker.syncMarkerRM(); 
                     });
             startY += 0.6F;
             marker.gui.addButton(new InternalButton(-2.4F, startY, 4.8F, 0.5F))
                 .setColor(buttonColor).setText("Display distance : " + marker.displayDistance, 16777215, 0.05F)
                 .setListner(button -> {
-                        marker.displayDistance ^= 0x1;
+                        marker.displayDistance ^= true;
                         button.setText("Display distance : " + marker.displayDistance, 16777215, 0.05F);
                     });
-        }
+        } 
         GL11.glPushMatrix();
         GL11.glTranslatef(0.5F, 0.0F, 0.5F);
         GL11.glRotatef(-(NGTUtilClient.getMinecraft().getRenderManager()).playerViewY + 180.0F, 0.0F, 1.0F, 0.0F);
@@ -134,7 +134,7 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
         for (int[] ia : marker.getGrid()) {
             BlockPos pos = marker.getPos();
             renderFrame(tessellator, (ia[0] - pos.getX()), (ia[1] - pos.getY()), (ia[2] - pos.getZ()), 1.0F, 1.0F, 1.0F);
-        }
+        } 
         tessellator.draw();
         GL11.glPopMatrix();
     }
@@ -160,8 +160,8 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
                 tessellator.addVertex(-0.4F + moveX, 0.0F, -0.4F + moveZ);
                 tessellator.addVertex(0.4F + moveX, 0.0F, -0.4F + moveZ);
                 tessellator.addVertex(0.4F + moveX, 0.0F, 0.4F + moveZ);
-            }
-        }
+            } 
+        } 
         tessellator.draw();
         GL11.glEnable(3553);
         FontRenderer fontRenderer = NGTUtilClient.getMinecraft().getRenderManager().getFontRenderer();
@@ -177,8 +177,8 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
                 int i0 = fontRenderer.getStringWidth(s) / 2;
                 fontRenderer.drawString(s, -i0 / 2, -10, color);
                 GL11.glPopMatrix();
-            }
-        }
+            } 
+        } 
         GL11.glPopMatrix();
     }
 
@@ -200,10 +200,10 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
                         (new float[3])[1] = (float)(rm.getRailHeight(max, k) - h2);
                         (new float[3])[2] = (float)(p1[0] - p2[0]);
                         marker.linePos[j][k] = new float[3];
-                    }
-                }
-            }
-        }
+                    } 
+                } 
+            } 
+        } 
         GL11.glPushMatrix();
         GL11.glTranslatef(x, y, z);
         NGTTessellator tessellator = NGTTessellator.instance;
@@ -218,27 +218,27 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
                 tessellator.startDrawing(3);
                 tessellator.setColorOpaque_I(16384);
                 for (int j = 0; j < (marker.linePos[i]).length; j++)
-                    tessellator.addVertex(marker.linePos[i][j][0], marker.linePos[i][j][1], marker.linePos[i][j][2]);
+                    tessellator.addVertex(marker.linePos[i][j][0], marker.linePos[i][j][1], marker.linePos[i][j][2]); 
                 tessellator.draw();
                 GL11.glPopMatrix();
-            }
-        }
+            } 
+        } 
         GL11.glPopMatrix();
     }
 
     private void renderAnchor(TileEntityMarker marker, float x, float y, float z) {
         if (changeAnchor(marker))
-            marker.linePos = (float[][][])null;
+            marker.linePos = (float[][][])null; 
         GL11.glPushMatrix();
         GL11.glTranslatef(x, y, z);
         MarkerElement hoveredElement = MarkerElement.values()[marker.editMode];
         if (marker.editMode == 0)
-            hoveredElement = renderAnchorLine(marker, true, null);
+            hoveredElement = renderAnchorLine(marker, true, null); 
         if (marker.editMode == 0 && hoveredElement != MarkerElement.NONE && Mouse.isButtonDown(1)) {
             marker.editMode = hoveredElement.ordinal();
             marker.startPlayerPitch = (NGTUtilClient.getMinecraft()).player.rotationPitch;
             marker.startMarkerHeight = (marker.getMarkerRP()).height;
-        }
+        } 
         renderAnchorLine(marker, false, hoveredElement);
         GL11.glPopMatrix();
     }
@@ -246,7 +246,7 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
     private MarkerElement renderAnchorLine(TileEntityMarker marker, boolean isPickMode, MarkerElement hoveredElement) {
         float lineWidth = (NGTUtilClient.getMinecraft()).displayHeight * 0.01F;
         if (isPickMode)
-            GLHelper.startMousePicking(lineWidth * 2.0F);
+            GLHelper.startMousePicking(lineWidth * 2.0F); 
         GL11.glDisable(3553);
         float prevPointSize = GL11.glGetFloat(2833);
         float prevLineWidth = GL11.glGetFloat(2849);
@@ -256,20 +256,20 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
         int shadow = 12632256;
         GL11.glPushMatrix();
         if (isPickMode)
-            GL11.glLoadName(MarkerElement.HEIGHT.ordinal());
+            GL11.glLoadName(MarkerElement.HEIGHT.ordinal()); 
         int color = MarkerElement.HEIGHT.getColor();
         color = (hoveredElement == MarkerElement.HEIGHT) ? ColorUtil.multiplicating(color, shadow) : color;
         renderLine(0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, color);
         GL11.glRotatef(rp.anchorYaw, 0.0F, 1.0F, 0.0F);
         if (isPickMode)
-            GL11.glLoadName(MarkerElement.HORIZONTIAL.ordinal());
+            GL11.glLoadName(MarkerElement.HORIZONTIAL.ordinal()); 
         color = MarkerElement.HORIZONTIAL.getColor();
         color = (hoveredElement == MarkerElement.HORIZONTIAL) ? ColorUtil.multiplicating(color, shadow) : color;
         renderLine(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, rp.anchorLengthHorizontal, color);
         GL11.glPushMatrix();
         GL11.glRotatef(-rp.anchorPitch, 1.0F, 0.0F, 0.0F);
         if (isPickMode)
-            GL11.glLoadName(MarkerElement.VERTICAL.ordinal());
+            GL11.glLoadName(MarkerElement.VERTICAL.ordinal()); 
         color = MarkerElement.VERTICAL.getColor();
         color = (hoveredElement == MarkerElement.VERTICAL) ? ColorUtil.multiplicating(color, shadow) : color;
         renderLine(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, rp.anchorLengthVertical, color);
@@ -278,7 +278,7 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
         float len = 1.0F;
         GL11.glRotatef(rp.cantEdge, 0.0F, 0.0F, 1.0F);
         if (isPickMode)
-            GL11.glLoadName(MarkerElement.CANT.ordinal());
+            GL11.glLoadName(MarkerElement.CANT.ordinal()); 
         color = MarkerElement.CANT.getColor();
         color = (hoveredElement == MarkerElement.CANT) ? ColorUtil.multiplicating(color, shadow) : color;
         renderLine(0.0F, 0.0F, 0.0F, len, 0.0F, 0.0F, color);
@@ -299,14 +299,14 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
             fontRenderer.drawString(String.valueOf(rp.anchorPitch), 3.0F, -16.0F, MarkerElement.VERTICAL.getColor(), false);
             fontRenderer.drawString(String.valueOf(rp.cantEdge), 3.0F, -10.0F, MarkerElement.CANT.getColor(), false);
             GL11.glPopMatrix();
-        }
+        } 
         if (isPickMode) {
             int hits = GLHelper.finishMousePicking();
             if (hits > 0) {
                 int pickedId = GLHelper.getPickedObjId(0);
                 return MarkerElement.values()[pickedId];
-            }
-        }
+            } 
+        } 
         return MarkerElement.NONE;
     }
 
@@ -325,11 +325,11 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
 
     private boolean changeAnchor(TileEntityMarker marker) {
         if (marker.editMode == 0 || marker.getCoreMarker() == null)
-            return false;
+            return false; 
         if (marker.editMode > 0 && Mouse.isButtonDown(1)) {
             marker.editMode = 0;
             RTMCore.NETWORK_WRAPPER.sendToServer((IMessage)new PacketMarkerRPClient(marker.getCoreMarker()));
-        }
+        } 
         MarkerElement curElm = MarkerElement.values()[marker.editMode];
         Minecraft mc = NGTUtilClient.getMinecraft();
         RailPosition rp = marker.getMarkerRP();
@@ -342,26 +342,26 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
                 rp.init();
                 marker.getCoreMarker().updateRailMap();
                 return true;
-            }
+            } 
             return false;
-        }
+        } 
         if (curElm == MarkerElement.CANT) {
             float cant = mc.player.rotationPitch - marker.startPlayerPitch;
             float cantLimit = 80.0F;
             cant = (cant < -cantLimit) ? -cantLimit : ((cant > cantLimit) ? cantLimit : cant);
             RailPosition neighborRP = getNeighborRail(marker);
             if (neighborRP != null)
-                cant = -neighborRP.cantEdge;
+                cant = -neighborRP.cantEdge; 
             rp.cantEdge = cant;
             RailMap map = marker.getRailMaps()[0];
             float cantAve = ((map.getStartRP()).cantEdge + (map.getEndRP()).cantEdge) * 0.5F;
             (map.getEndRP()).cantCenter = cantAve;
             marker.getCoreMarker().updateRailMap();
             return true;
-        }
+        } 
         RayTraceResult target = BlockUtil.getMOPFromPlayer((EntityPlayer)mc.player, 128.0D, true);
         if (target == null || target.typeOfHit != RayTraceResult.Type.BLOCK)
-            return false;
+            return false; 
         Vec3d targetVec = target.hitVec;
         boolean fitOpposite = false;
         RailPosition oppositeRP = getOppositeRail(marker);
@@ -370,15 +370,15 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
             if (dSq <= 4.0D) {
                 targetVec = new Vec3d(oppositeRP.posX, oppositeRP.posY, oppositeRP.posZ);
                 fitOpposite = true;
-            }
-        }
+            } 
+        } 
         if (marker.anchor21) {
             double d0 = 0.6666666666666666D;
             double x = (targetVec.x - rp.posX) * d0 + rp.posX;
             double y = (targetVec.y - rp.posY) * d0 + rp.posY;
             double z = (targetVec.z - rp.posZ) * d0 + rp.posZ;
             targetVec = new Vec3d(x, y, z);
-        }
+        } 
         double dx = targetVec.x - rp.posX;
         double dz = targetVec.z - rp.posZ;
         if (dx != 0.0D && dz != 0.0D) {
@@ -388,7 +388,7 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
             float yaw = NGTMath.toDegrees(dirRad);
             if (curElm == MarkerElement.HORIZONTIAL) {
                 if (neighborRP != null)
-                    yaw = MathHelper.wrapDegrees(neighborRP.anchorYaw + 180.0F);
+                    yaw = MathHelper.wrapDegrees(neighborRP.anchorYaw + 180.0F); 
                 rp.anchorYaw = yaw;
                 rp.anchorLengthHorizontal = length;
             } else if (curElm == MarkerElement.VERTICAL) {
@@ -398,31 +398,31 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
                 } else if (fitOpposite) {
                     double dy = targetVec.y - rp.posY;
                     pitch = (float)NGTMath.toDegrees(Math.atan2(dy, NGTMath.firstSqrt(dx * dx + dz * dz)));
-                }
+                } 
                 rp.anchorPitch = pitch;
                 rp.anchorLengthVertical = length;
-            }
+            } 
             marker.getCoreMarker().updateRailMap();
             return true;
-        }
+        } 
         return false;
     }
 
     private RailPosition getOppositeRail(TileEntityMarker tileEntity) {
         if (tileEntity.getRailMaps() == null)
-            return null;
+            return null; 
         RailPosition rp = tileEntity.getMarkerRP();
         RailPosition oppositeRP = null;
         for (RailMap map : tileEntity.getRailMaps()) {
             if (map.getStartRP().equals(rp)) {
                 oppositeRP = map.getEndRP();
                 break;
-            }
+            } 
             if (map.getEndRP().equals(rp)) {
                 oppositeRP = map.getStartRP();
                 break;
-            }
-        }
+            } 
+        } 
         return oppositeRP;
     }
 
@@ -431,10 +431,10 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
         BlockPos neighborPos = tileEntity.getMarkerRP().getNeighborBlockPos();
         TileEntity tile = tileEntity.getWorld().getTileEntity(neighborPos);
         if (!(tile instanceof TileEntityLargeRailBase))
-            return null;
+            return null; 
         TileEntityLargeRailCore core = ((TileEntityLargeRailBase)tile).getRailCore();
         if (core == null)
-            return null;
+            return null; 
         double distanceSq = Double.MAX_VALUE;
         RailPosition rp = null;
         for (RailMap map : core.getAllRailMaps()) {
@@ -442,13 +442,13 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
             if (d2 < distanceSq) {
                 distanceSq = d2;
                 rp = map.getStartRP();
-            }
+            } 
             d2 = NGTMath.getDistanceSq((tileEntity.getMarkerRP()).posX, (tileEntity.getMarkerRP()).posZ, (map.getEndRP()).posX, (map.getEndRP()).posZ);
             if (d2 < distanceSq) {
                 distanceSq = d2;
                 rp = map.getEndRP();
-            }
-        }
+            } 
+        } 
         return rp;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/RenderRailBlock.java b/src/api/rtm/jp/ngt/rtm/rail/RenderRailBlock.java
index 35c2b7d..6c1152b 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/RenderRailBlock.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/RenderRailBlock.java
@@ -26,13 +26,13 @@ public final class RenderRailBlock {
     public boolean renderBlocks(TileEntityLargeRailCore tileEntity, IRenderer renderer) {
         RailMap[] rms = tileEntity.getAllRailMaps();
         if (rms == null)
-            return false;
+            return false; 
         boolean flag = true;
         List<int[]> blockPosList = (List)new ArrayList<>();
         for (RailMap rm : rms)
-            blockPosList.addAll(rm.getRailBlockList(tileEntity.getResourceState()));
+            blockPosList.addAll(rm.getRailBlockList(tileEntity.getResourceState())); 
         if (blockPosList.size() < 2)
-            return false;
+            return false; 
         renderer.startDrawing(7);
         for (int[] ia : blockPosList) {
             World world = tileEntity.getWorld();
@@ -48,17 +48,17 @@ public final class RenderRailBlock {
             } catch (ClassCastException e) {
                 renderMissingBlock(renderer, (IBlockAccess)world, x, y, z);
                 flag = false;
-            }
-        }
+            } 
+        } 
         if (renderer instanceof VertexArray2) {
             if (flag) {
                 renderer.draw();
             } else {
                 ((VertexArray2)renderer).cancel();
-            }
+            } 
         } else {
             renderer.draw();
-        }
+        } 
         return flag;
     }
 
@@ -67,7 +67,7 @@ public final class RenderRailBlock {
         TileEntityLargeRailCore core = tile.getRailCore();
         ResourceStateRail prop = core.getResourceState();
         if (prop.block == Blocks.AIR)
-            return;
+            return; 
         float[] fa = tile.getBlockHeights(x, y, z, prop.blockHeight, false);
         float y0 = fa[0];
         float y1 = fa[1];
@@ -81,7 +81,7 @@ public final class RenderRailBlock {
             y1 += 0.125F;
             y2 += 0.125F;
             y3 += 0.125F;
-        }
+        } 
         IBlockState sideBlock = BlockUtil.getBlockState(world, x, y, z + 1);
         if (!sideBlock.isOpaqueCube() && !(sideBlock.getBlock() instanceof BlockLargeRailBase)) {
             TextureAtlasSprite textureAtlasSprite = getIcon(prop.block, prop.meta, 3);
@@ -94,7 +94,7 @@ public final class RenderRailBlock {
             renderer.addVertexWithUV(x + 0.0F, y + 0.0F, z + 1.0F, f1, f3);
             renderer.addVertexWithUV(x + 1.0F, y + 0.0F, z + 1.0F, f2, f3);
             renderer.addVertexWithUV(x + 1.0F, y + y1, z + 1.0F, f2, f3 - f4 * getV(y1));
-        }
+        } 
         sideBlock = BlockUtil.getBlockState(world, x + 1, y, z);
         if (!sideBlock.isOpaqueCube() && !(sideBlock.getBlock() instanceof BlockLargeRailBase)) {
             TextureAtlasSprite textureAtlasSprite = getIcon(prop.block, prop.meta, 5);
@@ -107,7 +107,7 @@ public final class RenderRailBlock {
             renderer.addVertexWithUV(x + 1.0F, y + 0.0F, z + 1.0F, f1, f3);
             renderer.addVertexWithUV(x + 1.0F, y + 0.0F, z + 0.0F, f2, f3);
             renderer.addVertexWithUV(x + 1.0F, y + y2, z + 0.0F, f2, f3 - f4 * getV(y2));
-        }
+        } 
         sideBlock = BlockUtil.getBlockState(world, x, y, z - 1);
         if (!sideBlock.isOpaqueCube() && !(sideBlock.getBlock() instanceof BlockLargeRailBase)) {
             TextureAtlasSprite textureAtlasSprite = getIcon(prop.block, prop.meta, 2);
@@ -120,7 +120,7 @@ public final class RenderRailBlock {
             renderer.addVertexWithUV(x + 1.0F, y + 0.0F, z + 0.0F, f1, f3);
             renderer.addVertexWithUV(x + 0.0F, y + 0.0F, z + 0.0F, f2, f3);
             renderer.addVertexWithUV(x + 0.0F, y + y3, z + 0.0F, f2, f3 - f4 * getV(y3));
-        }
+        } 
         sideBlock = BlockUtil.getBlockState(world, x - 1, y, z);
         if (!sideBlock.isOpaqueCube() && !(sideBlock.getBlock() instanceof BlockLargeRailBase)) {
             TextureAtlasSprite textureAtlasSprite = getIcon(prop.block, prop.meta, 4);
@@ -133,7 +133,7 @@ public final class RenderRailBlock {
             renderer.addVertexWithUV(x + 0.0F, y + 0.0F, z + 0.0F, f1, f3);
             renderer.addVertexWithUV(x + 0.0F, y + 0.0F, z + 1.0F, f2, f3);
             renderer.addVertexWithUV(x + 0.0F, y + y0, z + 1.0F, f2, f3 - f4 * getV(y0));
-        }
+        } 
         TextureAtlasSprite icon = getIcon(prop.block, prop.meta, 1);
         float minU = icon.getMinU();
         float maxU = icon.getMaxU();
@@ -156,7 +156,7 @@ public final class RenderRailBlock {
             renderer.addVertexWithUV(x + 1.0F, y, z + 0.0F, minU, maxV);
             renderer.addVertexWithUV(x + 1.0F, y, z + 1.0F, maxU, maxV);
             renderer.addVertexWithUV(x + 0.0F, y, z + 1.0F, maxU, maxV - v);
-        }
+        } 
     }
 
     private void renderMissingBlock(IRenderer renderer, IBlockAccess world, int x, int y, int z) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/RenderTurntable.java b/src/api/rtm/jp/ngt/rtm/rail/RenderTurntable.java
index 2524cce..cf4eb8c 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/RenderTurntable.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/RenderTurntable.java
@@ -17,7 +17,7 @@ public class RenderTurntable extends RenderLargeRail {
 
     private void renderTurntable(TileEntityTurnTableCore tileEntity, double par2, double par4, double par6, float par8) {
         if (!tileEntity.isLoaded())
-            return;
+            return; 
         GL11.glPushMatrix();
         GL11.glEnable(32826);
         GL11.glEnable(2884);
@@ -37,7 +37,7 @@ public class RenderTurntable extends RenderLargeRail {
                 RailPartsRendererBase renderer = (RailPartsRendererBase)modelSet.modelObj.renderer;
                 renderer.renderRail(tileEntity, par2, par4, par6, par8);
             } catch (ClassCastException classCastException) {}
-        }
+        } 
         GL11.glPopAttrib();
         GL11.glDisable(32826);
         GL11.glPopMatrix();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityLargeRailBase.java b/src/api/rtm/jp/ngt/rtm/rail/TileEntityLargeRailBase.java
index 01fa44a..f6d17bd 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityLargeRailBase.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/TileEntityLargeRailBase.java
@@ -55,13 +55,13 @@ public class TileEntityLargeRailBase extends TileEntityCustom implements ILargeR
         if (getWorld() == null || !(getWorld()).isRemote) {
             markDirty();
             sendPacket();
-        }
+        } 
     }
 
     public boolean isTrainOnRail() {
         TileEntityLargeRailCore tile = getRailCore();
         if (tile != null)
-            return tile.isCollidedTrain;
+            return tile.isCollidedTrain; 
         return false;
     }
 
@@ -74,20 +74,20 @@ public class TileEntityLargeRailBase extends TileEntityCustom implements ILargeR
             if (!this.finishSetupBlockBounds && getRailCore() != null) {
                 BlockUtil.markBlockForUpdate(getWorld(), getPos());
                 this.finishSetupBlockBounds = true;
-            }
+            }  
     }
 
     public RailMap getRailMap(Entity entity) {
         TileEntityLargeRailCore tile = getRailCore();
         if (tile != null)
-            return tile.getRailMap(entity);
+            return tile.getRailMap(entity); 
         return null;
     }
 
     public TileEntityLargeRailCore getRailCore() {
         TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)getWorld(), this.startPoint[0], this.startPoint[1], this.startPoint[2]);
         if (tile != null && tile instanceof TileEntityLargeRailCore)
-            return (TileEntityLargeRailCore)tile;
+            return (TileEntityLargeRailCore)tile; 
         return null;
     }
 
@@ -98,19 +98,19 @@ public class TileEntityLargeRailBase extends TileEntityCustom implements ILargeR
         while (y > minY) {
             Block block = BlockUtil.getBlock((IBlockAccess)world, x, y, z);
             if (block instanceof BlockLargeRailBase)
-                break;
+                break; 
             y--;
-        }
+        } 
         TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
         if (tile != null && tile instanceof TileEntityLargeRailBase)
-            return (TileEntityLargeRailBase)tile;
+            return (TileEntityLargeRailBase)tile; 
         return null;
     }
 
     public static RailMap getRailMapFromCoordinates(World world, Entity entity, double px, double py, double pz) {
         TileEntityLargeRailBase rail = getRailFromCoordinates(world, px, py, pz, 0);
         if (rail != null)
-            return rail.getRailMap(entity);
+            return rail.getRailMap(entity); 
         return null;
     }
 
@@ -118,25 +118,25 @@ public class TileEntityLargeRailBase extends TileEntityCustom implements ILargeR
         if (this.blockType == null) {
             Block block = this.world.getBlockState(getPos()).getBlock();
             if (block instanceof BlockLargeRailBase)
-                this.blockType = block;
-        }
+                this.blockType = block; 
+        } 
         return this.blockType;
     }
 
     public float[] getBlockHeights(int x, int y, int z, float defaultHeight, boolean useCache) {
         if (useCache && this.blockHeights != null)
-            return this.blockHeights;
+            return this.blockHeights; 
         if (this.finishSetupBlockBounds || !useCache) {
             float[] fa = getBlockHeights(x, y, z, defaultHeight);
             if (fa != null) {
                 if (useCache) {
                     this.blockHeights = fa;
                     if (!this.world.isRemote)
-                        this.finishSetupBlockBounds = true;
-                }
+                        this.finishSetupBlockBounds = true; 
+                } 
                 return fa;
-            }
-        }
+            } 
+        } 
         float f0 = 0.0625F;
         return new float[] { f0, f0, f0, f0 };
     }
@@ -144,10 +144,10 @@ public class TileEntityLargeRailBase extends TileEntityCustom implements ILargeR
     private float[] getBlockHeights(int x, int y, int z, float defaultHeight) {
         TileEntityLargeRailCore core = getRailCore();
         if (core == null)
-            return null;
+            return null; 
         RailMap[] rms = core.getAllRailMaps();
         if (rms == null)
-            return null;
+            return null; 
         float[] fa = { defaultHeight, defaultHeight, defaultHeight, defaultHeight };
         for (int i = 0; i < fa.length; i++) {
             int x0 = x + ((i == 1 || i == 2) ? 1 : 0);
@@ -156,7 +156,7 @@ public class TileEntityLargeRailBase extends TileEntityCustom implements ILargeR
             for (RailMap rm : rms) {
                 int index = rm.getNearlestPoint(128, x0, z0);
                 if (index < 0)
-                    index = 0;
+                    index = 0; 
                 double[] rpos = rm.getRailPos(128, index);
                 double dSq2 = NGTMath.getDistanceSq(x0, z0, rpos[1], rpos[0]);
                 if (dSq2 < distanceSq) {
@@ -169,9 +169,9 @@ public class TileEntityLargeRailBase extends TileEntityCustom implements ILargeR
                     boolean dirFlag = (NGTMath.wrapAngle(yaw2 - yaw) > 0.0F);
                     double h2 = NGTMath.sin(cant) * len * (dirFlag ? -1.0F : 1.0F);
                     fa[i] = (float)(height - y + h2);
-                }
-            }
-        }
+                } 
+            } 
+        } 
         return fa;
     }
 
@@ -182,9 +182,9 @@ public class TileEntityLargeRailBase extends TileEntityCustom implements ILargeR
             if (!property.getBlockState().isOpaqueCube()) {
                 IBlockState state = getWorld().getBlockState(getPos().down());
                 if (!state.isOpaqueCube())
-                    return true;
-            }
-        }
+                    return true; 
+            } 
+        } 
         return false;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityLargeRailCore.java b/src/api/rtm/jp/ngt/rtm/rail/TileEntityLargeRailCore.java
index c28a0d3..41641f3 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityLargeRailCore.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/TileEntityLargeRailCore.java
@@ -58,13 +58,13 @@ public abstract class TileEntityLargeRailCore extends TileEntityLargeRailBase im
         super.readFromNBT(nbt);
         this.state.readFromNBT(nbt.getCompoundTag("State"));
         if (this.state.version < 1)
-            this.state.readFromNBT(nbt.getCompoundTag("Property"));
+            this.state.readFromNBT(nbt.getCompoundTag("Property")); 
         readRailData(nbt);
     }
 
     protected void readRailData(NBTTagCompound nbt) {
         if (!nbt.hasKey("StartRP"))
-            return;
+            return; 
         this.railPositions = new RailPosition[2];
         this.railPositions[0] = RailPosition.readFromNBT(nbt.getCompoundTag("StartRP"));
         this.railPositions[1] = RailPosition.readFromNBT(nbt.getCompoundTag("EndRP"));
@@ -90,7 +90,7 @@ public abstract class TileEntityLargeRailCore extends TileEntityLargeRailBase im
 
     public void createRailMap() {
         if (isLoaded())
-            this.railmap = new RailMap(this.railPositions[0], this.railPositions[1]);
+            this.railmap = new RailMap(this.railPositions[0], this.railPositions[1]); 
     }
 
     public boolean isLoaded() {
@@ -114,11 +114,12 @@ public abstract class TileEntityLargeRailCore extends TileEntityLargeRailBase im
     }
 
     public TileEntityLargeRailCore getRailCore() {
+        return this;
     }
 
     public void sendPacket() {
         if ((this.world == null || !this.world.isRemote) && isLoaded())
-            RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)new PacketLargeRailCore(this, getPacketType()));
+            RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)new PacketLargeRailCore(this, getPacketType())); 
     }
 
     public byte getPacketType() {
@@ -127,12 +128,12 @@ public abstract class TileEntityLargeRailCore extends TileEntityLargeRailBase im
 
     public void onChunkUnload() {
         if (this.world.isRemote)
-            GLHelper.deleteGLList(this.glList);
+            GLHelper.deleteGLList(this.glList); 
     }
 
     public void invalidate() {
         if (this.world.isRemote)
-            GLHelper.deleteGLList(this.glList);
+            GLHelper.deleteGLList(this.glList); 
     }
 
     public void update() {
@@ -142,7 +143,7 @@ public abstract class TileEntityLargeRailCore extends TileEntityLargeRailBase im
             this.colliding = false;
         } else {
             updateBrightness();
-        }
+        } 
     }
 
     @SideOnly(Side.CLIENT)
@@ -158,13 +159,13 @@ public abstract class TileEntityLargeRailCore extends TileEntityLargeRailBase im
                 this.brightness = i;
                 this.shouldRerenderRail = true;
                 this.shouldRerenderBlock = true;
-            }
-        }
+            } 
+        } 
     }
 
     public RailMap getRailMap(Entity entity) {
         if (this.railmap == null)
-            createRailMap();
+            createRailMap(); 
         return this.railmap;
     }
 
@@ -183,12 +184,12 @@ public abstract class TileEntityLargeRailCore extends TileEntityLargeRailBase im
     @SideOnly(Side.CLIENT)
     public AxisAlignedBB getRenderBoundingBox() {
         if (!isLoaded())
-            return INFINITE_EXTENT_AABB;
+            return INFINITE_EXTENT_AABB; 
         if (this.renderAABB == null) {
             this.renderAABB = getRenderAABB();
             if (this.renderAABB == null)
-                return INFINITE_EXTENT_AABB;
-        }
+                return INFINITE_EXTENT_AABB; 
+        } 
         return this.renderAABB;
     }
 
@@ -197,7 +198,7 @@ public abstract class TileEntityLargeRailCore extends TileEntityLargeRailBase im
         AABBInt box = getRailSize();
         AxisAlignedBB aabb = new AxisAlignedBB((box.minX - 1), box.minY, (box.minZ - 1), (box.maxX + 2), (box.maxY + 2), (box.maxZ + 2));
         if (aabb.maxX - aabb.minX <= 3.0D && aabb.maxZ - aabb.minZ <= 3.0D)
-            return null;
+            return null; 
         return aabb;
     }
 
@@ -222,7 +223,7 @@ public abstract class TileEntityLargeRailCore extends TileEntityLargeRailBase im
         int difY = y - prevY;
         int difZ = z - prevZ;
         for (RailPosition rp : this.railPositions)
-            rp.movePos(difX, difY, difZ);
+            rp.movePos(difX, difY, difZ); 
         super.setPos(x, y, z, prevX, prevY, prevZ);
     }
 
@@ -230,7 +231,7 @@ public abstract class TileEntityLargeRailCore extends TileEntityLargeRailBase im
         if (this.world == null || !this.world.isRemote) {
             markDirty();
             sendPacket();
-        }
+        } 
         this.shouldRerenderBlock = this.shouldRerenderRail = true;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityLargeRailSwitchCore.java b/src/api/rtm/jp/ngt/rtm/rail/TileEntityLargeRailSwitchCore.java
index e92b575..71ea21f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityLargeRailSwitchCore.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/TileEntityLargeRailSwitchCore.java
@@ -25,7 +25,7 @@ public class TileEntityLargeRailSwitchCore extends TileEntityLargeRailCore {
         byte size = nbt.getByte("Size");
         this.railPositions = new RailPosition[size];
         for (int i = 0; i < size; i++)
-            this.railPositions[i] = RailPosition.readFromNBT(nbt.getCompoundTag("RP" + i));
+            this.railPositions[i] = RailPosition.readFromNBT(nbt.getCompoundTag("RP" + i)); 
     }
 
     private RailPosition getRP(int x, int y, int z, byte dir, boolean b) {
@@ -37,7 +37,7 @@ public class TileEntityLargeRailSwitchCore extends TileEntityLargeRailCore {
     protected void writeRailData(NBTTagCompound nbt) {
         nbt.setByte("Size", (byte)this.railPositions.length);
         for (int i = 0; i < this.railPositions.length; i++)
-            nbt.setTag("RP" + i, (NBTBase)this.railPositions[i].writeToNBT());
+            nbt.setTag("RP" + i, (NBTBase)this.railPositions[i].writeToNBT()); 
     }
 
     public void setRailPositions(RailPosition[] par1) {
@@ -47,12 +47,12 @@ public class TileEntityLargeRailSwitchCore extends TileEntityLargeRailCore {
 
     public void createRailMap() {
         if (isLoaded() && this.switchObj == null)
-            this.switchObj = (new RailMaker(getWorld(), this.railPositions)).getSwitch();
+            this.switchObj = (new RailMaker(getWorld(), this.railPositions)).getSwitch(); 
     }
 
     public SwitchType getSwitch() {
         if (this.switchObj == null)
-            createRailMap();
+            createRailMap(); 
         return this.switchObj;
     }
 
@@ -63,27 +63,27 @@ public class TileEntityLargeRailSwitchCore extends TileEntityLargeRailCore {
     public void update() {
         super.update();
         if (getSwitch() != null)
-            getSwitch().onUpdate(getWorld());
+            getSwitch().onUpdate(getWorld()); 
     }
 
     public void onBlockChanged() {
         getSwitch().onBlockChanged(getWorld());
         if (!(getWorld()).isRemote)
-            sendPacket();
+            sendPacket(); 
     }
 
     public RailMap getRailMap(Entity entity) {
         SwitchType st = getSwitch();
         if (st == null)
-            return null;
+            return null; 
         if (entity == null)
-            return getAllRailMaps()[0];
+            return getAllRailMaps()[0]; 
         return st.getRailMap(entity);
     }
 
     public RailMapSwitch[] getAllRailMaps() {
         if (getSwitch() != null)
-            return getSwitch().getAllRailMap();
+            return getSwitch().getAllRailMap(); 
         return null;
     }
 
@@ -107,7 +107,7 @@ public class TileEntityLargeRailSwitchCore extends TileEntityLargeRailCore {
             maxX = (maxX >= rp.blockX) ? maxX : rp.blockX;
             minZ = (minZ <= rp.blockZ) ? minZ : rp.blockZ;
             maxZ = (maxZ >= rp.blockZ) ? maxZ : rp.blockZ;
-        }
+        } 
         return new AABBInt(minX, minY, minZ, maxX, maxY, maxZ);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityMarker.java b/src/api/rtm/jp/ngt/rtm/rail/TileEntityMarker.java
index dc0fd9d..5862b27 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityMarker.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/TileEntityMarker.java
@@ -63,13 +63,13 @@ public class TileEntityMarker extends TileEntityCustom implements ITickable {
     public void readFromNBT(NBTTagCompound nbt) {
         super.readFromNBT(nbt);
         if (nbt.hasKey("RP"))
-            this.rp = RailPosition.readFromNBT(nbt.getCompoundTag("RP"));
+            this.rp = RailPosition.readFromNBT(nbt.getCompoundTag("RP")); 
     }
 
     public NBTTagCompound writeToNBT(NBTTagCompound nbt) {
         super.writeToNBT(nbt);
         if (this.rp != null)
-            nbt.setTag("RP", (NBTBase)this.rp.writeToNBT());
+            nbt.setTag("RP", (NBTBase)this.rp.writeToNBT()); 
         return nbt;
     }
 
@@ -78,7 +78,7 @@ public class TileEntityMarker extends TileEntityCustom implements ITickable {
             byte dir = BlockMarker.getMarkerDir(getBlockType(), getBlockMetadata());
             byte type = (byte)((getBlockType() == RTMBlock.markerSwitch) ? 1 : 0);
             this.rp = new RailPosition(getPos().getX(), getPos().getY(), getPos().getZ(), dir, type);
-        }
+        } 
     }
 
     public RailPosition getMarkerRP() {
@@ -92,7 +92,7 @@ public class TileEntityMarker extends TileEntityCustom implements ITickable {
     private RailPosition getMarkerRP(int x, int y, int z) {
         TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)getWorld(), x, y, z);
         if (tile instanceof TileEntityMarker)
-            return ((TileEntityMarker)tile).rp;
+            return ((TileEntityMarker)tile).rp; 
         return null;
     }
 
@@ -116,27 +116,27 @@ public class TileEntityMarker extends TileEntityCustom implements ITickable {
                 if (rp0 != null && rp1 != null) {
                     RailMap rm = new RailMap(rp0, rp1);
                     this.railMaps = new RailMap[] { rm };
-                }
-            }
+                } 
+            } 
         } else {
             List<RailPosition> list2 = new ArrayList<>();
             for (int[] ia : list) {
                 RailPosition rp0 = getMarkerRP(ia[0], ia[1], ia[2]);
                 if (rp0 != null)
-                    list2.add(rp0);
-            }
+                    list2.add(rp0); 
+            } 
             this.railMaps = (RailMap[])(new RailMaker(getWorld(), list2)).getSwitch().getAllRailMap();
-        }
+        } 
         if (this.railMaps == null)
-            return;
+            return; 
         this.markerPosList = list;
         if (isClient) {
             this.grid = (List)new ArrayList<>();
             for (RailMap rm : this.railMaps) {
                 boolean flag = false;
                 this.grid.addAll(rm.getRailBlockList(ItemRail.getDefaultProperty()));
-            }
-        }
+            } 
+        } 
         for (int i = 0; i < list.size(); i++) {
             int[] ia = list.get(i);
             TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)getWorld(), ia[0], ia[1], ia[2]);
@@ -144,10 +144,10 @@ public class TileEntityMarker extends TileEntityCustom implements ITickable {
                 TileEntityMarker marker = (TileEntityMarker)tile;
                 marker.setStartPos(getPos().getX(), getPos().getY(), getPos().getZ());
                 marker.railMaps = this.railMaps;
-            }
-        }
+            } 
+        } 
         if (!isClient)
-            RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)new PacketMarker(this, list));
+            RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)new PacketMarker(this, list)); 
     }
 
     private void setStartPos(int x, int y, int z) {
@@ -158,30 +158,30 @@ public class TileEntityMarker extends TileEntityCustom implements ITickable {
             this.markerPosList.clear();
             this.railMaps = null;
             this.grid = null;
-        }
+        } 
     }
 
     public TileEntityMarker getCoreMarker() {
         if (this.startY < 0)
-            return null;
+            return null; 
         if (this.coreMarker == null || this.coreMarker.getPos().getX() != this.startX || this.coreMarker.getPos().getY() != this.startY || this.coreMarker.getPos().getZ() != this.startZ) {
             this.coreMarker = null;
             TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)getWorld(), this.startX, this.startY, this.startZ);
             if (tile instanceof TileEntityMarker)
-                this.coreMarker = (TileEntityMarker)tile;
-        }
+                this.coreMarker = (TileEntityMarker)tile; 
+        } 
         return this.coreMarker;
     }
 
     public RailPosition[] getAllRP() {
         if (this.markerPosList.isEmpty())
-            return new RailPosition[] { this.rp };
+            return new RailPosition[] { this.rp }; 
         List<RailPosition> list2 = new ArrayList<>();
         for (int[] ia : this.markerPosList) {
             RailPosition rp0 = getMarkerRP(ia[0], ia[1], ia[2]);
             if (rp0 != null)
-                list2.add(rp0);
-        }
+                list2.add(rp0); 
+        } 
         return list2.<RailPosition>toArray(new RailPosition[list2.size()]);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityTurnTableCore.java b/src/api/rtm/jp/ngt/rtm/rail/TileEntityTurnTableCore.java
index 817a996..8e9b168 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityTurnTableCore.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/TileEntityTurnTableCore.java
@@ -41,18 +41,18 @@ public class TileEntityTurnTableCore extends TileEntityLargeRailCore {
         super.update();
         boolean b = (this.world.getRedstonePowerFromNeighbors(getPos()) > 0);
         if (this.isGettingPower ^ b)
-            this.isGettingPower = b;
+            this.isGettingPower = b; 
         if (!(getWorld()).isRemote) {
             float f0 = this.rotation % 15.0F;
             if (this.isGettingPower || f0 != 0.0F) {
                 this.rotation += 0.5F;
                 if (this.rotation >= 360.0F)
-                    this.rotation = 0.0F;
+                    this.rotation = 0.0F; 
                 RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)new PacketNotice((byte)1, "TT:" + getRotation(), (TileEntity)this));
                 ((RailMapTurntable)getRailMap((Entity)null)).setRotation(this.rotation);
                 updateTrainYaw();
-            }
-        }
+            } 
+        } 
     }
 
     private void updateTrainYaw() {
@@ -64,7 +64,7 @@ public class TileEntityTurnTableCore extends TileEntityLargeRailCore {
             train.setPositionAndRotation(getX() + 0.5D + vec.getX(), train.posY, getZ() + 0.5D + vec.getZ(), train.rotationYaw + 0.5F, train.rotationPitch);
             train.bogieController.updateBogiePos(train, 0, BogieController.UpdateFlag.YAW);
             train.bogieController.updateBogiePos(train, 1, BogieController.UpdateFlag.YAW);
-        }
+        } 
     }
 
     public void createRailMap() {
@@ -76,9 +76,9 @@ public class TileEntityTurnTableCore extends TileEntityLargeRailCore {
                 r = Math.abs(start.blockZ - end.blockZ) / 2;
             } else if (start.blockZ == end.blockZ) {
                 r = Math.abs(start.blockX - end.blockX) / 2;
-            }
+            } 
             this.railmap = new RailMapTurntable(start, end, getX(), getY(), getZ(), r);
-        }
+        } 
     }
 
     public float getRotation() {
@@ -99,14 +99,14 @@ public class TileEntityTurnTableCore extends TileEntityLargeRailCore {
             int lenHalf = (startX == endX) ? (Math.abs(endZ - startZ) / 2) : (Math.abs(endX - startX) / 2);
             AxisAlignedBB aabb = new AxisAlignedBB((getX() - lenHalf), getY(), (getZ() - lenHalf), (getX() + lenHalf + 1), (getY() + 3), (getZ() + lenHalf + 1));
             return aabb;
-        }
+        } 
         return null;
     }
 
     public void sendPacket() {
         super.sendPacket();
         if (this.world == null || !this.world.isRemote)
-            RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)new PacketNotice((byte)1, "TT:" + getRotation(), (TileEntity)this));
+            RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)new PacketNotice((byte)1, "TT:" + getRotation(), (TileEntity)this)); 
     }
 
     public String getRailShapeName() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/Point.java b/src/api/rtm/jp/ngt/rtm/rail/util/Point.java
index 2268165..3e284a5 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/Point.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/util/Point.java
@@ -57,10 +57,10 @@ public final class Point {
         boolean hasRSInput = this.rpRoot.checkRSInput(world);
         if (hasRSInput) {
             if (this.moveCount < 80)
-                this.moveCount++;
+                this.moveCount++; 
         } else if (this.moveCount > 0) {
             this.moveCount--;
-        }
+        } 
     }
 
     public float getMovement() {
@@ -69,20 +69,20 @@ public final class Point {
 
     public RailMap getActiveRailMap(World world) {
         if (this.branchDir == RailDir.NONE)
-            return this.rmMain;
+            return this.rmMain; 
         boolean hasRSInput = this.rpRoot.checkRSInput(world);
         return hasRSInput ? this.rmBranch : this.rmMain;
     }
 
     public int getCrossPosMain(float hGauge, int splitM, int splitB) {
         if (this.crossPosMain < 0)
-            this.crossPosMain = getCrossPos(hGauge, splitM, splitB, true);
+            this.crossPosMain = getCrossPos(hGauge, splitM, splitB, true); 
         return this.crossPosMain;
     }
 
     public int getCrossPosBranch(float hGauge, int splitM, int splitB) {
         if (this.crossPosBranch < 0)
-            this.crossPosBranch = getCrossPos(hGauge, splitM, splitB, false);
+            this.crossPosBranch = getCrossPos(hGauge, splitM, splitB, false); 
         return this.crossPosBranch;
     }
 
@@ -110,9 +110,9 @@ public final class Point {
                     indexM = i;
                     indexB = j;
                     distanceSq = d0;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         return isMain ? indexM : indexB;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/RailMaker.java b/src/api/rtm/jp/ngt/rtm/rail/util/RailMaker.java
index 07cb81d..e6d8882 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/RailMaker.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/util/RailMaker.java
@@ -19,32 +19,32 @@ public final class RailMaker {
         this.worldObj = world;
         this.rpList = new ArrayList<>();
         for (RailPosition rp : par2)
-            this.rpList.add(rp);
+            this.rpList.add(rp); 
     }
 
     private SwitchType getSwitchType() {
         if (this.rpList.size() == 3) {
             int i0 = 0;
             for (RailPosition rp : this.rpList)
-                i0 += (rp.switchType == 1) ? 1 : 0;
+                i0 += (rp.switchType == 1) ? 1 : 0; 
             if (i0 == 1)
-                return new SwitchType.SwitchBasic();
+                return new SwitchType.SwitchBasic(); 
         } else if (this.rpList.size() == 4) {
             int i0 = 0;
             for (RailPosition rp : this.rpList)
-                i0 += (rp.switchType == 1) ? 1 : 0;
+                i0 += (rp.switchType == 1) ? 1 : 0; 
             if (i0 == 2)
-                return new SwitchType.SwitchSingleCross();
+                return new SwitchType.SwitchSingleCross(); 
             if (i0 == 4) {
                 for (int i = 0; i < this.rpList.size(); i++) {
                     for (int j = i + 1; j < this.rpList.size(); j++) {
                         if (((RailPosition)this.rpList.get(i)).direction == ((RailPosition)this.rpList.get(j)).direction)
-                            return new SwitchType.SwitchScissorsCross();
-                    }
-                }
+                            return new SwitchType.SwitchScissorsCross(); 
+                    } 
+                } 
                 return new SwitchType.SwitchDiamondCross();
-            }
-        }
+            } 
+        } 
         return null;
     }
 
@@ -57,16 +57,16 @@ public final class RailMaker {
                 if (rp.switchType == 1) {
                     switchList.add(rp);
                     continue;
-                }
+                } 
                 normalList.add(rp);
-            }
+            } 
             if (type.init(switchList, normalList))
-                return type;
-        }
+                return type; 
+        } 
         if (this.worldObj != null && !this.worldObj.isRemote) {
             RailPosition rp = this.rpList.get(0);
             NGTLog.sendChatMessageToAll("message.rail.switch_type", new Object[] { Integer.valueOf(rp.blockX), Integer.valueOf(rp.blockY), Integer.valueOf(rp.blockZ) });
-        }
+        } 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/RailMap.java b/src/api/rtm/jp/ngt/rtm/rail/util/RailMap.java
index 78db43b..78485a6 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/RailMap.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/util/RailMap.java
@@ -66,18 +66,18 @@ public class RailMap {
                 boolean b0 = (this.startRP.direction % 2 == 0);
                 double d = b0 ? max : min;
                 this.startRP.anchorLengthHorizontal = (float)(d * 0.5522847771644592D);
-            }
+            } 
             if (this.endRP.anchorLengthHorizontal <= 0.0F) {
                 boolean b0 = (this.endRP.direction % 2 == 0);
                 double d = b0 ? max : min;
                 this.endRP.anchorLengthHorizontal = (float)(d * 0.5522847771644592D);
-            }
+            } 
             double d1 = (NGTMath.cos(this.startRP.anchorYaw) * this.startRP.anchorLengthHorizontal);
             double d2 = (NGTMath.sin(this.startRP.anchorYaw) * this.startRP.anchorLengthHorizontal);
             double d3 = (NGTMath.cos(this.endRP.anchorYaw) * this.endRP.anchorLengthHorizontal);
             double d4 = (NGTMath.sin(this.endRP.anchorYaw) * this.endRP.anchorLengthHorizontal);
             this.lineHorizontal = (ILine)new BezierCurve(z0, x0, z0 + d1, x0 + d2, z1 + d3, x1 + d4, z1, x1);
-        }
+        } 
         double lenXZ = Math.sqrt(NGTMath.pow(x1 - x0, 2) + NGTMath.pow(z1 - z0, 2));
         boolean flagV1 = (this.startRP.anchorLengthVertical == 0.0F && this.endRP.anchorLengthVertical == 0.0F);
         if (flagV1) {
@@ -88,7 +88,7 @@ public class RailMap {
             double d3 = (NGTMath.cos(this.endRP.anchorPitch) * this.endRP.anchorLengthVertical);
             double d4 = (NGTMath.sin(this.endRP.anchorPitch) * this.endRP.anchorLengthVertical);
             this.lineVertical = (ILine)new BezierCurve(0.0D, y0, d1, y0 + d2, lenXZ - d3, y1 + d4, lenXZ, y1);
-        }
+        } 
     }
 
     protected void createRailList(ResourceStateRail prop) {
@@ -112,11 +112,11 @@ public class RailMap {
                 int x2 = NGTMath.floor(x + Math.sin(slope - halfPi) * d0);
                 int z2 = NGTMath.floor(z + Math.cos(slope - halfPi) * d0);
                 addRailBlock(x2, y, z2);
-            }
+            } 
             int x0 = NGTMath.floor(x);
             int z0 = NGTMath.floor(z);
             addRailBlock(x0, y, z0);
-        }
+        } 
     }
 
     protected void addRailBlock(int x, int y, int z) {
@@ -124,14 +124,14 @@ public class RailMap {
             int[] ia = this.rails.get(i);
             if (ia[0] == x && ia[2] == z) {
                 if (ia[1] <= y)
-                    return;
+                    return; 
                 this.rails.remove(i);
                 i--;
-            }
-        }
+            } 
+        } 
         BlockPos pos = new BlockPos(x, y, z);
         if (!pos.equals(getStartRP().getNeighborBlockPos()) && !pos.equals(getEndRP().getNeighborBlockPos()))
-            this.rails.add(new int[] { x, y, z });
+            this.rails.add(new int[] { x, y, z }); 
     }
 
     public void setRail(World world, Block block, int x0, int y0, int z0, ResourceStateRail prop) {
@@ -145,8 +145,8 @@ public class RailMap {
                 BlockUtil.setBlock(world, x, y, z, block, 0, 2);
                 TileEntityLargeRailBase tile = (TileEntityLargeRailBase)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
                 tile.setStartPoint(x0, y0, z0);
-            }
-        }
+            } 
+        } 
         this.rails.clear();
     }
 
@@ -161,10 +161,10 @@ public class RailMap {
                 if (rail != core) {
                     TileEntityLargeRailCore core2 = rail.getRailCore();
                     if (core2 == null || core2 == core)
-                        world.setBlockToAir(new BlockPos(x, y, z));
-                }
-            }
-        }
+                        world.setBlockToAir(new BlockPos(x, y, z)); 
+                } 
+            } 
+        } 
         world.setBlockToAir(core.getPos());
         this.rails.clear();
     }
@@ -182,9 +182,9 @@ public class RailMap {
             if (!isCreative && !b0) {
                 NGTLog.sendChatMessageToAll("message.rail.obstacle", new Object[] { ":" + x + "," + y + "," + z });
                 return false;
-            }
+            } 
             flag = (b0 && flag);
-        }
+        } 
         return (isCreative || flag);
     }
 
@@ -208,7 +208,7 @@ public class RailMap {
         if (cant != 0.0F) {
             double h2 = Math.abs(NGTMath.sin(cant) * railWidth * 0.5F);
             height += h2;
-        }
+        } 
         return height;
     }
 
@@ -230,7 +230,7 @@ public class RailMap {
             float x = (float)(getLength() * t / split) * this.startRP.cantRandom;
             float scale = 3.0F;
             rand = NGTMath.getSin(x) + NGTMath.getSin(x * 0.51F) + NGTMath.getSin(x * 0.252F) + NGTMath.getSin(x * 0.1253F) * 0.25F * scale;
-        }
+        } 
         return cunt + rand;
     }
 
@@ -242,8 +242,8 @@ public class RailMap {
             } else {
                 double d0 = this.lineHorizontal.getLength();
                 this.length = Math.sqrt(d0 * d0 + height * height);
-            }
-        }
+            } 
+        } 
         return this.length;
     }
 
@@ -261,24 +261,24 @@ public class RailMap {
         if (obj instanceof RailMap) {
             RailMap rm = (RailMap)obj;
             if (this.startRP.blockX == rm.startRP.blockX && this.startRP.blockY == rm.startRP.blockY && this.startRP.blockZ == rm.startRP.blockZ)
-                return true;
-        }
+                return true; 
+        } 
         return false;
     }
 
     public boolean canConnect(RailMap railMap) {
         if (railMap == null)
-            return false;
+            return false; 
         if (equals(railMap))
-            return true;
+            return true; 
         for (int i = 0; i < 2; i++) {
             for (int j = 0; j < 2; j++) {
                 double[] p0 = this.lineHorizontal.getPoint(10, i * 10);
                 double[] p1 = railMap.lineHorizontal.getPoint(10, j * 10);
                 if (NGTMath.compare(p0[0], p1[0], 5) && NGTMath.compare(p0[1], p1[1], 5))
-                    return true;
-            }
-        }
+                    return true; 
+            } 
+        } 
         return false;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/RailMapSwitch.java b/src/api/rtm/jp/ngt/rtm/rail/util/RailMapSwitch.java
index 7e5bc38..3e944e3 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/RailMapSwitch.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/util/RailMapSwitch.java
@@ -16,5 +16,6 @@ public final class RailMapSwitch extends RailMap {
     @Deprecated
     public RailMapSwitch setState(boolean par1) {
         this.isOpen = par1;
+        return this;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/RailMapTurntable.java b/src/api/rtm/jp/ngt/rtm/rail/util/RailMapTurntable.java
index 116c7a4..c78f4da 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/RailMapTurntable.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/util/RailMapTurntable.java
@@ -50,7 +50,7 @@ public final class RailMapTurntable extends RailMap {
         } else {
             sx += (sx > ex) ? gain : -gain;
             ex += (ex > sx) ? gain : -gain;
-        }
+        } 
         Vec3 vStart = PooledVec3.create(sx, 0.0D, sz);
         Vec3 vEnd = PooledVec3.create(ex, 0.0D, ez);
         vStart = vStart.rotateAroundY(this.rotation);
@@ -64,9 +64,9 @@ public final class RailMapTurntable extends RailMap {
             for (int j = -this.radius; j < this.radius + 1; j++) {
                 double radSq = (i * i + j * j);
                 if (radSq <= ((this.radius + 0.4999F) * (this.radius + 0.4999F)))
-                    addRailBlock(this.centerX + i, this.centerY, this.centerZ + j);
-            }
-        }
+                    addRailBlock(this.centerX + i, this.centerY, this.centerZ + j); 
+            } 
+        } 
     }
 
     public int getNearlestPoint(int par1, double par2, double par3) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/RailPosition.java b/src/api/rtm/jp/ngt/rtm/rail/util/RailPosition.java
index 655da85..f442e59 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/RailPosition.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/util/RailPosition.java
@@ -135,7 +135,7 @@ public final class RailPosition {
         if (obj instanceof RailPosition) {
             RailPosition rp = (RailPosition)obj;
             return (rp.blockX == this.blockX && rp.blockY == this.blockY && rp.blockZ == this.blockZ);
-        }
+        } 
         return false;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/SwitchType.java b/src/api/rtm/jp/ngt/rtm/rail/util/SwitchType.java
index 00a005e..27a8867 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/SwitchType.java
+++ b/src/api/rtm/jp/ngt/rtm/rail/util/SwitchType.java
@@ -24,7 +24,7 @@ public abstract class SwitchType {
 
     public void onUpdate(World world) {
         for (int i = 0; i < this.points.length; i++)
-            this.points[i].onUpdate(world);
+            this.points[i].onUpdate(world); 
     }
 
     public abstract RailMap getRailMap(Entity paramEntity);
@@ -47,8 +47,8 @@ public abstract class SwitchType {
                 point = p0;
                 distance = d0;
                 angle = d0;
-            }
-        }
+            } 
+        } 
         return point;
     }
 
@@ -81,7 +81,7 @@ public abstract class SwitchType {
             } else {
                 this.railMaps[0].setState(true);
                 this.railMaps[1].setState(false);
-            }
+            } 
         }
 
         public RailMap getRailMap(Entity entity) {
@@ -115,12 +115,12 @@ public abstract class SwitchType {
                             b0 = b2;
                         } else {
                             b1 = b2;
-                        }
+                        } 
                         rails[rmsCount] = new RailMapSwitch(rpA, rpB, b2.invert(), RailDir.NONE);
-                    }
-                }
+                    } 
+                } 
                 rmsCount++;
-            }
+            } 
             rails[2] = new RailMapSwitch(rpRoot1, rpRoot2, b0, b1);
             this.railMaps = rails;
             this.points = new Point[4];
@@ -141,14 +141,14 @@ public abstract class SwitchType {
                 this.railMaps[0].setState(true);
                 this.railMaps[1].setState(true);
                 this.railMaps[2].setState(false);
-            }
+            } 
         }
 
         public RailMap getRailMap(Entity entity) {
             RailMap map1 = this.points[0].getActiveRailMap(entity.world);
             RailMap map2 = this.points[1].getActiveRailMap(entity.world);
             if (map1 == map2)
-                return map1;
+                return map1; 
             int n1 = map1.getNearlestPoint(16, entity.posX, entity.posZ);
             int n2 = map2.getNearlestPoint(16, entity.posX, entity.posZ);
             double[] pos1 = map1.getRailPos(16, n1);
@@ -177,15 +177,15 @@ public abstract class SwitchType {
                 for (int j = i + 1; j < 4; j++) {
                     int dirDif = Math.abs(((RailPosition)switchList.get(i)).direction - ((RailPosition)switchList.get(j)).direction);
                     if (dirDif > 4)
-                        dirDif = 8 - dirDif;
+                        dirDif = 8 - dirDif; 
                     if (dirDif > 2 && rpsCount < 4) {
                         (new RailPosition[2])[0] = switchList.get(i);
                         (new RailPosition[2])[1] = switchList.get(j);
                         rps[rpsCount] = new RailPosition[2];
                         rpsCount++;
-                    }
-                }
-            }
+                    } 
+                } 
+            } 
             if (rpsCount == 4) {
                 for (i = 0; i < 4; i++) {
                     RailDir dir0 = RailDir.NONE;
@@ -200,10 +200,10 @@ public abstract class SwitchType {
                                 dir1 = rps[i][1].getDir(rps[i][0], rps[j][1]);
                             } else if (rps[i][1] == rps[j][1]) {
                                 dir1 = rps[i][1].getDir(rps[i][0], rps[j][0]);
-                            }
-                    }
+                            }  
+                    } 
                     rails[i] = new RailMapSwitch(rps[i][0], rps[i][1], dir0, dir1);
-                }
+                } 
                 this.railMaps = rails;
                 this.points = new Point[4];
                 for (i = 0; i < 4; i++) {
@@ -217,12 +217,12 @@ public abstract class SwitchType {
                             } else {
                                 rms2 = rails[j];
                                 break;
-                            }
-                    }
+                            }  
+                    } 
                     this.points[i] = new Point(rp, rms1, rms2);
-                }
+                } 
                 return true;
-            }
+            } 
             return false;
         }
 
@@ -237,21 +237,21 @@ public abstract class SwitchType {
                             if (rms.isGettingPowered(world)) {
                                 openRMS = rms;
                                 break;
-                            }
+                            } 
                         } else if (rms == openRMS) {
                             rms.setState(true);
                         } else {
                             rms.setState(false);
-                        }
+                        } 
                     } else if (j == 1) {
                         if (openRMS == null) {
                             rms.setState(true);
                         } else {
                             rms.setState(false);
-                        }
-                    }
-                }
-            }
+                        } 
+                    } 
+                } 
+            } 
         }
 
         public RailMap getRailMap(Entity entity) {
@@ -266,9 +266,9 @@ public abstract class SwitchType {
                     if (d1 < distance) {
                         distance = d1;
                         map = map1;
-                    }
-                }
-            }
+                    } 
+                } 
+            } 
             return map;
         }
 
@@ -301,10 +301,10 @@ public abstract class SwitchType {
                             this.points[2] = new Point((rails[1]).startRP, rails[1]);
                             this.points[3] = new Point((rails[1]).endRP, rails[1]);
                             return true;
-                        }
-                    }
-                }
-            }
+                        } 
+                    } 
+                } 
+            } 
             return false;
         }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/ActionParts.java b/src/api/rtm/jp/ngt/rtm/render/ActionParts.java
index 2465a36..06acf71 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/ActionParts.java
+++ b/src/api/rtm/jp/ngt/rtm/render/ActionParts.java
@@ -44,11 +44,11 @@ public final class ActionParts extends Parts {
                 for (int k = 0; k < face.vertices.length; k++) {
                     Vertex vNormal = face.vertexNormals[k].copy(VecAccuracy.MEDIUM);
                     face.vertices[k] = face.vertices[k].add(vNormal.expand(0.005F));
-                }
+                } 
                 face.calculateFaceNormal(VecAccuracy.MEDIUM);
-            }
+            } 
             this.outlineModels[i] = go;
-        }
+        } 
     }
 
     public void render(PartsRenderer renderer) {
@@ -57,7 +57,7 @@ public final class ActionParts extends Parts {
             if (hit) {
                 int color = Mouse.isButtonDown(1) ? 16744448 : 16777215;
                 renderOutline(renderer, color);
-            }
+            } 
         } else if (renderer.currentPass == RenderPass.PICK.id) {
             GL11.glLoadName(this.id);
             boolean smoothing = ((ModelConfig)renderer.modelSet.getConfig()).smoothing;
@@ -65,7 +65,7 @@ public final class ActionParts extends Parts {
             model.renderOnly(smoothing, this.objNames);
         } else {
             super.render(renderer);
-        }
+        } 
     }
 
     private void renderOutline(PartsRenderer par1, int color) {
@@ -75,7 +75,7 @@ public final class ActionParts extends Parts {
         GL11.glDisable(3553);
         GLHelper.setColor(color, 255);
         for (GroupObject obj : this.outlineModels)
-            obj.render(false);
+            obj.render(false); 
         GLHelper.setColor(16777215, 255);
         GL11.glEnable(3553);
         GLHelper.enableLighting();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/BasicPartsRenderer.java b/src/api/rtm/jp/ngt/rtm/render/BasicPartsRenderer.java
index 5da7666..89121e1 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/BasicPartsRenderer.java
+++ b/src/api/rtm/jp/ngt/rtm/render/BasicPartsRenderer.java
@@ -19,7 +19,7 @@ public class BasicPartsRenderer<T, MS extends ModelSetBase> extends PartsRendere
         List<GroupObject> goList = par2.model.getGroupObjects();
         String[] array = new String[goList.size()];
         for (int i = 0; i < array.length; i++)
-            array[i] = ((GroupObject)goList.get(i)).name;
+            array[i] = ((GroupObject)goList.get(i)).name; 
         this.main = registerParts(new Parts(array));
         super.init(par1, par2);
     }
@@ -27,7 +27,7 @@ public class BasicPartsRenderer<T, MS extends ModelSetBase> extends PartsRendere
     public void render(T entity, int pass, float par3) {
         if (pass == 0)
             if (this.main != null)
-                this.main.render(this);
+                this.main.render(this);  
     }
 
     public World getWorld(T entity) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/BasicSignalPartsRenderer.java b/src/api/rtm/jp/ngt/rtm/render/BasicSignalPartsRenderer.java
index f1ce908..cb6bce5 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/BasicSignalPartsRenderer.java
+++ b/src/api/rtm/jp/ngt/rtm/render/BasicSignalPartsRenderer.java
@@ -34,27 +34,27 @@ public class BasicSignalPartsRenderer extends SignalPartsRenderer {
         SignalConfig cfg = this.modelSet.getConfig();
         boolean smoothing = cfg.smoothing;
         if (pass == 0)
-            model.renderOnly(smoothing, cfg.modelPartsFixture.objects);
+            model.renderOnly(smoothing, cfg.modelPartsFixture.objects); 
         if (cfg.rotateBody) {
             float yaw = getRotation(entity) - getBlockDirection(entity);
             float[] fa1 = cfg.modelPartsBody.pos;
             GL11.glTranslatef(fa1[0], fa1[1], fa1[2]);
             GL11.glRotatef(yaw, 0.0F, 1.0F, 0.0F);
             GL11.glTranslatef(-fa1[0], -fa1[1], -fa1[2]);
-        }
+        } 
         if (pass == 0) {
             model.renderOnly(smoothing, cfg.modelPartsBody.objects);
         } else if (pass == 2) {
             int signal = getSignal(entity);
             if (signal > SignalLevel.HIGH_SPEED_PROCEED.level)
-                signal = SignalLevel.HIGH_SPEED_PROCEED.level;
+                signal = SignalLevel.HIGH_SPEED_PROCEED.level; 
             boolean finish = false;
             int i0 = -1;
             for (int j = 0; j < 2; j++) {
                 if (j == 1) {
                     float f0 = 0.0625F;
                     GL11.glColor4f(f0, f0, f0, 1.0F);
-                }
+                } 
                 for (int i = 0; i < this.lightParts.length; i++) {
                     if (j == 0) {
                         boolean render = false;
@@ -63,24 +63,24 @@ public class BasicSignalPartsRenderer extends SignalPartsRenderer {
                             render = true;
                             int itv = (this.lightParts[i]).interval;
                             if (itv > 0)
-                                render = (getTick(entity) / itv % 2 == 0);
-                        }
+                                render = (getTick(entity) / itv % 2 == 0); 
+                        } 
                         if (render) {
                             i0 = i;
                             for (String s : (this.lightParts[i]).parts) {
                                 model.renderPart(smoothing, s);
                                 this.lightList.add(s);
-                            }
-                        }
+                            } 
+                        } 
                     } else {
                         for (String s : (this.lightParts[i]).parts) {
                             if (!this.lightList.contains(s))
-                                model.renderPart(smoothing, s);
-                        }
-                    }
-                }
-            }
-        }
+                                model.renderPart(smoothing, s); 
+                        } 
+                    } 
+                } 
+            } 
+        } 
         GL11.glPopMatrix();
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/BasicVehiclePartsRenderer.java b/src/api/rtm/jp/ngt/rtm/render/BasicVehiclePartsRenderer.java
index ccc0dac..b5903ca 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/BasicVehiclePartsRenderer.java
+++ b/src/api/rtm/jp/ngt/rtm/render/BasicVehiclePartsRenderer.java
@@ -29,7 +29,7 @@ public class BasicVehiclePartsRenderer extends VehiclePartsRenderer {
         super(par1);
     }
 
-    public void init(ModelSetVehicleBase<VehicleBaseConfig> par1, ModelObject par2) {
+    public void init(ModelSetVehicleBase<? extends VehicleBaseConfig> par1, ModelObject par2) {
         VehicleBaseConfig cfg = par1.getConfig();
         List<String> list = new ArrayList<>();
         this.doorLeft = (cfg.door_left != null) ? getParts(list, cfg.door_left) : new PartsWithChildren[0];
@@ -40,10 +40,10 @@ public class BasicVehiclePartsRenderer extends VehiclePartsRenderer {
         List<String> bodyParts = new ArrayList<>();
         for (GroupObject obj : goList) {
             if (!list.contains(obj.name))
-                bodyParts.add(obj.name);
-        }
+                bodyParts.add(obj.name); 
+        } 
         if (bodyParts.isEmpty() && par2.model instanceof jp.ngt.ngtlib.renderer.model.NGTOModel)
-            bodyParts.add("default");
+            bodyParts.add("default"); 
         this.body = new Parts(bodyParts.<String>toArray(new String[list.size()]));
         this.partsList.addAll(Arrays.asList((Parts[])this.doorLeft));
         this.partsList.addAll(Arrays.asList((Parts[])this.doorRight));
@@ -57,10 +57,10 @@ public class BasicVehiclePartsRenderer extends VehiclePartsRenderer {
         PartsWithChildren[] array = new PartsWithChildren[parts.length];
         for (int i = 0; i < parts.length; i++) {
             array[i] = new PartsWithChildren((parts[i]).objects);
-            NGTUtil.addArray(list, (Object[])(parts[i]).objects);
+            NGTUtil.addArray(list, (parts[i]).objects);
             if ((parts[i]).childParts != null)
-                NGTUtil.addArray((array[i]).childParts, (Object[])getParts(list, (parts[i]).childParts));
-        }
+                NGTUtil.addArray((array[i]).childParts, getParts(list, (parts[i]).childParts));
+        } 
         return array;
     }
 
@@ -70,23 +70,23 @@ public class BasicVehiclePartsRenderer extends VehiclePartsRenderer {
         if (cfg.door_left != null) {
             float move = getDoorMovementL(entity);
             for (int j = 0; j < cfg.door_left.length; j++)
-                renderParts(sigmoid(move), cfg.door_left[j], this.doorLeft[j]);
-        }
+                renderParts(sigmoid(move), cfg.door_left[j], this.doorLeft[j]); 
+        } 
         if (cfg.door_right != null) {
             float move = getDoorMovementR(entity);
             for (int j = 0; j < cfg.door_right.length; j++)
-                renderParts(sigmoid(move), cfg.door_right[j], this.doorRight[j]);
-        }
+                renderParts(sigmoid(move), cfg.door_right[j], this.doorRight[j]); 
+        } 
         if (cfg.pantograph_front != null) {
             float move = getPantographMovementFront(entity);
             for (int j = 0; j < cfg.pantograph_front.length; j++)
-                renderParts(move, cfg.pantograph_front[j], this.pantographFront[j]);
-        }
+                renderParts(move, cfg.pantograph_front[j], this.pantographFront[j]); 
+        } 
         if (cfg.pantograph_back != null) {
             float move = getPantographMovementBack(entity);
             for (int j = 0; j < cfg.pantograph_back.length; j++)
-                renderParts(move, cfg.pantograph_back[j], this.pantographBack[j]);
-        }
+                renderParts(move, cfg.pantograph_back[j], this.pantographBack[j]); 
+        } 
     }
 
     private void renderParts(float move, VehicleBaseConfig.VehicleParts parts, PartsWithChildren parts2) {
@@ -99,13 +99,13 @@ public class BasicVehiclePartsRenderer extends VehiclePartsRenderer {
                 GL11.glTranslatef(fa[0] * move, fa[1] * move, fa[2] * move);
             } else if (fa.length == 4) {
                 GL11.glRotatef(fa[0] * move, fa[1], fa[2], fa[3]);
-            }
-        }
+            } 
+        } 
         GL11.glTranslatef(-parts.pos[0], -parts.pos[1], -parts.pos[2]);
         parts2.render(this);
         if (parts.childParts != null)
             for (i = 0; i < parts.childParts.length; i++)
-                renderParts(move, parts.childParts[i], (PartsWithChildren)parts2.childParts.get(i));
+                renderParts(move, parts.childParts[i], (PartsWithChildren)parts2.childParts.get(i));  
         GL11.glPopMatrix();
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/MCModelRenderer.java b/src/api/rtm/jp/ngt/rtm/render/MCModelRenderer.java
index 5e89e43..c9598c5 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/MCModelRenderer.java
+++ b/src/api/rtm/jp/ngt/rtm/render/MCModelRenderer.java
@@ -23,7 +23,7 @@ public class MCModelRenderer extends EntityPartsRenderer<ModelSetBase> {
 
     public void render(Entity entity, int pass, float par3) {
         if ((!this.light && pass >= 2) || (!this.alphaBlend && pass == 1))
-            return;
+            return; 
         this.model.renderAll(false);
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/MCVehicleRenderer.java b/src/api/rtm/jp/ngt/rtm/render/MCVehicleRenderer.java
index 4809e87..0fecaf4 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/MCVehicleRenderer.java
+++ b/src/api/rtm/jp/ngt/rtm/render/MCVehicleRenderer.java
@@ -24,7 +24,7 @@ public class MCVehicleRenderer extends VehiclePartsRenderer {
 
     public void render(Entity entity, int pass, float par3) {
         if ((!this.light && pass >= 2) || (!this.alphaBlend && pass == 1))
-            return;
+            return; 
         this.model.renderAll(false);
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/MachinePartsRenderer.java b/src/api/rtm/jp/ngt/rtm/render/MachinePartsRenderer.java
index 0f1a350..6b1ae61 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/MachinePartsRenderer.java
+++ b/src/api/rtm/jp/ngt/rtm/render/MachinePartsRenderer.java
@@ -26,16 +26,16 @@ public class MachinePartsRenderer extends TileEntityPartsRenderer<ModelSetMachin
             if (par1.getBlockType() == RTMBlock.crossingGate) {
                 TileEntityCrossingGate gate = (TileEntityCrossingGate)par1;
                 return gate.barMoveCount / 90.0F;
-            }
+            } 
             if (par1.getBlockType() == RTMBlock.turnstile) {
                 TileEntityTurnstile turnstile = (TileEntityTurnstile)par1;
                 return turnstile.canThrough() ? 0.0F : 1.0F;
-            }
+            } 
             if (par1.getBlockType() == RTMBlock.point) {
                 TileEntityPoint point = (TileEntityPoint)par1;
                 return point.isActivated() ? 1.0F : 0.0F;
-            }
-        }
+            } 
+        } 
         return 0.0F;
     }
 
@@ -44,12 +44,12 @@ public class MachinePartsRenderer extends TileEntityPartsRenderer<ModelSetMachin
             if (par1.getBlockType() == RTMBlock.crossingGate) {
                 TileEntityCrossingGate gate = (TileEntityCrossingGate)par1;
                 return gate.lightCount;
-            }
+            } 
             if (par1.getBlockType() == RTMBlock.light) {
                 TileEntityLight light = (TileEntityLight)par1;
                 return light.isGettingPower ? 1 : -1;
-            }
-        }
+            } 
+        } 
         return -1;
     }
 
@@ -58,7 +58,7 @@ public class MachinePartsRenderer extends TileEntityPartsRenderer<ModelSetMachin
             if (par1.getBlockType() == RTMBlock.point) {
                 TileEntityPoint point = (TileEntityPoint)par1;
                 return (point.getMove() > 0.0F) ? 1 : -1;
-            }
+            }  
         return 0;
     }
 
@@ -70,7 +70,7 @@ public class MachinePartsRenderer extends TileEntityPartsRenderer<ModelSetMachin
         if (par1 != null) {
             TileEntityMachineBase machine = (TileEntityMachineBase)par1;
             return machine.getPitch();
-        }
+        } 
         return 0.0F;
     }
 
@@ -78,7 +78,7 @@ public class MachinePartsRenderer extends TileEntityPartsRenderer<ModelSetMachin
         if (par1 != null) {
             TileEntityMachineBase machine = (TileEntityMachineBase)par1;
             return machine.getRotation();
-        }
+        } 
         return 0.0F;
     }
 
@@ -90,7 +90,7 @@ public class MachinePartsRenderer extends TileEntityPartsRenderer<ModelSetMachin
             Vec3 vec = machine.getNormal(x, y, z, pitch, yaw);
             vec = vec.rotateAroundX(pitch).rotateAroundY(yaw);
             VEC3F_TMP.set((float)vec.getX(), (float)vec.getY(), (float)vec.getZ());
-        }
+        } 
         return VEC3F_TMP;
     }
 
@@ -108,7 +108,7 @@ public class MachinePartsRenderer extends TileEntityPartsRenderer<ModelSetMachin
             posX = pos.getX() + 0.5D + vec.getX();
             posY = pos.getY() + 0.5D + vec.getY();
             posZ = pos.getZ() + 0.5D + vec.getZ();
-        }
+        } 
         BUF[0] = posX;
         BUF[1] = posY;
         BUF[2] = posZ;
@@ -145,7 +145,7 @@ public class MachinePartsRenderer extends TileEntityPartsRenderer<ModelSetMachin
                 vec = vec.rotateAroundY(yaw);
                 vec = vec.rotateAroundZ(90.0F);
                 break;
-        }
+        } 
         return vec;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/ModelObject.java b/src/api/rtm/jp/ngt/rtm/render/ModelObject.java
index 2fa2c34..ab77824 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/ModelObject.java
+++ b/src/api/rtm/jp/ngt/rtm/render/ModelObject.java
@@ -48,7 +48,7 @@ public class ModelObject {
 
     private int program;
 
-    public ModelObject(ModelConfig.ModelSource par1, ModelSetBase<ModelConfig> par2, PartsRenderer par3, Object... args) {
+    public ModelObject(ModelConfig.ModelSource par1, ModelSetBase<? extends ModelConfig> par2, PartsRenderer par3, Object... args) {
         String filePath = par1.modelFile;
         this.model = ModelPackManager.INSTANCE.loadModel(filePath, 4, true, par2.getConfig(), par2.md5);
         Material[] materials = getMaterials(getTextureMap(par1.textures));
@@ -66,18 +66,18 @@ public class ModelObject {
             String[] lightTextureNames = new String[(sa.length >= 4) ? (sa.length - 3) : 0];
             if (lightTextureNames.length > 0) {
                 for (int j = 0; j < lightTextureNames.length; j++)
-                    lightTextureNames[j] = sa[j + 3];
+                    lightTextureNames[j] = sa[j + 3]; 
                 texSize = lightTextureNames.length;
-            }
+            } 
             this.textures[mat.id] = new TextureSet(mat, texSize, flagAlpha, flagLight, lightTextureNames);
             useLight |= flagLight;
             useAlpha |= flagAlpha;
-        }
+        } 
         this.light = useLight;
         this.alphaBlend = useAlpha;
         this.useTexture = (this.model.getType() != FileType.NGTO && this.model.getType() != FileType.NGTZ);
         if (this.textures[0] == null)
-            this.textures[0] = new TextureSet(new Material((byte)0, new ResourceLocation("hoge")), 0, false, false, new String[0]);
+            this.textures[0] = new TextureSet(new Material((byte)0, new ResourceLocation("hoge")), 0, false, false, new String[0]); 
         this.renderer = (par3 == null) ? getPartsRenderer(par1.rendererPath, this.model, args) : par3;
         this.renderer.init(par2, this);
         this.vshPath = par1.vertexShaderPath;
@@ -95,19 +95,19 @@ public class ModelObject {
 
     public static ModelObject getDummy() {
         if (DUMMY == null)
-            DUMMY = new ModelObject((IModelNGT)ModelLoader.loadModel((ResourceLocation)new ResourceLocationCustom("models/ModelContainer_19g.obj"), VecAccuracy.LOW, new Object[0]), new TextureSet[] { new TextureSet(new Material((byte)0, ModelPackManager.INSTANCE.getResource("textures/container/19g_JRF_0.png")), 0, false, false, new String[0]) });
+            DUMMY = new ModelObject((IModelNGT)ModelLoader.loadModel((ResourceLocation)new ResourceLocationCustom("models/ModelContainer_19g.obj"), VecAccuracy.LOW, new Object[0]), new TextureSet[] { new TextureSet(new Material((byte)0, ModelPackManager.INSTANCE.getResource("textures/container/19g_JRF_0.png")), 0, false, false, new String[0]) }); 
         return DUMMY;
     }
 
     private PartsRenderer getPartsRenderer(String path, IModelNGT par2, Object... args) {
         boolean b0 = (args.length < 1 || !"isBogie".equals(args[0]));
         if (path != null)
-            return RTMRenderers.getRendererWithScript(ModelPackManager.INSTANCE.getResource(path), new String[] { String.valueOf(b0) });
+            return RTMRenderers.getRendererWithScript(ModelPackManager.INSTANCE.getResource(path), new String[] { String.valueOf(b0) }); 
         if (par2 instanceof jp.ngt.ngtlib.renderer.model.MCModel) {
             if (args.length >= 1 && "vehicle".equals(args[0]))
-                return new MCVehicleRenderer(new String[] { String.valueOf(b0) });
+                return new MCVehicleRenderer(new String[] { String.valueOf(b0) }); 
             return new MCModelRenderer(new String[] { String.valueOf(b0) });
-        }
+        } 
         return new BasicPartsRenderer<>(new String[0]);
     }
 
@@ -121,7 +121,7 @@ public class ModelObject {
                 return;
             } catch (IOException e) {
                 e.printStackTrace();
-            }
+            }  
         this.program = -1;
     }
 
@@ -131,16 +131,16 @@ public class ModelObject {
         if (!(entity instanceof jp.ngt.rtm.entity.train.EntityBogie)) {
             float[] fa = cfg.offset;
             GL11.glTranslated(fa[0], fa[1], fa[2]);
-        }
+        } 
         boolean isSelector = entity instanceof IResourceSelector;
         boolean canUseColor = (cfg.useCustomColor && isSelector);
         this.renderer.preRender(entity, cfg.smoothing, cfg.doCulling, partialTick);
         if (!cfg.doCulling)
-            GL11.glDisable(2884);
+            GL11.glDisable(2884); 
         if (cfg.smoothing)
-            GL11.glShadeModel(7425);
+            GL11.glShadeModel(7425); 
         if (canUseColor)
-            GLHelper.setColor((((IResourceSelector)entity).getResourceState()).color, 255);
+            GLHelper.setColor((((IResourceSelector)entity).getResourceState()).color, 255); 
         if (pass == 0) {
             renderWithTexture(entity, RenderPass.NORMAL.id, partialTick);
         } else if (pass == 1) {
@@ -152,14 +152,14 @@ public class ModelObject {
             GLHelper.setLightmapMaxBrightness();
             renderWithTexture(entity, RenderPass.LIGHT.id, partialTick);
             if (this.renderer.shouldRenderOutline(entity))
-                renderWithTexture(entity, RenderPass.OUTLINE.id, partialTick);
+                renderWithTexture(entity, RenderPass.OUTLINE.id, partialTick); 
             GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
             GLHelper.enableLighting();
-        }
+        } 
         if (canUseColor)
-            GLHelper.setColor(16777215, 255);
+            GLHelper.setColor(16777215, 255); 
         if (cfg.smoothing)
-            GL11.glShadeModel(7424);
+            GL11.glShadeModel(7424); 
         GL11.glEnable(2884);
         this.renderer.postRender(entity, cfg.smoothing, cfg.doCulling, partialTick);
         GL11.glPopMatrix();
@@ -168,14 +168,14 @@ public class ModelObject {
 
     public void preRender() {
         if (!this.useShader && this.program == 0)
-            initShader();
+            initShader(); 
         if (this.useShader)
-            ARBShaderObjects.glUseProgramObjectARB(this.program);
+            ARBShaderObjects.glUseProgramObjectARB(this.program); 
     }
 
     public void postRender() {
         if (this.useShader)
-            ARBShaderObjects.glUseProgramObjectARB(0);
+            ARBShaderObjects.glUseProgramObjectARB(0); 
     }
 
     public void renderWithTexture(Object entity, int pass, float partialTick) {
@@ -184,19 +184,19 @@ public class ModelObject {
                 ResourceLocation texture = null;
                 if (pass == RenderPass.NORMAL.id || pass == RenderPass.TRANSPARENT.id) {
                     if (pass == RenderPass.TRANSPARENT.id && !(this.textures[i]).doAlphaBlend)
-                        continue;
+                        continue; 
                     texture = (this.textures[i]).material.texture;
                 } else if (pass == RenderPass.LIGHT.id || pass == RenderPass.LIGHT_FRONT.id || pass == RenderPass.LIGHT_BACK.id) {
                     if (!(this.textures[i]).doLighting)
-                        continue;
+                        continue; 
                     if ((this.textures[i]).subTextures != null) {
                         texture = (this.textures[i]).subTextures[pass - 2];
                     } else {
                         texture = (this.textures[i]).material.texture;
-                    }
+                    } 
                 } else {
                     texture = (this.textures[i]).material.texture;
-                }
+                } 
                 NGTUtilClient.bindTexture(texture);
                 if (this.useShader) {
                     ARBShaderObjects.glUniform1iARB(
@@ -204,12 +204,12 @@ public class ModelObject {
                     int time = (int)(System.currentTimeMillis() % 1200000L);
                     ARBShaderObjects.glUniform1iARB(
                             ARBShaderObjects.glGetUniformLocationARB(this.program, "time"), time);
-                }
-            }
+                } 
+            } 
             this.renderer.currentMatId = (this.textures[i]).material.id;
             this.renderer.render(entity, pass, partialTick);
             continue;
-        }
+        } 
     }
 
     public Material[] getMaterials(Map<String, String> map) {
@@ -224,17 +224,17 @@ public class ModelObject {
                 Map.Entry<String, Material> entry = iterator.next();
                 String matName = map.get(entry.getKey());
                 if (matName == null)
-                    matName = map.get("default");
+                    matName = map.get("default"); 
                 materials[i] = new Material(((Material)entry.getValue()).id, ModelPackManager.INSTANCE.getResource(matName));
-            }
-        }
+            } 
+        } 
         return materials;
     }
 
     protected Map<String, String> getTextureMap(String[][] par1) {
         Map<String, String> map = new HashMap<>();
         for (String[] sa : par1)
-            map.put(sa[0], sa[1]);
+            map.put(sa[0], sa[1]); 
         return map;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/NPCPartsRenderer.java b/src/api/rtm/jp/ngt/rtm/render/NPCPartsRenderer.java
index b98aa09..7022023 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/NPCPartsRenderer.java
+++ b/src/api/rtm/jp/ngt/rtm/render/NPCPartsRenderer.java
@@ -68,7 +68,7 @@ public class NPCPartsRenderer extends EntityPartsRenderer<ModelSetNPC> {
 
     public void setRotationAngles(EntityLivingBase entity, float partialTicks) {
         if (entity == null)
-            return;
+            return; 
         setupRotateCorpse(entity, partialTicks);
         float arg1 = getRendererArg1(entity, partialTicks);
         float arg2 = getRendererArg2(entity, partialTicks);
@@ -95,9 +95,9 @@ public class NPCPartsRenderer extends EntityPartsRenderer<ModelSetNPC> {
             this.leftLegAngleX = -(NGTMath.PI * 2.0F / 5.0F);
             this.rightLegAngleY = radPIdiv10;
             this.leftLegAngleY = -radPIdiv10;
-        }
+        } 
         if (heldItemLeft != 0)
-            this.leftArmAngleX = this.leftArmAngleX * 0.5F - radPIdiv10 * heldItemLeft;
+            this.leftArmAngleX = this.leftArmAngleX * 0.5F - radPIdiv10 * heldItemLeft; 
         this.rightArmAngleY = 0.0F;
         this.rightArmAngleZ = 0.0F;
         switch (heldItemRight) {
@@ -108,7 +108,7 @@ public class NPCPartsRenderer extends EntityPartsRenderer<ModelSetNPC> {
                 this.rightArmAngleX = this.rightArmAngleX * 0.5F - radPIdiv10 * heldItemRight;
                 this.rightArmAngleY = -0.5235988F;
                 break;
-        }
+        } 
         this.leftArmAngleY = 0.0F;
         float swingProgress = getSwingProgress(entity, partialTicks);
         if (swingProgress > -9990.0F) {
@@ -124,14 +124,14 @@ public class NPCPartsRenderer extends EntityPartsRenderer<ModelSetNPC> {
             this.rightArmAngleX = (float)(this.rightArmAngleX - f1 * 1.2D + f2);
             this.rightArmAngleY += this.bodyAngleY * 2.0F;
             this.rightArmAngleZ += NGTMath.getSin(swingProgress * NGTMath.PI) * -0.4F;
-        }
+        } 
         if (isSneak(entity)) {
             this.bodyAngleX = 0.5F;
             this.rightArmAngleX += 0.4F;
             this.leftArmAngleX += 0.4F;
         } else {
             this.bodyAngleX = 0.0F;
-        }
+        } 
         this.rightArmAngleZ += NGTMath.getCos(arg3 * 0.09F) * 0.05F + 0.05F;
         this.leftArmAngleZ -= NGTMath.getCos(arg3 * 0.09F) * 0.05F + 0.05F;
         this.rightArmAngleX += NGTMath.getSin(arg3 * 0.067F) * 0.05F;
@@ -151,7 +151,7 @@ public class NPCPartsRenderer extends EntityPartsRenderer<ModelSetNPC> {
             this.leftArmAngleZ -= NGTMath.getCos(arg3 * 0.09F) * 0.05F + 0.05F;
             this.rightArmAngleX += NGTMath.getSin(arg3 * 0.067F) * 0.05F;
             this.leftArmAngleX -= NGTMath.getSin(arg3 * 0.067F) * 0.05F;
-        }
+        } 
         float f0 = this.rightArmAngleX;
         this.rightArmAngleX = this.leftArmAngleX;
         this.leftArmAngleX = f0;
@@ -192,7 +192,7 @@ public class NPCPartsRenderer extends EntityPartsRenderer<ModelSetNPC> {
     public int heldItemRight(EntityLivingBase entity) {
         ItemStack heldItem = entity.getHeldItem(EnumHand.MAIN_HAND);
         if (heldItem == null)
-            return 0;
+            return 0; 
         return 1;
     }
 
@@ -224,7 +224,7 @@ public class NPCPartsRenderer extends EntityPartsRenderer<ModelSetNPC> {
             EntityLivingBase riding = (EntityLivingBase)entity.getRidingEntity();
             f = interpolateRotation(riding.prevRenderYawOffset, riding.renderYawOffset, partialTicks);
             f2 = f1 - f;
-        }
+        } 
         return f2;
     }
 
@@ -236,7 +236,7 @@ public class NPCPartsRenderer extends EntityPartsRenderer<ModelSetNPC> {
         float f;
         for (f = par2 - par1; f < -180.0F; f += 360.0F);
         while (f >= 180.0F)
-            f -= 360.0F;
+            f -= 360.0F; 
         return par1 + par3 * f;
     }
 
@@ -251,9 +251,9 @@ public class NPCPartsRenderer extends EntityPartsRenderer<ModelSetNPC> {
         if (entity.deathTime > 0) {
             float f = (float)NGTMath.firstSqrt(((entity.deathTime + partialTicks - 1.0F) / 20.0F * 1.6F));
             if (f > 1.0F)
-                f = 1.0F;
+                f = 1.0F; 
             GlStateManager.rotate(f * getDeathMaxRotation(entity), 0.0F, 0.0F, 1.0F);
-        }
+        } 
     }
 
     public float handleRotationFloat(EntityLivingBase entity, float partialTicks) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/Parts.java b/src/api/rtm/jp/ngt/rtm/render/Parts.java
index bc61807..9a92a50 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/Parts.java
+++ b/src/api/rtm/jp/ngt/rtm/render/Parts.java
@@ -37,10 +37,10 @@ public class Parts {
                     if (this.objNames[i].equals(obj.name)) {
                         this.objs[i] = obj;
                         break;
-                    }
-                }
-            }
-        }
+                    } 
+                } 
+            } 
+        } 
         return this.objs;
     }
 
@@ -62,17 +62,17 @@ public class Parts {
                 GLHelper.endCompile();
             } else {
                 if (smoothing)
-                    GL11.glShadeModel(7425);
+                    GL11.glShadeModel(7425); 
                 if (ignoreMatId(renderer)) {
                     for (GLObject glo : this.gLists)
-                        GLHelper.callList(glo);
+                        GLHelper.callList(glo); 
                 } else {
                     GLHelper.callList(this.gLists[i]);
-                }
+                } 
                 if (smoothing)
-                    GL11.glShadeModel(7424);
-            }
-        }
+                    GL11.glShadeModel(7424); 
+            } 
+        } 
     }
 
     public boolean ignoreMatId(PartsRenderer renderer) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/PartsRenderer.java b/src/api/rtm/jp/ngt/rtm/render/PartsRenderer.java
index eaadcc3..95824f3 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/PartsRenderer.java
+++ b/src/api/rtm/jp/ngt/rtm/render/PartsRenderer.java
@@ -85,7 +85,7 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
             ScriptUtil.doScriptFunction(this.script, func, args);
         } catch (Exception e) {
             throw new RuntimeException("On init script : " + this.modelSet.getConfig().getName(), e);
-        }
+        } 
     }
 
     public Parts registerParts(Parts par1) {
@@ -94,7 +94,7 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
             ActionParts actionParts = (ActionParts)par1;
             actionParts.id = this.targetsList.size() + 1;
             this.targetsList.add(actionParts);
-        }
+        } 
         return par1;
     }
 
@@ -102,9 +102,9 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
         this.modelSet = par1;
         this.modelObj = par2;
         if (this.script != null)
-            execScriptFunc("init", new Object[] { par1, par2 });
+            execScriptFunc("init", new Object[] { par1, par2 }); 
         for (Parts parts : this.partsList)
-            parts.init(this);
+            parts.init(this); 
     }
 
     public void preRender(T t, boolean smoothing, boolean culling, float par3) {}
@@ -113,7 +113,7 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
 
     private ActionParts selectHits(T t, int hits) {
         if (hits <= 0)
-            return Mouse.isButtonDown(1) ? this.hittedParts.get(t) : null;
+            return Mouse.isButtonDown(1) ? this.hittedParts.get(t) : null; 
         int hitIndex = 0;
         double minDepth = Double.MAX_VALUE;
         for (int i = 0; i < hits; i++) {
@@ -122,8 +122,8 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
                 int hitNo = GLHelper.getPickedObjId(i);
                 hitIndex = hitNo;
                 minDepth = depth;
-            }
-        }
+            } 
+        } 
         return this.targetsList.get(hitIndex - 1);
     }
 
@@ -133,19 +133,19 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
             if (parts != null && this.hittedEntity == t)
                 if (parts.behavior == ActionType.TOGGLE) {
                     if (this.mouseHoldCount == 0)
-                        onRightClick(this.hittedEntity, parts);
+                        onRightClick(this.hittedEntity, parts); 
                     this.mouseHoldCount++;
                 } else {
                     int currentPos = (parts.behavior == ActionType.DRAG_X) ? Mouse.getX() : Mouse.getY();
                     if (this.mouseHoldCount == 0)
-                        this.dragStartPos = currentPos;
+                        this.dragStartPos = currentPos; 
                     onRightDrag(t, parts, currentPos - this.dragStartPos);
                     this.mouseHoldCount++;
-                }
+                }  
         } else {
             this.mouseHoldCount = 0;
             this.dragStartPos = 0;
-        }
+        } 
     }
 
     private void onRightClick(T t, ActionParts parts) {
@@ -158,19 +158,19 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
 
     public void render(T t, int pass, float partialTick) {
         if (t != null && pass == RenderPass.NORMAL.id && this.currentMatId == 0 && !this.targetsList.isEmpty())
-            render(t, RenderPass.PICK.id, partialTick);
+            render(t, RenderPass.PICK.id, partialTick); 
         this.currentPass = pass;
         if (pass == RenderPass.PICK.id)
-            GLHelper.startMousePicking(1.0F);
+            GLHelper.startMousePicking(1.0F); 
         execScriptFunc("render", new Object[] { t, Integer.valueOf(pass), Float.valueOf(partialTick) });
         if (pass == RenderPass.PICK.id) {
             int hits = GLHelper.finishMousePicking();
             ActionParts parts = selectHits(t, hits);
             if (parts != null)
-                this.hittedEntity = t;
+                this.hittedEntity = t; 
             this.hittedParts.put(t, parts);
             checkMouseAction(t);
-        }
+        } 
     }
 
     public boolean shouldRenderOutline(Object entity) {
@@ -183,7 +183,7 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
 
     public float sigmoid(float par1) {
         if (par1 == 1.0F || par1 == 0.0F)
-            return par1;
+            return par1; 
         float f0 = (par1 - 0.5F) * 5.0F;
         float f1 = (float)(f0 / Math.sqrt(1.0D + f0 * f0));
         return (f1 + 1.0F) * 0.5F;
@@ -201,7 +201,7 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
             case 'Z':
                 GL11.glRotatef(angle, 0.0F, 0.0F, 1.0F);
                 break;
-        }
+        } 
         GL11.glTranslatef(-x, -y, -z);
     }
 
@@ -245,7 +245,7 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
 
     public Object getData(int id) {
         if (this.dataMap.containsKey(Integer.valueOf(id)))
-            return this.dataMap.get(Integer.valueOf(id));
+            return this.dataMap.get(Integer.valueOf(id)); 
         return Integer.valueOf(0);
     }
 
@@ -289,14 +289,14 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
         if (useVec) {
             viewerVec = getViewerVec(x, y, z);
             viewerAngle = NGTMath.toDegrees(Vector3f.angle(normal, viewerVec));
-        }
+        } 
         if (reverse)
-            viewerAngle = NGTMath.wrapAngle(viewerAngle + 180.0F);
+            viewerAngle = NGTMath.wrapAngle(viewerAngle + 180.0F); 
         if (viewerAngle > 90.0F)
-            viewerAngle = 180.0F - viewerAngle;
+            viewerAngle = 180.0F - viewerAngle; 
         float lightStrength = 1.0F;
         if (viewerAngle > 45.0F)
-            lightStrength = (90.0F - viewerAngle) / 45.0F;
+            lightStrength = (90.0F - viewerAngle) / 45.0F; 
         NGTTessellator tessellator = NGTTessellator.instance;
         if (type == 0) {
             tessellator.startDrawing(6);
@@ -306,13 +306,13 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
             for (int i = 0; i <= 32; i++) {
                 float rad = NGTMath.toRadians(i * 11.25F);
                 tessellator.addVertex(NGTMath.getCos(rad) * rL * lightStrength, NGTMath.getSin(rad) * rL * lightStrength, 0.0F);
-            }
+            } 
             tessellator.draw();
         } else if (type == 1) {
             float angle = NGTMath.toDegrees((float)Math.atan2(rL, length));
             float distance = 256.0F;
             if (useVec)
-                distance = viewerVec.lengthSquared();
+                distance = viewerVec.lengthSquared(); 
             float brightness = 0.0F;
             if (viewerAngle < angle) {
                 brightness = 1.0F - viewerAngle / angle;
@@ -320,9 +320,9 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
                 float b0 = (viewerAngle - angle) / (90.0F - angle);
                 float b1 = (float)(distance * 0.00390625D);
                 if (b1 > 1.0F)
-                    b1 = 1.0F;
+                    b1 = 1.0F; 
                 brightness = b0 * b1;
-            }
+            } 
             if (brightness > 0.0F) {
                 int alpha = (int)(255.0F * brightness);
                 tessellator.startDrawing(6);
@@ -332,11 +332,11 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
                 for (int i = 0; i <= 32; i++) {
                     float rad = NGTMath.toRadians(-i * 11.25F);
                     tessellator.addVertex(NGTMath.getCos(rad) * rL, NGTMath.getSin(rad) * rL, length);
-                }
+                } 
                 tessellator.draw();
                 float b3 = (float)(distance * 0.00390625D);
                 if (b3 > 1.0F)
-                    b3 = 1.0F;
+                    b3 = 1.0F; 
                 float f3 = rS * b3;
                 tessellator.startDrawing(4);
                 for (int j = 0; j <= 32; j++) {
@@ -349,10 +349,10 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
                     tessellator.addVertex(0.0F, 0.0F, 0.0F);
                     tessellator.setColorRGBA_I(0, 0);
                     tessellator.addVertex(cos * f3, sin * f3, 0.0F);
-                }
+                } 
                 tessellator.draw();
-            }
-        }
+            } 
+        } 
     }
 
     private static void renderLightSurface(Vector3f normal, double x, double y, double z, float rL, float rS, float length) {
@@ -363,7 +363,7 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
         Vec3d vecEnd = vecOrig.add(normal.x * lenE, normal.y * lenE, normal.z * lenE);
         RayTraceResult ray = NGTUtil.getClientWorld().rayTraceBlocks(vecStart, vecEnd);
         if (ray == null || ray.typeOfHit != RayTraceResult.Type.BLOCK)
-            return;
+            return; 
         float centerZ = (float)(ray.hitVec.length() - vecOrig.length());
         float size = rS + (rL - rS) * centerZ / length;
         GL11.glEnable(3553);
@@ -386,7 +386,7 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
 
     public int getColor(T entity) {
         if (entity instanceof IResourceSelector)
-            return (((IResourceSelector)entity).getResourceState()).color;
+            return (((IResourceSelector)entity).getResourceState()).color; 
         return 0;
     }
 
@@ -394,8 +394,8 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
         if (entity instanceof IInventory) {
             IInventory inv = (IInventory)entity;
             if (slotIndex >= 0 && slotIndex < inv.getSizeInventory())
-                return inv.getStackInSlot(slotIndex);
-        }
+                return inv.getStackInSlot(slotIndex); 
+        } 
         return null;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/PartsWithChildren.java b/src/api/rtm/jp/ngt/rtm/render/PartsWithChildren.java
index e8a5f51..2cafe05 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/PartsWithChildren.java
+++ b/src/api/rtm/jp/ngt/rtm/render/PartsWithChildren.java
@@ -20,6 +20,6 @@ public class PartsWithChildren extends Parts {
     public void init(PartsRenderer renderer) {
         super.init(renderer);
         for (Parts parts : this.childParts)
-            parts.init(renderer);
+            parts.init(renderer); 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/RTMRenderers.java b/src/api/rtm/jp/ngt/rtm/render/RTMRenderers.java
index f6aceea..a3b4f36 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/RTMRenderers.java
+++ b/src/api/rtm/jp/ngt/rtm/render/RTMRenderers.java
@@ -23,21 +23,21 @@ public final class RTMRenderers {
     public static PartsRenderer getRenderer(String name, String... args) {
         name = name.replace("jp.ngt.rtm.render.", "");
         if (name.equals("FirearmPartsRenderer"))
-            return new FirearmPartsRenderer(args);
+            return new FirearmPartsRenderer(args); 
         if (name.equals("MachinePartsRenderer"))
-            return new MachinePartsRenderer(args);
+            return new MachinePartsRenderer(args); 
         if (name.equals("NPCPartsRenderer"))
-            return new NPCPartsRenderer(args);
+            return new NPCPartsRenderer(args); 
         if (name.equals("OrnamentPartsRenderer"))
-            return new OrnamentPartsRenderer(args);
+            return new OrnamentPartsRenderer(args); 
         if (name.equals("RailPartsRenderer"))
-            return new RailPartsRenderer(args);
+            return new RailPartsRenderer(args); 
         if (name.equals("SignalPartsRenderer"))
-            return new SignalPartsRenderer(args);
+            return new SignalPartsRenderer(args); 
         if (name.equals("VehiclePartsRenderer"))
-            return new VehiclePartsRenderer(args);
+            return new VehiclePartsRenderer(args); 
         if (name.equals("WirePartsRenderer"))
-            return new WirePartsRenderer(args);
+            return new WirePartsRenderer(args); 
         throw new ModelPackException("PartsRenderer not found.", name);
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/RailPartsRenderer.java b/src/api/rtm/jp/ngt/rtm/render/RailPartsRenderer.java
index 7fee5d0..b212e61 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/RailPartsRenderer.java
+++ b/src/api/rtm/jp/ngt/rtm/render/RailPartsRenderer.java
@@ -33,7 +33,7 @@ public class RailPartsRenderer extends RailPartsRendererBase {
         boolean hasGLList = GLHelper.isValid(tileEntity.glList);
         if (hasGLList)
             if (tileEntity.shouldRerenderRail)
-                hasGLList = false;
+                hasGLList = false;  
         if (!hasGLList) {
             float[][] fa = createRailPos(tileEntity);
             if (fa != null) {
@@ -46,8 +46,8 @@ public class RailPartsRenderer extends RailPartsRendererBase {
                 hasGLList = true;
             } else {
                 tileEntity.glList = null;
-            }
-        }
+            } 
+        } 
         if (hasGLList) {
             RailPosition rp = tileEntity.getRailPositions()[0];
             double x = rp.posX - rp.blockX;
@@ -58,7 +58,7 @@ public class RailPartsRenderer extends RailPartsRendererBase {
             bindTexture(((getModelObject()).textures[0]).material.texture);
             ((VertexArray2)tileEntity.glList).render();
             GL11.glPopMatrix();
-        }
+        } 
     }
 
     private void genFBuffer(IRenderer renderer, TileEntityLargeRailCore tileEntity, FloatBuffer matrix, int[] brightness, List<GroupObject> gObjList) {
@@ -77,10 +77,10 @@ public class RailPartsRenderer extends RailPartsRendererBase {
                             for (int i = 0; i < face.vertices.length; i++) {
                                 addFace(i, face, renderer, matrix, sectionIndex);
                                 vtxCount++;
-                            }
-                        }
-            }
-        }
+                            } 
+                        }   
+            } 
+        } 
         renderer.draw();
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/RailPartsRenderer2.java b/src/api/rtm/jp/ngt/rtm/render/RailPartsRenderer2.java
index 218872d..e61cc32 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/RailPartsRenderer2.java
+++ b/src/api/rtm/jp/ngt/rtm/render/RailPartsRenderer2.java
@@ -36,7 +36,7 @@ public class RailPartsRenderer2 extends RailPartsRendererBase {
         boolean hasGLList = GLHelper.isValid(tileEntity.glList);
         if (hasGLList)
             if (tileEntity.shouldRerenderRail)
-                hasGLList = false;
+                hasGLList = false;  
         if (!hasGLList) {
             float[][] fa = createRailPos(tileEntity);
             if (fa != null) {
@@ -49,8 +49,8 @@ public class RailPartsRenderer2 extends RailPartsRendererBase {
                 hasGLList = true;
             } else {
                 tileEntity.glList = null;
-            }
-        }
+            } 
+        } 
         if (hasGLList) {
             RailPosition rp = tileEntity.getRailPositions()[0];
             double x = rp.posX - rp.blockX;
@@ -61,7 +61,7 @@ public class RailPartsRenderer2 extends RailPartsRendererBase {
             bindTexture(((getModelObject()).textures[0]).material.texture);
             renderVBO(tileEntity.glList);
             GL11.glPopMatrix();
-        }
+        } 
     }
 
     private FloatBuffer genFBuffer(TileEntityLargeRailCore tileEntity, FloatBuffer matrix, int[] brightness, List<GroupObject> gObjList) {
@@ -89,13 +89,13 @@ public class RailPartsRenderer2 extends RailPartsRendererBase {
                                 list.add(Float.valueOf(face.faceNormal.getZ()));
                                 list.add(Float.valueOf(tex.getU()));
                                 list.add(Float.valueOf(tex.getV()));
-                            }
-                        }
-            }
-        }
+                            } 
+                        }   
+            } 
+        } 
         FloatBuffer buffer = BufferUtils.createFloatBuffer(list.size());
         for (int j = 0; j < list.size(); j++)
-            buffer.put(((Float)list.get(j)).floatValue());
+            buffer.put(((Float)list.get(j)).floatValue()); 
         buffer.flip();
         return buffer;
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/RailPartsRendererBase.java b/src/api/rtm/jp/ngt/rtm/render/RailPartsRendererBase.java
index fd492a2..735d9b6 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/RailPartsRendererBase.java
+++ b/src/api/rtm/jp/ngt/rtm/render/RailPartsRendererBase.java
@@ -57,7 +57,7 @@ public class RailPartsRendererBase extends TileEntityPartsRenderer<ModelSetRail>
             rail.glList = (GLObject)GLHelper.generateGLList(rail.glList);
         } else if (rail.shouldRerenderRail) {
             hasGLList = false;
-        }
+        } 
         if (!hasGLList) {
             float[][] fa = createRailPos(rail);
             if (fa != null) {
@@ -72,8 +72,8 @@ public class RailPartsRendererBase extends TileEntityPartsRenderer<ModelSetRail>
             } else {
                 GLHelper.deleteGLList(rail.glList);
                 rail.glList = null;
-            }
-        }
+            } 
+        } 
         if (hasGLList) {
             RailPosition rp = rail.getRailPositions()[0];
             double x = rp.posX - rp.blockX;
@@ -84,7 +84,7 @@ public class RailPartsRendererBase extends TileEntityPartsRenderer<ModelSetRail>
             bindTexture(((getModelObject()).textures[0]).material.texture);
             GLHelper.callList(rail.glList);
             GL11.glPopMatrix();
-        }
+        } 
     }
 
     protected float[][] createRailPos(TileEntityLargeRailCore par1) {
@@ -102,25 +102,25 @@ public class RailPartsRendererBase extends TileEntityPartsRenderer<ModelSetRail>
                     double[] curPoint = rm.getRailPos(max, i);
                     float[] array = { moveX + (float)(curPoint[1] - stPoint[1]), (float)(rm.getRailHeight(max, i) - startH), moveZ + (float)(curPoint[0] - stPoint[0]), rm.getRailRotation(max, i), -rm.getRailPitch(max, i), rm.getCant(max, i) };
                     list.add(array);
-                }
-            }
+                } 
+            } 
             return list.<float[]>toArray(new float[list.size()][5]);
-        }
+        } 
         return (float[][])null;
     }
 
     protected final FloatBuffer createMatrix(float[][] rp) {
         FloatBuffer buffer = FloatBuffer.allocate(rp.length << 4);
         for (int i = 0; i < rp.length; i++) {
-            FloatBuffer fb = FloatBuffer.wrap(new float[] {
-                        1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F,
+            FloatBuffer fb = FloatBuffer.wrap(new float[] { 
+                        1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 
                         1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
             fb = NGTRenderHelper.translate(fb, rp[i][0], rp[i][1], rp[i][2]);
             fb = NGTRenderHelper.rotate(fb, NGTMath.toRadians(rp[i][3]), 'Y');
             fb = NGTRenderHelper.rotate(fb, NGTMath.toRadians(rp[i][4]), 'X');
             fb = NGTRenderHelper.rotate(fb, NGTMath.toRadians(rp[i][5]), 'Z');
             buffer.put(fb);
-        }
+        } 
         return buffer;
     }
 
@@ -131,14 +131,14 @@ public class RailPartsRendererBase extends TileEntityPartsRenderer<ModelSetRail>
             int y0 = y + NGTMath.floor(rp[i][1]);
             int z0 = z + NGTMath.floor(rp[i][2]);
             fa[i] = getBrightness(world, x0, y0, z0);
-        }
+        } 
         return fa;
     }
 
     public int getBrightness(World world, int x, int y, int z) {
         int brightness = getWorldBrightness(world, x, y, z);
         if (brightness <= 0)
-            brightness = getWorldBrightness(world, x, y + 1, z);
+            brightness = getWorldBrightness(world, x, y + 1, z); 
         return brightness;
     }
 
@@ -160,9 +160,9 @@ public class RailPartsRendererBase extends TileEntityPartsRenderer<ModelSetRail>
                         for (int k = 0; k < group.faces.size(); k++) {
                             Face face = group.faces.get(k);
                             NGTRenderHelper.addFaceWithMatrix(face, (IRenderer)polygonRenderer, matrix, i, false);
-                        }
-            }
-        }
+                        }   
+            } 
+        } 
         polygonRenderer.draw();
     }
 
@@ -170,7 +170,7 @@ public class RailPartsRendererBase extends TileEntityPartsRenderer<ModelSetRail>
         List<GroupObject> gObj = this.modelObj.model.getGroupObjects();
         String[] aStr = new String[gObj.size()];
         for (int i = 0; i < aStr.length; i++)
-            aStr[i] = ((GroupObject)gObj.get(i)).name;
+            aStr[i] = ((GroupObject)gObj.get(i)).name; 
         return aStr;
     }
 
@@ -193,16 +193,16 @@ public class RailPartsRendererBase extends TileEntityPartsRenderer<ModelSetRail>
             float z0 = moveZ + (float)(p1[0] - origPos[0]);
             float yaw = rm.getRailRotation(max, i);
             float pitch = rm.getRailPitch(max, i);
-            setBrightness(getBrightness(tileEntity.getWorld(),
+            setBrightness(getBrightness(tileEntity.getWorld(), 
                         NGTMath.floor(origPos[1] + x0), tileEntity.getPos().getY(), NGTMath.floor(origPos[0] + z0)));
             GL11.glPushMatrix();
             GL11.glTranslatef(x0, y0, z0);
             GL11.glRotatef(yaw, 0.0F, 1.0F, 0.0F);
             GL11.glRotatef(-pitch, 1.0F, 0.0F, 0.0F);
             for (int j = 0; j < pArray.length; j++)
-                pArray[j].render(this);
+                pArray[j].render(this); 
             GL11.glPopMatrix();
-        }
+        } 
     }
 
     public ModelObject getModelObject() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/SignalPartsRenderer.java b/src/api/rtm/jp/ngt/rtm/render/SignalPartsRenderer.java
index ea47a41..cc1a8db 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/SignalPartsRenderer.java
+++ b/src/api/rtm/jp/ngt/rtm/render/SignalPartsRenderer.java
@@ -20,31 +20,31 @@ public class SignalPartsRenderer extends TileEntityPartsRenderer<ModelSetSignal>
 
     public float getBlockDirection(TileEntity par1) {
         if (par1 == null)
-            return 0.0F;
+            return 0.0F; 
         return ((TileEntitySignal)par1).getBlockDirection();
     }
 
     public float getRotation(TileEntity par1) {
         if (par1 == null)
-            return 0.0F;
+            return 0.0F; 
         return ((TileEntitySignal)par1).getRotation();
     }
 
     public int getSignal(TileEntity par1) {
         if (par1 == null)
-            return 0;
+            return 0; 
         return ((TileEntitySignal)par1).getSignal();
     }
 
     public Block getBlock(TileEntity par1) {
         if (par1 == null)
-            return Blocks.AIR;
+            return Blocks.AIR; 
         return ((TileEntitySignal)par1).getRenderBlock();
     }
 
     public boolean isOpaqueCube(TileEntity par1) {
         if (par1 == null)
-            return true;
+            return true; 
         return par1.getWorld().getBlockState(par1.getPos()).isOpaqueCube();
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/VehiclePartsRenderer.java b/src/api/rtm/jp/ngt/rtm/render/VehiclePartsRenderer.java
index 0bd2a40..1b1ef01 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/VehiclePartsRenderer.java
+++ b/src/api/rtm/jp/ngt/rtm/render/VehiclePartsRenderer.java
@@ -21,58 +21,58 @@ public class VehiclePartsRenderer extends EntityPartsRenderer<ModelSetVehicleBas
                 this.isvehicle = true;
             } else if ("false".equals(par1[0])) {
                 this.isvehicle = false;
-            }
+            }  
     }
 
-    public void init(ModelSetVehicleBase par1, ModelObject par2) {
+    public void init(ModelSetVehicleBase<?> par1, ModelObject par2) {
         super.init(par1, par2);
     }
 
     public float getWheelRotationR(Entity entity) {
         if (entity == null)
-            return 0.0F;
+            return 0.0F; 
         if (!this.isvehicle && entity instanceof EntityBogie) {
             EntityBogie bogie = (EntityBogie)entity;
             EntityTrainBase train = bogie.getTrain();
             if (train != null)
-                return train.wheelRotationR * ((bogie.getBogieId() == 0) ? 1.0F : -1.0F);
-        }
+                return train.wheelRotationR * ((bogie.getBogieId() == 0) ? 1.0F : -1.0F); 
+        } 
         return ((EntityVehicleBase)entity).wheelRotationR;
     }
 
     public float getWheelRotationL(Entity entity) {
         if (entity == null)
-            return 0.0F;
+            return 0.0F; 
         if (!this.isvehicle && entity instanceof EntityBogie) {
             EntityBogie bogie = (EntityBogie)entity;
             EntityTrainBase train = bogie.getTrain();
             if (train != null)
-                return train.wheelRotationL * ((bogie.getBogieId() == 0) ? 1.0F : -1.0F);
-        }
+                return train.wheelRotationL * ((bogie.getBogieId() == 0) ? 1.0F : -1.0F); 
+        } 
         return ((EntityVehicleBase)entity).wheelRotationL;
     }
 
     public float getDoorMovementR(Entity entity) {
         if (entity == null || !this.isvehicle)
-            return 0.0F;
+            return 0.0F; 
         return ((EntityVehicleBase)entity).doorMoveR / 60.0F;
     }
 
     public float getDoorMovementL(Entity entity) {
         if (entity == null || !this.isvehicle)
-            return 0.0F;
+            return 0.0F; 
         return ((EntityVehicleBase)entity).doorMoveL / 60.0F;
     }
 
     public float getPantographMovementFront(Entity entity) {
         if (entity == null || !this.isvehicle)
-            return 0.0F;
+            return 0.0F; 
         return ((EntityVehicleBase)entity).pantograph_F / 40.0F;
     }
 
     public float getPantographMovementBack(Entity entity) {
         if (entity == null || !this.isvehicle)
-            return 0.0F;
+            return 0.0F; 
         return ((EntityVehicleBase)entity).pantograph_B / 40.0F;
     }
 
@@ -80,7 +80,7 @@ public class VehiclePartsRenderer extends EntityPartsRenderer<ModelSetVehicleBas
         if (isRidden(entity)) {
             Entity rider = entity.getPassengers().get(0);
             return -rider.rotationYaw;
-        }
+        } 
         return 0.0F;
     }
 
@@ -88,7 +88,7 @@ public class VehiclePartsRenderer extends EntityPartsRenderer<ModelSetVehicleBas
         if (entity != null && entity.isBeingRidden()) {
             boolean isHostPlayer = ((NGTUtilClient.getMinecraft()).player == entity.getPassengers().get(0));
             return isHostPlayer;
-        }
+        } 
         return false;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/WirePartsRenderer.java b/src/api/rtm/jp/ngt/rtm/render/WirePartsRenderer.java
index 3b52215..5869569 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/WirePartsRenderer.java
+++ b/src/api/rtm/jp/ngt/rtm/render/WirePartsRenderer.java
@@ -35,7 +35,7 @@ public class WirePartsRenderer extends TileEntityPartsRenderer<ModelSetWire> {
 
     protected void renderWireStatic(TileEntityElectricalWiring tileEntity, Connection connection, Vec3 target, float par8, int pass) {
         if (this.useScript)
-            ScriptUtil.doScriptFunction(getScript(), "renderWireStatic", new Object[] { tileEntity, connection, target, Float.valueOf(par8), Integer.valueOf(pass) });
+            ScriptUtil.doScriptFunction(getScript(), "renderWireStatic", new Object[] { tileEntity, connection, target, Float.valueOf(par8), Integer.valueOf(pass) }); 
     }
 
     protected void renderWireDynamic(TileEntityElectricalWiring tileEntity, Connection connection, Vec3 target, float par8, int pass) {
@@ -45,15 +45,15 @@ public class WirePartsRenderer extends TileEntityPartsRenderer<ModelSetWire> {
             WireConfig cfg = ((ModelSetWire)connection.getResourceState().getResourceSet()).getConfig();
             boolean canUseColor = cfg.useCustomColor;
             if (canUseColor)
-                GLHelper.setColor((connection.getResourceState()).color, 255);
+                GLHelper.setColor((connection.getResourceState()).color, 255); 
             if (cfg.deflectionCoefficient > 0.0F) {
                 renderWireDeflection(tileEntity, connection, target, par8, pass, (Parts)null);
             } else {
                 renderWireStraight(tileEntity, connection, target, par8, pass, (Parts)null);
-            }
+            } 
             if (canUseColor)
-                GLHelper.setColor(16777215, 255);
-        }
+                GLHelper.setColor(16777215, 255); 
+        } 
     }
 
     public void renderWireStraight(TileEntityElectricalWiring tileEntity, Connection connection, Vec3 target, float par8, int pass, @Nullable Parts parts) {
@@ -72,9 +72,9 @@ public class WirePartsRenderer extends TileEntityPartsRenderer<ModelSetWire> {
                     modelSet.modelObj.model.renderAll(cfg.smoothing);
                 } else {
                     parts.render(this);
-                }
+                }  
             GL11.glTranslatef(0.0F, cfg.sectionLength, 0.0F);
-        }
+        } 
         GL11.glPopMatrix();
     }
 
@@ -83,7 +83,7 @@ public class WirePartsRenderer extends TileEntityPartsRenderer<ModelSetWire> {
         if (lx == 0.0D) {
             renderWireStraight(tileEntity, connection, target, par8, pass, parts);
             return;
-        }
+        } 
         ModelSetWire modelSet = connection.getResourceState().getResourceSet();
         WireConfig cfg = modelSet.getConfig();
         GL11.glPushMatrix();
@@ -94,7 +94,7 @@ public class WirePartsRenderer extends TileEntityPartsRenderer<ModelSetWire> {
         double alpha = (cfg.deflectionCoefficient * NGTMath.cos(pitch)) / Math.pow(lc, lx);
         double a = 0.0D;
         if (lx > 0.0D)
-            a = (lx - ly / alpha * lx) / 2.0D;
+            a = (lx - ly / alpha * lx) / 2.0D; 
         double x = 0.0D;
         int i = 0;
         while (x < lx) {
@@ -118,17 +118,17 @@ public class WirePartsRenderer extends TileEntityPartsRenderer<ModelSetWire> {
                     modelSet.modelObj.model.renderAll(cfg.smoothing);
                 } else {
                     parts.render(this);
-                }
+                }  
             GL11.glPopMatrix();
             x = nextX;
             i++;
-        }
+        } 
         GL11.glPopMatrix();
     }
 
     private boolean shouldRenderObject(TileEntityElectricalWiring tileEntity, int len, int pos, int pass) {
         if (this.useScript)
-            return ((Boolean)ScriptUtil.doScriptFunction(getScript(), "shouldRenderObject", new Object[] { tileEntity, Integer.valueOf(len), Integer.valueOf(pos), Integer.valueOf(pass) })).booleanValue();
+            return ((Boolean)ScriptUtil.doScriptFunction(getScript(), "shouldRenderObject", new Object[] { tileEntity, Integer.valueOf(len), Integer.valueOf(pos), Integer.valueOf(pass) })).booleanValue(); 
         return true;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/MovingSoundEntity.java b/src/api/rtm/jp/ngt/rtm/sound/MovingSoundEntity.java
index a1f540c..3fd3e63 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/MovingSoundEntity.java
+++ b/src/api/rtm/jp/ngt/rtm/sound/MovingSoundEntity.java
@@ -20,7 +20,7 @@ public class MovingSoundEntity extends MovingSoundCustom {
         if (this.entity.isDead) {
             this.donePlaying = true;
             return;
-        }
+        } 
         this.xPosF = (float)this.entity.posX;
         this.yPosF = (float)this.entity.posY;
         this.zPosF = (float)this.entity.posZ;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/MovingSoundMaker.java b/src/api/rtm/jp/ngt/rtm/sound/MovingSoundMaker.java
index 8d9356a..1323882 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/MovingSoundMaker.java
+++ b/src/api/rtm/jp/ngt/rtm/sound/MovingSoundMaker.java
@@ -23,24 +23,24 @@ public final class MovingSoundMaker {
 
     public static MovingSoundEntity create(Entity entity, String sound, boolean repeat) {
         if (!checkSoundFile(sound))
-            return null;
+            return null; 
         if (entity instanceof EntityTrainBase)
-            return new MovingSoundTrain((EntityTrainBase)entity, sound, repeat);
+            return new MovingSoundTrain((EntityTrainBase)entity, sound, repeat); 
         return new MovingSoundEntity(entity, sound, repeat);
     }
 
     public static MovingSoundTileEntity create(TileEntity entity, String sound, boolean repeat) {
         if (!checkSoundFile(sound))
-            return null;
+            return null; 
         return new MovingSoundTileEntity(entity, sound, repeat);
     }
 
     private static boolean checkSoundFile(String sound) {
         sound = fixSoundName(sound);
         if (RTMSound.ALL_OGG_FILES.contains(sound))
-            return true;
+            return true; 
         if (sound.split(":")[0].equals("minecraft"))
-            return true;
+            return true; 
         NGTLog.debug("[MovingSound] Invalid sound : %s", new Object[] { sound });
         return false;
     }
@@ -49,6 +49,7 @@ public final class MovingSoundMaker {
         String domain;
         if (sound.contains("ogg"))
             return sound;
+        String path;
         if (sound.contains(":")) {
             String[] sa = sound.split(":");
             domain = sa[0];
@@ -56,13 +57,13 @@ public final class MovingSoundMaker {
         } else {
             domain = "minecraft";
             path = sound;
-        }
+        } 
         if (!NAME_COMPATIBLE_MAP.containsKey(domain))
-            loadSoundJson(domain);
+            loadSoundJson(domain); 
         Map<String, String> map = NAME_COMPATIBLE_MAP.get(domain);
         if (map.containsKey(sound))
-            return map.get(sound);
-        String path = path.replace('.', '/');
+            return map.get(sound); 
+        path = path.replace('.', '/');
         return domain + ":sounds/" + path + ".ogg";
     }
 
@@ -79,20 +80,20 @@ public final class MovingSoundMaker {
                         path = (String)((Map)obj).get("name");
                     } else {
                         path = (String)obj;
-                    }
+                    } 
                     if (path.contains(":")) {
                         path = path.replace(":", ":sounds/") + ".ogg";
                     } else {
                         path = domain + ":sounds/" + path + ".ogg";
-                    }
+                    } 
                     String name = domain + ":" + (String)entry.getKey();
                     nameMap.put(name, path);
                     NGTLog.debug("[MSM] Add Sound map (%s)->(%s)", new Object[] { name, path });
-                }
-            }
+                } 
+            } 
         } catch (IOException e) {
             e.printStackTrace();
-        }
+        } 
         NAME_COMPATIBLE_MAP.put(domain, nameMap);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/MovingSoundTileEntity.java b/src/api/rtm/jp/ngt/rtm/sound/MovingSoundTileEntity.java
index f8dda54..0b085a0 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/MovingSoundTileEntity.java
+++ b/src/api/rtm/jp/ngt/rtm/sound/MovingSoundTileEntity.java
@@ -27,6 +27,6 @@ public class MovingSoundTileEntity extends MovingSoundCustom {
         if (this.entity.isInvalid()) {
             this.donePlaying = true;
             return;
-        }
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/MovingSoundTrain.java b/src/api/rtm/jp/ngt/rtm/sound/MovingSoundTrain.java
index 83bf7a8..38abab2 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/MovingSoundTrain.java
+++ b/src/api/rtm/jp/ngt/rtm/sound/MovingSoundTrain.java
@@ -22,6 +22,6 @@ public class MovingSoundTrain extends MovingSoundEntity {
             float f0 = (modelset.getConfig()).maxSpeed[0];
             float f1 = (train.getSpeed() - f0) / ((modelset.getConfig()).maxSpeed[4] - f0) + 1.0F;
             this.pitch = f1;
-        }
+        } 
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SoundObj.java b/src/api/rtm/jp/ngt/rtm/sound/SoundObj.java
index 13a39e6..d58f64e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SoundObj.java
+++ b/src/api/rtm/jp/ngt/rtm/sound/SoundObj.java
@@ -17,13 +17,13 @@ public class SoundObj {
     public SoundObj(String par1) {
         this.name = par1;
         String[] sa = par1.split(":");
-        this.location = (ResourceLocation)new ResourceLocationCustom(sa[0], sa[1]);
+        this.location = new ResourceLocationCustom(sa[0], sa[1]);
         this.sound = new SoundEvent(this.location);
     }
 
     public void init() {
         this.sound.setRegistryName(this.location);
-        ForgeRegistries.SOUND_EVENTS.register((IForgeRegistryEntry)this.sound);
+        ForgeRegistries.SOUND_EVENTS.register(this.sound);
     }
 
     public SoundEvent getSound() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SoundPlayer.java b/src/api/rtm/jp/ngt/rtm/sound/SoundPlayer.java
index 68b988c..a947a33 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SoundPlayer.java
+++ b/src/api/rtm/jp/ngt/rtm/sound/SoundPlayer.java
@@ -26,19 +26,19 @@ public class SoundPlayer {
 
         public void playSound(TileEntity tile, String sound, boolean repeat) {
             if (this.sound != null)
-                stopSound();
+                stopSound(); 
             this.sound = MovingSoundMaker.create(tile, sound, repeat);
             if (this.sound != null) {
                 this.sound.setVolume(10.0F);
                 ClientProxy.playSound(this.sound, 10.0F, 1.0F);
-            }
+            } 
         }
 
         public void stopSound() {
             if (this.sound != null) {
                 this.sound.stop();
                 this.sound = null;
-            }
+            } 
         }
 
         public boolean isPlaying() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SoundUpdaterTrain.java b/src/api/rtm/jp/ngt/rtm/sound/SoundUpdaterTrain.java
index e2a9e2d..b9aa107 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SoundUpdaterTrain.java
+++ b/src/api/rtm/jp/ngt/rtm/sound/SoundUpdaterTrain.java
@@ -28,38 +28,38 @@ public class SoundUpdaterTrain extends SoundUpdaterVehicle<EntityTrainBase> {
         EntityTrainBase train = this.vehicle;
         EntityBogie bogie = train.getBogie(train.getTrainDirection());
         if (bogie == null)
-            return;
+            return; 
         int signal = train.getSignal();
         if (train.getSpeed() > 0.0F) {
             switch (signal) {
                 case 1:
                     if (this.currentSignal != 1) {
                         if (this.atsSound[0] != null)
-                            this.atsSound[0].stop();
+                            this.atsSound[0].stop(); 
                         if (this.atsSound[1] != null)
-                            this.atsSound[1].stop();
+                            this.atsSound[1].stop(); 
                         this.atsSound[0] = MovingSoundMaker.create(bogie, "rtm:sounds/train/ats.ogg", true);
                         this.soundHandler.playSound((ISound)this.atsSound[0]);
                         this.atsSound[1] = MovingSoundMaker.create(bogie, "rtm:sounds/train/ats_bell.ogg", true);
                         this.soundHandler.playSound((ISound)this.atsSound[1]);
                         this.currentSignal = 1;
-                    }
+                    } 
                     break;
                 case -1:
                     if (this.currentSignal != -1) {
                         if (this.atsSound[1] != null)
-                            this.atsSound[1].stop();
+                            this.atsSound[1].stop(); 
                         this.currentSignal = -1;
-                    }
+                    } 
                     break;
-            }
+            } 
         } else if (signal != -1 && this.currentSignal != 0) {
             if (this.atsSound[0] != null)
-                this.atsSound[0].stop();
+                this.atsSound[0].stop(); 
             if (this.atsSound[1] != null)
-                this.atsSound[1].stop();
+                this.atsSound[1].stop(); 
             this.currentSignal = 0;
-        }
+        } 
         super.update();
     }
 
@@ -68,9 +68,9 @@ public class SoundUpdaterTrain extends SoundUpdaterVehicle<EntityTrainBase> {
         if (speed > 0.0F) {
             float acceleration = EnumNotch.getAcceleration(getNotch(), speed);
             if (speed < ((TrainConfig)modelset.getConfig()).maxSpeed[0])
-                return (acceleration > 0.0F) ? ((VehicleBaseConfig)modelset.getConfig()).sound_S_A : ((VehicleBaseConfig)modelset.getConfig()).sound_D_S;
+                return (acceleration > 0.0F) ? ((VehicleBaseConfig)modelset.getConfig()).sound_S_A : ((VehicleBaseConfig)modelset.getConfig()).sound_D_S; 
             return (acceleration > 0.0F) ? ((VehicleBaseConfig)modelset.getConfig()).sound_Acceleration : ((VehicleBaseConfig)modelset.getConfig()).sound_Deceleration;
-        }
+        } 
         return ((VehicleBaseConfig)modelset.getConfig()).sound_Stop;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SoundUpdaterVehicle.java b/src/api/rtm/jp/ngt/rtm/sound/SoundUpdaterVehicle.java
index 89e2c6a..1599361 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SoundUpdaterVehicle.java
+++ b/src/api/rtm/jp/ngt/rtm/sound/SoundUpdaterVehicle.java
@@ -19,7 +19,7 @@ import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class SoundUpdaterVehicle<T extends EntityVehicleBase> implements IUpdateVehicle {
+public class SoundUpdaterVehicle<T extends EntityVehicleBase<?>> implements IUpdateVehicle {
     protected final SoundHandler soundHandler;
 
     protected final T vehicle;
@@ -43,32 +43,32 @@ public class SoundUpdaterVehicle<T extends EntityVehicleBase> implements IUpdate
             ScriptUtil.doScriptIgnoreError(modelset.soundSE, "onUpdate", new Object[] { this });
         } else if (((EntityVehicleBase)this.vehicle).isDead) {
             if (this.prevSound != null)
-                this.prevSound.stop();
+                this.prevSound.stop(); 
         } else {
             String newSound = getSound(modelset);
             if (this.prevSoundResource == null || newSound == null || !newSound.equals(this.prevSoundResource)) {
                 if (this.prevSound != null)
-                    this.prevSound.stop();
+                    this.prevSound.stop(); 
                 this.prevSoundResource = newSound;
                 this.silent = true;
-            }
+            } 
             if (this.silent && !this.soundHandler.isSoundPlaying((ISound)this.prevSound) && this.prevSoundResource != null) {
                 MovingSoundEntity sound = MovingSoundMaker.create((Entity)this.vehicle, this.prevSoundResource, true);
                 if (sound != null) {
                     if (sound instanceof MovingSoundTrain)
-                        ((MovingSoundTrain)sound).changePitch = changePitch();
+                        ((MovingSoundTrain)sound).changePitch = changePitch(); 
                     this.soundHandler.playSound((ISound)sound);
                     this.prevSound = sound;
                     this.silent = false;
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     protected String getSound(ModelSetVehicleBase modelset) {
         float speed = this.vehicle.getSpeed();
         if (speed > 0.0F)
-            return ((VehicleBaseConfig)modelset.getConfig()).sound_Acceleration;
+            return ((VehicleBaseConfig)modelset.getConfig()).sound_Acceleration; 
         return ((VehicleBaseConfig)modelset.getConfig()).sound_Stop;
     }
 
@@ -85,9 +85,9 @@ public class SoundUpdaterVehicle<T extends EntityVehicleBase> implements IUpdate
         int x = NGTMath.floor(((EntityVehicleBase)this.vehicle).posX);
         int y = NGTMath.floor(((EntityVehicleBase)this.vehicle).posY);
         int z = NGTMath.floor(((EntityVehicleBase)this.vehicle).posZ);
-        return (!world.canSeeSky(new BlockPos(x + 1, y, z + 1)) &&
-            !world.canSeeSky(new BlockPos(x - 1, y, z + 1)) &&
-            !world.canSeeSky(new BlockPos(x + 1, y, z - 1)) &&
+        return (!world.canSeeSky(new BlockPos(x + 1, y, z + 1)) && 
+            !world.canSeeSky(new BlockPos(x - 1, y, z + 1)) && 
+            !world.canSeeSky(new BlockPos(x + 1, y, z - 1)) && 
             !world.canSeeSky(new BlockPos(x - 1, y, z - 1)));
     }
 
@@ -101,15 +101,15 @@ public class SoundUpdaterVehicle<T extends EntityVehicleBase> implements IUpdate
         MovingSoundEntity sound = getPlayingSound(domain, path);
         boolean isNewSound = (sound == null);
         if (isNewSound)
-            sound = MovingSoundMaker.create((Entity)this.vehicle, domain + ":" + path, repeat);
+            sound = MovingSoundMaker.create((Entity)this.vehicle, domain + ":" + path, repeat); 
         if (sound != null) {
             sound.setVolume(volume);
             sound.setPitch(pitch);
             if (isNewSound) {
                 this.soundHandler.playSound((ISound)sound);
                 this.playingSounds.add(sound);
-            }
-        }
+            } 
+        } 
     }
 
     @Deprecated
@@ -118,17 +118,17 @@ public class SoundUpdaterVehicle<T extends EntityVehicleBase> implements IUpdate
         if (sound != null) {
             sound.stop();
             this.playingSounds.remove(sound);
-        }
+        } 
     }
 
     public void stopAllSounds() {
         for (MovingSoundEntity sound : this.playingSounds)
-            sound.stop();
+            sound.stop(); 
         this.playingSounds.clear();
         if (this.prevSound != null) {
             this.prevSound.stop();
             this.prevSound = null;
-        }
+        } 
         this.prevSoundResource = null;
     }
 
@@ -136,8 +136,8 @@ public class SoundUpdaterVehicle<T extends EntityVehicleBase> implements IUpdate
         for (MovingSoundEntity sound : this.playingSounds) {
             ResourceLocation resource = sound.getSoundLocation();
             if (resource.equals(new ResourceLocationCustom(domain, path)))
-                return sound;
-        }
+                return sound; 
+        } 
         return null;
     }
 
@@ -157,7 +157,7 @@ public class SoundUpdaterVehicle<T extends EntityVehicleBase> implements IUpdate
             val2 = ((Double)value).doubleValue();
         } else if (value instanceof Integer) {
             val2 = ((Integer)value).intValue();
-        }
+        } 
         (getEntity().getResourceState()).dataMap.setDouble("SU" + id, val2, 0);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SpeakerSounds.java b/src/api/rtm/jp/ngt/rtm/sound/SpeakerSounds.java
index 0b46f6f..51f9b70 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SpeakerSounds.java
+++ b/src/api/rtm/jp/ngt/rtm/sound/SpeakerSounds.java
@@ -26,7 +26,7 @@ public class SpeakerSounds {
     private SpeakerSounds(boolean par1) {
         this.sideServer = par1;
         if (NGTUtil.isServer())
-            loadSoundList();
+            loadSoundList(); 
     }
 
     public static SpeakerSounds getInstance(boolean server) {
@@ -40,18 +40,18 @@ public class SpeakerSounds {
                 this.sounds = (String[])NGTJson.getObjectFromJson(NGTText.readText(file, false, ""), String[].class);
             } catch (IOException e) {
                 e.printStackTrace();
-            }
+            }  
     }
 
     public void syncSoundList() {
         for (int i = 0; i < this.sounds.length; i++)
-            setSound(i + 1, this.sounds[i], true);
+            setSound(i + 1, this.sounds[i], true); 
     }
 
     private void saveSoundList() {
         File file = new File(NGTFileLoader.getModsDir().get(0), "rtm/speaker_sounds.json");
         if (!file.getParentFile().exists())
-            file.getParentFile().mkdirs();
+            file.getParentFile().mkdirs(); 
         NGTJson.writeToJson(NGTJson.getJsonFromObject(this.sounds), file);
     }
 
@@ -67,7 +67,7 @@ public class SpeakerSounds {
             RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)new PacketNotice((byte)1, msg));
         } else if (sync) {
             RTMCore.NETWORK_WRAPPER.sendToServer((IMessage)new PacketNotice((byte)0, msg));
-        }
+        } 
     }
 
     public void onGetPacket(String msg, boolean sync) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/util/RenderUtil.java b/src/api/rtm/jp/ngt/rtm/util/RenderUtil.java
index 3072a89..6307c2e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/util/RenderUtil.java
+++ b/src/api/rtm/jp/ngt/rtm/util/RenderUtil.java
@@ -13,7 +13,7 @@ public final class RenderUtil {
     public static void enableCustomLighting(int id, float x, float y, float z, float r, float g, float b) {
         int light = getLight(id);
         if (light < 0)
-            return;
+            return; 
         GL11.glDisable(16384);
         GL11.glDisable(16385);
         if (r < 0.0F) {
@@ -51,8 +51,8 @@ public final class RenderUtil {
                     g = 0.0F;
                     b = (360 - hue) / 60.0F;
                     break;
-            }
-        }
+            } 
+        } 
         GL11.glEnable(light);
         GL11.glLight(light, 4611, setColorBuffer(x, y, z, 1.0F));
         float spe = 1.0F;
@@ -71,7 +71,7 @@ public final class RenderUtil {
     public static void disableCustomLighting(int id) {
         int light = getLight(id);
         if (light < 0)
-            return;
+            return; 
         GL11.glDisable(light);
         GL11.glEnable(16384);
         GL11.glEnable(16385);
@@ -87,7 +87,7 @@ public final class RenderUtil {
                 return 16390;
             case 3:
                 return 16391;
-        }
+        } 
         return -1;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/world/RTMChunkManager.java b/src/api/rtm/jp/ngt/rtm/world/RTMChunkManager.java
index 28de039..e156143 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/world/RTMChunkManager.java
+++ b/src/api/rtm/jp/ngt/rtm/world/RTMChunkManager.java
@@ -27,16 +27,16 @@ public final class RTMChunkManager implements ForgeChunkManager.LoadingCallback,
         if (event.getEntity() instanceof IChunkLoader) {
             IChunkLoader loader = (IChunkLoader)event.getEntity();
             if (loader.isChunkLoaderEnable())
-                loader.forceChunkLoading(event.getNewChunkX(), event.getNewChunkZ());
-        }
+                loader.forceChunkLoading(event.getNewChunkX(), event.getNewChunkZ()); 
+        } 
     }
 
     public void getChunksAround(Set<ChunkPos> set, int xChunk, int zChunk, int radius) {
         set.clear();
         for (int xx = xChunk - radius; xx <= xChunk + radius; xx++) {
             for (int zz = zChunk - radius; zz <= zChunk + radius; zz++)
-                set.add(new ChunkPos(xx, zz));
-        }
+                set.add(new ChunkPos(xx, zz)); 
+        } 
     }
 
     public ForgeChunkManager.Ticket getNewTicket(World world, ForgeChunkManager.Type type) {
@@ -49,11 +49,11 @@ public final class RTMChunkManager implements ForgeChunkManager.LoadingCallback,
             if (ticket.getEntity() instanceof IChunkLoader) {
                 set.add(ticket);
                 continue;
-            }
+            } 
             NBTTagCompound nbt = ticket.getModData();
             if (nbt.hasKey("TYPE"))
-                set.add(ticket);
-        }
+                set.add(ticket); 
+        } 
         List<ForgeChunkManager.Ticket> ticketList = new LinkedList();
         ticketList.addAll(set);
         return ticketList;
@@ -71,13 +71,13 @@ public final class RTMChunkManager implements ForgeChunkManager.LoadingCallback,
                 if (tile instanceof IChunkLoader) {
                     loader = (IChunkLoader)tile;
                     NGTLog.debug("[RTM] Chunk loader found at " + tile.getPos().toString());
-                }
-            }
+                } 
+            } 
             if (loader != null) {
                 loader.setChunkTicket(ticket);
                 loader.forceChunkLoading();
-            }
-        }
+            } 
+        } 
     }
 
     public ListMultimap<String, ForgeChunkManager.Ticket> playerTicketsLoaded(ListMultimap<String, ForgeChunkManager.Ticket> tickets, World world) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/world/station/Station.java b/src/api/rtm/jp/ngt/rtm/world/station/Station.java
index e4a867e..08dc55f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/world/station/Station.java
+++ b/src/api/rtm/jp/ngt/rtm/world/station/Station.java
@@ -37,7 +37,7 @@ public class Station {
             int y1 = nbt1.getInteger("MaxY");
             int z1 = nbt1.getInteger("MaxZ");
             this.partsList.add(new AABBInt(x0, y0, z0, x1, y1, z1));
-        }
+        } 
     }
 
     public void writeToNBT(NBTTagCompound nbt) {
@@ -54,7 +54,7 @@ public class Station {
             nbt1.setInteger("MaxY", chunk.maxY);
             nbt1.setInteger("MaxZ", chunk.maxZ);
             nbttaglist.appendTag((NBTBase)nbt1);
-        }
+        } 
         nbt.setTag("Parts", (NBTBase)nbttaglist);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/world/station/StationCollection.java b/src/api/rtm/jp/ngt/rtm/world/station/StationCollection.java
index 625193a..73b9164 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/world/station/StationCollection.java
+++ b/src/api/rtm/jp/ngt/rtm/world/station/StationCollection.java
@@ -27,7 +27,7 @@ public class StationCollection extends WorldSavedData {
     public void setWorld(World par1) {
         this.worldObj = par1;
         for (Station station : this.stations.values())
-            station.worldObj = par1;
+            station.worldObj = par1; 
     }
 
     public void readFromNBT(NBTTagCompound nbt) {
@@ -37,7 +37,7 @@ public class StationCollection extends WorldSavedData {
             Station station = new Station();
             station.readFromNBT(nbt1);
             this.stations.put(station.name, station);
-        }
+        } 
     }
 
     public NBTTagCompound writeToNBT(NBTTagCompound nbt) {
@@ -48,7 +48,7 @@ public class StationCollection extends WorldSavedData {
             NBTTagCompound nbt1 = new NBTTagCompound();
             station.writeToNBT(nbt1);
             nbttaglist.appendTag((NBTBase)nbt1);
-        }
+        } 
         nbt.setTag("Stations", (NBTBase)nbttaglist);
         return nbt;
     }
@@ -62,9 +62,9 @@ public class StationCollection extends WorldSavedData {
                 Station station = new Station(this.worldObj, teStation.getName());
                 station.add(new AABBInt(x, y, z, x + teStation.width, y + teStation.height, z + teStation.depth));
                 markDirty();
-            }
+            } 
             return true;
-        }
+        } 
         return false;
     }
 
@@ -75,9 +75,9 @@ public class StationCollection extends WorldSavedData {
             AABBInt aabb = (AABBInt)st[1];
             station.partsList.remove(aabb);
             if (station.partsList.size() == 0)
-                this.stations.remove(station.name);
+                this.stations.remove(station.name); 
             markDirty();
-        }
+        } 
     }
 
     public Object[] getStation(int x, int y, int z) {
@@ -85,9 +85,9 @@ public class StationCollection extends WorldSavedData {
         for (Station station : this.stations.values()) {
             for (AABBInt aabb : station.partsList) {
                 if (aabbBlock.isCollided(aabb))
-                    return new Object[] { station, aabb };
-            }
-        }
+                    return new Object[] { station, aabb }; 
+            } 
+        } 
         return null;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/world/station/StationManager.java b/src/api/rtm/jp/ngt/rtm/world/station/StationManager.java
index 18b6d6c..14f461e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/world/station/StationManager.java
+++ b/src/api/rtm/jp/ngt/rtm/world/station/StationManager.java
@@ -14,7 +14,7 @@ public final class StationManager {
         if (this.stationCollection == null) {
             this.stationCollection = new StationCollection("rtm_stations");
             world.setData("rtm_stations", this.stationCollection);
-        }
+        } 
         this.stationCollection.setWorld(world);
     }
 
@@ -24,7 +24,7 @@ public final class StationManager {
         while (this.stationCollection.stations.containsKey(s)) {
             i++;
             s = "station" + i;
-        }
+        } 
         return s;
     }
 }
