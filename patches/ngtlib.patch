diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/ClientProxy.java b/src/api/ngtlib/jp/ngt/ngtlib/ClientProxy.java
index 54f0146..27a3cca 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/ClientProxy.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/ClientProxy.java
@@ -45,7 +45,7 @@ public class ClientProxy extends CommonProxy {
 
     public void preInit() {
         if (NGTCore.versionCheck)
-            VersionChecker.addToCheckList(new PackInfo(NGTCore.metadata.name, NGTCore.metadata.url, NGTCore.metadata.updateUrl, NGTCore.metadata.version));
+            VersionChecker.addToCheckList(new PackInfo(NGTCore.metadata.name, NGTCore.metadata.url, NGTCore.metadata.updateUrl, NGTCore.metadata.version)); 
         MinecraftForge.EVENT_BUS.register(NGTEventHandlerClient.INSTANCE);
         ModelLoader.setCustomModelResourceLocation(NGTCore.protection_key, 0, new ModelResourceLocation("ngtlib:protection_key", "inventory"));
     }
@@ -62,9 +62,9 @@ public class ClientProxy extends CommonProxy {
         if (NGTUtil.isServer()) {
             super.breakBlock(world, x, y, z, meta);
             return;
-        }
+        } 
         if ((NGTUtilClient.getMinecraft()).playerController != null && (NGTUtilClient.getMinecraft()).player != null)
-            (NGTUtilClient.getMinecraft()).playerController.onPlayerDestroyBlock(new BlockPos(x, y, z));
+            (NGTUtilClient.getMinecraft()).playerController.onPlayerDestroyBlock(new BlockPos(x, y, z)); 
     }
 
     public void zoom(EntityPlayer player, int count) {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/NGTCore.java b/src/api/ngtlib/jp/ngt/ngtlib/NGTCore.java
index 7e30300..0424925 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/NGTCore.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/NGTCore.java
@@ -92,7 +92,7 @@ public class NGTCore {
             FMLLog.log(Level.ERROR, e, "Error Message", new Object[0]);
         } finally {
             cfg.save();
-        }
+        } 
         protection_key = NGTRegHandler.<ItemProtectionKey>register(new ItemProtectionKey(), "protection_key", "protection_key", (CreativeTabs)null, "ngtlib");
         proxy.preInit();
         NETWORK_WRAPPER.registerMessage(PacketNoticeHandlerClient.class, PacketNotice.class, 0, Side.CLIENT);
@@ -112,7 +112,7 @@ public class NGTCore {
             PermissionManager.INSTANCE.load();
         } catch (IOException e) {
             e.printStackTrace();
-        }
+        } 
     }
 
     @EventHandler
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/BlockArgHolder.java b/src/api/ngtlib/jp/ngt/ngtlib/block/BlockArgHolder.java
index 75376c7..63f0211 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/BlockArgHolder.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/block/BlockArgHolder.java
@@ -15,6 +15,7 @@ public class BlockArgHolder extends ItemArgHolderBase<BlockArgHolder> {
 
     public BlockArgHolder setBlockState(IBlockState par1) {
         this.state = par1;
+        return this;
     }
 
     public IBlockAccess getBlockAccess() {
@@ -23,5 +24,6 @@ public class BlockArgHolder extends ItemArgHolderBase<BlockArgHolder> {
 
     public BlockArgHolder setBlockAccess(IBlockAccess par1) {
         this.access = par1;
+        return this;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/BlockContainerCustom.java b/src/api/ngtlib/jp/ngt/ngtlib/block/BlockContainerCustom.java
index e704ce2..0af81fd 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/BlockContainerCustom.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/block/BlockContainerCustom.java
@@ -71,8 +71,8 @@ public abstract class BlockContainerCustom extends BlockContainer {
         if (!world.isRemote) {
             ItemStack stack = getItem(0);
             if (!stack.isEmpty())
-                spawnAsEntity(world, pos, getItem(0));
-        }
+                spawnAsEntity(world, pos, getItem(0)); 
+        } 
     }
 
     public ItemStack getPickBlock(IBlockState state, RayTraceResult target, World world, BlockPos pos, EntityPlayer player) {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/BlockContainerCustomWithMeta.java b/src/api/ngtlib/jp/ngt/ngtlib/block/BlockContainerCustomWithMeta.java
index d863328..19e8f81 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/BlockContainerCustomWithMeta.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/block/BlockContainerCustomWithMeta.java
@@ -44,8 +44,8 @@ public abstract class BlockContainerCustomWithMeta extends BlockContainerCustom
         if (!world.isRemote) {
             ItemStack stack = getItem(0);
             if (stack != null)
-                spawnAsEntity(world, pos, getItem(state.getBlock().getMetaFromState(state)));
-        }
+                spawnAsEntity(world, pos, getItem(state.getBlock().getMetaFromState(state))); 
+        } 
     }
 
     public ItemStack getPickBlock(IBlockState state, RayTraceResult target, World world, BlockPos pos, EntityPlayer player) {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/BlockLiquidBase.java b/src/api/ngtlib/jp/ngt/ngtlib/block/BlockLiquidBase.java
index a7ef5ce..e78b7bf 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/BlockLiquidBase.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/block/BlockLiquidBase.java
@@ -36,31 +36,31 @@ public abstract class BlockLiquidBase extends BlockFluidClassic {
             meta = setLiquid(world, x, y, z, x, y - 1, z, meta);
             if (meta == prevMeta) {
                 if ((meta >= 0 && canFlowLiquid(world, x - 1, y - 1, z) > 0) || canFlowLiquid(world, x - 1, y, z) + meta > 15)
-                    meta = setLiquid(world, x, y, z, x - 1, y, z, meta);
+                    meta = setLiquid(world, x, y, z, x - 1, y, z, meta); 
                 if ((meta >= 0 && canFlowLiquid(world, x + 1, y - 1, z) > 0) || canFlowLiquid(world, x + 1, y, z) + meta > 15)
-                    meta = setLiquid(world, x, y, z, x + 1, y, z, meta);
+                    meta = setLiquid(world, x, y, z, x + 1, y, z, meta); 
                 if ((meta >= 0 && canFlowLiquid(world, x, y - 1, z - 1) > 0) || canFlowLiquid(world, x, y, z - 1) + meta > 15)
-                    meta = setLiquid(world, x, y, z, x, y, z - 1, meta);
+                    meta = setLiquid(world, x, y, z, x, y, z - 1, meta); 
                 if ((meta >= 0 && canFlowLiquid(world, x, y - 1, z + 1) > 0) || canFlowLiquid(world, x, y, z + 1) + meta > 15)
-                    meta = setLiquid(world, x, y, z, x, y, z + 1, meta);
-            }
+                    meta = setLiquid(world, x, y, z, x, y, z + 1, meta); 
+            } 
             if (this == BlockUtil.getBlock((IBlockAccess)world, x, y, z))
-                meltNeighborBlocks(world, x, y, z, random);
+                meltNeighborBlocks(world, x, y, z, random); 
             if (meta != prevMeta)
-                world.scheduleBlockUpdate(pos, (Block)this, tickRate(world), 0);
-        }
+                world.scheduleBlockUpdate(pos, (Block)this, tickRate(world), 0); 
+        } 
     }
 
     public void neighborChanged(IBlockState state, World world, BlockPos pos, Block block, BlockPos fromPos) {
         if (this == BlockUtil.getBlock((IBlockAccess)world, pos))
-            world.scheduleBlockUpdate(pos, (Block)this, tickRate(world), 0);
+            world.scheduleBlockUpdate(pos, (Block)this, tickRate(world), 0); 
     }
 
     protected int canFlowLiquid(World world, int x, int y, int z) {
         if (world.isAirBlock(new BlockPos(x, y, z)))
-            return 15;
+            return 15; 
         if (this == BlockUtil.getBlock((IBlockAccess)world, x, y, z))
-            return 14 - BlockUtil.getMetadata((IBlockAccess)world, x, y, z);
+            return 14 - BlockUtil.getMetadata((IBlockAccess)world, x, y, z); 
         return -1;
     }
 
@@ -73,10 +73,10 @@ public abstract class BlockLiquidBase extends BlockFluidClassic {
                 myMetadata--;
                 BlockUtil.setBlock(world, x, y, z, (Block)this, clampMetadata(myMetadata), 2);
                 return myMetadata;
-            }
+            } 
             world.setBlockToAir(new BlockPos(x, y, z));
             return -1;
-        }
+        } 
         return myMetadata;
     }
 
@@ -87,7 +87,7 @@ public abstract class BlockLiquidBase extends BlockFluidClassic {
             int i1 = i0 & 0xF;
             BlockUtil.setBlock(world, x, y, z, block, i1, 2);
             return (i0 > i1) ? (i0 - i1) : 0;
-        }
+        } 
         return amount;
     }
 
@@ -113,18 +113,18 @@ public abstract class BlockLiquidBase extends BlockFluidClassic {
         Block block = BlockUtil.getBlock((IBlockAccess)world, x, y, z);
         Material material = block.getMaterial(state);
         if (material == RTMMaterial.fireproof || material == RTMMaterial.melted || material == Material.AIR || material == Material.LAVA || material == Material.WATER)
-            return;
+            return; 
         if (material == Material.GROUND) {
             setFire(world, x, y, z);
         } else {
             if (block == Blocks.BEDROCK)
-                return;
+                return; 
             if (material == Material.ROCK || material == Material.IRON || material == Material.ANVIL) {
                 if (block.getBlockHardness(state, world, new BlockPos(x, y, z)) < 3.5F)
-                    setFire(world, x, y, z);
+                    setFire(world, x, y, z); 
             } else {
                 if (material == Material.SAND || material == Material.CLAY)
-                    return;
+                    return; 
                 if (block == Blocks.TNT) {
                     BlockPos pos = new BlockPos(x, y, z);
                     world.setBlockToAir(pos);
@@ -135,9 +135,9 @@ public abstract class BlockLiquidBase extends BlockFluidClassic {
                     setFire(world, x, y, z);
                 } else if (material == Material.FIRE || material == Material.GLASS || material == Material.REDSTONE_LIGHT || material == Material.ICE || material == Material.PACKED_ICE || material == Material.SNOW || material == Material.CRAFTED_SNOW || material == Material.CAKE) {
                     world.setBlockToAir(new BlockPos(x, y, z));
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     private void setFire(World world, int x, int y, int z) {
@@ -146,7 +146,7 @@ public abstract class BlockLiquidBase extends BlockFluidClassic {
             int y0 = y - BlockUtil.facing[i][1];
             int z0 = z - BlockUtil.facing[i][2];
             if (BlockUtil.isAir((IBlockAccess)world, x0, y0, z0))
-                BlockUtil.setBlock(world, x0, y0, z0, (Block)Blocks.FIRE, i, 2);
-        }
+                BlockUtil.setBlock(world, x0, y0, z0, (Block)Blocks.FIRE, i, 2); 
+        } 
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/BlockSet.java b/src/api/ngtlib/jp/ngt/ngtlib/block/BlockSet.java
index c50ec29..7eeaff2 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/BlockSet.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/block/BlockSet.java
@@ -61,17 +61,17 @@ public class BlockSet implements Comparable<BlockSet> {
     public static BlockSet readFromNBT(NBTTagCompound nbt) {
         Block block = Block.getBlockFromName(nbt.getString("Block"));
         if (block == null)
-            return AIR;
+            return AIR; 
         int meta = 0;
         if (nbt.hasKey("Meta", 3)) {
             meta = nbt.getInteger("Meta");
         } else {
             meta = nbt.getByte("Meta");
-        }
+        } 
         if (nbt.hasKey("TagData")) {
             NBTTagCompound tagCompound = nbt.getCompoundTag("TagData");
             return new BlockSet(block, meta, tagCompound);
-        }
+        } 
         return new BlockSet(block, meta);
     }
 
@@ -79,11 +79,11 @@ public class BlockSet implements Comparable<BlockSet> {
         NBTTagCompound nbt = new NBTTagCompound();
         String name = ((ResourceLocation)Block.REGISTRY.getNameForObject(this.block)).toString();
         if (name == null)
-            return nbt;
+            return nbt; 
         nbt.setString("Block", name);
         nbt.setByte("Meta", this.metadata);
         if (this.nbt != null)
-            nbt.setTag("TagData", (NBTBase)this.nbt);
+            nbt.setTag("TagData", (NBTBase)this.nbt); 
         return nbt;
     }
 
@@ -108,10 +108,10 @@ public class BlockSet implements Comparable<BlockSet> {
             if (tile != null) {
                 nbt = new NBTTagCompound();
                 tile.writeToNBT(nbt);
-            }
-        }
+            } 
+        } 
         if (savePos)
-            return new BlockSet(x, y, z, block, meta, nbt);
+            return new BlockSet(x, y, z, block, meta, nbt); 
         return new BlockSet(block, meta, nbt);
     }
 
@@ -126,9 +126,9 @@ public class BlockSet implements Comparable<BlockSet> {
             boolean flagMeta = (this.block == bs.block && bs.metadata == this.metadata);
             boolean falgNBT = (this.nbt != null && bs.nbt != null) ? this.nbt.equals(bs.nbt) : true;
             if (this.y < 0 && bs.y < 0)
-                return (flagMeta && falgNBT);
+                return (flagMeta && falgNBT); 
             return (bs.x == this.x && bs.y == this.y && bs.z == this.z && flagMeta && falgNBT);
-        }
+        } 
         return false;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/BlockUtil.java b/src/api/ngtlib/jp/ngt/ngtlib/block/BlockUtil.java
index d6aab3e..0df2e30 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/BlockUtil.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/block/BlockUtil.java
@@ -32,9 +32,9 @@ public final class BlockUtil {
                 if (flag1 && flag2) {
                     b0[i0] = true;
                     break;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         return b0;
     }
 
@@ -56,20 +56,20 @@ public final class BlockUtil {
                 for (int i2 = 0; i2 < r2; i2++) {
                     Block block2 = world.getBlockState(new BlockPos(x - range + i0, y - range + i1, z - range + i2)).getBlock();
                     if (block2 == block && (i0 != range || i1 != range || i2 != range))
-                        array.add(new int[] { x - range + i0, y - range + i1, z - range + i2 });
-                }
-            }
-        }
+                        array.add(new int[] { x - range + i0, y - range + i1, z - range + i2 }); 
+                } 
+            } 
+        } 
         return array;
     }
 
     public static int[] rotateBlockPos(byte rotation, int x, int y, int z) {
         if (rotation == 1)
-            return new int[] { -z, y, x };
+            return new int[] { -z, y, x }; 
         if (rotation == 2)
-            return new int[] { -x, y, -z };
+            return new int[] { -x, y, -z }; 
         if (rotation == 3)
-            return new int[] { z, y, -x };
+            return new int[] { z, y, -x }; 
         return new int[] { x, y, z };
     }
 
@@ -123,15 +123,15 @@ public final class BlockUtil {
     public static TileEntity getTileEntity(IBlockAccess world, BlockPos pos) {
         IBlockState state = world.getBlockState(pos);
         if (!state.getBlock().hasTileEntity(state))
-            return null;
+            return null; 
         TileEntity tile = world.getTileEntity(pos);
         if (tile == null && world instanceof World) {
             List<TileEntity> list = ((World)world).loadedTileEntityList;
             for (int i = 0; i < list.size(); i++) {
                 if (pos.equals(((TileEntity)list.get(i)).getPos()))
-                    return list.get(i);
-            }
-        }
+                    return list.get(i); 
+            } 
+        } 
         return tile;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/EnumFace.java b/src/api/ngtlib/jp/ngt/ngtlib/block/EnumFace.java
index 2a826b3..c906671 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/EnumFace.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/block/EnumFace.java
@@ -23,7 +23,7 @@ public enum EnumFace {
 
     public static EnumFace get(int par1) {
         if (par1 < 0 || par1 > 5)
-            return NONE;
+            return NONE; 
         return values()[par1];
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/NGTOUtil.java b/src/api/ngtlib/jp/ngt/ngtlib/block/NGTOUtil.java
index 970e475..d10b0bc 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/NGTOUtil.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/block/NGTOUtil.java
@@ -29,12 +29,12 @@ public final class NGTOUtil {
                         if (tile != null) {
                             nbt = new NBTTagCompound();
                             tile.writeToNBT(nbt);
-                        }
-                    }
+                        } 
+                    } 
                     list.add(new BlockSet(block, meta, nbt));
-                }
-            }
-        }
+                } 
+            } 
+        } 
         NGTLog.stopTimer("copy block");
         NGTObject object = NGTObject.createNGTO(list, width, height, depth, x, y, z);
         return object;
@@ -48,9 +48,9 @@ public final class NGTOUtil {
                     int y0 = y + j;
                     int z0 = z + k;
                     BlockUtil.setBlock(world, x0, y0, z0, Blocks.AIR, 0, flag);
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     public static void setBlocks(World world, int x, int y, int z, NGTObject ngto, int flag) {
@@ -66,20 +66,20 @@ public final class NGTOUtil {
                     if (set.block.hasTileEntity(set.block.getStateFromMeta(set.metadata))) {
                         TileEntity tile = BlockUtil.getTileEntity((IBlockAccess)world, x0, y0, z0);
                         if (tile != null)
-                            setTileEntityData(tile, set.nbt, x0, y0, z0);
-                    }
+                            setTileEntityData(tile, set.nbt, x0, y0, z0); 
+                    } 
                     index++;
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     private static void setBlock(World world, int x, int y, int z, Block block, int metadata, int flag) {
         if (block instanceof net.minecraft.block.BlockLeaves && (metadata < 4 || metadata > 7))
-            metadata = (metadata & 0x3) + 4;
+            metadata = (metadata & 0x3) + 4; 
         BlockUtil.setBlock(world, x, y, z, block, metadata, flag);
         if (block != Blocks.AIR)
-            world.checkLight(new BlockPos(x, y, z));
+            world.checkLight(new BlockPos(x, y, z)); 
     }
 
     private static void setTileEntityData(TileEntity tile, NBTTagCompound nbt, int x, int y, int z) {
@@ -95,11 +95,11 @@ public final class NGTOUtil {
             nbt0.setInteger("y", y);
             nbt0.setInteger("z", z);
             tile.readFromNBT(nbt0);
-        }
+        } 
         if (tile instanceof TileEntityCustom) {
             ((TileEntityCustom)tile).setPos(x, y, z, prevX, prevY, prevZ);
         } else {
             tile.setPos(new BlockPos(x, y, z));
-        }
+        } 
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/NGTObject.java b/src/api/ngtlib/jp/ngt/ngtlib/block/NGTObject.java
index cc1ae59..6fd3a4b 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/NGTObject.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/block/NGTObject.java
@@ -66,7 +66,7 @@ public class NGTObject {
         NGTObject ngto = new NGTObject(id, blocks, nbt, w, h, d, x, y, z);
         int index = loadedNGTO.indexOf(ngto);
         if (index >= 0)
-            return loadedNGTO.get(index);
+            return loadedNGTO.get(index); 
         return ngto;
     }
 
@@ -91,8 +91,8 @@ public class NGTObject {
         if (isValidPos(x, y, z)) {
             int index = x * this.ySize * this.zSize + y * this.zSize + z;
             if (index < this.blockList.size())
-                return this.blockList.get(index);
-        }
+                return this.blockList.get(index); 
+        } 
         return BlockSet.AIR;
     }
 
@@ -104,9 +104,9 @@ public class NGTObject {
                 if (block != set.block || meta != set.metadata) {
                     this.blockList.set(index, new BlockSet(x, y, z, block, meta));
                     return true;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         return false;
     }
 
@@ -123,20 +123,20 @@ public class NGTObject {
                 val = Integer.valueOf(idCount);
                 idMap.put(set, val);
                 idCount++;
-            }
+            } 
             blockIds[i] = val.intValue();
             if (set.hasNBT())
-                nbts.setTag(String.valueOf(i), (NBTBase)set.nbt);
-        }
+                nbts.setTag(String.valueOf(i), (NBTBase)set.nbt); 
+        } 
         NBTTagCompound data = new NBTTagCompound();
         if (idCount > 255) {
             data.setIntArray("IData", blockIds);
         } else {
             byte[] bytes = new byte[blockIds.length];
             for (int j = 0; j < bytes.length; j++)
-                bytes[j] = (byte)(blockIds[j] - 128);
+                bytes[j] = (byte)(blockIds[j] - 128); 
             data.setByteArray("BData", bytes);
-        }
+        } 
         data.setTag("NBTs", (NBTBase)nbts);
         NBTTagList tagList2 = new NBTTagList();
         for (Map.Entry<BlockSet, Integer> set : idMap.entrySet()) {
@@ -144,7 +144,7 @@ public class NGTObject {
             tag.setTag("Set", (NBTBase)((BlockSet)set.getKey()).writeToNBT());
             tag.setInteger("Id", ((Integer)set.getValue()).intValue());
             tagList2.appendTag((NBTBase)tag);
-        }
+        } 
         data.setTag("IdList", (NBTBase)tagList2);
         data.setInteger("SizeX", this.xSize);
         data.setInteger("SizeY", this.ySize);
@@ -160,7 +160,7 @@ public class NGTObject {
     public static NGTObject readFromNBT(NBTTagCompound data) {
         int[] ids;
         if (data.hasKey("ByteData"))
-            data = decompress(data);
+            data = decompress(data); 
         Map<Integer, BlockSet> idMap = new HashMap<>();
         idMap.put(Integer.valueOf(0), BlockSet.AIR);
         NBTTagList tagList2 = data.getTagList("IdList", 10);
@@ -169,7 +169,7 @@ public class NGTObject {
             BlockSet set = BlockSet.readFromNBT(tag.getCompoundTag("Set"));
             int id = tag.getInteger("Id");
             idMap.put(Integer.valueOf(id), set);
-        }
+        } 
         List<BlockSet> list = new ArrayList<>();
         if (data.hasKey("IData") || data.hasKey("Blocks")) {
             ids = data.hasKey("IData") ? data.getIntArray("IData") : data.getIntArray("Blocks");
@@ -177,8 +177,8 @@ public class NGTObject {
             byte[] bytes = data.getByteArray("BData");
             ids = new int[bytes.length];
             for (int j = 0; j < bytes.length; j++)
-                ids[j] = bytes[j] + 128;
-        }
+                ids[j] = bytes[j] + 128; 
+        } 
         if (ids != null) {
             NBTTagCompound nbts = data.getCompoundTag("NBTs");
             for (int j = 0; j < ids.length; j++) {
@@ -189,9 +189,9 @@ public class NGTObject {
                     list.add(set.setNBT(tagData));
                 } else {
                     list.add(set);
-                }
-            }
-        }
+                } 
+            } 
+        } 
         int x = data.getInteger("SizeX");
         int y = data.getInteger("SizeY");
         int z = data.getInteger("SizeZ");
@@ -201,7 +201,7 @@ public class NGTObject {
         long objId = data.getLong("ObjId");
         NBTTagList tagList = data.getTagList("Entities", 10);
         if (tagList == null)
-            tagList = new NBTTagList();
+            tagList = new NBTTagList(); 
         return createNGTO(objId, list, tagList, x, y, z, ox, oy, oz);
     }
 
@@ -211,7 +211,7 @@ public class NGTObject {
             NBTTagCompound nbt = new NBTTagCompound();
             nbt.setByteArray("ByteData", compressedData);
             return nbt;
-        }
+        } 
         return data;
     }
 
@@ -225,25 +225,25 @@ public class NGTObject {
         if (FileType.OBJ.match(file)) {
             VoxelUtil.exportToPolygon(this, file);
             return;
-        }
+        } 
         NBTTagCompound data = writeToNBT();
         try {
             CompressedStreamTools.write(data, file);
         } catch (IOException e) {
             e.printStackTrace();
-        }
+        } 
     }
 
     public static NGTObject importFromFile(File file, float scale) {
         NBTTagCompound data;
         if (FileType.OBJ.match(file) || FileType.MQO.match(file))
-            return VoxelUtil.importFromPolygon(file, scale);
+            return VoxelUtil.importFromPolygon(file, scale); 
         try {
             data = CompressedStreamTools.read(file);
         } catch (IOException e) {
             e.printStackTrace();
             return null;
-        }
+        } 
         return readFromNBT(data);
     }
 
@@ -255,7 +255,7 @@ public class NGTObject {
         } catch (IOException e) {
             e.printStackTrace();
             return null;
-        }
+        } 
         return readFromNBT(data);
     }
 
@@ -269,7 +269,7 @@ public class NGTObject {
     @SideOnly(Side.CLIENT)
     public static void addInformation(List<String> list, NBTTagCompound data, float scale) {
         if (data.hasKey("ByteData"))
-            data = decompress(data);
+            data = decompress(data); 
         int x = data.getInteger("SizeX");
         int y = data.getInteger("SizeY");
         int z = data.getInteger("SizeZ");
@@ -286,11 +286,11 @@ public class NGTObject {
                 if (i > 0) {
                     brightness += i;
                     continue;
-                }
+                } 
                 brightness--;
-            }
+            } 
             this.lightValue = (brightness > 15) ? 15 : ((brightness < 0) ? 0 : brightness);
-        }
+        } 
         return this.lightValue;
     }
 
@@ -310,15 +310,15 @@ public class NGTObject {
                     BlockSet set0 = this.blockList.get(i);
                     BlockSet set1 = ngto.blockList.get(i);
                     if (!set0.equals(set1))
-                        return false;
-                }
+                        return false; 
+                } 
                 if (this.entityList != null)
-                    return this.entityList.equals(ngto.entityList);
+                    return this.entityList.equals(ngto.entityList); 
                 if (ngto.entityList != null)
-                    return false;
+                    return false; 
                 return true;
-            }
-        }
+            } 
+        } 
         return false;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/TileEntityCustom.java b/src/api/ngtlib/jp/ngt/ngtlib/block/TileEntityCustom.java
index df64ee2..0efd650 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/TileEntityCustom.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/block/TileEntityCustom.java
@@ -52,7 +52,7 @@ public class TileEntityCustom extends TileEntity {
 
     protected void sendPacket() {
         if (this.world == null || !this.world.isRemote)
-            PacketNBT.sendToClient(this);
+            PacketNBT.sendToClient(this); 
     }
 
     @SideOnly(Side.CLIENT)
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/TileEntityPlaceable.java b/src/api/ngtlib/jp/ngt/ngtlib/block/TileEntityPlaceable.java
index 89606e4..686ffd6 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/block/TileEntityPlaceable.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/block/TileEntityPlaceable.java
@@ -27,7 +27,7 @@ public abstract class TileEntityPlaceable extends TileEntityCustom {
         if (synch) {
             sendPacket();
             markDirty();
-        }
+        } 
     }
 
     public void setRotation(EntityPlayer player, float rotationInterval, boolean synch) {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/command/CommandNGT.java b/src/api/ngtlib/jp/ngt/ngtlib/command/CommandNGT.java
index e0b7ffb..5e7cec2 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/command/CommandNGT.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/command/CommandNGT.java
@@ -33,18 +33,18 @@ public class CommandNGT extends CommandBase {
             if (args[0].equals("clearMedia") && !NGTUtil.isSMP()) {
                 MediaBase.clear();
                 return;
-            }
+            }  
         try {
             player = getCommandSenderAsPlayer(sender);
         } catch (PlayerNotFoundException e) {
             e.printStackTrace();
             return;
-        }
+        } 
         if (args.length == 1) {
             if (NGTCertificate.registerKey((EntityPlayer)player, args[0]))
-                NGTCore.NETWORK_WRAPPER.sendTo(new PacketNotice((byte)1, "regKey"), player);
+                NGTCore.NETWORK_WRAPPER.sendTo(new PacketNotice((byte)1, "regKey"), player); 
         } else {
             NGTLog.sendChatMessage((ICommandSender)player, "commands.ngt.invalid_command", new Object[0]);
-        }
+        } 
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/command/CommandPermit.java b/src/api/ngtlib/jp/ngt/ngtlib/command/CommandPermit.java
index dfa9bb8..7f7fbbf 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/command/CommandPermit.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/command/CommandPermit.java
@@ -30,29 +30,29 @@ public class CommandPermit extends CommandBase {
         } catch (PlayerNotFoundException e) {
             e.printStackTrace();
             return;
-        }
+        } 
         if (args.length > 0) {
             if (args[0].equals("list")) {
                 PermissionManager.INSTANCE.showPermissionList((EntityPlayer)player);
                 return;
-            }
+            } 
             if (args[0].equals("myname")) {
                 NGTLog.sendChatMessage((ICommandSender)player, "My name is " + player.getName(), new Object[0]);
                 return;
-            }
+            } 
             if (args.length >= 3) {
                 String playerName = args[1];
                 String target = args[2];
                 if (args[0].equals("add")) {
                     PermissionManager.INSTANCE.addPermission((EntityPlayer)player, playerName, target);
                     return;
-                }
+                } 
                 if (args[0].equals("remove")) {
                     PermissionManager.INSTANCE.removePermission((EntityPlayer)player, playerName, target);
                     return;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         NGTLog.sendChatMessage((ICommandSender)player, "/permit add <player> <category>", new Object[0]);
         NGTLog.sendChatMessage((ICommandSender)player, "/permit remove <player> <category>", new Object[0]);
         NGTLog.sendChatMessage((ICommandSender)player, "/permit list", new Object[0]);
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/command/CommandProtection.java b/src/api/ngtlib/jp/ngt/ngtlib/command/CommandProtection.java
index de8c2ae..2746b64 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/command/CommandProtection.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/command/CommandProtection.java
@@ -30,13 +30,13 @@ public class CommandProtection extends CommandBase {
         } catch (PlayerNotFoundException e) {
             e.printStackTrace();
             return;
-        }
+        } 
         if (args.length > 0) {
             ItemStack stack = ItemProtectionKey.getKey(args[0]);
             player.entityDropItem(stack, 0.5F);
             NGTLog.sendChatMessage((ICommandSender)player, "Give Key [%s]", new Object[] { args[0] });
             return;
-        }
+        } 
         NGTLog.sendChatMessage((ICommandSender)player, "Invalid command", new Object[0]);
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/command/CommandUsage.java b/src/api/ngtlib/jp/ngt/ngtlib/command/CommandUsage.java
index 19ce75a..0270e73 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/command/CommandUsage.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/command/CommandUsage.java
@@ -34,7 +34,7 @@ public class CommandUsage extends CommandBase {
         } catch (PlayerNotFoundException e) {
             e.printStackTrace();
             return;
-        }
+        } 
         Usage.INSTANCE.requestUsage((EntityPlayer)player);
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/entity/EntityCustom.java b/src/api/ngtlib/jp/ngt/ngtlib/entity/EntityCustom.java
index 65f9e3b..35577ea 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/entity/EntityCustom.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/entity/EntityCustom.java
@@ -17,7 +17,7 @@ public abstract class EntityCustom extends Entity {
 
     public Entity getFirstPassenger() {
         if (isBeingRidden())
-            return getPassengers().get(0);
+            return getPassengers().get(0); 
         return null;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/event/NGTEventHandler.java b/src/api/ngtlib/jp/ngt/ngtlib/event/NGTEventHandler.java
index a877ab2..71beb3b 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/event/NGTEventHandler.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/event/NGTEventHandler.java
@@ -23,14 +23,14 @@ public final class NGTEventHandler {
     @SubscribeEvent
     public void onTick(TickEvent.WorldTickEvent event) {
         if (event.phase == TickEvent.Phase.END)
-            TickProcessQueue.getInstance(Side.SERVER).onTick(event.world);
+            TickProcessQueue.getInstance(Side.SERVER).onTick(event.world); 
     }
 
     @SideOnly(Side.CLIENT)
     @SubscribeEvent
     public void onTick(TickEvent.ClientTickEvent event) {
         if (event.phase == TickEvent.Phase.END && NGTUtil.getClientWorld() != null)
-            TickProcessQueue.getInstance(Side.CLIENT).onTick(NGTUtil.getClientWorld());
+            TickProcessQueue.getInstance(Side.CLIENT).onTick(NGTUtil.getClientWorld()); 
     }
 
     @SideOnly(Side.CLIENT)
@@ -58,17 +58,17 @@ public final class NGTEventHandler {
     @SubscribeEvent
     public void onRightClickBlock(PlayerInteractEvent.RightClickBlock event) {
         if (event.getItemStack().isEmpty())
-            return;
+            return; 
         try {
             int x = NGTMath.floor((event.getHitVec()).x);
             int y = NGTMath.floor((event.getHitVec()).y);
             int z = NGTMath.floor((event.getHitVec()).z);
             if (ProtectionManager.INSTANCE.rightClickBlock(event.getEntityPlayer(), x, y, z))
                 if (!(event.getWorld()).isRemote)
-                    event.setCanceled(true);
+                    event.setCanceled(true);  
         } catch (NullPointerException e) {
             e.printStackTrace();
-        }
+        } 
     }
 
     @SubscribeEvent
@@ -80,7 +80,7 @@ public final class NGTEventHandler {
             if (ProtectionManager.INSTANCE.leftClickBlock(event.getEntityPlayer(), x, y, z)) {
                 event.setCanceled(true);
                 BlockUtil.markBlockForUpdate((event.getEntityPlayer()).world, x, y, z);
-            }
+            } 
         } catch (NullPointerException nullPointerException) {}
     }
 
@@ -92,18 +92,18 @@ public final class NGTEventHandler {
         if (ProtectionManager.INSTANCE.leftClickBlock(event.getPlayer(), x, y, z)) {
             event.setCanceled(true);
             BlockUtil.markBlockForUpdate((event.getPlayer()).world, x, y, z);
-        }
+        } 
     }
 
     @SubscribeEvent
     public void onPlayerInteractEntity(PlayerInteractEvent.EntityInteract event) {
         if (ProtectionManager.INSTANCE.rightClickEntity(event.getEntityPlayer(), event.getTarget()))
-            event.setCanceled(true);
+            event.setCanceled(true); 
     }
 
     @SubscribeEvent
     public void onPlayerAttackEntity(AttackEntityEvent event) {
         if (ProtectionManager.INSTANCE.leftClickEntity(event.getEntityPlayer(), event.getTarget()))
-            event.setCanceled(true);
+            event.setCanceled(true); 
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/event/TickProcessQueue.java b/src/api/ngtlib/jp/ngt/ngtlib/event/TickProcessQueue.java
index 57536e4..fe8207b 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/event/TickProcessQueue.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/event/TickProcessQueue.java
@@ -40,14 +40,14 @@ public final class TickProcessQueue {
             if (!this.entries.isEmpty()) {
                 for (TickProcessEntry entry : this.entries) {
                     if (entry != null && entry.process(world))
-                        this.succeededEntries.add(entry);
-                }
+                        this.succeededEntries.add(entry); 
+                } 
                 if (!this.succeededEntries.isEmpty()) {
                     this.entries.removeAll(this.succeededEntries);
                     this.succeededEntries.clear();
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     private class DelayProcessEntry implements TickProcessEntry {
@@ -64,7 +64,7 @@ public final class TickProcessQueue {
 
         public boolean process(World world) {
             if (this.delay <= this.count)
-                return this.entry.process(world);
+                return this.entry.process(world); 
             this.count++;
             return false;
         }
@@ -88,10 +88,10 @@ public final class TickProcessQueue {
         public boolean process(World world) {
             if (this.count % this.interval == 0) {
                 if (this.entry.process(world))
-                    return true;
+                    return true; 
                 if (this.maxRetry <= this.count)
-                    return true;
-            }
+                    return true; 
+            } 
             this.count++;
             return false;
         }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiButtonCustom.java b/src/api/ngtlib/jp/ngt/ngtlib/gui/GuiButtonCustom.java
index 99d7e14..7df3ae3 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiButtonCustom.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/gui/GuiButtonCustom.java
@@ -22,11 +22,12 @@ public class GuiButtonCustom extends GuiButton {
     public void drawButton(Minecraft mc, int mouseX, int mouseY, float ptick) {
         super.drawButton(mc, mouseX, mouseY, ptick);
         if (this.hovered && !this.tips.isEmpty())
-            GuiScreenCustom.drawHoveringTextS(this.tips, mouseX, mouseY, this.screen);
+            GuiScreenCustom.drawHoveringTextS(this.tips, mouseX, mouseY, this.screen); 
     }
 
     public GuiButtonCustom addTips(String par1) {
         if (par1 != null)
             this.tips.add(par1);
+        return this;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiContainerCustom.java b/src/api/ngtlib/jp/ngt/ngtlib/gui/GuiContainerCustom.java
index 5efa961..aa74bb9 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiContainerCustom.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/gui/GuiContainerCustom.java
@@ -54,8 +54,8 @@ public abstract class GuiContainerCustom extends GuiContainer {
                 this.currentTextField = field;
                 onTextFieldClicked(field);
                 break;
-            }
-        }
+            } 
+        } 
     }
 
     protected void onTextFieldClicked(GuiTextField field) {}
@@ -63,20 +63,20 @@ public abstract class GuiContainerCustom extends GuiContainer {
     protected void keyTyped(char par1, int par2) throws IOException {
         super.keyTyped(par1, par2);
         if (this.currentTextField != null)
-            this.currentTextField.textboxKeyTyped(par1, par2);
+            this.currentTextField.textboxKeyTyped(par1, par2); 
     }
 
     public void drawScreen(int par1, int par2, float par3) {
         if (this.drawTextBox)
             for (GuiTextField field : this.textFields)
-                field.drawTextBox();
+                field.drawTextBox();  
         super.drawScreen(par1, par2, par3);
     }
 
     public void updateScreen() {
         super.updateScreen();
         if (this.currentTextField != null)
-            this.currentTextField.updateCursorCounter();
+            this.currentTextField.updateCursorCounter(); 
     }
 
     public void drawHoveringText(List<String> textLines, int x, int y) {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiScreenCustom.java b/src/api/ngtlib/jp/ngt/ngtlib/gui/GuiScreenCustom.java
index d812404..5a49359 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiScreenCustom.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/gui/GuiScreenCustom.java
@@ -57,7 +57,7 @@ public abstract class GuiScreenCustom extends GuiScreen {
 
     protected void actionPerformed(GuiButton button) {
         for (GuiSlotCustom slot : this.slotList)
-            slot.actionPerformed(button);
+            slot.actionPerformed(button); 
     }
 
     protected void mouseClicked(int x, int y, int button) throws IOException {
@@ -68,8 +68,8 @@ public abstract class GuiScreenCustom extends GuiScreen {
                 this.currentTextField = field;
                 onTextFieldClicked(field);
                 break;
-            }
-        }
+            } 
+        } 
     }
 
     protected void onTextFieldClicked(GuiTextField field) {}
@@ -81,22 +81,22 @@ public abstract class GuiScreenCustom extends GuiScreen {
             this.mc.displayGuiScreen((GuiScreen)null);
             this.mc.setIngameFocus();
             return;
-        }
+        } 
         if (this.currentTextField != null) {
             this.currentTextField.textboxKeyTyped(par1, par2);
         } else {
             super.keyTyped(par1, par2);
-        }
+        } 
     }
 
     public void drawScreen(int par1, int par2, float par3) {
         drawGuiContainerBackgroundLayer(par3, par1, par2);
         for (GuiSlotCustom slot : this.slotList)
-            slot.drawScreen(par1, par2, par3);
+            slot.drawScreen(par1, par2, par3); 
         int mouseX = Mouse.getEventX() * this.width / (NGTUtilClient.getMinecraft()).displayWidth;
         int mouseY = this.height - Mouse.getEventY() * this.height / (NGTUtilClient.getMinecraft()).displayHeight - 1;
         for (GuiTextFieldCustom field : this.textFields)
-            field.drawTextBox(mouseX, mouseY);
+            field.drawTextBox(mouseX, mouseY); 
         drawGuiContainerForegroundLayer(par1, par2);
         super.drawScreen(par1, par2, par3);
     }
@@ -107,7 +107,7 @@ public abstract class GuiScreenCustom extends GuiScreen {
 
     public void updateScreen() {
         if (this.currentTextField != null)
-            this.currentTextField.updateCursorCounter();
+            this.currentTextField.updateCursorCounter(); 
     }
 
     public float getZLevel() {
@@ -123,7 +123,7 @@ public abstract class GuiScreenCustom extends GuiScreen {
             ((GuiScreenCustom)screen).drawHoveringText(textLines, x, y);
         } else if (screen instanceof GuiContainerCustom) {
             ((GuiContainerCustom)screen).drawHoveringText(textLines, x, y);
-        }
+        } 
         GlStateManager.disableRescaleNormal();
         RenderHelper.disableStandardItemLighting();
         GlStateManager.disableLighting();
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiSelect.java b/src/api/ngtlib/jp/ngt/ngtlib/gui/GuiSelect.java
index 8e5cb44..6e2147c 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiSelect.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/gui/GuiSelect.java
@@ -33,7 +33,7 @@ public class GuiSelect extends GuiScreenCustom {
         } else {
             w = par1.width;
             h = par1.height;
-        }
+        } 
         this.slotCustom = new GuiSlotCustom(this, 10, h - 30, 40, w - 40, w - 80, 24, par2);
         this.slotCustom.registerScrollButtons(4, 5);
         this.slotList.add(this.slotCustom);
@@ -47,13 +47,13 @@ public class GuiSelect extends GuiScreenCustom {
 
     protected void actionPerformed(GuiButton button) {
         if (button.id == 1)
-            closeScreen();
+            closeScreen(); 
         super.actionPerformed(button);
     }
 
     protected void onElementClicked(int par1, boolean par2) {
         if (par2)
-            closeScreen();
+            closeScreen(); 
     }
 
     public void drawScreen(int par1, int par2, float par3) {
@@ -110,7 +110,7 @@ public class GuiSelect extends GuiScreenCustom {
 
         public void onClicked(int par1, boolean par2) {
             if (par2)
-                this.selector.select(this.item);
+                this.selector.select(this.item); 
         }
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiSlotCustom.java b/src/api/ngtlib/jp/ngt/ngtlib/gui/GuiSlotCustom.java
index 5b360d8..5b4425b 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiSlotCustom.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/gui/GuiSlotCustom.java
@@ -101,7 +101,7 @@ public class GuiSlotCustom {
         this.hasListHeader = p_148133_1_;
         this.headerPadding = p_148133_2_;
         if (!p_148133_1_)
-            this.headerPadding = 0;
+            this.headerPadding = 0; 
     }
 
     protected int getSize() {
@@ -154,13 +154,13 @@ public class GuiSlotCustom {
     private void bindAmountScrolled() {
         int i = getMaxScroll();
         if (i < 0)
-            i /= 2;
+            i /= 2; 
         if (!this.centerListVertically && i < 0)
-            i = 0;
+            i = 0; 
         if (this.amountScrolled < 0.0F)
-            this.amountScrolled = 0.0F;
+            this.amountScrolled = 0.0F; 
         if (this.amountScrolled > i)
-            this.amountScrolled = i;
+            this.amountScrolled = i; 
     }
 
     public int getMaxScroll() {
@@ -191,7 +191,7 @@ public class GuiSlotCustom {
                 this.amountScrolled += (this.slotHeight * 2 / 3);
                 this.initialClickY = -2.0F;
                 bindAmountScrolled();
-            }
+            }  
     }
 
     public void drawScreen(int p_148128_1_, int p_148128_2_, float p_148128_3_) {
@@ -216,33 +216,33 @@ public class GuiSlotCustom {
                         } else if (p_148128_1_ >= this.left && p_148128_1_ <= this.right && i < 0) {
                             clickedHeader(p_148128_1_ - this.left, p_148128_2_ - this.top + (int)this.amountScrolled - 4);
                             flag1 = false;
-                        }
+                        } 
                         if (p_148128_1_ >= l && p_148128_1_ <= i1) {
                             this.scrollMultiplier = -1.0F;
                             int j = getMaxScroll();
                             if (j < 1)
-                                j = 1;
+                                j = 1; 
                             int k2 = (int)(((this.bottom - this.top) * (this.bottom - this.top)) / getContentHeight());
                             if (k2 < 32)
-                                k2 = 32;
+                                k2 = 32; 
                             if (k2 > this.bottom - this.top - 8)
-                                k2 = this.bottom - this.top - 8;
+                                k2 = this.bottom - this.top - 8; 
                             this.scrollMultiplier /= (this.bottom - this.top - k2) / j;
                         } else {
                             this.scrollMultiplier = 1.0F;
-                        }
+                        } 
                         if (flag1) {
                             this.initialClickY = p_148128_2_;
                         } else {
                             this.initialClickY = -2.0F;
-                        }
+                        } 
                     } else {
                         this.initialClickY = -2.0F;
-                    }
+                    } 
                 } else if (this.initialClickY >= 0.0F) {
                     this.amountScrolled -= (p_148128_2_ - this.initialClickY) * this.scrollMultiplier;
                     this.initialClickY = p_148128_2_;
-                }
+                } 
             } else {
                 while (!this.mc.gameSettings.touchscreen && Mouse.next()) {
                     int j1 = Mouse.getEventDWheel();
@@ -251,18 +251,18 @@ public class GuiSlotCustom {
                             j1 = -1;
                         } else if (j1 < 0) {
                             j1 = 1;
-                        }
+                        } 
                         this.amountScrolled += (j1 * this.slotHeight / 2);
-                    }
+                    } 
                     try {
                         this.mc.currentScreen.handleMouseInput();
                     } catch (IOException e) {
                         e.printStackTrace();
                         break;
-                    }
-                }
+                    } 
+                } 
                 this.initialClickY = -1.0F;
-            }
+            }  
         bindAmountScrolled();
         GL11.glDisable(2896);
         GL11.glDisable(2912);
@@ -271,7 +271,7 @@ public class GuiSlotCustom {
         int l1 = this.left + this.width / 2 - this.slotWidth / 2 + 2;
         int i2 = this.top + 4 - (int)this.amountScrolled;
         if (this.hasListHeader)
-            drawListHeader(l1, i2, tessellator);
+            drawListHeader(l1, i2, tessellator); 
         drawSelectionBox(l1, i2, p_148128_1_, p_148128_2_);
         GL11.glDisable(2929);
         byte b0 = 4;
@@ -303,12 +303,12 @@ public class GuiSlotCustom {
         if (i3 > 0) {
             int k2 = (this.bottom - this.top) * (this.bottom - this.top) / getContentHeight();
             if (k2 < 32)
-                k2 = 32;
+                k2 = 32; 
             if (k2 > this.bottom - this.top - 8)
-                k2 = this.bottom - this.top - 8;
+                k2 = this.bottom - this.top - 8; 
             int l2 = (int)this.amountScrolled * (this.bottom - this.top - k2) / i3 + this.top;
             if (l2 < this.top)
-                l2 = this.top;
+                l2 = this.top; 
             tessellator.startDrawingQuads();
             tessellator.setColorRGBA_I(0, 255);
             NGTRenderHelper.addQuadGuiFaceWithUV(l, this.top, i1, this.bottom, z, 0.0F, 0.0F, 1.0F, 1.0F);
@@ -321,7 +321,7 @@ public class GuiSlotCustom {
             tessellator.setColorRGBA_I(12632256, 255);
             NGTRenderHelper.addQuadGuiFaceWithUV(l, l2, (i1 - 1), (l2 + k2 - 1), z, 0.0F, 0.0F, 1.0F, 1.0F);
             tessellator.draw();
-        }
+        } 
         renderDecorations(p_148128_1_, p_148128_2_);
         GL11.glEnable(3553);
         GL11.glShadeModel(7424);
@@ -357,10 +357,10 @@ public class GuiSlotCustom {
                     NGTRenderHelper.addQuadGuiFaceWithUV((i2 + 1), (k1 - 1), (j2 - 1), (k1 + l1 + 1), z, 0.0F, 0.0F, 1.0F, 1.0F);
                     tessellator.draw();
                     GL11.glEnable(3553);
-                }
+                } 
                 drawSlot(j1, p_148120_1_, k1, l1, tessellator, p_148120_3_, p_148120_4_);
-            }
-        }
+            } 
+        } 
     }
 
     private void overlayBackground(int y1, int y2, int alpha1, int alpha2) {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiTextFieldCustom.java b/src/api/ngtlib/jp/ngt/ngtlib/gui/GuiTextFieldCustom.java
index 4f42d09..6f42b34 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiTextFieldCustom.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/gui/GuiTextFieldCustom.java
@@ -80,7 +80,7 @@ public class GuiTextFieldCustom extends GuiTextField {
             this.text = par1.substring(0, this.maxStringLength);
         } else {
             this.text = par1;
-        }
+        } 
         setCursorPositionEnd();
     }
 
@@ -103,16 +103,16 @@ public class GuiTextFieldCustom extends GuiTextField {
         int k = this.maxStringLength - this.text.length() - i - this.selectionEnd;
         boolean flag = false;
         if (this.text.length() > 0)
-            s1 = s1 + this.text.substring(0, i);
+            s1 = s1 + this.text.substring(0, i); 
         if (k < s2.length()) {
             s1 = s1 + s2.substring(0, k);
             l = k;
         } else {
             s1 = s1 + s2;
             l = s2.length();
-        }
+        } 
         if (this.text.length() > 0 && j < this.text.length())
-            s1 = s1 + this.text.substring(j);
+            s1 = s1 + this.text.substring(j); 
         this.text = s1;
         moveCursorBy(i - this.selectionEnd + l);
     }
@@ -123,7 +123,7 @@ public class GuiTextFieldCustom extends GuiTextField {
                 writeText("");
             } else {
                 deleteFromCursor(getNthWordFromCursor(p_146177_1_) - this.cursorPosition);
-            }
+            }  
     }
 
     public void deleteFromCursor(int p_146175_1_) {
@@ -136,13 +136,13 @@ public class GuiTextFieldCustom extends GuiTextField {
                 int k = flag ? this.cursorPosition : (this.cursorPosition + p_146175_1_);
                 String s = "";
                 if (j >= 0)
-                    s = this.text.substring(0, j);
+                    s = this.text.substring(0, j); 
                 if (k < this.text.length())
-                    s = s + this.text.substring(k);
+                    s = s + this.text.substring(k); 
                 this.text = s;
                 if (flag)
-                    moveCursorBy(p_146175_1_);
-            }
+                    moveCursorBy(p_146175_1_); 
+            }  
     }
 
     public int getNthWordFromCursor(int n) {
@@ -160,9 +160,9 @@ public class GuiTextFieldCustom extends GuiTextField {
         for (int i1 = 0; i1 < l; i1++) {
             if (flag1) {
                 while (skipWs && k > 0 && this.text.charAt(k - 1) == ' ')
-                    k--;
+                    k--; 
                 while (k > 0 && this.text.charAt(k - 1) != ' ')
-                    k--;
+                    k--; 
             } else {
                 int j1 = this.text.length();
                 k = this.text.indexOf(' ', k);
@@ -170,10 +170,10 @@ public class GuiTextFieldCustom extends GuiTextField {
                     k = j1;
                 } else {
                     while (skipWs && k < j1 && this.text.charAt(k) == ' ')
-                        k++;
-                }
-            }
-        }
+                        k++; 
+                } 
+            } 
+        } 
         return k;
     }
 
@@ -185,9 +185,9 @@ public class GuiTextFieldCustom extends GuiTextField {
         this.cursorPosition = p_146190_1_;
         int j = this.text.length();
         if (this.cursorPosition < 0)
-            this.cursorPosition = 0;
+            this.cursorPosition = 0; 
         if (this.cursorPosition > j)
-            this.cursorPosition = j;
+            this.cursorPosition = j; 
         setSelectionPos(this.cursorPosition);
     }
 
@@ -201,7 +201,7 @@ public class GuiTextFieldCustom extends GuiTextField {
 
     public boolean textboxKeyTyped(char word, int code) {
         if (!this.isFocused)
-            return false;
+            return false; 
         switch (word) {
             case '\001':
                 setCursorPositionEnd();
@@ -212,29 +212,29 @@ public class GuiTextFieldCustom extends GuiTextField {
                 return true;
             case '\026':
                 if (this.isEnabled)
-                    writeText(GuiScreen.getClipboardString());
+                    writeText(GuiScreen.getClipboardString()); 
                 return true;
             case '\030':
                 GuiScreen.setClipboardString(getSelectedText());
                 if (this.isEnabled)
-                    writeText("");
+                    writeText(""); 
                 return true;
-        }
+        } 
         switch (code) {
             case 14:
                 if (GuiScreen.isCtrlKeyDown()) {
                     if (this.isEnabled)
-                        deleteWords(-1);
+                        deleteWords(-1); 
                 } else if (this.isEnabled) {
                     deleteFromCursor(-1);
-                }
+                } 
                 return true;
             case 199:
                 if (GuiScreen.isShiftKeyDown()) {
                     setSelectionPos(0);
                 } else {
                     setCursorPositionZero();
-                }
+                } 
                 return true;
             case 203:
                 if (GuiScreen.isShiftKeyDown()) {
@@ -242,12 +242,12 @@ public class GuiTextFieldCustom extends GuiTextField {
                         setSelectionPos(getNthWordFromPos(-1, getSelectionEnd()));
                     } else {
                         setSelectionPos(getSelectionEnd() - 1);
-                    }
+                    } 
                 } else if (GuiScreen.isCtrlKeyDown()) {
                     setCursorPosition(getNthWordFromCursor(-1));
                 } else {
                     moveCursorBy(-1);
-                }
+                } 
                 return true;
             case 205:
                 if (GuiScreen.isShiftKeyDown()) {
@@ -255,50 +255,50 @@ public class GuiTextFieldCustom extends GuiTextField {
                         setSelectionPos(getNthWordFromPos(1, getSelectionEnd()));
                     } else {
                         setSelectionPos(getSelectionEnd() + 1);
-                    }
+                    } 
                 } else if (GuiScreen.isCtrlKeyDown()) {
                     setCursorPosition(getNthWordFromCursor(1));
                 } else {
                     moveCursorBy(1);
-                }
+                } 
                 return true;
             case 207:
                 if (GuiScreen.isShiftKeyDown()) {
                     setSelectionPos(this.text.length());
                 } else {
                     setCursorPositionEnd();
-                }
+                } 
                 return true;
             case 211:
                 if (GuiScreen.isCtrlKeyDown()) {
                     if (this.isEnabled)
-                        deleteWords(1);
+                        deleteWords(1); 
                 } else if (this.isEnabled) {
                     deleteFromCursor(1);
-                }
+                } 
                 return true;
-        }
+        } 
         if (ChatAllowedCharacters.isAllowedCharacter(word)) {
             if (this.isEnabled)
-                writeText(Character.toString(word));
+                writeText(Character.toString(word)); 
             return true;
-        }
+        } 
         return false;
     }
 
     public boolean mouseClicked(int x, int y, int button) {
         boolean flag = (x >= this.x && x < this.x + this.width && y >= this.y && y < this.y + this.height);
         if (this.canLoseFocus)
-            setFocused(flag);
+            setFocused(flag); 
         if (this.isFocused && button == 0) {
             int l = x - this.x;
             if (this.enableBackgroundDrawing)
-                l -= 4;
+                l -= 4; 
             String s = this.fontRenderer.trimStringToWidth(this.text.substring(this.lineScrollOffset), getWidth());
             setCursorPosition(this.fontRenderer.trimStringToWidth(s, l).length() + this.lineScrollOffset);
             if (this.listner != null)
-                this.listner.onClick();
-        }
+                this.listner.onClick(); 
+        } 
         return flag;
     }
 
@@ -306,7 +306,7 @@ public class GuiTextFieldCustom extends GuiTextField {
         drawTextBox();
         boolean hovered = (mouseX >= this.x && mouseY >= this.y && mouseX < this.x + this.width && mouseY < this.y + this.height);
         if (hovered && !this.tips.isEmpty())
-            GuiScreenCustom.drawHoveringTextS(this.tips, mouseX, mouseY, this.screen);
+            GuiScreenCustom.drawHoveringTextS(this.tips, mouseX, mouseY, this.screen); 
     }
 
     public final void drawTextBox() {
@@ -316,7 +316,7 @@ public class GuiTextFieldCustom extends GuiTextField {
             if (getEnableBackgroundDrawing()) {
                 drawRect(this.x - 1, this.y - 1, this.x + this.width + 1, this.y + this.height + 1, -6250336);
                 drawRect(this.x, this.y, this.x + this.width, this.y + this.height, -16777216);
-            }
+            } 
             int color = this.isEnabled ? this.enabledColor : this.disabledColor;
             int j = this.cursorPosition - this.lineScrollOffset;
             int k = this.selectionEnd - this.lineScrollOffset;
@@ -327,11 +327,11 @@ public class GuiTextFieldCustom extends GuiTextField {
             int y = this.enableBackgroundDrawing ? (this.y + (this.height - 8) / 2) : this.y;
             int xEnd = x;
             if (k > s.length())
-                k = s.length();
+                k = s.length(); 
             if (s.length() > 0) {
                 String s1 = flag ? s.substring(0, j) : s;
                 xEnd = this.fontRenderer.drawStringWithShadow(s1, x, y, color);
-            }
+            } 
             boolean flag2 = (this.cursorPosition < this.text.length() || this.text.length() >= getMaxStringLength());
             int x2 = xEnd;
             if (!flag) {
@@ -339,20 +339,20 @@ public class GuiTextFieldCustom extends GuiTextField {
             } else if (flag2) {
                 x2 = xEnd - 1;
                 xEnd--;
-            }
+            } 
             if (s.length() > 0 && flag && j < s.length())
-                this.fontRenderer.drawStringWithShadow(s.substring(j), xEnd, y, color);
+                this.fontRenderer.drawStringWithShadow(s.substring(j), xEnd, y, color); 
             if (flag1)
                 if (flag2) {
                     Gui.drawRect(x2, y - 1, x2 + 1, y + 1 + this.fontRenderer.FONT_HEIGHT, -3092272);
                 } else {
                     this.fontRenderer.drawStringWithShadow("_", x2, y, color);
-                }
+                }  
             if (k != j) {
                 int strW = x + this.fontRenderer.getStringWidth(s.substring(0, k));
                 drawCursorVertical(x2, y - 1, strW - 1, y + 1 + this.fontRenderer.FONT_HEIGHT);
-            }
-        }
+            } 
+        } 
     }
 
     private void drawCursorVertical(int par1, int par2, int par3, int par4) {
@@ -360,16 +360,16 @@ public class GuiTextFieldCustom extends GuiTextField {
             int i1 = par1;
             par1 = par3;
             par3 = i1;
-        }
+        } 
         if (par2 < par4) {
             int i1 = par2;
             par2 = par4;
             par4 = i1;
-        }
+        } 
         if (par3 > this.x + this.width)
-            par3 = this.x + this.width;
+            par3 = this.x + this.width; 
         if (par1 > this.x + this.width)
-            par1 = this.x + this.width;
+            par1 = this.x + this.width; 
         GL11.glColor4f(0.0F, 0.0F, 255.0F, 255.0F);
         GL11.glDisable(3553);
         GL11.glEnable(3058);
@@ -388,7 +388,7 @@ public class GuiTextFieldCustom extends GuiTextField {
     public void setMaxStringLength(int p_146203_1_) {
         this.maxStringLength = p_146203_1_;
         if (this.text.length() > p_146203_1_)
-            this.text = this.text.substring(0, p_146203_1_);
+            this.text = this.text.substring(0, p_146203_1_); 
     }
 
     public int getMaxStringLength() {
@@ -418,9 +418,9 @@ public class GuiTextFieldCustom extends GuiTextField {
     public void setFocused(boolean par1) {
         if (!this.isDisplayMode) {
             if (par1 && !this.isFocused)
-                this.cursorCounter = 0;
+                this.cursorCounter = 0; 
             this.isFocused = par1;
-        }
+        } 
     }
 
     public boolean isFocused() {
@@ -442,28 +442,28 @@ public class GuiTextFieldCustom extends GuiTextField {
     public void setSelectionPos(int p_146199_1_) {
         int j = this.text.length();
         if (p_146199_1_ > j)
-            p_146199_1_ = j;
+            p_146199_1_ = j; 
         if (p_146199_1_ < 0)
-            p_146199_1_ = 0;
+            p_146199_1_ = 0; 
         this.selectionEnd = p_146199_1_;
         if (this.fontRenderer != null) {
             if (this.lineScrollOffset > j)
-                this.lineScrollOffset = j;
+                this.lineScrollOffset = j; 
             int k = getWidth();
             String s = this.fontRenderer.trimStringToWidth(this.text.substring(this.lineScrollOffset), k);
             int l = s.length() + this.lineScrollOffset;
             if (p_146199_1_ == this.lineScrollOffset)
-                this.lineScrollOffset -= this.fontRenderer.trimStringToWidth(this.text, k, true).length();
+                this.lineScrollOffset -= this.fontRenderer.trimStringToWidth(this.text, k, true).length(); 
             if (p_146199_1_ > l) {
                 this.lineScrollOffset += p_146199_1_ - l;
             } else if (p_146199_1_ <= this.lineScrollOffset) {
                 this.lineScrollOffset -= this.lineScrollOffset - p_146199_1_;
-            }
+            } 
             if (this.lineScrollOffset < 0)
-                this.lineScrollOffset = 0;
+                this.lineScrollOffset = 0; 
             if (this.lineScrollOffset > j)
-                this.lineScrollOffset = j;
-        }
+                this.lineScrollOffset = j; 
+        } 
     }
 
     public void setCanLoseFocus(boolean par1) {
@@ -480,6 +480,7 @@ public class GuiTextFieldCustom extends GuiTextField {
 
     public GuiTextFieldCustom addTips(String par1) {
         this.tips.add(par1);
+        return this;
     }
 
     public static interface TextFieldListner {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiWarning.java b/src/api/ngtlib/jp/ngt/ngtlib/gui/GuiWarning.java
index df85f65..bfb25f3 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/gui/GuiWarning.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/gui/GuiWarning.java
@@ -27,21 +27,21 @@ public class GuiWarning extends GuiScreen {
     @SubscribeEvent
     public void onRender(RenderGameOverlayEvent event) {
         if (event.isCancelable() || event.getType() != RenderGameOverlayEvent.ElementType.EXPERIENCE)
-            return;
+            return; 
         if (!NGTCertificate.canUse()) {
             if (this.counter < 10) {
                 this.counter++;
             } else {
                 this.counter = 0;
                 this.field_01 = !this.field_01;
-            }
+            } 
             setScale(event.getResolution());
             GL11.glPushMatrix();
             GL11.glScalef(2.5F, 2.5F, 2.5F);
             int i0 = this.field_01 ? 16711680 : 16776960;
             this.mc.fontRenderer.drawStringWithShadow(I18n.format("gui.warning", new Object[0]), 2.0F, 5.0F, i0);
             GL11.glPopMatrix();
-        }
+        } 
     }
 
     private void setScale(ScaledResolution par1) {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/FileType.java b/src/api/ngtlib/jp/ngt/ngtlib/io/FileType.java
index 5a13ea2..a7f1af5 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/FileType.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/io/FileType.java
@@ -60,8 +60,8 @@ public class FileType {
     public static FileType getType(String fileName) {
         for (FileType type : TYPES) {
             if (type.match(fileName))
-                return type;
-        }
+                return type; 
+        } 
         return null;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/NGTFileLoader.java b/src/api/ngtlib/jp/ngt/ngtlib/io/NGTFileLoader.java
index e42d9e5..7bcf4fe 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/NGTFileLoader.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/io/NGTFileLoader.java
@@ -39,7 +39,7 @@ public final class NGTFileLoader {
 
     public static void log(String par1, Object... par2) {
         if (NGTCore.debugLog)
-            NGTLog.debug(par1, par2);
+            NGTLog.debug(par1, par2); 
     }
 
     public static List<File> findFile(FileMatcher matcher) {
@@ -56,8 +56,8 @@ public final class NGTFileLoader {
                 findFileInDirectory(findFiles, dir, matchers);
             } catch (IOException e) {
                 e.printStackTrace();
-            }
-        }
+            } 
+        } 
         return findFiles;
     }
 
@@ -70,7 +70,7 @@ public final class NGTFileLoader {
     public static void findFileInDirectory(ScanResult result, File dir, FileMatcher... matchers) throws IOException {
         String[] files = dir.list();
         if (files == null || files.length == 0)
-            return;
+            return; 
         for (String entryName : files) {
             File entry = new File(dir, entryName);
             if (entry.isFile()) {
@@ -80,13 +80,13 @@ public final class NGTFileLoader {
                 } else {
                     for (FileMatcher matcher : matchers) {
                         if (matcher.match(entry))
-                            result.add("no_zip", matcher, entry);
-                    }
-                }
+                            result.add("no_zip", matcher, entry); 
+                    } 
+                } 
             } else if (entry.isDirectory() && !isExeptFolder(entry)) {
                 findFileInDirectory(result, entry, matchers);
-            }
-        }
+            } 
+        } 
     }
 
     private static void findFileInZip(ScanResult result, File archive, String encoding, FileMatcher... matchers) {
@@ -97,8 +97,8 @@ public final class NGTFileLoader {
                         File file = new File(zip.getName(), entry.getName());
                         for (FileMatcher matcher : matchers) {
                             if (matcher.match(file))
-                                result.add(archive.getName(), matcher, file);
-                        }
+                                result.add(archive.getName(), matcher, file); 
+                        } 
                     });
             zip.close();
         } catch (IOException e) {
@@ -108,19 +108,19 @@ public final class NGTFileLoader {
             if (encoding.isEmpty()) {
                 findFileInZip(result, archive, "MS932", matchers);
                 return;
-            }
+            } 
             e.printStackTrace();
             NGTLog.debug("[NGTFL] IllegalArgumentException:" + archive.getName());
-        }
+        } 
     }
 
     private static boolean isExeptFolder(File folder) {
         if (folder.getAbsolutePath().contains("sounds"))
-            return false;
+            return false; 
         for (String word : EXCEPT_WORD) {
             if (folder.getName().equals(word))
-                return true;
-        }
+                return true; 
+        } 
         return false;
     }
 
@@ -135,19 +135,19 @@ public final class NGTFileLoader {
 
     public static List<File> getModsDir() {
         if (MODS_DIR != null)
-            return MODS_DIR;
+            return MODS_DIR; 
         MODS_DIR = new ArrayList<>();
         try {
             File modsDir2 = new File(Thread.currentThread().getContextClassLoader().getResource("").getPath());
             if (!modsDir2.getAbsolutePath().contains("mods")) {
                 MODS_DIR.add(modsDir2);
                 NGTLog.debug("[NGTFL] Add mods dir : " + modsDir2.getAbsolutePath());
-            }
+            } 
         } catch (NullPointerException nullPointerException) {}
         File modsDir = new File(NGTCore.proxy.getMinecraftDirectory(), "mods");
         String modsDirPath = modsDir.getAbsolutePath();
         if (modsDirPath.contains(".") && !modsDirPath.contains(".minecraft"))
-            modsDirPath = modsDirPath.replace("\\.", "");
+            modsDirPath = modsDirPath.replace("\\.", ""); 
         MODS_DIR.add(new File(modsDirPath));
         NGTLog.debug("[NGTFL] Add mods dir : " + modsDirPath);
         return MODS_DIR;
@@ -172,13 +172,13 @@ public final class NGTFileLoader {
         for (FileType type : types) {
             FileFilter filter = new FileNameExtensionFilter(type.getDescription(), new String[] { type.getExtension() });
             chooser.addChoosableFileFilter(filter);
-        }
+        } 
         int state = chooser.showOpenDialog((Component)null);
         if (state == 0) {
             File file = chooser.getSelectedFile();
             PREV_OPENED_FOLDER = file.getParentFile();
             return file;
-        }
+        } 
         return null;
     }
 
@@ -188,7 +188,7 @@ public final class NGTFileLoader {
         for (FileType type : types) {
             FileFilter filter = new FileNameExtensionFilter(type.getDescription(), new String[] { type.getExtension() });
             chooser.addChoosableFileFilter(filter);
-        }
+        } 
         int state = chooser.showSaveDialog((Component)null);
         if (state == 0) {
             File file = chooser.getSelectedFile();
@@ -196,20 +196,20 @@ public final class NGTFileLoader {
             if (!file.getName().contains(".")) {
                 FileNameExtensionFilter filter = (FileNameExtensionFilter)chooser.getFileFilter();
                 file = new File(file.getAbsolutePath() + "." + filter.getExtensions()[0]);
-            }
+            } 
             return file;
-        }
+        } 
         return null;
     }
 
     public static InputStream getInputStream(ResourceLocation par1) throws IOException {
         if (!NGTCore.proxy.isServer())
-            return Minecraft.getMinecraft().getResourceManager().getResource(par1).getInputStream();
+            return Minecraft.getMinecraft().getResourceManager().getResource(par1).getInputStream(); 
         int index = par1.getPath().lastIndexOf("/");
         String fileName = par1.getPath().substring(index + 1);
         List<File> list = findFile(file -> file.getName().equals(fileName));
         if (list.isEmpty())
-            throw new FileNotFoundException("On get stream : " + fileName);
+            throw new FileNotFoundException("On get stream : " + fileName); 
         File file = list.get(0);
         return getInputStreamFromFile(file);
     }
@@ -217,7 +217,7 @@ public final class NGTFileLoader {
     public static InputStream getInputStreamFromFile(File file) throws IOException {
         String suffix = getArchiveSuffix(file.getAbsolutePath());
         if (!suffix.isEmpty())
-            return getStreamFromArchive(file, suffix);
+            return getStreamFromArchive(file, suffix); 
         return new FileInputStream(file);
     }
 
@@ -232,9 +232,9 @@ public final class NGTFileLoader {
                 if (fileInZip.getName().equals(file.getName())) {
                     InputStream is = zip.getInputStream(ze);
                     return new BufferedInputStream(is);
-                }
-            }
-        }
+                } 
+            } 
+        } 
         zip.close();
         throw new FileNotFoundException("On get stream : " + file.getName());
     }
@@ -247,17 +247,17 @@ public final class NGTFileLoader {
     public static ZipFile getArchive(File file, String encoding) throws IOException {
         String en2 = encoding.isEmpty() ? "UTF-8" : encoding;
         if (FileType.JAR.match(file.getName()))
-            return new JarFile(file.getAbsolutePath());
+            return new JarFile(file.getAbsolutePath()); 
         if (FileType.ZIP.match(file.getName()))
-            return new ZipFile(file.getAbsolutePath(), Charset.forName(en2));
+            return new ZipFile(file.getAbsolutePath(), Charset.forName(en2)); 
         return null;
     }
 
     public static String getArchiveSuffix(String absPath) {
         if (absPath.contains(".zip"))
-            return ".zip";
+            return ".zip"; 
         if (absPath.contains(".jar"))
-            return ".jar";
+            return ".jar"; 
         return "";
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/NGTImage.java b/src/api/ngtlib/jp/ngt/ngtlib/io/NGTImage.java
index 4e773e6..5fe3801 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/NGTImage.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/io/NGTImage.java
@@ -24,8 +24,8 @@ public final class NGTImage {
         int value = 0;
         for (int i = 1; i < argb.length; i++) {
             if (value < argb[i])
-                value = argb[i];
-        }
+                value = argb[i]; 
+        } 
         return value;
     }
 
@@ -35,10 +35,10 @@ public final class NGTImage {
         int min = 255;
         for (int i = 1; i < argb.length; i++) {
             if (max < argb[i])
-                max = argb[i];
+                max = argb[i]; 
             if (min > argb[i])
-                min = argb[i];
-        }
+                min = argb[i]; 
+        } 
         int i0 = max + min;
         return getIntFromARGB(argb[0], i0 - argb[1], i0 - argb[2], i0 - argb[3]);
     }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/NGTJson.java b/src/api/ngtlib/jp/ngt/ngtlib/io/NGTJson.java
index 7f79ecd..b987654 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/NGTJson.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/io/NGTJson.java
@@ -19,7 +19,7 @@ public final class NGTJson {
             pw.close();
         } catch (IOException e) {
             e.printStackTrace();
-        }
+        } 
     }
 
     public static <T> T getObjectFromJson(String json, Class<? extends T> clazz) throws IOException {
@@ -28,7 +28,7 @@ public final class NGTJson {
         } catch (Exception e) {
             String message = "Can't load json : " + json + " (" + e.getMessage() + ")";
             throw new IOException(message, e);
-        }
+        } 
     }
 
     public static String getJsonFromObject(Object object) {
@@ -37,7 +37,7 @@ public final class NGTJson {
 
     public static Gson getGson() {
         if (GSON_OBJ == null)
-            GSON_OBJ = (new GsonBuilder()).setPrettyPrinting().create();
+            GSON_OBJ = (new GsonBuilder()).setPrettyPrinting().create(); 
         return GSON_OBJ;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/NGTLog.java b/src/api/ngtlib/jp/ngt/ngtlib/io/NGTLog.java
index 24dca69..18c24e1 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/NGTLog.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/io/NGTLog.java
@@ -26,7 +26,7 @@ public final class NGTLog {
                 logger.log(Level.INFO, par1);
             } else {
                 logger.log(Level.INFO, String.format(par1, par2));
-            }
+            } 
         } catch (Exception exception) {}
     }
 
@@ -39,7 +39,7 @@ public final class NGTLog {
             debug("[NGTLog] Can't send message. This is client.");
         } else {
             NGTUtil.getServer().getPlayerList().sendMessage((ITextComponent)new TextComponentTranslation(message, objects));
-        }
+        } 
     }
 
     @SideOnly(Side.CLIENT)
@@ -65,6 +65,6 @@ public final class NGTLog {
             long start = ((Long)startTimes.remove(startTimes.size() - 1)).longValue();
             long time = System.currentTimeMillis() - start;
             debug(msg + ":" + time + "ms");
-        }
+        } 
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/NGTText.java b/src/api/ngtlib/jp/ngt/ngtlib/io/NGTText.java
index 14cf896..23db2c4 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/NGTText.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/io/NGTText.java
@@ -42,7 +42,7 @@ public final class NGTText {
         List<String> texts = readText(file, encoding);
         String[][] array = new String[texts.size()][];
         for (int i = 0; i < texts.size(); i++)
-            array[i] = ((String)texts.get(i)).split(",");
+            array[i] = ((String)texts.get(i)).split(","); 
         return array;
     }
 
@@ -51,8 +51,8 @@ public final class NGTText {
         for (String s : list) {
             sb.append(s);
             if (indention)
-                sb.append("\n");
-        }
+                sb.append("\n"); 
+        } 
         return sb.toString();
     }
 
@@ -67,8 +67,8 @@ public final class NGTText {
             } catch (UnsupportedEncodingException e) {
                 e.printStackTrace();
                 isr = new InputStreamReader(is);
-            }
-        }
+            } 
+        } 
         BufferedReader reader = new BufferedReader(isr);
         Stream<String> stream = reader.lines();
         stream.forEachOrdered(line -> list.add(line));
@@ -96,16 +96,16 @@ public final class NGTText {
                             BufferedReader br = new BufferedReader(new InputStreamReader(bis));
                             String string;
                             while ((string = br.readLine()) != null)
-                                strings.add(string);
+                                strings.add(string); 
                             br.close();
                             break;
-                        }
-                    }
-                }
+                        } 
+                    } 
+                } 
                 zip.close();
             } catch (IOException e) {
                 e.printStackTrace();
-            }
+            } 
         } else {
             try {
                 InputStreamReader isr;
@@ -113,16 +113,16 @@ public final class NGTText {
                     isr = new InputStreamReader(new FileInputStream(file));
                 } else {
                     isr = new InputStreamReader(new FileInputStream(file), encoding);
-                }
+                } 
                 BufferedReader br = new BufferedReader(isr);
                 String string;
                 while ((string = br.readLine()) != null)
-                    strings.add(string);
+                    strings.add(string); 
                 br.close();
             } catch (IOException e) {
                 e.printStackTrace();
-            }
-        }
+            } 
+        } 
         return strings;
     }
 
@@ -130,12 +130,12 @@ public final class NGTText {
         try {
             PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8")));
             for (String s : texts)
-                pw.println(s);
+                pw.println(s); 
             pw.close();
             return true;
         } catch (IOException e) {
             e.printStackTrace();
             return false;
-        }
+        } 
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/NGTZ.java b/src/api/ngtlib/jp/ngt/ngtlib/io/NGTZ.java
index 110215f..4504bd2 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/NGTZ.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/io/NGTZ.java
@@ -21,7 +21,7 @@ public class NGTZ {
             load(res.getInputStream());
         } catch (IOException e) {
             throw new ModelFormatException("IO Exception reading model", e);
-        }
+        } 
     }
 
     public void load(InputStream is) throws IOException {
@@ -31,8 +31,8 @@ public class NGTZ {
             if (!ze.isDirectory()) {
                 String partsName = ze.getName().replace(".ngto", "");
                 registerNGTO(partsName, zip);
-            }
-        }
+            } 
+        } 
         zip.close();
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/ResourceLocationCustom.java b/src/api/ngtlib/jp/ngt/ngtlib/io/ResourceLocationCustom.java
index 0a48735..076cdd9 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/ResourceLocationCustom.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/io/ResourceLocationCustom.java
@@ -39,11 +39,11 @@ public final class ResourceLocationCustom extends ResourceLocation {
 
     public boolean equals(Object obj) {
         if (obj == this)
-            return true;
+            return true; 
         if (obj instanceof ResourceLocation) {
             ResourceLocation res = (ResourceLocation)obj;
             return (res.getNamespace().equals(getNamespace()) && res.getPath().equals(getPath()));
-        }
+        } 
         return super.equals(obj);
     }
 
@@ -54,7 +54,7 @@ public final class ResourceLocationCustom extends ResourceLocation {
     public int compareTo(ResourceLocation location) {
         int i = getNamespace().compareTo(location.getNamespace());
         if (i == 0)
-            i = getPath().compareTo(location.getPath());
+            i = getPath().compareTo(location.getPath()); 
         return i;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/ScanResult.java b/src/api/ngtlib/jp/ngt/ngtlib/io/ScanResult.java
index b4b10a6..7e04580 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/ScanResult.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/io/ScanResult.java
@@ -11,14 +11,14 @@ public class ScanResult {
 
     private MatchResult getMatchResult(String key) {
         if (!this.result.containsKey(key))
-            this.result.put(key, new MatchResult());
+            this.result.put(key, new MatchResult()); 
         return this.result.get(key);
     }
 
     public List<File> asList() {
         List<File> list = new ArrayList<>();
         for (MatchResult mr : this.result.values())
-            list.addAll(mr.asList());
+            list.addAll(mr.asList()); 
         return list;
     }
 
@@ -31,14 +31,14 @@ public class ScanResult {
 
         private List<File> getList(FileMatcher key) {
             if (!this.result.containsKey(key))
-                this.result.put(key, new ArrayList<>());
+                this.result.put(key, new ArrayList<>()); 
             return this.result.get(key);
         }
 
         public List<File> asList() {
             List<File> list = new ArrayList<>();
             for (List<File> files : this.result.values())
-                list.addAll(files);
+                list.addAll(files); 
             return list;
         }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/ScriptUtil.java b/src/api/ngtlib/jp/ngt/ngtlib/io/ScriptUtil.java
index cdec652..d570c6d 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/ScriptUtil.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/io/ScriptUtil.java
@@ -30,18 +30,18 @@ public final class ScriptUtil {
             System.out.println("Language name: " + factory.getLanguageName());
             System.out.println("Language version: " + factory.getLanguageVersion());
             for (String extension : factory.getExtensions())
-                System.out.println("Extension: " + extension);
+                System.out.println("Extension: " + extension); 
             for (String mimeType : factory.getMimeTypes())
-                System.out.println("MimeType: " + mimeType);
+                System.out.println("MimeType: " + mimeType); 
             for (String name : factory.getNames())
-                System.out.println("Short name: " + name);
+                System.out.println("Short name: " + name); 
             System.out.println();
-        }
+        } 
     }
 
     public static ScriptEngine doScript(String s) {
         if (SEM == null)
-            init();
+            init(); 
         ScriptEngine se = SEM.getEngineByName("javascript");
         try {
             se.eval("load(\"nashorn:mozilla_compat.js\");");
@@ -49,7 +49,7 @@ public final class ScriptUtil {
             return se;
         } catch (ScriptException e) {
             throw new RuntimeException("Script exec error", e);
-        }
+        } 
     }
 
     public static CompiledScript compile(ScriptEngine engine, ResourceLocation resource) {
@@ -62,7 +62,7 @@ public final class ScriptUtil {
             throw new RuntimeException("Script load error : " + resource.getPath(), e);
         } catch (ScriptException e) {
             throw new RuntimeException("Script load error : " + resource.getPath(), e);
-        }
+        } 
     }
 
     public static Object doScriptFunction(ScriptEngine se, String func, Object... args) {
@@ -72,7 +72,7 @@ public final class ScriptUtil {
             throw new RuntimeException("Script exec error : " + func, e);
         } catch (ScriptException e) {
             throw new RuntimeException("Script exec error : " + func, e);
-        }
+        } 
     }
 
     public static Object doScriptIgnoreError(ScriptEngine se, String func, Object... args) {
@@ -81,7 +81,7 @@ public final class ScriptUtil {
         } catch (Exception e) {
             e.printStackTrace();
             return null;
-        }
+        } 
     }
 
     public static Object getScriptField(ScriptEngine se, String fieldName) {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/TwitterSetting.java b/src/api/ngtlib/jp/ngt/ngtlib/io/TwitterSetting.java
index 1d7b2d8..19a9403 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/TwitterSetting.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/io/TwitterSetting.java
@@ -19,7 +19,7 @@ public class TwitterSetting {
     }
 
     public boolean isValid() {
-        return (this.accessToken != null && !this.accessToken.isEmpty() && this.accessTokenSecret != null &&
+        return (this.accessToken != null && !this.accessToken.isEmpty() && this.accessTokenSecret != null && 
             !this.accessTokenSecret.isEmpty());
     }
 
@@ -30,7 +30,7 @@ public class TwitterSetting {
             setting = NGTJson.<TwitterSetting>getObjectFromJson(json, TwitterSetting.class);
         } catch (IOException e) {
             setting = new TwitterSetting();
-        }
+        } 
         setting.init();
         return setting;
     }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/TwitterUtil.java b/src/api/ngtlib/jp/ngt/ngtlib/io/TwitterUtil.java
index db91bf3..31ce7e8 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/TwitterUtil.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/io/TwitterUtil.java
@@ -45,14 +45,14 @@ public class TwitterUtil {
     public static TwitterUtil getInstance() {
         if (INSTANCE.twitter == null) {
             if (INSTANCE.waitingAuth)
-                return null;
+                return null; 
             try {
                 INSTANCE.init();
             } catch (Exception e) {
                 e.printStackTrace();
                 return null;
-            }
-        }
+            } 
+        } 
         return INSTANCE;
     }
 
@@ -62,7 +62,7 @@ public class TwitterUtil {
             showAuthDialog(setting);
         } else {
             setOAuthKey(setting);
-        }
+        } 
     }
 
     private void showAuthDialog(TwitterSetting setting) throws IOException, URISyntaxException, TwitterException {
@@ -74,7 +74,7 @@ public class TwitterUtil {
         if (this.twitterAuthTemp == null) {
             this.twitterAuthTemp = TwitterFactory.getSingleton();
             this.twitterAuthTemp.setOAuthConsumer(setting.consumerKey, setting.consumerSecret);
-        }
+        } 
         return this.twitterAuthTemp.getOAuthRequestToken();
     }
 
@@ -104,7 +104,7 @@ public class TwitterUtil {
                             Desktop.getDesktop().browse(new URI(url));
                         } catch (IOException|URISyntaxException e) {
                             e.printStackTrace();
-                        }
+                        } 
                     }
                 });
         buttonOpenLink.setAlignmentX(0.5F);
@@ -115,7 +115,7 @@ public class TwitterUtil {
                     public void actionPerformed(ActionEvent event) {
                         String s = field.getText();
                         if (TwitterUtil.this.setPIN(setting, s))
-                            frame.dispose();
+                            frame.dispose(); 
                     }
                 });
         buttonOK.setAlignmentX(0.5F);
@@ -132,7 +132,7 @@ public class TwitterUtil {
         if (pin == null || pin.isEmpty()) {
             NGTLog.debug("[Twitter] Invalid PIN.");
             return false;
-        }
+        } 
         this.waitingAuth = false;
         NGTLog.debug("[Twitter] Set PIN : " + pin);
         try {
@@ -144,13 +144,13 @@ public class TwitterUtil {
             setOAuthKey(setting);
         } catch (TwitterException e) {
             e.printStackTrace();
-        }
+        } 
         return true;
     }
 
     public List<Status> getTweetWithKeyword(String keyword, int count) {
         if (keyword.startsWith("@"))
-            return getTweetWithId(keyword, count);
+            return getTweetWithId(keyword, count); 
         Query query = new Query();
         query.setQuery(keyword);
         query.setCount(count);
@@ -160,7 +160,7 @@ public class TwitterUtil {
         } catch (TwitterException e) {
             e.printStackTrace();
             return new ArrayList<>();
-        }
+        } 
     }
 
     public List<Status> getTweetWithId(String keyword, int count) {
@@ -170,7 +170,7 @@ public class TwitterUtil {
         } catch (TwitterException e) {
             e.printStackTrace();
             return new ArrayList<>();
-        }
+        } 
     }
 
     public void outputTweetWithTag(String tag, int count, ICommandSender sender) {
@@ -180,6 +180,6 @@ public class TwitterUtil {
             String str = tweet.getText().replaceAll("\n", "");
             String user = tweet.getUser().getName();
             NGTLog.sendChatMessage(sender, "[" + user + "]" + str, new Object[0]);
-        }
+        } 
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/VirtualFileManager.java b/src/api/ngtlib/jp/ngt/ngtlib/io/VirtualFileManager.java
index b4966bc..7431b5c 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/io/VirtualFileManager.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/io/VirtualFileManager.java
@@ -30,7 +30,7 @@ public class VirtualFileManager extends ForwardingJavaFileManager<JavaFileManage
 
     public ClassLoader getClassLoader(JavaFileManager.Location location) {
         if (this.loader == null)
-            this.loader = new Loader();
+            this.loader = new Loader(); 
         return this.loader;
     }
 
@@ -44,13 +44,13 @@ public class VirtualFileManager extends ForwardingJavaFileManager<JavaFileManage
         protected Class<?> findClass(String name) throws ClassNotFoundException {
             ByteCodeObject co = VirtualFileManager.this.map.get(name);
             if (co == null)
-                return super.findClass(name);
+                return super.findClass(name); 
             Class<?> c = co.getDefinedClass();
             if (c == null) {
                 byte[] b = co.getBytes();
                 c = defineClass(name, b, 0, b.length);
                 co.setDefinedClass(c);
-            }
+            } 
             return c;
         }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemArgHolderBase.java b/src/api/ngtlib/jp/ngt/ngtlib/item/ItemArgHolderBase.java
index 733a8fe..bcd7aed 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemArgHolderBase.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/item/ItemArgHolderBase.java
@@ -9,7 +9,7 @@ import net.minecraft.util.EnumHand;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 
-public abstract class ItemArgHolderBase<T extends ItemArgHolderBase> {
+public abstract class ItemArgHolderBase<T extends ItemArgHolderBase<T>> {
     private World world;
 
     private BlockPos pos;
@@ -24,6 +24,7 @@ public abstract class ItemArgHolderBase<T extends ItemArgHolderBase> {
 
     public T setWorld(World par1) {
         this.world = par1;
+        return (T)this;
     }
 
     public BlockPos getBlockPos() {
@@ -32,6 +33,7 @@ public abstract class ItemArgHolderBase<T extends ItemArgHolderBase> {
 
     public T setBlockPos(BlockPos par1) {
         this.pos = par1;
+        return (T)this;
     }
 
     public EntityPlayer getPlayer() {
@@ -40,6 +42,7 @@ public abstract class ItemArgHolderBase<T extends ItemArgHolderBase> {
 
     public T setPlayer(EntityPlayer par1) {
         this.player = par1;
+        return (T)this;
     }
 
     public EnumFacing getFacing() {
@@ -48,6 +51,7 @@ public abstract class ItemArgHolderBase<T extends ItemArgHolderBase> {
 
     public T setFacing(EnumFacing par1) {
         this.facing = par1;
+        return (T)this;
     }
 
     public static class ItemArgHolder extends ItemArgHolderBase<ItemArgHolder> {
@@ -57,12 +61,13 @@ public abstract class ItemArgHolderBase<T extends ItemArgHolderBase> {
 
         public ItemStack getItemStack() {
             if (this.itemStack == null)
-                this.itemStack = getPlayer().getHeldItem(getHand());
+                this.itemStack = getPlayer().getHeldItem(getHand()); 
             return this.itemStack;
         }
 
         public ItemArgHolder setItemStack(ItemStack par1) {
             this.itemStack = par1;
+            return this;
         }
 
         public EnumHand getHand() {
@@ -71,6 +76,7 @@ public abstract class ItemArgHolderBase<T extends ItemArgHolderBase> {
 
         public ItemArgHolder setHand(EnumHand par1) {
             this.hand = par1;
+            return this;
         }
 
         public ActionResult<ItemStack> pass() {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemCustom.java b/src/api/ngtlib/jp/ngt/ngtlib/item/ItemCustom.java
index 3f57df5..3c54709 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemCustom.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/item/ItemCustom.java
@@ -40,7 +40,7 @@ public class ItemCustom extends Item {
             Usage.INSTANCE.addTooltip(this, stack.getItemDamage(), tooltip);
         } else {
             tooltip.add(TextFormatting.YELLOW + "= Display Usage with L_Shift =");
-        }
+        } 
     }
 
     protected void addInformation(ItemArgHolderBase.ItemArgHolder holder, List<String> list, ITooltipFlag flag) {}
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemMultiIcon.java b/src/api/ngtlib/jp/ngt/ngtlib/item/ItemMultiIcon.java
index 8dc719a..ca18cbf 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemMultiIcon.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/item/ItemMultiIcon.java
@@ -21,8 +21,8 @@ public class ItemMultiIcon extends ItemCustom {
     @SideOnly(Side.CLIENT)
     public void getSubItems(CreativeTabs tab, NonNullList<ItemStack> list) {
         if (!isInCreativeTab(tab))
-            return;
+            return; 
         for (SerializableItemType type : this.types)
-            list.add(new ItemStack(this, 1, type.getId()));
+            list.add(new ItemStack(this, 1, type.getId())); 
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemRenderHandler.java b/src/api/ngtlib/jp/ngt/ngtlib/item/ItemRenderHandler.java
index 91c8a98..c4d6971 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemRenderHandler.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/item/ItemRenderHandler.java
@@ -25,7 +25,7 @@ public class ItemRenderHandler extends TileEntityItemStackRenderer {
             ((IItemRendererCustom)this.rendererMap.get(itemStack.getItem())).renderItem(itemStack);
         } else {
             this.parentRenderer.renderByItem(itemStack);
-        }
+        } 
     }
 
     public void register(Item item, IItemRendererCustom renderer) {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemUtil.java b/src/api/ngtlib/jp/ngt/ngtlib/item/ItemUtil.java
index c582ee7..093eb9f 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/ItemUtil.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/item/ItemUtil.java
@@ -15,8 +15,8 @@ public final class ItemUtil {
             int damage1 = par1.getItemDamage();
             int damage2 = par2.getItemDamage();
             if (damage1 == damage2 || damage1 == 32767 || damage2 == 32767)
-                return true;
-        }
+                return true; 
+        } 
         return false;
     }
 
@@ -25,7 +25,7 @@ public final class ItemUtil {
         par1.setInteger("Count", par2.getCount());
         par1.setShort("Damage", (short)par2.getItemDamage());
         if (par2.getTagCompound() != null)
-            par1.setTag("tag", (NBTBase)par2.getTagCompound());
+            par1.setTag("tag", (NBTBase)par2.getTagCompound()); 
         return par1;
     }
 
@@ -34,12 +34,12 @@ public final class ItemUtil {
         int size = par1.getInteger("Count");
         int damage = par1.getShort("Damage");
         if (damage < 0)
-            damage = 0;
+            damage = 0; 
         ItemStack itemstack = new ItemStack(item, size, damage);
         if (par1.hasKey("tag", 10)) {
             NBTTagCompound nbt = par1.getCompoundTag("tag");
             itemstack.setTagCompound(nbt);
-        }
+        } 
         return itemstack;
     }
 
@@ -51,8 +51,8 @@ public final class ItemUtil {
                 if (bookPages != null) {
                     String s1 = bookPages.getStringTagAt(0);
                     return s1.split("\n");
-                }
-            }
+                } 
+            }  
         return new String[0];
     }
 
@@ -77,7 +77,7 @@ public final class ItemUtil {
             case WEST:
                 newPos = pos.west();
                 break;
-        }
+        } 
         return newPos;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/craft/RecipeManager.java b/src/api/ngtlib/jp/ngt/ngtlib/item/craft/RecipeManager.java
index fe6a272..d90230a 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/craft/RecipeManager.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/item/craft/RecipeManager.java
@@ -30,7 +30,7 @@ public final class RecipeManager {
     @SubscribeEvent
     public void registerRecipes(RegistryEvent.Register<IRecipe> event) {
         IRecipe[] array = this.recipes.<IRecipe>toArray(new IRecipe[this.recipes.size()]);
-        event.getRegistry().registerAll((IForgeRegistryEntry[])array);
+        event.getRegistry().registerAll(array);
     }
 
     public static ShapedRecipes55 addRecipe(ItemStack output, Object... objs) {
@@ -45,15 +45,15 @@ public final class RecipeManager {
                 h++;
                 w = s1.length();
                 pattern = pattern + s1;
-            }
+            } 
         } else {
             while (objs[i] instanceof String) {
                 String s2 = (String)objs[i++];
                 h++;
                 w = s2.length();
                 pattern = pattern + s2;
-            }
-        }
+            } 
+        } 
         Map<Character, ItemStack> map = new HashMap<>();
         for (; i < objs.length; i += 2) {
             Character character = (Character)objs[i];
@@ -64,9 +64,9 @@ public final class RecipeManager {
                 itemstack1 = new ItemStack((Block)objs[i + 1], 1, 32767);
             } else if (objs[i + 1] instanceof ItemStack) {
                 itemstack1 = (ItemStack)objs[i + 1];
-            }
+            } 
             map.put(character, itemstack1);
-        }
+        } 
         ItemStack[] stacks = new ItemStack[w * h];
         for (int i1 = 0; i1 < w * h; i1++) {
             char c0 = pattern.charAt(i1);
@@ -74,8 +74,8 @@ public final class RecipeManager {
                 stacks[i1] = ((ItemStack)map.get(Character.valueOf(c0))).copy();
             } else {
                 stacks[i1] = null;
-            }
-        }
+            } 
+        } 
         ShapedRecipes55 recipe = new ShapedRecipes55(w, h, stacks, output);
         INSTANCE.addRecipeToManager(recipe);
         return recipe;
@@ -96,8 +96,8 @@ public final class RecipeManager {
             IRecipe recipe = iterator.next();
             ItemStack output = recipe.getRecipeOutput();
             if (output != null && ItemUtil.isItemEqual(output, par1))
-                return recipe;
-        }
+                return recipe; 
+        } 
         return null;
     }
 
@@ -106,11 +106,11 @@ public final class RecipeManager {
         if (par1 instanceof ShapedRecipes55) {
             ShapedRecipes55 recipe = (ShapedRecipes55)par1;
             return recipe.getRecipeItems();
-        }
+        } 
         if (par1 instanceof RepairRecipe) {
             RepairRecipe recipe = (RepairRecipe)par1;
             return recipe.getToolAndMaterial(25);
-        }
+        } 
         if (par1 instanceof ShapedRecipes) {
             ShapedRecipes recipe = (ShapedRecipes)par1;
             for (int i = 0; i < 5; i++) {
@@ -119,23 +119,23 @@ public final class RecipeManager {
                         if (j < recipe.recipeWidth) {
                             int index = i * recipe.recipeWidth + j;
                             items[i * 5 + j] = ((Ingredient)recipe.recipeItems.get(index)).getMatchingStacks()[0];
-                        }
-                    }
-            }
+                        } 
+                    }  
+            } 
             return items;
-        }
+        } 
         if (par1 instanceof ShapelessRecipes) {
             ShapelessRecipes recipe = (ShapelessRecipes)par1;
             ArrayList<ItemStack> arraylist = new ArrayList((Collection<?>)recipe.recipeItems);
             for (int i = 0; i < 5; i++) {
                 for (int j = 0; j < 5; j++) {
                     if (arraylist.isEmpty())
-                        return items;
+                        return items; 
                     int k = i * 5 + j;
                     items[k] = arraylist.get(0);
                     arraylist.remove(0);
-                }
-            }
+                } 
+            } 
         } else if (par1 instanceof ShapedOreRecipe) {
             ShapedOreRecipe recipe = (ShapedOreRecipe)par1;
             for (int i = 0; i < 5; i++) {
@@ -145,10 +145,10 @@ public final class RecipeManager {
                             int k = i * 3 + j;
                             NonNullList<Ingredient> list = recipe.getIngredients();
                             if (k < list.size())
-                                items[i * 5 + j] = ((Ingredient)list.get(k)).getMatchingStacks()[0];
-                        }
-                    }
-            }
+                                items[i * 5 + j] = ((Ingredient)list.get(k)).getMatchingStacks()[0]; 
+                        } 
+                    }  
+            } 
         } else if (par1 instanceof ShapelessOreRecipe) {
             ShapelessOreRecipe recipe = (ShapelessOreRecipe)par1;
             List<Ingredient> list = new ArrayList<>();
@@ -158,12 +158,12 @@ public final class RecipeManager {
                 for (int j = 0; j < 5; j++) {
                     int k = i * 5 + j;
                     if (list.isEmpty() || k >= list.size())
-                        return items;
+                        return items; 
                     items[k] = ((Ingredient)list.get(k)).getMatchingStacks()[0];
                     list.remove(k);
-                }
-            }
-        }
+                } 
+            } 
+        } 
         return items;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/craft/RepairRecipe.java b/src/api/ngtlib/jp/ngt/ngtlib/item/craft/RepairRecipe.java
index 6a0501d..b093fee 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/craft/RepairRecipe.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/item/craft/RepairRecipe.java
@@ -28,7 +28,7 @@ public class RepairRecipe implements IRecipe {
     public boolean matches(InventoryCrafting inventory, World world) {
         ItemStack[] stacks = getToolAndMaterial(inventory);
         if (stacks[0] != null && stacks[1] != null)
-            return true;
+            return true; 
         return false;
     }
 
@@ -38,7 +38,7 @@ public class RepairRecipe implements IRecipe {
             ItemStack tool = stacks[0].copy();
             tool.setItemDamage(tool.getItemDamage() - 1);
             return tool;
-        }
+        } 
         return null;
     }
 
@@ -51,16 +51,16 @@ public class RepairRecipe implements IRecipe {
                 if (stack.getItem() == this.toolItem && stack.getItemDamage() > 0) {
                     stacks[0] = stack;
                     break;
-                }
-        }
+                }  
+        } 
         for (i = 0; i < par1.getSizeInventory(); i++) {
             ItemStack stack = par1.getStackInSlot(i);
             if (stack != null)
                 if (stack.getItem() == this.materialItem.getItem() && stack.getItemDamage() == this.materialItem.getItemDamage()) {
                     stacks[1] = stack;
                     break;
-                }
-        }
+                }  
+        } 
         return stacks;
     }
 
@@ -76,12 +76,13 @@ public class RepairRecipe implements IRecipe {
         for (int i = 0; i < inv.getSizeInventory(); i++) {
             ItemStack itemstack = inv.getStackInSlot(i);
             list.add(ForgeHooks.getContainerItem(itemstack));
-        }
+        } 
         return list;
     }
 
     public IRecipe setRegistryName(ResourceLocation name) {
         this.name = name;
+        return this;
     }
 
     public ResourceLocation getRegistryName() {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/craft/ShapedRecipes55.java b/src/api/ngtlib/jp/ngt/ngtlib/item/craft/ShapedRecipes55.java
index dbbad77..2a9db67 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/item/craft/ShapedRecipes55.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/item/craft/ShapedRecipes55.java
@@ -39,11 +39,11 @@ public class ShapedRecipes55 implements IRecipe {
         for (int i = 0; i <= 5 - this.recipeWidth; i++) {
             for (int j = 0; j <= 5 - this.recipeHeight; j++) {
                 if (checkMatch(inventory, i, j, true))
-                    return true;
+                    return true; 
                 if (checkMatch(inventory, i, j, false))
-                    return true;
-            }
-        }
+                    return true; 
+            } 
+        } 
         return false;
     }
 
@@ -58,13 +58,13 @@ public class ShapedRecipes55 implements IRecipe {
                         itemstack = this.recipeItems[this.recipeWidth - i1 - 1 + j1 * this.recipeWidth];
                     } else {
                         itemstack = this.recipeItems[i1 + j1 * this.recipeWidth];
-                    }
+                    }  
                 ItemStack itemstack1 = inventory.getStackInRowAndColumn(k, l);
                 if (itemstack1 != null || itemstack != null)
                     if (!itemMatches(itemstack, itemstack1))
-                        return false;
-            }
-        }
+                        return false;  
+            } 
+        } 
         return true;
     }
 
@@ -74,8 +74,8 @@ public class ShapedRecipes55 implements IRecipe {
             for (int i = 0; i < par1.getSizeInventory(); i++) {
                 ItemStack itemstack1 = par1.getStackInSlot(i);
                 if (itemstack1 != null && itemstack1.hasTagCompound())
-                    itemstack.setTagCompound(itemstack1.getTagCompound().copy());
-            }
+                    itemstack.setTagCompound(itemstack1.getTagCompound().copy()); 
+            }  
         return itemstack;
     }
 
@@ -83,33 +83,33 @@ public class ShapedRecipes55 implements IRecipe {
         ItemStack[] items = new ItemStack[25];
         for (int i = 0; i < 5; i++) {
             if (i >= this.recipeHeight)
-                break;
+                break; 
             for (int j = 0; j < 5; j++) {
                 if (j >= this.recipeWidth)
-                    break;
+                    break; 
                 items[i * 5 + j] = this.recipeItems[i * this.recipeWidth + j];
-            }
-        }
+            } 
+        } 
         return items;
     }
 
     private boolean itemMatches(ItemStack target, ItemStack inInventory) {
         if ((inInventory == null && target != null) || (inInventory != null && target == null))
-            return false;
+            return false; 
         if (target.getItem() == Items.DYE)
-            return ItemUtil.isItemEqual(target, inInventory);
+            return ItemUtil.isItemEqual(target, inInventory); 
         int[] ids0 = OreDictionary.getOreIDs(target);
         int[] ids1 = OreDictionary.getOreIDs(inInventory);
         if (ids0.length > 0 && ids1.length > 0) {
             for (int i = 0; i < ids0.length; i++) {
                 for (int j = 0; j < ids1.length; j++) {
                     if (ids0[i] == ids1[j])
-                        return true;
-                }
-            }
+                        return true; 
+                } 
+            } 
         } else {
             return ItemUtil.isItemEqual(target, inInventory);
-        }
+        } 
         return false;
     }
 
@@ -118,12 +118,13 @@ public class ShapedRecipes55 implements IRecipe {
         for (int i = 0; i < inv.getSizeInventory(); i++) {
             ItemStack itemstack = inv.getStackInSlot(i);
             list.add(ForgeHooks.getContainerItem(itemstack));
-        }
+        } 
         return list;
     }
 
     public IRecipe setRegistryName(ResourceLocation name) {
         this.name = name;
+        return this;
     }
 
     public ResourceLocation getRegistryName() {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/AABBInt.java b/src/api/ngtlib/jp/ngt/ngtlib/math/AABBInt.java
index 3bcb81d..0a70bbf 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/AABBInt.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/math/AABBInt.java
@@ -49,9 +49,9 @@ public final class AABBInt {
                 for (int z = this.minZ; z < this.maxZ; z++) {
                     func.processing(x, y, z, count);
                     count++;
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     public static interface RepeatFunc {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/BezierCurve.java b/src/api/ngtlib/jp/ngt/ngtlib/math/BezierCurve.java
index a5784af..3c03fb0 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/BezierCurve.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/math/BezierCurve.java
@@ -50,8 +50,8 @@ public final class BezierCurve implements ILine {
             if (distance < pd) {
                 pd = distance;
                 i = j;
-            }
-        }
+            } 
+        } 
         return (pd < Double.MAX_VALUE) ? i : -1;
     }
 
@@ -72,13 +72,13 @@ public final class BezierCurve implements ILine {
 
     private float getHomogenizedParameter(int n, int par2) {
         if (n < 4)
-            return 0.0F;
+            return 0.0F; 
         if (par2 <= 0)
-            return 0.0F;
+            return 0.0F; 
         if (par2 >= n)
-            return 1.0F;
+            return 1.0F; 
         if (this.normalizedParameters == null)
-            initNP();
+            initNP(); 
         int i0 = NGTMath.floor(par2 * 8192.0F / n);
         return this.normalizedParameters[i0];
     }
@@ -103,20 +103,20 @@ public final class BezierCurve implements ILine {
             q = getPointFromParameter(tt);
             dd[i] = dd[i - 1] + (float)getDistance(p[0], q[0], p[1], q[1]);
             p = q;
-        }
+        } 
         for (i = 1; i < 8193; i++)
-            dd[i] = dd[i] / dd[8192];
+            dd[i] = dd[i] / dd[8192]; 
         for (i = 0; i < 8192; i++) {
             float t = i / 8192.0F;
             int k = 0;
             for (k = 0; k < 8191; k++) {
                 if (dd[k] <= t && t <= dd[k + 1])
-                    break;
-            }
+                    break; 
+            } 
             float x = (t - dd[k]) / (dd[k + 1] - dd[k]);
             x = (k * (1.0F - x) + (1 + k) * x) * 1.2207031E-4F;
             this.normalizedParameters[i] = x;
-        }
+        } 
     }
 
     public double getLength() {
@@ -139,7 +139,7 @@ public final class BezierCurve implements ILine {
             q = getPointFromParameter(tt);
             dd[i] = dd[i - 1] + getDistance(p[0], q[0], p[1], q[1]);
             p = q;
-        }
+        } 
         return dd[n];
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/LinePosPool.java b/src/api/ngtlib/jp/ngt/ngtlib/math/LinePosPool.java
index 0b224f9..0fa417d 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/LinePosPool.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/math/LinePosPool.java
@@ -12,7 +12,7 @@ public final class LinePosPool {
         for (int i = 0; i < 512; i++) {
             array1[i] = new double[2];
             array2[i] = new double[2];
-        }
+        } 
         POOL = (ObjectPool)new ObjectPool<>(new double[][][] { array1, array2 });
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/NGTMath.java b/src/api/ngtlib/jp/ngt/ngtlib/math/NGTMath.java
index ab06caa..abf2157 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/NGTMath.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/math/NGTMath.java
@@ -21,7 +21,7 @@ public final class NGTMath {
         TO_RAD = 0.017453292519943295D;
         TO_DEG = 57.29577951308232D;
         for (int i = 0; i < RAND_TABLE.length; i++)
-            RAND_TABLE[i] = RANDOM.nextDouble();
+            RAND_TABLE[i] = RANDOM.nextDouble(); 
     }
 
     public static float toDegrees(float par1) {
@@ -43,9 +43,9 @@ public final class NGTMath {
     public static double normalizeAngle(double par1) {
         double d0 = par1;
         while (d0 >= 360.0D)
-            d0 -= 360.0D;
+            d0 -= 360.0D; 
         while (d0 < 0.0D)
-            d0 += 360.0D;
+            d0 += 360.0D; 
         return d0;
     }
 
@@ -56,47 +56,47 @@ public final class NGTMath {
 
     public static int getRandomInt(int n) {
         if (n <= 0)
-            throw new IllegalArgumentException("n must be positive");
+            throw new IllegalArgumentException("n must be positive"); 
         RAND_COUNT = (RAND_COUNT + 1) % RAND_TABLE.length;
         return (int)((float)RAND_TABLE[RAND_COUNT] * n);
     }
 
     public static int getIntFromString(String par1, int par2, int par3, int par4) {
         if (par1 == null)
-            return par4;
+            return par4; 
         try {
             int num = Integer.valueOf(par1).intValue();
             if (num < par2)
-                return par2;
+                return par2; 
             if (num > par3)
-                return par3;
+                return par3; 
             return num;
         } catch (NumberFormatException e) {
             return par4;
-        }
+        } 
     }
 
     public static float getFloatFromString(String par1, float par2, float par3, float par4) {
         if (par1 == null)
-            return par4;
+            return par4; 
         try {
             float num = Float.valueOf(par1).floatValue();
             if (num < par2)
-                return par2;
+                return par2; 
             if (num > par3)
-                return par3;
+                return par3; 
             return num;
         } catch (NumberFormatException e) {
             return par4;
-        }
+        } 
     }
 
     public static double pow(double par1, int par2) {
         if (par2 <= 0)
-            return 1.0D;
+            return 1.0D; 
         double d0 = 1.0D;
         for (int i = 0; i < par2; i++)
-            d0 *= par1;
+            d0 *= par1; 
         return d0;
     }
 
@@ -174,7 +174,7 @@ public final class NGTMath {
         if (n > 0) {
             value = (value + x0 / value) * 0.5D;
             return sqrtX(value, x0, --n);
-        }
+        } 
         return value;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/PerlinNoise.java b/src/api/ngtlib/jp/ngt/ngtlib/math/PerlinNoise.java
index 0c8bb3c..00c4867 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/PerlinNoise.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/math/PerlinNoise.java
@@ -11,7 +11,7 @@ public final class PerlinNoise {
             maxValue += amplitude;
             amplitude *= persistence;
             frequency *= 2.0D;
-        }
+        } 
         return total / maxValue;
     }
 
@@ -27,13 +27,13 @@ public final class PerlinNoise {
         double w = fade(z);
         int A = p[X] + Y, AA = p[A] + Z, AB = p[A + 1] + Z;
         int B = p[X + 1] + Y, BA = p[B] + Z, BB = p[B + 1] + Z;
-        return lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),
-                        grad(p[BA], x - 1.0D, y, z)),
-                    lerp(u, grad(p[AB], x, y - 1.0D, z),
-                        grad(p[BB], x - 1.0D, y - 1.0D, z))),
-                lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1.0D),
-                        grad(p[BA + 1], x - 1.0D, y, z - 1.0D)),
-                    lerp(u, grad(p[AB + 1], x, y - 1.0D, z - 1.0D),
+        return lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z), 
+                        grad(p[BA], x - 1.0D, y, z)), 
+                    lerp(u, grad(p[AB], x, y - 1.0D, z), 
+                        grad(p[BB], x - 1.0D, y - 1.0D, z))), 
+                lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1.0D), 
+                        grad(p[BA + 1], x - 1.0D, y, z - 1.0D)), 
+                    lerp(u, grad(p[AB + 1], x, y - 1.0D, z - 1.0D), 
                         grad(p[BB + 1], x - 1.0D, y - 1.0D, z - 1.0D))));
     }
 
@@ -54,38 +54,38 @@ public final class PerlinNoise {
 
     private static final int[] p = new int[512];
 
-    private static final int[] permutation = new int[] {
-            151, 160, 137, 91, 90, 15, 131, 13, 201, 95,
-            96, 53, 194, 233, 7, 225, 140, 36, 103, 30,
-            69, 142, 8, 99, 37, 240, 21, 10, 23, 190,
-            6, 148, 247, 120, 234, 75, 0, 26, 197, 62,
-            94, 252, 219, 203, 117, 35, 11, 32, 57, 177,
-            33, 88, 237, 149, 56, 87, 174, 20, 125, 136,
-            171, 168, 68, 175, 74, 165, 71, 134, 139, 48,
-            27, 166, 77, 146, 158, 231, 83, 111, 229, 122,
-            60, 211, 133, 230, 220, 105, 92, 41, 55, 46,
-            245, 40, 244, 102, 143, 54, 65, 25, 63, 161,
-            1, 216, 80, 73, 209, 76, 132, 187, 208, 89,
-            18, 169, 200, 196, 135, 130, 116, 188, 159, 86,
-            164, 100, 109, 198, 173, 186, 3, 64, 52, 217,
-            226, 250, 124, 123, 5, 202, 38, 147, 118, 126,
-            255, 82, 85, 212, 207, 206, 59, 227, 47, 16,
-            58, 17, 182, 189, 28, 42, 223, 183, 170, 213,
-            119, 248, 152, 2, 44, 154, 163, 70, 221, 153,
-            101, 155, 167, 43, 172, 9, 129, 22, 39, 253,
-            19, 98, 108, 110, 79, 113, 224, 232, 178, 185,
-            112, 104, 218, 246, 97, 228, 251, 34, 242, 193,
-            238, 210, 144, 12, 191, 179, 162, 241, 81, 51,
-            145, 235, 249, 14, 239, 107, 49, 192, 214, 31,
-            181, 199, 106, 157, 184, 84, 204, 176, 115, 121,
-            50, 45, 127, 4, 150, 254, 138, 236, 205, 93,
-            222, 114, 67, 29, 24, 72, 243, 141, 128, 195,
+    private static final int[] permutation = new int[] { 
+            151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 
+            96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 
+            69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 
+            6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 
+            94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 
+            33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 
+            171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 
+            27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 
+            60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 
+            245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 
+            1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 
+            18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 
+            164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 
+            226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 
+            255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 
+            58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 
+            119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 
+            101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 
+            19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 
+            112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 
+            238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 
+            145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 
+            181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 
+            50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 
+            222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 
             78, 66, 215, 61, 156, 180 };
 
     static {
         for (int i = 0; i < 256; i++) {
             p[i] = permutation[i];
             p[256 + i] = permutation[i];
-        }
+        } 
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/PooledVec3.java b/src/api/ngtlib/jp/ngt/ngtlib/math/PooledVec3.java
index 91b174b..4d1e4c3 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/PooledVec3.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/math/PooledVec3.java
@@ -13,7 +13,7 @@ public final class PooledVec3 extends Vec3 {
         for (int i = 0; i < 32; i++) {
             array1[i] = new PooledVec3(0.0D, 0.0D, 0.0D);
             array2[i] = new PooledVec3(0.0D, 0.0D, 0.0D);
-        }
+        } 
         POOL = new ObjectPool<>(new PooledVec3[][] { array1, array2 });
     }
 
@@ -65,15 +65,15 @@ public final class PooledVec3 extends Vec3 {
 
     public Vec3 crossProduct(Vec3 par1) {
         return create(
-                getY() * par1.getZ() - getZ() * par1.getY(),
-                getZ() * par1.getX() - getX() * par1.getZ(),
+                getY() * par1.getZ() - getZ() * par1.getY(), 
+                getZ() * par1.getX() - getX() * par1.getZ(), 
                 getX() * par1.getY() - getY() * par1.getX());
     }
 
     public Vec3 normalize() {
         double length = length();
         if (length < 1.0E-4D)
-            return create(0.0D, 0.0D, 0.0D);
+            return create(0.0D, 0.0D, 0.0D); 
         double d1 = 1.0D / length;
         return create(getX() * d1, getY() * d1, getZ() * d1);
     }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/StraightLine.java b/src/api/ngtlib/jp/ngt/ngtlib/math/StraightLine.java
index 9461718..adae129 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/StraightLine.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/math/StraightLine.java
@@ -30,7 +30,7 @@ public final class StraightLine implements ILine {
         } else {
             this.slope = dy / dx;
             this.intercept = p2 - this.slope * p1;
-        }
+        } 
         this.length = Math.sqrt(dx * dx + dy * dy);
         this.slopeAngle = Math.atan2(dy, dx);
     }
@@ -52,7 +52,7 @@ public final class StraightLine implements ILine {
             double a21 = 1.0D / (this.slope * this.slope + 1.0D);
             double x0 = (x + this.slope * y - this.slope * this.intercept) * a21;
             t = (x0 - this.startX) / (this.endX - this.startX);
-        }
+        } 
         return NGTMath.floor(t * par1);
     }
 
@@ -68,7 +68,7 @@ public final class StraightLine implements ILine {
         if (obj instanceof StraightLine) {
             StraightLine line = (StraightLine)obj;
             return (this.startX == line.startX && this.startY == line.startY && this.endX == line.endX && this.endY == line.endY);
-        }
+        } 
         return false;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/Vec3.java b/src/api/ngtlib/jp/ngt/ngtlib/math/Vec3.java
index 9349552..9c27476 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/math/Vec3.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/math/Vec3.java
@@ -101,7 +101,7 @@ public class Vec3 {
     public Vec3 normalize() {
         double length = length();
         if (length < 1.0E-4D)
-            return new Vec3(0.0D, 0.0D, 0.0D);
+            return new Vec3(0.0D, 0.0D, 0.0D); 
         double d1 = 1.0D / length;
         return new Vec3(this.x * d1, this.y * d1, this.z * d1);
     }
@@ -119,7 +119,7 @@ public class Vec3 {
         if (obj instanceof Vec3) {
             Vec3 vec = (Vec3)obj;
             return (vec.getX() == getX() && vec.getY() == getY() && vec.getZ() == getZ());
-        }
+        } 
         return false;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/network/PacketCustom.java b/src/api/ngtlib/jp/ngt/ngtlib/network/PacketCustom.java
index 77a38b0..3398531 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/network/PacketCustom.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/network/PacketCustom.java
@@ -25,7 +25,7 @@ public abstract class PacketCustom implements IMessage {
         this.targetData = new NBTTagCompound();
         BlockPos pos = tileEntity.getPos();
         if (pos.getY() <= 0)
-            throw new IllegalArgumentException("TileEntity's position is invalid");
+            throw new IllegalArgumentException("TileEntity's position is invalid"); 
         this.targetData.setInteger("PosX", pos.getX());
         this.targetData.setInteger("PosY", pos.getY());
         this.targetData.setInteger("PosZ", pos.getZ());
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/network/PacketNBT.java b/src/api/ngtlib/jp/ngt/ngtlib/network/PacketNBT.java
index 259cd55..d45d1af 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/network/PacketNBT.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/network/PacketNBT.java
@@ -78,22 +78,22 @@ public class PacketNBT extends PacketCustom {
 
     protected boolean onGetPacket(World world) {
         if (world == null)
-            return false;
+            return false; 
         byte type = this.nbtData.getByte("DataType");
         if (type == 0) {
             Entity entity = getEntity(world);
             if (entity != null) {
                 entity.readFromNBT(this.nbtData);
                 return true;
-            }
+            } 
         } else if (type == 1) {
             TileEntity tileEntity = getTileEntity(world);
             if (tileEntity != null) {
                 tileEntity.readFromNBT(this.nbtData);
                 if (!world.isRemote)
-                    tileEntity.markDirty();
+                    tileEntity.markDirty(); 
                 return true;
-            }
+            } 
         } else if (type == 2) {
             Entity entity = getEntity(world);
             if (entity instanceof EntityPlayer) {
@@ -103,11 +103,11 @@ public class PacketNBT extends PacketCustom {
                     NBTTagCompound data = this.nbtData.getCompoundTag("TagData");
                     stack.setTagCompound(data);
                     if (entity instanceof EntityPlayerMP)
-                        updateCurrentItem((EntityPlayerMP)entity);
+                        updateCurrentItem((EntityPlayerMP)entity); 
                     return true;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         return false;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/network/PacketNBTHandlerClient.java b/src/api/ngtlib/jp/ngt/ngtlib/network/PacketNBTHandlerClient.java
index 62872c7..1ed7e60 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/network/PacketNBTHandlerClient.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/network/PacketNBTHandlerClient.java
@@ -12,14 +12,14 @@ import net.minecraftforge.fml.relauncher.Side;
 public class PacketNBTHandlerClient implements IMessageHandler<PacketNBT, IMessage> {
     public IMessage onMessage(final PacketNBT message, MessageContext ctx) {
         if (message.nbtData == null)
-            return null;
+            return null; 
         final World world = NGTUtil.getClientWorld();
         if (message.nbtData.getBoolean("ToClient"))
             TickProcessQueue.getInstance(Side.CLIENT).add(new TickProcessEntry() {
                         public boolean process(World par1) {
                             return message.onGetPacket(world);
                         }
-                    },  50, 5);
+                    },  50, 5); 
         return null;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/network/PacketNBTHandlerServer.java b/src/api/ngtlib/jp/ngt/ngtlib/network/PacketNBTHandlerServer.java
index 987b6e5..1a18cfa 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/network/PacketNBTHandlerServer.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/network/PacketNBTHandlerServer.java
@@ -10,7 +10,7 @@ public class PacketNBTHandlerServer implements IMessageHandler<PacketNBT, IMessa
         if (!message.nbtData.getBoolean("ToClient")) {
             World world = (ctx.getServerHandler()).player.world;
             message.onGetPacket(world);
-        }
+        } 
         return null;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/network/PacketNoticeHandlerClient.java b/src/api/ngtlib/jp/ngt/ngtlib/network/PacketNoticeHandlerClient.java
index e84a114..8e2b13a 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/network/PacketNoticeHandlerClient.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/network/PacketNoticeHandlerClient.java
@@ -10,7 +10,7 @@ public class PacketNoticeHandlerClient implements IMessageHandler<PacketNotice,
     public IMessage onMessage(PacketNotice message, MessageContext ctx) {
         if (message.type == 1)
             if (message.notice.equals("regKey"))
-                NGTCertificate.writePlayerData(NGTCore.proxy.getUserName());
+                NGTCertificate.writePlayerData(NGTCore.proxy.getUserName());  
         return null;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/network/PacketNoticeHandlerServer.java b/src/api/ngtlib/jp/ngt/ngtlib/network/PacketNoticeHandlerServer.java
index 77f4154..6fe498f 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/network/PacketNoticeHandlerServer.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/network/PacketNoticeHandlerServer.java
@@ -7,7 +7,7 @@ import net.minecraftforge.fml.common.network.simpleimpl.MessageContext;
 public class PacketNoticeHandlerServer implements IMessageHandler<PacketNotice, IMessage> {
     public IMessage onMessage(PacketNotice message, MessageContext ctx) {
         if (message.type == 0)
-            if (message.notice.equals("isConnected"));
+            if (message.notice.equals("isConnected")); 
         return null;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/network/PacketProtection.java b/src/api/ngtlib/jp/ngt/ngtlib/network/PacketProtection.java
index e3cb5a8..962450a 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/network/PacketProtection.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/network/PacketProtection.java
@@ -35,7 +35,7 @@ public class PacketProtection implements IMessage, IMessageHandler<PacketProtect
     public IMessage onMessage(PacketProtection message, MessageContext ctx) {
         World world = NGTUtil.getClientWorld();
         if (world == null)
-            return null;
+            return null; 
         ProtectionManager.INSTANCE.receivePacket(message.name, message.data);
         return null;
     }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/protection/ProtectionData.java b/src/api/ngtlib/jp/ngt/ngtlib/protection/ProtectionData.java
index 84aa61c..28bfe2b 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/protection/ProtectionData.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/protection/ProtectionData.java
@@ -22,7 +22,7 @@ public class ProtectionData extends WorldSavedData {
             NBTTagCompound tagElement = tagList.getCompoundTagAt(i);
             String objName = tagElement.getString("ObjName");
             this.protectedObjs.put(objName, tagElement);
-        }
+        } 
     }
 
     public NBTTagCompound writeToNBT(NBTTagCompound nbt) {
@@ -33,7 +33,7 @@ public class ProtectionData extends WorldSavedData {
             NBTTagCompound tagElement = entry.getValue();
             tagElement.setString("ObjName", entry.getKey());
             tagList.appendTag((NBTBase)tagElement);
-        }
+        } 
         nbt.setTag("Objects", (NBTBase)tagList);
         return nbt;
     }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/protection/ProtectionManager.java b/src/api/ngtlib/jp/ngt/ngtlib/protection/ProtectionManager.java
index afe69fd..b911916 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/protection/ProtectionManager.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/protection/ProtectionManager.java
@@ -33,7 +33,7 @@ public class ProtectionManager {
 
     public ProtectionData getLockObj() {
         if (this.lockObjs == null)
-            this.lockObjs = new ProtectionData("ProtectedObjects");
+            this.lockObjs = new ProtectionData("ProtectedObjects"); 
         return this.lockObjs;
     }
 
@@ -60,13 +60,13 @@ public class ProtectionManager {
     public boolean rightClickObject(EntityPlayer player, Object target) {
         NBTTagCompound nbt = getKeyNBT(player);
         if (nbt != null)
-            return useKey(player, nbt, target);
+            return useKey(player, nbt, target); 
         return getLockState(player, target, "Uneditable");
     }
 
     private boolean useKey(EntityPlayer player, NBTTagCompound keyNBT, Object target) {
         if (player.world.isRemote)
-            return true;
+            return true; 
         String name = getObjectName(target);
         String id2 = keyNBT.getString("ID");
         if (getLockObj().hasObject(name)) {
@@ -77,10 +77,10 @@ public class ProtectionManager {
                 if (flag) {
                     unlockObject(player, name);
                     return true;
-                }
+                } 
             } else {
                 NGTLog.sendChatMessage((ICommandSender)player, "Invalid key.", new Object[0]);
-            }
+            } 
         } else {
             int lockType = 0;
             if (target instanceof Lockable) {
@@ -88,13 +88,13 @@ public class ProtectionManager {
                 lockType = lockable.lock(player, id2) ? lockable.getProhibitedAction() : 0;
             } else {
                 lockType = 3;
-            }
+            } 
             if (lockType > 0) {
                 lockObject(player, name, id2, lockType);
                 return true;
-            }
+            } 
             NGTLog.sendChatMessage((ICommandSender)player, "Unable to lock this object.", new Object[0]);
-        }
+        } 
         return false;
     }
 
@@ -105,8 +105,8 @@ public class ProtectionManager {
             if (nbt.getBoolean(state)) {
                 NGTLog.sendChatMessage((ICommandSender)player, "This object is locked. -> %s", new Object[] { name });
                 return true;
-            }
-        }
+            } 
+        } 
         return false;
     }
 
@@ -115,16 +115,16 @@ public class ProtectionManager {
         TileEntity tileEntity = BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
         Object target = (tileEntity != null) ? tileEntity : block;
         if (target instanceof Lockable)
-            target = ((Lockable)target).getTarget(world, x, y, z);
+            target = ((Lockable)target).getTarget(world, x, y, z); 
         if (target instanceof Block)
-            target = new int[] { x, y, z };
+            target = new int[] { x, y, z }; 
         return target;
     }
 
     private Object getTarget(Entity entity) {
         Object target = entity;
         if (entity instanceof Lockable)
-            target = ((Lockable)entity).getTarget(entity.world, 0, -1, 0);
+            target = ((Lockable)entity).getTarget(entity.world, 0, -1, 0); 
         return target;
     }
 
@@ -132,16 +132,16 @@ public class ProtectionManager {
         if (object instanceof int[]) {
             int[] pos = (int[])object;
             return String.format("Block:%d,%d,%d", new Object[] { Integer.valueOf(pos[0]), Integer.valueOf(pos[1]), Integer.valueOf(pos[2]) });
-        }
+        } 
         if (object instanceof TileEntity) {
             TileEntity tileEntity = (TileEntity)object;
             return String.format("TileEntity:%s", new Object[] { tileEntity.getPos().toString() });
-        }
+        } 
         if (object instanceof Entity) {
             Entity entity = (Entity)object;
             UUID uuid = entity.getUniqueID();
             return String.format("Entity:%s", new Object[] { uuid.toString() });
-        }
+        } 
         return null;
     }
 
@@ -149,7 +149,7 @@ public class ProtectionManager {
         ItemStack stack = player.inventory.getCurrentItem();
         if (stack != null && stack.getItem() == NGTCore.protection_key)
             if (stack.hasTagCompound())
-                return stack.getTagCompound();
+                return stack.getTagCompound();  
         return null;
     }
 
@@ -175,8 +175,8 @@ public class ProtectionManager {
             if (this.lockObjs == null) {
                 this.lockObjs = new ProtectionData("ProtectedObjects");
                 world.setData("ProtectedObjects", this.lockObjs);
-            }
-        }
+            } 
+        } 
     }
 
     public void sendDataToClient() {
@@ -185,7 +185,7 @@ public class ProtectionManager {
         while (iterator.hasNext()) {
             Map.Entry<String, NBTTagCompound> entry = iterator.next();
             NGTCore.NETWORK_WRAPPER.sendToAll(new PacketProtection(entry.getKey(), entry.getValue()));
-        }
+        } 
     }
 
     public void receivePacket(String name, NBTTagCompound data) {
@@ -193,6 +193,6 @@ public class ProtectionManager {
             getLockObj().setObject(name, data);
         } else {
             getLockObj().removeObject(name);
-        }
+        } 
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/BasicRenderFactory.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/BasicRenderFactory.java
index ec085b9..9aa566f 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/BasicRenderFactory.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/BasicRenderFactory.java
@@ -24,6 +24,6 @@ public class BasicRenderFactory<T extends Entity> implements IRenderFactory {
         } catch (ReflectiveOperationException e) {
             e.printStackTrace();
             return null;
-        }
+        } 
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/GLHelper.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/GLHelper.java
index 3a9fbc0..8170abf 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/GLHelper.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/GLHelper.java
@@ -45,10 +45,10 @@ public final class GLHelper {
         int i = GL11.glGetError();
         if (i != 0) {
             if (par2)
-                return;
+                return; 
             NGTLog.debug("GL_ERROR@" + par1);
             NGTLog.debug(i + ": " + Util.translateGLErrorString(i));
-        }
+        } 
     }
 
     public static void initGLList() {
@@ -56,10 +56,10 @@ public final class GLHelper {
         if (!INSTANCE.activeGLLists.isEmpty()) {
             for (GLObject dl : INSTANCE.activeGLLists) {
                 if (GL11.glIsList(dl.value))
-                    dl.setDelFlag(true);
-            }
+                    dl.setDelFlag(true); 
+            } 
             INSTANCE.activeGLLists.clear();
-        }
+        } 
         LOCKER.unlock();
     }
 
@@ -69,7 +69,7 @@ public final class GLHelper {
             INSTANCE.activeGLLists.remove(par1);
             INSTANCE.deleteGLLists.add(par1);
             par1.setDelFlag(true);
-        }
+        } 
         LOCKER.unlock();
     }
 
@@ -80,7 +80,7 @@ public final class GLHelper {
             value = par1.value;
         } else {
             value = GL11.glGenLists(1);
-        }
+        } 
         DisplayList list = new DisplayList(value);
         INSTANCE.activeGLLists.add(list);
         LOCKER.unlock();
@@ -117,10 +117,10 @@ public final class GLHelper {
     public static boolean isValid(GLObject par1) {
         if (par1 != null) {
             if (par1.delFlag)
-                return false;
+                return false; 
             if (par1.value > 0)
-                return true;
-        }
+                return true; 
+        } 
         return false;
     }
 
@@ -196,24 +196,24 @@ public final class GLHelper {
         } catch (Exception e) {
             e.printStackTrace();
             return -1;
-        }
+        } 
         if (vertShader == 0 || fragShader == 0)
-            return -1;
+            return -1; 
         int program = ARBShaderObjects.glCreateProgramObjectARB();
         if (program == 0)
-            return -1;
+            return -1; 
         ARBShaderObjects.glAttachObjectARB(program, vertShader);
         ARBShaderObjects.glAttachObjectARB(program, fragShader);
         ARBShaderObjects.glLinkProgramARB(program);
         if (ARBShaderObjects.glGetObjectParameteriARB(program, 35714) == 0) {
             NGTLog.debug(getShaderErrorLog(program));
             return -1;
-        }
+        } 
         ARBShaderObjects.glValidateProgramARB(program);
         if (ARBShaderObjects.glGetObjectParameteriARB(program, 35715) == 0) {
             NGTLog.debug(getShaderErrorLog(program));
             return -1;
-        }
+        } 
         return program;
     }
 
@@ -222,7 +222,7 @@ public final class GLHelper {
         try {
             shader = ARBShaderObjects.glCreateShaderObjectARB(shaderType);
             if (shader == 0)
-                return 0;
+                return 0; 
             byte[] bytes = shaderObj.getBytes();
             ByteBuffer buffer = GLAllocation.createDirectByteBuffer(bytes.length);
             buffer.put(bytes);
@@ -230,16 +230,16 @@ public final class GLHelper {
             ARBShaderObjects.glShaderSourceARB(shader, buffer);
             ARBShaderObjects.glCompileShaderARB(shader);
             if (ARBShaderObjects.glGetObjectParameteriARB(shader, 35713) == 0)
-                throw new RuntimeException(getShaderErrorLog(shader));
+                throw new RuntimeException(getShaderErrorLog(shader)); 
             return shader;
         } catch (Exception exc) {
             ARBShaderObjects.glDeleteObjectARB(shader);
             throw exc;
-        }
+        } 
     }
 
     private static String getShaderErrorLog(int shader) {
-        return ARBShaderObjects.glGetInfoLogARB(shader,
+        return ARBShaderObjects.glGetInfoLogARB(shader, 
                 ARBShaderObjects.glGetObjectParameteriARB(shader, 35716));
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/ModelSolid.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/ModelSolid.java
index 8436e34..30ae0c4 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/ModelSolid.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/ModelSolid.java
@@ -1,24 +1,24 @@
 package jp.ngt.ngtlib.renderer;
 
 public final class ModelSolid {
-    public static final float[][] SPHERE = new float[][] {
-            { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F },
-            { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -0.92388F, 0.382683F }, { 0.146447F, -0.92388F, 0.353553F }, { 0.270598F, -0.92388F, 0.270598F }, { 0.353553F, -0.92388F, 0.146447F },
-            { 0.382683F, -0.92388F, 0.0F }, { 0.353553F, -0.92388F, -0.146447F }, { 0.270598F, -0.92388F, -0.270598F }, { 0.146447F, -0.92388F, -0.353553F }, { 0.0F, -0.92388F, -0.382683F }, { -0.146447F, -0.92388F, -0.353553F }, { -0.270598F, -0.92388F, -0.270598F }, { -0.353553F, -0.92388F, -0.146447F }, { -0.382683F, -0.92388F, 0.0F }, { -0.353553F, -0.92388F, 0.146447F },
-            { -0.270598F, -0.92388F, 0.270598F }, { -0.146447F, -0.92388F, 0.353553F }, { 0.0F, -0.707107F, 0.707107F }, { 0.270598F, -0.707107F, 0.653281F }, { 0.5F, -0.707107F, 0.5F }, { 0.653281F, -0.707107F, 0.270598F }, { 0.707107F, -0.707107F, 0.0F }, { 0.653281F, -0.707107F, -0.270598F }, { 0.5F, -0.707107F, -0.5F }, { 0.270598F, -0.707107F, -0.653281F },
-            { 0.0F, -0.707107F, -0.707107F }, { -0.270598F, -0.707107F, -0.653281F }, { -0.5F, -0.707107F, -0.5F }, { -0.653281F, -0.707107F, -0.270598F }, { -0.707107F, -0.707107F, 0.0F }, { -0.653281F, -0.707107F, 0.270598F }, { -0.5F, -0.707107F, 0.5F }, { -0.270598F, -0.707107F, 0.653281F }, { 0.0F, -0.382683F, 0.92388F }, { 0.353553F, -0.382683F, 0.853553F },
-            { 0.653281F, -0.382683F, 0.653281F }, { 0.853553F, -0.382683F, 0.353553F }, { 0.92388F, -0.382683F, 0.0F }, { 0.853553F, -0.382683F, -0.353553F }, { 0.653281F, -0.382683F, -0.653281F }, { 0.353553F, -0.382683F, -0.853553F }, { 0.0F, -0.382683F, -0.92388F }, { -0.353553F, -0.382683F, -0.853553F }, { -0.653281F, -0.382683F, -0.653281F }, { -0.853553F, -0.382683F, -0.353553F },
-            { -0.92388F, -0.382683F, 0.0F }, { -0.853553F, -0.382683F, 0.353553F }, { -0.653281F, -0.382683F, 0.653281F }, { -0.353553F, -0.382683F, 0.853553F }, { 0.0F, 0.0F, 1.0F }, { 0.382683F, 0.0F, 0.92388F }, { 0.707107F, 0.0F, 0.707107F }, { 0.92388F, 0.0F, 0.382683F }, { 1.0F, 0.0F, 0.0F }, { 0.92388F, 0.0F, -0.382683F },
-            { 0.707107F, 0.0F, -0.707107F }, { 0.382683F, 0.0F, -0.92388F }, { 0.0F, 0.0F, -1.0F }, { -0.382683F, 0.0F, -0.92388F }, { -0.707107F, 0.0F, -0.707107F }, { -0.92388F, 0.0F, -0.382683F }, { -1.0F, 0.0F, 0.0F }, { -0.92388F, 0.0F, 0.382683F }, { -0.707107F, 0.0F, 0.707107F }, { -0.382683F, 0.0F, 0.92388F },
-            { 0.0F, 0.382683F, 0.92388F }, { 0.353553F, 0.382683F, 0.853553F }, { 0.653281F, 0.382683F, 0.653281F }, { 0.853553F, 0.382683F, 0.353553F }, { 0.92388F, 0.382683F, 0.0F }, { 0.853553F, 0.382683F, -0.353553F }, { 0.653281F, 0.382683F, -0.653281F }, { 0.353553F, 0.382683F, -0.853553F }, { 0.0F, 0.382683F, -0.92388F }, { -0.353553F, 0.382683F, -0.853553F },
-            { -0.653281F, 0.382683F, -0.653281F }, { -0.853553F, 0.382683F, -0.353553F }, { -0.92388F, 0.382683F, 0.0F }, { -0.853553F, 0.382683F, 0.353553F }, { -0.653281F, 0.382683F, 0.653281F }, { -0.353553F, 0.382683F, 0.853553F }, { 0.0F, 0.707107F, 0.707107F }, { 0.270598F, 0.707107F, 0.653281F }, { 0.5F, 0.707107F, 0.5F }, { 0.653281F, 0.707107F, 0.270598F },
-            { 0.707107F, 0.707107F, 0.0F }, { 0.653281F, 0.707107F, -0.270598F }, { 0.5F, 0.707107F, -0.5F }, { 0.270598F, 0.707107F, -0.653281F }, { 0.0F, 0.707107F, -0.707107F }, { -0.270598F, 0.707107F, -0.653281F }, { -0.5F, 0.707107F, -0.5F }, { -0.653281F, 0.707107F, -0.270598F }, { -0.707107F, 0.707107F, 0.0F }, { -0.653281F, 0.707107F, 0.270598F },
-            { -0.5F, 0.707107F, 0.5F }, { -0.270598F, 0.707107F, 0.653281F }, { 0.0F, 0.92388F, 0.382683F }, { 0.146447F, 0.92388F, 0.353553F }, { 0.270598F, 0.92388F, 0.270598F }, { 0.353553F, 0.92388F, 0.146447F }, { 0.382683F, 0.92388F, 0.0F }, { 0.353553F, 0.92388F, -0.146447F }, { 0.270598F, 0.92388F, -0.270598F }, { 0.146447F, 0.92388F, -0.353553F },
-            { 0.0F, 0.92388F, -0.382683F }, { -0.146447F, 0.92388F, -0.353553F }, { -0.270598F, 0.92388F, -0.270598F }, { -0.353553F, 0.92388F, -0.146447F }, { -0.382683F, 0.92388F, 0.0F }, { -0.353553F, 0.92388F, 0.146447F }, { -0.270598F, 0.92388F, 0.270598F }, { -0.146447F, 0.92388F, 0.353553F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F },
-            { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F },
+    public static final float[][] SPHERE = new float[][] { 
+            { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, 
+            { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -0.92388F, 0.382683F }, { 0.146447F, -0.92388F, 0.353553F }, { 0.270598F, -0.92388F, 0.270598F }, { 0.353553F, -0.92388F, 0.146447F }, 
+            { 0.382683F, -0.92388F, 0.0F }, { 0.353553F, -0.92388F, -0.146447F }, { 0.270598F, -0.92388F, -0.270598F }, { 0.146447F, -0.92388F, -0.353553F }, { 0.0F, -0.92388F, -0.382683F }, { -0.146447F, -0.92388F, -0.353553F }, { -0.270598F, -0.92388F, -0.270598F }, { -0.353553F, -0.92388F, -0.146447F }, { -0.382683F, -0.92388F, 0.0F }, { -0.353553F, -0.92388F, 0.146447F }, 
+            { -0.270598F, -0.92388F, 0.270598F }, { -0.146447F, -0.92388F, 0.353553F }, { 0.0F, -0.707107F, 0.707107F }, { 0.270598F, -0.707107F, 0.653281F }, { 0.5F, -0.707107F, 0.5F }, { 0.653281F, -0.707107F, 0.270598F }, { 0.707107F, -0.707107F, 0.0F }, { 0.653281F, -0.707107F, -0.270598F }, { 0.5F, -0.707107F, -0.5F }, { 0.270598F, -0.707107F, -0.653281F }, 
+            { 0.0F, -0.707107F, -0.707107F }, { -0.270598F, -0.707107F, -0.653281F }, { -0.5F, -0.707107F, -0.5F }, { -0.653281F, -0.707107F, -0.270598F }, { -0.707107F, -0.707107F, 0.0F }, { -0.653281F, -0.707107F, 0.270598F }, { -0.5F, -0.707107F, 0.5F }, { -0.270598F, -0.707107F, 0.653281F }, { 0.0F, -0.382683F, 0.92388F }, { 0.353553F, -0.382683F, 0.853553F }, 
+            { 0.653281F, -0.382683F, 0.653281F }, { 0.853553F, -0.382683F, 0.353553F }, { 0.92388F, -0.382683F, 0.0F }, { 0.853553F, -0.382683F, -0.353553F }, { 0.653281F, -0.382683F, -0.653281F }, { 0.353553F, -0.382683F, -0.853553F }, { 0.0F, -0.382683F, -0.92388F }, { -0.353553F, -0.382683F, -0.853553F }, { -0.653281F, -0.382683F, -0.653281F }, { -0.853553F, -0.382683F, -0.353553F }, 
+            { -0.92388F, -0.382683F, 0.0F }, { -0.853553F, -0.382683F, 0.353553F }, { -0.653281F, -0.382683F, 0.653281F }, { -0.353553F, -0.382683F, 0.853553F }, { 0.0F, 0.0F, 1.0F }, { 0.382683F, 0.0F, 0.92388F }, { 0.707107F, 0.0F, 0.707107F }, { 0.92388F, 0.0F, 0.382683F }, { 1.0F, 0.0F, 0.0F }, { 0.92388F, 0.0F, -0.382683F }, 
+            { 0.707107F, 0.0F, -0.707107F }, { 0.382683F, 0.0F, -0.92388F }, { 0.0F, 0.0F, -1.0F }, { -0.382683F, 0.0F, -0.92388F }, { -0.707107F, 0.0F, -0.707107F }, { -0.92388F, 0.0F, -0.382683F }, { -1.0F, 0.0F, 0.0F }, { -0.92388F, 0.0F, 0.382683F }, { -0.707107F, 0.0F, 0.707107F }, { -0.382683F, 0.0F, 0.92388F }, 
+            { 0.0F, 0.382683F, 0.92388F }, { 0.353553F, 0.382683F, 0.853553F }, { 0.653281F, 0.382683F, 0.653281F }, { 0.853553F, 0.382683F, 0.353553F }, { 0.92388F, 0.382683F, 0.0F }, { 0.853553F, 0.382683F, -0.353553F }, { 0.653281F, 0.382683F, -0.653281F }, { 0.353553F, 0.382683F, -0.853553F }, { 0.0F, 0.382683F, -0.92388F }, { -0.353553F, 0.382683F, -0.853553F }, 
+            { -0.653281F, 0.382683F, -0.653281F }, { -0.853553F, 0.382683F, -0.353553F }, { -0.92388F, 0.382683F, 0.0F }, { -0.853553F, 0.382683F, 0.353553F }, { -0.653281F, 0.382683F, 0.653281F }, { -0.353553F, 0.382683F, 0.853553F }, { 0.0F, 0.707107F, 0.707107F }, { 0.270598F, 0.707107F, 0.653281F }, { 0.5F, 0.707107F, 0.5F }, { 0.653281F, 0.707107F, 0.270598F }, 
+            { 0.707107F, 0.707107F, 0.0F }, { 0.653281F, 0.707107F, -0.270598F }, { 0.5F, 0.707107F, -0.5F }, { 0.270598F, 0.707107F, -0.653281F }, { 0.0F, 0.707107F, -0.707107F }, { -0.270598F, 0.707107F, -0.653281F }, { -0.5F, 0.707107F, -0.5F }, { -0.653281F, 0.707107F, -0.270598F }, { -0.707107F, 0.707107F, 0.0F }, { -0.653281F, 0.707107F, 0.270598F }, 
+            { -0.5F, 0.707107F, 0.5F }, { -0.270598F, 0.707107F, 0.653281F }, { 0.0F, 0.92388F, 0.382683F }, { 0.146447F, 0.92388F, 0.353553F }, { 0.270598F, 0.92388F, 0.270598F }, { 0.353553F, 0.92388F, 0.146447F }, { 0.382683F, 0.92388F, 0.0F }, { 0.353553F, 0.92388F, -0.146447F }, { 0.270598F, 0.92388F, -0.270598F }, { 0.146447F, 0.92388F, -0.353553F }, 
+            { 0.0F, 0.92388F, -0.382683F }, { -0.146447F, 0.92388F, -0.353553F }, { -0.270598F, 0.92388F, -0.270598F }, { -0.353553F, 0.92388F, -0.146447F }, { -0.382683F, 0.92388F, 0.0F }, { -0.353553F, 0.92388F, 0.146447F }, { -0.270598F, 0.92388F, 0.270598F }, { -0.146447F, 0.92388F, 0.353553F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, 
+            { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, 
             { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F } };
 
-    public static final float[][] OCTAHEDRON = new float[][] {
-            { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, 0.0F, 1.0F }, { -1.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, -1.0F }, { 1.0F, 0.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F },
+    public static final float[][] OCTAHEDRON = new float[][] { 
+            { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, -1.0F, 0.0F }, { 0.0F, 0.0F, 1.0F }, { -1.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, -1.0F }, { 1.0F, 0.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F }, 
             { 0.0F, 1.0F, 0.0F }, { 0.0F, 1.0F, 0.0F } };
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTObjectRenderer.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/NGTObjectRenderer.java
index 305fb83..fd4a5bf 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTObjectRenderer.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/NGTObjectRenderer.java
@@ -41,18 +41,18 @@ public class NGTObjectRenderer {
     public void renderNGTObject(IBlockAccessNGT par1, NGTObject par2, boolean changeLightting, int mode, int pass) {
         GL11.glPushMatrix();
         if (changeLightting)
-            GLHelper.disableLighting();
+            GLHelper.disableLighting(); 
         GL11.glEnable(3008);
         boolean isSculpture = (mode == 1 && par2.xSize == par2.ySize && par2.xSize == par2.zSize);
         if (isSculpture) {
             float f0 = par2.xSize;
             GL11.glScalef(f0, f0, f0);
-        }
+        } 
         if (pass == 1) {
             GL11.glAlphaFunc(516, 0.1F);
             GL11.glEnable(3042);
             OpenGlHelper.glBlendFunc(770, 771, 1, 0);
-        }
+        } 
         NGTTessellator tessellator = NGTTessellator.instance;
         BufferBuilder renderer = null;
         if (isSculpture) {
@@ -60,10 +60,10 @@ public class NGTObjectRenderer {
         } else {
             int bufSize = par2.blockList.size() * 2621440 >> 12;
             if (bufSize <= 0)
-                bufSize = 4096;
+                bufSize = 4096; 
             renderer = new BufferBuilder(bufSize);
             renderer.begin(7, DefaultVertexFormats.BLOCK);
-        }
+        } 
         for (int i = 0; i < par2.xSize; i++) {
             for (int j = 0; j < par2.ySize; j++) {
                 for (int k = 0; k < par2.zSize; k++) {
@@ -74,27 +74,27 @@ public class NGTObjectRenderer {
                         renderFlag = (layer == BlockRenderLayer.SOLID || layer == BlockRenderLayer.CUTOUT_MIPPED || layer == BlockRenderLayer.CUTOUT);
                     } else if (pass == 1) {
                         renderFlag = (layer == BlockRenderLayer.TRANSLUCENT);
-                    }
+                    } 
                     if (set.toBlockState().getMaterial() != Material.AIR && renderFlag)
                         if (isSculpture) {
                             renderBlockAsSculpture(par1, set, par2, i, j, k);
                         } else {
                             renderBlockByRenderer(par1, renderer, set, i, j, k);
-                        }
-                }
-            }
-        }
+                        }  
+                } 
+            } 
+        } 
         if (isSculpture) {
             tessellator.draw();
         } else {
             renderer.finishDrawing();
             WorldVertexBufferUploader vboUploader = new WorldVertexBufferUploader();
             vboUploader.draw(renderer);
-        }
+        } 
         if (pass == 1)
-            GL11.glDisable(3042);
+            GL11.glDisable(3042); 
         if (changeLightting)
-            GLHelper.enableLighting();
+            GLHelper.enableLighting(); 
         GL11.glPopMatrix();
     }
 
@@ -131,7 +131,7 @@ public class NGTObjectRenderer {
             tessellator.addVertexWithUV(maxX, minY, minZ, maxU, maxV);
             tessellator.addVertexWithUV(maxX, minY, maxZ, maxU, minV);
             tessellator.addVertexWithUV(minX, minY, maxZ, minU, minV);
-        }
+        } 
         if (state.shouldSideBeRendered(accessor, new BlockPos(x, y + 1, z), EnumFacing.UP)) {
             TextureAtlasSprite icon = getIcon(block, meta, 1);
             float uDif = icon.getMaxU() - icon.getMinU();
@@ -145,7 +145,7 @@ public class NGTObjectRenderer {
             tessellator.addVertexWithUV(maxX, maxY, maxZ, minU, minV);
             tessellator.addVertexWithUV(maxX, maxY, minZ, minU, maxV);
             tessellator.addVertexWithUV(minX, maxY, minZ, maxU, maxV);
-        }
+        } 
         if (state.shouldSideBeRendered(accessor, new BlockPos(x, y, z - 1), EnumFacing.NORTH)) {
             TextureAtlasSprite icon = getIcon(block, meta, 2);
             float uDif = icon.getMaxU() - icon.getMinU();
@@ -159,7 +159,7 @@ public class NGTObjectRenderer {
             tessellator.addVertexWithUV(maxX, minY, minZ, minU, maxV);
             tessellator.addVertexWithUV(minX, minY, minZ, maxU, maxV);
             tessellator.addVertexWithUV(minX, maxY, minZ, maxU, minV);
-        }
+        } 
         if (state.shouldSideBeRendered(accessor, new BlockPos(x, y, z + 1), EnumFacing.SOUTH)) {
             TextureAtlasSprite icon = getIcon(block, meta, 3);
             float uDif = icon.getMaxU() - icon.getMinU();
@@ -173,7 +173,7 @@ public class NGTObjectRenderer {
             tessellator.addVertexWithUV(minX, minY, maxZ, minU, maxV);
             tessellator.addVertexWithUV(maxX, minY, maxZ, maxU, maxV);
             tessellator.addVertexWithUV(maxX, maxY, maxZ, maxU, minV);
-        }
+        } 
         if (state.shouldSideBeRendered(accessor, new BlockPos(x - 1, y, z), EnumFacing.WEST)) {
             TextureAtlasSprite icon = getIcon(block, meta, 4);
             float uDif = icon.getMaxU() - icon.getMinU();
@@ -187,7 +187,7 @@ public class NGTObjectRenderer {
             tessellator.addVertexWithUV(minX, minY, minZ, minU, maxV);
             tessellator.addVertexWithUV(minX, minY, maxZ, maxU, maxV);
             tessellator.addVertexWithUV(minX, maxY, maxZ, maxU, minV);
-        }
+        } 
         if (state.shouldSideBeRendered(accessor, new BlockPos(x + 1, y, z), EnumFacing.EAST)) {
             TextureAtlasSprite icon = getIcon(block, meta, 5);
             float uDif = icon.getMaxU() - icon.getMinU();
@@ -201,7 +201,7 @@ public class NGTObjectRenderer {
             tessellator.addVertexWithUV(maxX, minY, maxZ, minU, maxV);
             tessellator.addVertexWithUV(maxX, minY, minZ, maxU, maxV);
             tessellator.addVertexWithUV(maxX, maxY, minZ, maxU, minV);
-        }
+        } 
         GL11.glPopMatrix();
     }
 
@@ -216,11 +216,11 @@ public class NGTObjectRenderer {
         if (!par1.tileEntityLoaded) {
             loadTileEntity(par1);
             par1.tileEntityLoaded = true;
-        }
+        } 
         for (TileEntity tile : par1.getTileEntityList()) {
             BlockPos pos = tile.getPos();
             renderTileEntityByRenderer(tile, pos.getX(), pos.getY(), pos.getZ(), par8, pass);
-        }
+        } 
     }
 
     private void loadTileEntity(NGTWorld par1) {
@@ -230,10 +230,10 @@ public class NGTObjectRenderer {
                 for (int k = 0; k < par1.blockObject.zSize; k++) {
                     TileEntity tile = par1.getTileEntity(new BlockPos(i, j, k));
                     if (tile != null && TileEntityRendererDispatcher.instance.getRenderer(tile) != null)
-                        list.add(tile);
-                }
-            }
-        }
+                        list.add(tile); 
+                } 
+            } 
+        } 
         par1.setTileEntityList(list);
     }
 
@@ -249,7 +249,7 @@ public class NGTObjectRenderer {
                 CrashReportCategory category = report.makeCategory("TileEntity Details");
                 tile.addInfoToCrashReport(category);
                 throw new ReportedException(report);
-            }
+            }  
     }
 
     public void renderEntities(NGTWorld par1, float par8, int pass) {
@@ -257,13 +257,13 @@ public class NGTObjectRenderer {
         for (int i = 0; i < list.size(); i++) {
             Entity entity = list.get(i);
             if (!entity.isDead)
-                renderEntityByRenderer(entity, par8, pass);
-        }
+                renderEntityByRenderer(entity, par8, pass); 
+        } 
     }
 
     public void renderEntityByRenderer(Entity entity, float par8, int pass) {
         if (!entity.shouldRenderInPass(pass))
-            return;
+            return; 
         double d0 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * par8;
         double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * par8;
         double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * par8;
@@ -275,6 +275,6 @@ public class NGTObjectRenderer {
             NGTUtilClient.getMinecraft().getRenderManager().renderEntity(entity, d0, d1, d2, f1, par8, false);
         } catch (Exception e) {
             e.printStackTrace();
-        }
+        } 
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTParticle.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/NGTParticle.java
index 99fec0c..44f6fe2 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTParticle.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/NGTParticle.java
@@ -15,15 +15,15 @@ public final class NGTParticle {
 
     public static EnumParticleTypes getParticle(String name) {
         if (INSTANCE.nameMap.isEmpty())
-            INSTANCE.init();
+            INSTANCE.init(); 
         if (INSTANCE.nameMap.containsKey(name))
-            return INSTANCE.nameMap.get(name);
+            return INSTANCE.nameMap.get(name); 
         return EnumParticleTypes.SMOKE_NORMAL;
     }
 
     private void init() {
         for (EnumParticleTypes type : EnumParticleTypes.values())
-            this.nameMap.put(type.getParticleName(), type);
+            this.nameMap.put(type.getParticleName(), type); 
     }
 
     public void register(int id, IParticleFactory factory) {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTRenderHelper.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/NGTRenderHelper.java
index 88c53c7..e3fd559 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTRenderHelper.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/NGTRenderHelper.java
@@ -29,7 +29,7 @@ public final class NGTRenderHelper {
             case 'Z':
                 fa2 = new float[][] { { cos, sin, 0.0F, 0.0F }, { -sin, cos, 0.0F, 0.0F }, { 0.0F, 0.0F, 1.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 1.0F } };
                 return multiplｙMatrix(buffer, fa2);
-        }
+        } 
         return buffer;
     }
 
@@ -39,8 +39,8 @@ public final class NGTRenderHelper {
             for (int j = 0; j < 4; j++) {
                 float f = fb.get(j) * fa[i][0] + fb.get(4 + j) * fa[i][1] + fb.get(8 + j) * fa[i][2] + fb.get(12 + j) * fa[i][3];
                 buffer.put(i * 4 + j, f);
-            }
-        }
+            } 
+        } 
         return buffer;
     }
 
@@ -75,16 +75,16 @@ public final class NGTRenderHelper {
                     if (group.name.equals(parts[k])) {
                         b = !except;
                         break;
-                    }
-                }
-            }
+                    } 
+                } 
+            } 
             if (b)
                 for (int k = 0; k < group.faces.size(); k++) {
                     Face face = group.faces.get(k);
                     if (face.materialId == matId)
-                        addFace(face, tessellator, smoothing);
-                }
-        }
+                        addFace(face, tessellator, smoothing); 
+                }  
+        } 
         tessellator.draw();
     }
 
@@ -94,23 +94,23 @@ public final class NGTRenderHelper {
 
     public static void addFaceWithMatrix(Face face, IRenderer tessellator, FloatBuffer matrix, int index, boolean smoothing) {
         if (!smoothing)
-            tessellator.setNormal(face.faceNormal.getX(), face.faceNormal.getY(), face.faceNormal.getZ());
+            tessellator.setNormal(face.faceNormal.getX(), face.faceNormal.getY(), face.faceNormal.getZ()); 
         for (int i = 0; i < face.vertices.length; i++) {
             if (smoothing)
-                tessellator.setNormal(face.vertexNormals[i].getX(), face.vertexNormals[i].getY(), face.vertexNormals[i].getZ());
+                tessellator.setNormal(face.vertexNormals[i].getX(), face.vertexNormals[i].getY(), face.vertexNormals[i].getZ()); 
             boolean hasTexture = (face.textureCoordinates != null && face.textureCoordinates.length > 0 && face.textureCoordinates[0] != null);
             if (hasTexture) {
                 if (matrix == null) {
                     tessellator.addVertexWithUV(face.vertices[i].getX(), face.vertices[i].getY(), face.vertices[i].getZ(), face.textureCoordinates[i].getU(), face.textureCoordinates[i].getV());
                 } else {
                     addVertexWithMatrix(face.vertices[i].getX(), face.vertices[i].getY(), face.vertices[i].getZ(), face.textureCoordinates[i].getU(), face.textureCoordinates[i].getV(), tessellator, matrix, index);
-                }
+                } 
             } else if (matrix == null) {
                 tessellator.addVertexWithUV(face.vertices[i].getX(), face.vertices[i].getY(), face.vertices[i].getZ(), 0.0F, 0.0F);
             } else {
                 addVertexWithMatrix(face.vertices[i].getX(), face.vertices[i].getY(), face.vertices[i].getZ(), 0.0F, 0.0F, tessellator, matrix, index);
-            }
-        }
+            } 
+        } 
     }
 
     public static void addVertexWithMatrix(float x, float y, float z, float u, float v, IRenderer tessellator, FloatBuffer matrix, int index) {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTRenderer.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/NGTRenderer.java
index 6562cfc..b0a6d9d 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTRenderer.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/NGTRenderer.java
@@ -45,8 +45,8 @@ public final class NGTRenderer {
                 addVertex(tessellator, useTexture, sp[ii2][0] * r, sp[ii2][1] * r + 0.0625F + l1, sp[ii2][2] * r, maxU, minV);
                 addVertex(tessellator, useTexture, sp[ii1][0] * r, sp[ii1][1] * r + 0.0625F + l1, sp[ii1][2] * r, minU, minV);
                 addVertex(tessellator, useTexture, sp[ii0][0] * r, sp[ii0][1] * r + l1, sp[ii0][2] * r, minU, maxV);
-            }
-        }
+            } 
+        } 
     }
 
     private static void addVertex(NGTTessellator tessellator, boolean b, float x, float y, float z, float u, float v) {
@@ -54,7 +54,7 @@ public final class NGTRenderer {
             tessellator.addVertexWithUV(x, y, z, u, v);
         } else {
             tessellator.addVertex(x, y, z);
-        }
+        } 
     }
 
     public static void renderSphere(NGTTessellator tessellator, float r) {
@@ -83,8 +83,8 @@ public final class NGTRenderer {
                 tessellator.addVertexWithUV(sp[ii2][0] * r, sp[ii2][1] * r, sp[ii2][2] * r, maxU, minV);
                 tessellator.addVertexWithUV(sp[ii1][0] * r, sp[ii1][1] * r, sp[ii1][2] * r, minU, minV);
                 tessellator.addVertexWithUV(sp[ii0][0] * r, sp[ii0][1] * r, sp[ii0][2] * r, minU, maxV);
-            }
-        }
+            } 
+        } 
     }
 
     public static void renderFrame(float minX, float minY, float minZ, float width, float height, float depth, int color, int alpha) {
@@ -150,7 +150,7 @@ public final class NGTRenderer {
             FIRE.tessellateAll(tessellator, false);
             tessellator.draw();
             GL11.glPopMatrix();
-        }
+        } 
         GL11.glEnable(3553);
         GL11.glDepthMask(true);
         GL11.glDisable(3042);
@@ -169,7 +169,7 @@ public final class NGTRenderer {
             try {
                 MediaBase media = MediaBase.getMedia(MediaBase.MediaType.CAMERA, String.valueOf(cameraId));
                 if (media != null)
-                    media.render(width, height, fitAspectRatio);
+                    media.render(width, height, fitAspectRatio); 
             } catch (Exception e) {
                 e.printStackTrace();
                 HAS_CAMERA_LIB = false;
@@ -177,13 +177,13 @@ public final class NGTRenderer {
                 e.printStackTrace();
                 HAS_CAMERA_LIB = false;
                 showLibInstallertion();
-            }
+            }  
     }
 
     public static void renderDesktop(float width, float height, boolean fitAspectRatio) {
         MediaBase media = MediaBase.getMedia(MediaBase.MediaType.CAPTURE, "default");
         if (media != null)
-            media.render(width, height, fitAspectRatio);
+            media.render(width, height, fitAspectRatio); 
     }
 
     public static void renderPicture(float width, float height, boolean fitAspectRatio, String url) {
@@ -195,13 +195,13 @@ public final class NGTRenderer {
         if (media != null) {
             ((ImageBase)media).setUV(minU, minV, maxU, maxV);
             media.render(width, height, fitAspectRatio);
-        }
+        } 
     }
 
     public static void renderMap(float width, float height, boolean fitAspectRatio, String pos) {
         MediaBase media = MediaBase.getMedia(MediaBase.MediaType.MAP, pos);
         if (media != null)
-            media.render(width, height, fitAspectRatio);
+            media.render(width, height, fitAspectRatio); 
     }
 
     public static void renderTweet(float width, float height, boolean fitAspectRatio, String keyword) {
@@ -209,7 +209,7 @@ public final class NGTRenderer {
             try {
                 MediaBase media = MediaBase.getMedia(MediaBase.MediaType.TWEET, keyword);
                 if (media != null)
-                    media.render(width, height, fitAspectRatio);
+                    media.render(width, height, fitAspectRatio); 
             } catch (Exception e) {
                 e.printStackTrace();
                 HAS_TWITTER_LIB = false;
@@ -217,7 +217,7 @@ public final class NGTRenderer {
                 e.printStackTrace();
                 HAS_TWITTER_LIB = false;
                 showLibInstallertion();
-            }
+            }  
     }
 
     public static void renderEBB(float width, float height, boolean fitAspectRatio, String name, int resolution, int offsetU, int offsetV) {
@@ -225,7 +225,7 @@ public final class NGTRenderer {
         if (media != null) {
             ((ElectricBulletinBoard)media).setParameter(resolution, offsetU, offsetV);
             media.render(width, height, fitAspectRatio);
-        }
+        } 
     }
 
     private static void showLibInstallertion() {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTTessellator.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/NGTTessellator.java
index dc00524..5779ab0 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/NGTTessellator.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/NGTTessellator.java
@@ -67,7 +67,7 @@ public final class NGTTessellator implements IRenderer {
 
     public int draw() {
         if (!this.isDrawing)
-            throw new IllegalStateException("Not tesselating!");
+            throw new IllegalStateException("Not tesselating!"); 
         this.isDrawing = false;
         int offs = 0;
         while (offs < this.vertexCount) {
@@ -81,45 +81,45 @@ public final class NGTTessellator implements IRenderer {
                 floatBuffer.position(3);
                 GL11.glTexCoordPointer(2, 32, floatBuffer);
                 GL11.glEnableClientState(32888);
-            }
+            } 
             if (this.hasBrightness) {
                 OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
                 shortBuffer.position(14);
                 GL11.glTexCoordPointer(2, 32, shortBuffer);
                 GL11.glEnableClientState(32888);
                 OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
-            }
+            } 
             if (this.hasColor) {
                 byteBuffer.position(20);
                 GL11.glColorPointer(4, true, 32, byteBuffer);
                 GL11.glEnableClientState(32886);
-            }
+            } 
             if (this.hasNormals) {
                 byteBuffer.position(24);
                 GL11.glNormalPointer(32, byteBuffer);
                 GL11.glEnableClientState(32885);
-            }
+            } 
             floatBuffer.position(0);
             GL11.glVertexPointer(3, 32, floatBuffer);
             GL11.glEnableClientState(32884);
             GL11.glDrawArrays(this.drawMode, 0, vtc);
             GL11.glDisableClientState(32884);
             if (this.hasTexture)
-                GL11.glDisableClientState(32888);
+                GL11.glDisableClientState(32888); 
             if (this.hasBrightness) {
                 OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
                 GL11.glDisableClientState(32888);
                 OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
-            }
+            } 
             if (this.hasColor)
-                GL11.glDisableClientState(32886);
+                GL11.glDisableClientState(32886); 
             if (this.hasNormals)
-                GL11.glDisableClientState(32885);
-        }
+                GL11.glDisableClientState(32885); 
+        } 
         if (this.rawBufferSize > 131072 && this.rawBufferIndex < this.rawBufferSize << 3) {
             this.rawBufferSize = 65536;
             this.rawBuffer = new int[this.rawBufferSize];
-        }
+        } 
         int i = this.rawBufferIndex << 2;
         reset();
         return i;
@@ -131,21 +131,21 @@ public final class NGTTessellator implements IRenderer {
         byte b0 = 32;
         int i;
         for (i = 0; i < this.rawBufferIndex; i += b0)
-            priorityqueue.add(Integer.valueOf(i));
+            priorityqueue.add(Integer.valueOf(i)); 
         for (i = 0; !priorityqueue.isEmpty(); i += b0) {
             int j = ((Integer)priorityqueue.remove()).intValue();
             for (int k = 0; k < b0; k++)
-                aint[i + k] = this.rawBuffer[j + k];
-        }
+                aint[i + k] = this.rawBuffer[j + k]; 
+        } 
         System.arraycopy(aint, 0, this.rawBuffer, 0, aint.length);
         return new TesselatorVertexState(aint, this.rawBufferIndex, this.vertexCount, this.hasTexture, this.hasBrightness, this.hasNormals, this.hasColor);
     }
 
     public void setVertexState(TesselatorVertexState state) {
         while ((state.getRawBuffer()).length > this.rawBufferSize && this.rawBufferSize > 0)
-            this.rawBufferSize <<= 1;
+            this.rawBufferSize <<= 1; 
         if (this.rawBufferSize > this.rawBuffer.length)
-            this.rawBuffer = new int[this.rawBufferSize];
+            this.rawBuffer = new int[this.rawBufferSize]; 
         System.arraycopy(state.getRawBuffer(), 0, this.rawBuffer, 0, (state.getRawBuffer()).length);
         this.rawBufferIndex = state.getRawBufferIndex();
         this.vertexCount = state.getVertexCount();
@@ -167,7 +167,7 @@ public final class NGTTessellator implements IRenderer {
 
     public void startDrawing(int par1) {
         if (this.isDrawing)
-            throw new IllegalStateException("Already tesselating!");
+            throw new IllegalStateException("Already tesselating!"); 
         this.isDrawing = true;
         reset();
         this.drawMode = par1;
@@ -207,29 +207,29 @@ public final class NGTTessellator implements IRenderer {
                 r = 255;
             } else if (r < 0) {
                 r = 0;
-            }
+            } 
             if (g > 255) {
                 g = 255;
             } else if (g < 0) {
                 g = 0;
-            }
+            } 
             if (b > 255) {
                 b = 255;
             } else if (b < 0) {
                 b = 0;
-            }
+            } 
             if (a > 255) {
                 a = 255;
             } else if (a < 0) {
                 a = 0;
-            }
+            } 
             this.hasColor = true;
             if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN) {
                 this.color = a << 24 | b << 16 | g << 8 | r;
             } else {
                 this.color = r << 24 | g << 16 | b << 8 | a;
-            }
-        }
+            } 
+        } 
     }
 
     public void addVertexWithUV(float par1, float par3, float par5, float par7, float par9) {
@@ -245,17 +245,17 @@ public final class NGTTessellator implements IRenderer {
             } else {
                 this.rawBufferSize *= 2;
                 this.rawBuffer = Arrays.copyOf(this.rawBuffer, this.rawBufferSize);
-            }
+            }  
         if (this.hasTexture) {
             this.rawBuffer[this.rawBufferIndex + 3] = Float.floatToRawIntBits(this.textureU);
             this.rawBuffer[this.rawBufferIndex + 4] = Float.floatToRawIntBits(this.textureV);
-        }
+        } 
         if (this.hasBrightness)
-            this.rawBuffer[this.rawBufferIndex + 7] = this.brightness;
+            this.rawBuffer[this.rawBufferIndex + 7] = this.brightness; 
         if (this.hasColor)
-            this.rawBuffer[this.rawBufferIndex + 5] = this.color;
+            this.rawBuffer[this.rawBufferIndex + 5] = this.color; 
         if (this.hasNormals)
-            this.rawBuffer[this.rawBufferIndex + 6] = this.normal;
+            this.rawBuffer[this.rawBufferIndex + 6] = this.normal; 
         this.rawBuffer[this.rawBufferIndex + 0] = Float.floatToRawIntBits(par1 + this.xOffset);
         this.rawBuffer[this.rawBufferIndex + 1] = Float.floatToRawIntBits(par3 + this.yOffset);
         this.rawBuffer[this.rawBufferIndex + 2] = Float.floatToRawIntBits(par5 + this.zOffset);
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/VBO.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/VBO.java
index f5f66b3..4212fd0 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/VBO.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/VBO.java
@@ -65,44 +65,44 @@ public class VBO extends GLObject implements IRenderer {
         GL15.glBindBuffer(34963, this.vioId);
         GL11.glEnableClientState(32884);
         if (this.hasTexture)
-            GL11.glEnableClientState(32888);
+            GL11.glEnableClientState(32888); 
         if (this.hasColor)
-            GL11.glEnableClientState(32886);
+            GL11.glEnableClientState(32886); 
         if (this.hasNormals)
-            GL11.glEnableClientState(32885);
+            GL11.glEnableClientState(32885); 
         if (this.hasBrightness)
-            GL11.glEnableClientState(32888);
+            GL11.glEnableClientState(32888); 
         GL15.glBindBuffer(34962, this.vboId);
         GL11.glVertexPointer(3, 5126, stride, 0L);
         if (this.hasTexture)
-            GL11.glTexCoordPointer(2, 5126, stride, 12L);
+            GL11.glTexCoordPointer(2, 5126, stride, 12L); 
         if (this.hasColor)
-            GL11.glColorPointer(4, 5120, stride, 20L);
+            GL11.glColorPointer(4, 5120, stride, 20L); 
         if (this.hasNormals)
-            GL11.glNormalPointer(5120, stride, 24L);
+            GL11.glNormalPointer(5120, stride, 24L); 
         if (this.hasBrightness) {
             OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
             GL11.glTexCoordPointer(2, 5122, stride, 28L);
-        }
+        } 
         GL11.glDrawElements(this.drawMode, this.vertexCount, 5125, 0L);
         GL15.glBindBuffer(34963, 0);
         GL15.glBindBuffer(34962, 0);
         GL11.glDisableClientState(32884);
         if (this.hasTexture)
-            GL11.glDisableClientState(32888);
+            GL11.glDisableClientState(32888); 
         if (this.hasColor)
-            GL11.glDisableClientState(32886);
+            GL11.glDisableClientState(32886); 
         if (this.hasNormals)
-            GL11.glDisableClientState(32885);
+            GL11.glDisableClientState(32885); 
         if (this.hasBrightness) {
             GL11.glDisableClientState(32888);
             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
-        }
+        } 
     }
 
     public int draw() {
         if (!this.isDrawing)
-            throw new IllegalStateException("Not tesselating!");
+            throw new IllegalStateException("Not tesselating!"); 
         this.isDrawing = false;
         intBuffer.clear();
         intBuffer.put(this.rawBuffer, 0, this.vertexCount * 8);
@@ -112,7 +112,7 @@ public class VBO extends GLObject implements IRenderer {
         IntBuffer vIndexInt = vIndexByte.asIntBuffer();
         int[] vIndex = new int[this.vertexCount];
         for (int i = 0; i < this.vertexCount; i++)
-            vIndex[i] = i;
+            vIndex[i] = i; 
         vIndexInt.put(vIndex);
         vIndexByte.flip();
         this.vboId = GL15.glGenBuffers();
@@ -134,7 +134,7 @@ public class VBO extends GLObject implements IRenderer {
 
     public void startDrawing(int par1) {
         if (this.isDrawing)
-            throw new IllegalStateException("Already tesselating!");
+            throw new IllegalStateException("Already tesselating!"); 
         this.isDrawing = true;
         reset();
         this.drawMode = par1;
@@ -165,7 +165,7 @@ public class VBO extends GLObject implements IRenderer {
             this.color = a << 24 | b << 16 | g << 8 | r;
         } else {
             this.color = r << 24 | g << 16 | b << 8 | a;
-        }
+        } 
     }
 
     public void addVertexWithUV(float par1, float par3, float par5, float par7, float par9) {
@@ -181,20 +181,20 @@ public class VBO extends GLObject implements IRenderer {
             } else {
                 this.rawBufferSize *= 2;
                 this.rawBuffer = Arrays.copyOf(this.rawBuffer, this.rawBufferSize);
-            }
+            }  
         this.rawBuffer[this.rawBufferIndex + 0] = Float.floatToRawIntBits(par1);
         this.rawBuffer[this.rawBufferIndex + 1] = Float.floatToRawIntBits(par3);
         this.rawBuffer[this.rawBufferIndex + 2] = Float.floatToRawIntBits(par5);
         if (this.hasTexture) {
             this.rawBuffer[this.rawBufferIndex + 3] = Float.floatToRawIntBits(this.textureU);
             this.rawBuffer[this.rawBufferIndex + 4] = Float.floatToRawIntBits(this.textureV);
-        }
+        } 
         if (this.hasColor)
-            this.rawBuffer[this.rawBufferIndex + 5] = this.color;
+            this.rawBuffer[this.rawBufferIndex + 5] = this.color; 
         if (this.hasNormals)
-            this.rawBuffer[this.rawBufferIndex + 6] = this.normal;
+            this.rawBuffer[this.rawBufferIndex + 6] = this.normal; 
         if (this.hasBrightness)
-            this.rawBuffer[this.rawBufferIndex + 7] = this.brightness;
+            this.rawBuffer[this.rawBufferIndex + 7] = this.brightness; 
         this.rawBufferIndex += 8;
         this.vertexCount++;
     }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/VertexArray.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/VertexArray.java
index 2ebfb54..7b1048f 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/VertexArray.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/VertexArray.java
@@ -66,58 +66,58 @@ public final class VertexArray extends GLObject implements IRenderer {
                 this.intBuffer.put(this.rawBuffer, offs << 3, vtc << 3);
                 this.byteBuffer.position(0);
                 this.byteBuffer.limit(vtc << 5);
-            }
+            } 
             offs += vtc;
             if (this.hasTexture) {
                 this.floatBuffer.position(3);
                 GL11.glTexCoordPointer(2, 32, this.floatBuffer);
                 GL11.glEnableClientState(32888);
-            }
+            } 
             if (this.hasColor) {
                 this.byteBuffer.position(20);
                 GL11.glColorPointer(4, true, 32, this.byteBuffer);
                 GL11.glEnableClientState(32886);
-            }
+            } 
             if (this.hasNormals) {
                 this.byteBuffer.position(24);
                 GL11.glNormalPointer(32, this.byteBuffer);
                 GL11.glEnableClientState(32885);
-            }
+            } 
             if (this.hasBrightness) {
                 OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
                 this.shortBuffer.position(14);
                 GL11.glTexCoordPointer(2, 32, this.shortBuffer);
                 GL11.glEnableClientState(32888);
                 OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
-            }
+            } 
             this.floatBuffer.position(0);
             GL11.glVertexPointer(3, 32, this.floatBuffer);
             GL11.glEnableClientState(32884);
             GL11.glDrawArrays(this.drawMode, 0, vtc);
             GL11.glDisableClientState(32884);
             if (this.hasTexture)
-                GL11.glDisableClientState(32888);
+                GL11.glDisableClientState(32888); 
             if (this.hasColor)
-                GL11.glDisableClientState(32886);
+                GL11.glDisableClientState(32886); 
             if (this.hasNormals)
-                GL11.glDisableClientState(32885);
+                GL11.glDisableClientState(32885); 
             if (this.hasBrightness) {
                 OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
                 GL11.glDisableClientState(32888);
                 OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
-            }
-        }
+            } 
+        } 
     }
 
     public int draw() {
         if (!this.isDrawing)
-            throw new IllegalStateException("Not tesselating!");
+            throw new IllegalStateException("Not tesselating!"); 
         this.isDrawing = false;
         render(true);
         if (this.rawBufferSize > 131072 && this.rawBufferIndex < this.rawBufferSize << 3) {
             this.rawBufferSize = 65536;
             this.rawBuffer = new int[this.rawBufferSize];
-        }
+        } 
         int i = this.rawBufferIndex << 2;
         return i;
     }
@@ -130,7 +130,7 @@ public final class VertexArray extends GLObject implements IRenderer {
 
     public void startDrawing(int par1) {
         if (this.isDrawing)
-            throw new IllegalStateException("Already tesselating!");
+            throw new IllegalStateException("Already tesselating!"); 
         this.isDrawing = true;
         reset();
         this.drawMode = par1;
@@ -163,8 +163,8 @@ public final class VertexArray extends GLObject implements IRenderer {
                 this.color = a << 24 | b << 16 | g << 8 | r;
             } else {
                 this.color = r << 24 | g << 16 | b << 8 | a;
-            }
-        }
+            } 
+        } 
     }
 
     public void addVertexWithUV(float par1, float par3, float par5, float par7, float par9) {
@@ -180,20 +180,20 @@ public final class VertexArray extends GLObject implements IRenderer {
             } else {
                 this.rawBufferSize *= 2;
                 this.rawBuffer = Arrays.copyOf(this.rawBuffer, this.rawBufferSize);
-            }
+            }  
         this.rawBuffer[this.rawBufferIndex + 0] = Float.floatToRawIntBits(par1);
         this.rawBuffer[this.rawBufferIndex + 1] = Float.floatToRawIntBits(par3);
         this.rawBuffer[this.rawBufferIndex + 2] = Float.floatToRawIntBits(par5);
         if (this.hasTexture) {
             this.rawBuffer[this.rawBufferIndex + 3] = Float.floatToRawIntBits(this.textureU);
             this.rawBuffer[this.rawBufferIndex + 4] = Float.floatToRawIntBits(this.textureV);
-        }
+        } 
         if (this.hasColor)
-            this.rawBuffer[this.rawBufferIndex + 5] = this.color;
+            this.rawBuffer[this.rawBufferIndex + 5] = this.color; 
         if (this.hasNormals)
-            this.rawBuffer[this.rawBufferIndex + 6] = this.normal;
+            this.rawBuffer[this.rawBufferIndex + 6] = this.normal; 
         if (this.hasBrightness)
-            this.rawBuffer[this.rawBufferIndex + 7] = this.brightness;
+            this.rawBuffer[this.rawBufferIndex + 7] = this.brightness; 
         this.rawBufferIndex += 8;
         this.vertexCount++;
     }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/VertexArray2.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/VertexArray2.java
index cb2286f..e7420d0 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/VertexArray2.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/VertexArray2.java
@@ -73,21 +73,21 @@ public final class VertexArray2 extends GLObject implements IRenderer {
             this.floatBuffer = this.byteBuffer.asFloatBuffer();
             this.shortBuffer = this.byteBuffer.asShortBuffer();
             NGTLog.debug("[VertexArray2] CreateBuf(%d byte)", new Object[] { Integer.valueOf(sizeByte) });
-        }
+        } 
         try {
             this.intBuffer.clear();
             int rem = this.intBuffer.remaining();
             if (sizeInt > rem) {
                 NGTLog.debug("[VertexArray2] Size over (%d > %d)", new Object[] { Integer.valueOf(sizeInt), Integer.valueOf(rem) });
                 sizeInt = this.intBuffer.remaining();
-            }
+            } 
             this.intBuffer.put(this.rawBuffer, 0, sizeInt);
             this.byteBuffer.position(0);
             this.byteBuffer.limit(sizeInt);
         } catch (BufferOverflowException e) {
             NGTLog.debug("[VertexArray2] Overflow : IntBuf(%d), RawBuf(%d), SizeInt(%d)", new Object[] { Integer.valueOf(this.intBuffer.remaining()), Integer.valueOf(this.rawBuffer.length), Integer.valueOf(sizeInt) });
             throw e;
-        }
+        } 
         this.rawBufferSize = 32768;
         this.rawBuffer = new int[this.rawBufferSize];
         this.rawBufferIndex = 0;
@@ -98,40 +98,40 @@ public final class VertexArray2 extends GLObject implements IRenderer {
             this.floatBuffer.position(3);
             GL11.glTexCoordPointer(2, 32, this.floatBuffer);
             GL11.glEnableClientState(32888);
-        }
+        } 
         if (this.hasColor) {
             this.byteBuffer.position(20);
             GL11.glColorPointer(4, true, 32, this.byteBuffer);
             GL11.glEnableClientState(32886);
-        }
+        } 
         if (this.hasNormals) {
             this.byteBuffer.position(24);
             GL11.glNormalPointer(32, this.byteBuffer);
             GL11.glEnableClientState(32885);
-        }
+        } 
         if (this.hasBrightness) {
             OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
             this.shortBuffer.position(14);
             GL11.glTexCoordPointer(2, 32, this.shortBuffer);
             GL11.glEnableClientState(32888);
             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
-        }
+        } 
         this.floatBuffer.position(0);
         GL11.glVertexPointer(3, 32, this.floatBuffer);
         GL11.glEnableClientState(32884);
         GL11.glDrawArrays(this.drawMode, 0, this.vertexCount);
         GL11.glDisableClientState(32884);
         if (this.hasTexture)
-            GL11.glDisableClientState(32888);
+            GL11.glDisableClientState(32888); 
         if (this.hasColor)
-            GL11.glDisableClientState(32886);
+            GL11.glDisableClientState(32886); 
         if (this.hasNormals)
-            GL11.glDisableClientState(32885);
+            GL11.glDisableClientState(32885); 
         if (this.hasBrightness) {
             OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
             GL11.glDisableClientState(32888);
             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
-        }
+        } 
     }
 
     public void cancel() {
@@ -143,7 +143,7 @@ public final class VertexArray2 extends GLObject implements IRenderer {
 
     public int draw() {
         if (!this.isDrawing)
-            throw new IllegalStateException("Not tesselating!");
+            throw new IllegalStateException("Not tesselating!"); 
         this.isDrawing = false;
         setupVertexArray();
         return this.rawBufferIndex << 2;
@@ -156,7 +156,7 @@ public final class VertexArray2 extends GLObject implements IRenderer {
 
     public void startDrawing(int par1) {
         if (this.isDrawing)
-            throw new IllegalStateException("Already tesselating!");
+            throw new IllegalStateException("Already tesselating!"); 
         this.isDrawing = true;
         reset();
         this.drawMode = par1;
@@ -187,7 +187,7 @@ public final class VertexArray2 extends GLObject implements IRenderer {
             this.color = a << 24 | b << 16 | g << 8 | r;
         } else {
             this.color = r << 24 | g << 16 | b << 8 | a;
-        }
+        } 
     }
 
     public void addVertexWithUV(float par1, float par3, float par5, float par7, float par9) {
@@ -203,20 +203,20 @@ public final class VertexArray2 extends GLObject implements IRenderer {
             } else {
                 this.rawBufferSize *= 2;
                 this.rawBuffer = Arrays.copyOf(this.rawBuffer, this.rawBufferSize);
-            }
+            }  
         this.rawBuffer[this.rawBufferIndex + 0] = Float.floatToRawIntBits(par1);
         this.rawBuffer[this.rawBufferIndex + 1] = Float.floatToRawIntBits(par3);
         this.rawBuffer[this.rawBufferIndex + 2] = Float.floatToRawIntBits(par5);
         if (this.hasTexture) {
             this.rawBuffer[this.rawBufferIndex + 3] = Float.floatToRawIntBits(this.textureU);
             this.rawBuffer[this.rawBufferIndex + 4] = Float.floatToRawIntBits(this.textureV);
-        }
+        } 
         if (this.hasColor)
-            this.rawBuffer[this.rawBufferIndex + 5] = this.color;
+            this.rawBuffer[this.rawBufferIndex + 5] = this.color; 
         if (this.hasNormals)
-            this.rawBuffer[this.rawBufferIndex + 6] = this.normal;
+            this.rawBuffer[this.rawBufferIndex + 6] = this.normal; 
         if (this.hasBrightness)
-            this.rawBuffer[this.rawBufferIndex + 7] = this.brightness;
+            this.rawBuffer[this.rawBufferIndex + 7] = this.brightness; 
         this.rawBufferIndex += 8;
         this.vertexCount++;
     }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/AnimatedPicture.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/AnimatedPicture.java
index f55b3a8..18e2034 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/AnimatedPicture.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/AnimatedPicture.java
@@ -17,9 +17,9 @@ public class AnimatedPicture extends Picture {
 
     public BufferedImage getImage() {
         if (this.textureId < 0)
-            loadImage();
+            loadImage(); 
         if (this.gifImage == null)
-            return null;
+            return null; 
         int frameIndex = this.gifImage.getCurrentFrameIndex();
         this.image = this.gifImage.getImage(frameIndex);
         uploadTexture(this.textureId, this.image);
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/Camera.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/Camera.java
index 9fc80dd..64378c4 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/Camera.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/Camera.java
@@ -20,7 +20,7 @@ public class Camera extends ImageBase {
         if (cameraId < list.size()) {
             camera.init(list.get(cameraId));
             return camera;
-        }
+        } 
         return null;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/ElectricBulletinBoard.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/ElectricBulletinBoard.java
index fbd84e6..d4950ab 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/ElectricBulletinBoard.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/ElectricBulletinBoard.java
@@ -37,7 +37,7 @@ public class ElectricBulletinBoard extends MediaBase {
     private void loadImage() {
         GIF gif = GIF.load(this.name);
         if (gif == null)
-            return;
+            return; 
         this.rawData = gif;
         List<Integer> list = new ArrayList<>();
         this.colorData = new byte[gif.frameNum][];
@@ -54,15 +54,15 @@ public class ElectricBulletinBoard extends MediaBase {
                     } else {
                         colorIndex = list.size();
                         list.add(Integer.valueOf(color));
-                    }
+                    } 
                     int index = getIndex(w, h);
                     this.colorData[i][index] = (byte)((colorIndex & 0xFF) + -128);
-                }
-            }
-        }
+                } 
+            } 
+        } 
         this.palette = new int[list.size()];
         for (i = 0; i < this.palette.length; i++)
-            this.palette[i] = ((Integer)list.get(i)).intValue();
+            this.palette[i] = ((Integer)list.get(i)).intValue(); 
     }
 
     private int getIndex(int w, int h) {
@@ -73,8 +73,8 @@ public class ElectricBulletinBoard extends MediaBase {
         if (this.colorData == null) {
             loadImage();
             if (this.colorData == null)
-                return;
-        }
+                return; 
+        } 
         NGTUtilClient.bindTexture(TEXTURE);
         int sizeX = (int)(this.resolution * width);
         int sizeY = (int)(this.resolution * height);
@@ -100,8 +100,8 @@ public class ElectricBulletinBoard extends MediaBase {
                 tessellator.addVertexWithUV(-hw + uf, hh - vf - resf, depth, 0.0F + uOffset, 1.0F);
                 tessellator.addVertexWithUV(-hw + uf + resf, hh - vf - resf, depth, 0.5F + uOffset, 1.0F);
                 tessellator.addVertexWithUV(-hw + uf + resf, hh - vf, depth, 0.5F + uOffset, 0.0F);
-            }
-        }
+            } 
+        } 
         tessellator.draw();
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/FontImage.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/FontImage.java
index 05eb848..c2b9464 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/FontImage.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/FontImage.java
@@ -43,13 +43,13 @@ public class FontImage {
         if (isClient)
             for (FontImage cache : IMAGE_CACHE) {
                 if (cache.text.equals(pText) && cache.font.equals(pFont) && cache.style == pStyle && cache.color == pColor && cache.size == pSize)
-                    return cache;
-            }
+                    return cache; 
+            }  
         FontImage image = new FontImage(pText, pFont, pStyle, pColor, pSize);
         if (isClient) {
             image.init();
             IMAGE_CACHE.add(image);
-        }
+        } 
         return image;
     }
 
@@ -83,7 +83,7 @@ public class FontImage {
             g2d.setFont(fontObj);
             FontMetrics metrics = g2d.getFontMetrics();
             this.width = metrics.stringWidth(this.text);
-        }
+        } 
         return this.width;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/GIF.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/GIF.java
index 68ef366..7b06a8f 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/GIF.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/GIF.java
@@ -37,15 +37,15 @@ public class GIF {
             } catch (IOException e) {
                 e.printStackTrace();
                 return null;
-            }
+            } 
         } else {
             try {
                 stream = NGTFileLoader.getInputStream(new ResourceLocationCustom(source));
             } catch (IOException e) {
                 e.printStackTrace();
                 return null;
-            }
-        }
+            } 
+        } 
         return load(stream);
     }
 
@@ -53,21 +53,21 @@ public class GIF {
         List<BufferedImage> tempList = new ArrayList<>();
         ImageReader reader = ImageIO.getImageReadersByFormatName("gif").next();
         if (reader == null)
-            return null;
+            return null; 
         try {
             reader.setInput(ImageIO.createImageInputStream(stream));
             int count = reader.getNumImages(true);
             for (int j = 0; j < count; j++)
-                tempList.add(reader.read(j));
+                tempList.add(reader.read(j)); 
         } catch (IOException e) {
             e.printStackTrace();
             return null;
         } catch (ArrayIndexOutOfBoundsException e) {
             e.printStackTrace();
             return null;
-        }
+        } 
         if (tempList == null || tempList.isEmpty())
-            return null;
+            return null; 
         GIF gif = new GIF();
         BufferedImage firstImg = tempList.get(0);
         int width = firstImg.getWidth();
@@ -79,7 +79,7 @@ public class GIF {
             BufferedImage currentImg = new BufferedImage(width, height, 2);
             currentImg.setData(imgTemp.getData());
             gif.images.add(currentImg);
-        }
+        } 
         int delayTime = 500;
         try {
             IIOMetadata imageMetaData = reader.getImageMetadata(0);
@@ -89,7 +89,7 @@ public class GIF {
             delayTime = Integer.valueOf(gceNode.getAttribute("delayTime")).intValue();
         } catch (IOException e) {
             e.printStackTrace();
-        }
+        } 
         gif.width = width;
         gif.height = height;
         gif.frameNum = gif.images.size();
@@ -101,8 +101,8 @@ public class GIF {
         int nNodes = rootNode.getLength();
         for (int i = 0; i < nNodes; i++) {
             if (rootNode.item(i).getNodeName().compareToIgnoreCase(nodeName) == 0)
-                return (IIOMetadataNode)rootNode.item(i);
-        }
+                return (IIOMetadataNode)rootNode.item(i); 
+        } 
         IIOMetadataNode node = new IIOMetadataNode(nodeName);
         rootNode.appendChild(node);
         return node;
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/ImageBase.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/ImageBase.java
index a1e635c..15ceac1 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/ImageBase.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/ImageBase.java
@@ -37,7 +37,7 @@ public abstract class ImageBase extends MediaBase {
     public void render(float width, float height, boolean fitAspectRatio) {
         BufferedImage image = getImage();
         if (image != null)
-            renderImage(width, height, fitAspectRatio, image);
+            renderImage(width, height, fitAspectRatio, image); 
     }
 
     public void exit() {}
@@ -70,7 +70,7 @@ public abstract class ImageBase extends MediaBase {
         if (this.intBuffer == null) {
             this.intBuffer = new int[width * height];
             TextureUtil.allocateTexture(id, width, height);
-        }
+        } 
         switch (image.getType()) {
             case 2:
                 readAsIntARGB(image);
@@ -87,7 +87,7 @@ public abstract class ImageBase extends MediaBase {
             default:
                 NGTLog.debug("Unsupported type : " + image.getType());
                 return;
-        }
+        } 
         TextureUtil.uploadTexture(id, this.intBuffer, width, height);
     }
 
@@ -100,7 +100,7 @@ public abstract class ImageBase extends MediaBase {
             this.buffer = BufferUtils.createByteBuffer(width * height * 4);
             this.buffer.order(ByteOrder.nativeOrder());
             GL11.glTexImage2D(3553, 0, 6408, width, height, 0, 6408, 5121, this.buffer);
-        }
+        } 
         this.buffer.clear();
         switch (image.getType()) {
             case 2:
@@ -115,7 +115,7 @@ public abstract class ImageBase extends MediaBase {
             default:
                 readAsIntARGB(image);
                 break;
-        }
+        } 
         this.buffer.flip();
         GL11.glTexSubImage2D(3553, 0, 0, 0, width, height, 6408, 5121, this.buffer);
     }
@@ -129,7 +129,7 @@ public abstract class ImageBase extends MediaBase {
             byte g = (byte)(color >> 8 & 0xFF);
             byte b = (byte)(color & 0xFF);
             this.intBuffer[i] = color;
-        }
+        } 
     }
 
     private void readAsIntRGB(BufferedImage image) {
@@ -144,7 +144,7 @@ public abstract class ImageBase extends MediaBase {
             int index = dataBuf.getElem(i);
             int color = model.getRGB(index);
             this.intBuffer[i] = color;
-        }
+        } 
     }
 
     private void readAsCustom(BufferedImage image) {
@@ -154,6 +154,6 @@ public abstract class ImageBase extends MediaBase {
             int g = dataBuf.getElem(i + 1);
             int b = dataBuf.getElem(i + 2);
             this.intBuffer[i / 3] = 0xFF000000 | r << 16 | g << 8 | b;
-        }
+        } 
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/MediaBase.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/MediaBase.java
index b13d5c9..817ab17 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/MediaBase.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/MediaBase.java
@@ -22,16 +22,16 @@ public abstract class MediaBase {
         if (!ALL_MEDIA.containsKey(type)) {
             ALL_MEDIA.put(type, new HashMap<>());
             NGTLog.debug("[MediaBase] Add media map : %s", new Object[] { type.toString() });
-        }
+        } 
         Map<String, MediaBase> map = ALL_MEDIA.get(type);
         if (!map.containsKey(key)) {
             MediaBase media = create(type, key);
             if (media != null) {
                 map.put(key, media);
                 NGTLog.debug("[MediaBase] Add new media : %s", new Object[] { key });
-            }
+            } 
             return media;
-        }
+        } 
         return map.get(key);
     }
 
@@ -50,15 +50,15 @@ public abstract class MediaBase {
                 return MapRenderer.create(key);
             case EBB:
                 return new ElectricBulletinBoard(key);
-        }
+        } 
         return null;
     }
 
     public static void clear() {
         for (Map<String, MediaBase> map : ALL_MEDIA.values()) {
             for (MediaBase entry : map.values())
-                entry.exit();
-        }
+                entry.exit(); 
+        } 
         NGTLog.debug("[MediaBase] Clear media : %s", new Object[] { Integer.valueOf(ALL_MEDIA.size()) });
         ALL_MEDIA.clear();
     }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/Picture.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/Picture.java
index f546c12..3094b32 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/Picture.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/Picture.java
@@ -20,9 +20,9 @@ public class Picture extends ImageBase {
 
     public static Picture create(String par1) {
         if (par1.isEmpty())
-            return null;
+            return null; 
         if (par1.endsWith(".gif"))
-            return new AnimatedPicture(par1);
+            return new AnimatedPicture(par1); 
         return new Picture(par1);
     }
 
@@ -35,14 +35,14 @@ public class Picture extends ImageBase {
         } catch (IOException e) {
             e.printStackTrace();
             return;
-        }
+        } 
         this.textureId = TextureUtil.glGenTextures();
         uploadTexture(this.textureId, this.image);
     }
 
     public BufferedImage getImage() {
         if (this.textureId < 0)
-            loadImage();
+            loadImage(); 
         return this.image;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/ScreenCapture.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/ScreenCapture.java
index 9969274..fc0bd13 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/ScreenCapture.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/ScreenCapture.java
@@ -27,7 +27,7 @@ public class ScreenCapture extends ImageBase {
             return capture;
         } catch (AWTException e) {
             return null;
-        }
+        } 
     }
 
     public int getWidth() {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/TweetState.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/TweetState.java
index 541dd1e..efedf36 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/media/TweetState.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/media/TweetState.java
@@ -29,20 +29,20 @@ public class TweetState extends MediaBase {
     public void update() {
         TwitterUtil util = TwitterUtil.getInstance();
         if (util == null)
-            return;
+            return; 
         List<Status> list = util.getTweetWithKeyword(this.keyword, 1);
         if (!list.isEmpty()) {
             Status newStatus = list.get(0);
             if (this.status == null || newStatus.getId() != this.status.getId()) {
                 this.status = newStatus;
                 updateIcon();
-            }
-        }
+            } 
+        } 
     }
 
     private void updateIcon() {
         if (this.userIcon < 0)
-            this.userIcon = TextureUtil.glGenTextures();
+            this.userIcon = TextureUtil.glGenTextures(); 
         try {
             URL url = new URL(this.status.getUser().getProfileImageURL());
             BufferedImage image = ImageIO.read(url);
@@ -64,9 +64,9 @@ public class TweetState extends MediaBase {
 
     public void render(float width, float height, boolean fitAspectRatio) {
         if (!isValid())
-            return;
+            return; 
         if (System.currentTimeMillis() % 2500L == 0L)
-            update();
+            update(); 
         bindTexture(this.userIcon);
         float hw = width * 0.5F;
         float hh = height * 0.5F;
@@ -99,14 +99,14 @@ public class TweetState extends MediaBase {
                 while (strIndex < s.length()) {
                     int endIndex = strIndex + maxLen;
                     if (endIndex > s.length())
-                        endIndex = s.length();
+                        endIndex = s.length(); 
                     String s2 = s.substring(strIndex, endIndex);
                     strIndex += maxLen;
                     (NGTUtilClient.getMinecraft()).fontRenderer.drawString(s2, posXText, posYText, 16777215, false);
                     posYText += strSize;
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     public void exit() {}
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/DummyVertexBuffer.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/DummyVertexBuffer.java
index eb0b843..5e4d445 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/DummyVertexBuffer.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/DummyVertexBuffer.java
@@ -26,13 +26,13 @@ public class DummyVertexBuffer extends BufferBuilder {
             LightUtil.unpack(vertexData, uvs, getVertexFormat(), i, 3);
             face.vertices[i] = Vertex.create(round(pos[0]), round(pos[1]), round(pos[2]), VecAccuracy.MEDIUM);
             face.textureCoordinates[i] = TextureCoordinate.create(round(uvf[0]), round(uvf[1]), VecAccuracy.MEDIUM);
-        }
+        } 
         this.faces.add(face);
     }
 
     private static float round(float par1) {
         if (par1 < 1.0E-4F && par1 > -1.0E-4F)
-            return 0.0F;
+            return 0.0F; 
         return par1;
     }
 
@@ -50,7 +50,7 @@ public class DummyVertexBuffer extends BufferBuilder {
         for (int i = 0; i < face.vertices.length; i++) {
             Vertex vtx = face.vertices[i];
             face.vertices[i] = Vertex.create(vtx.getX() + (float)x, vtx.getY() + (float)y, vtx.getZ() + (float)z, VecAccuracy.MEDIUM);
-        }
+        } 
     }
 
     public List<FaceWithIndex> getFaces() {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/EncryptedModel.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/EncryptedModel.java
index 3e0a82c..c570cba 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/EncryptedModel.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/EncryptedModel.java
@@ -50,9 +50,9 @@ public class EncryptedModel {
             model = new EncryptedModel(importData(is));
         } catch (Exception e) {
             throw new ModelFormatException("Failed to load NPM", e);
-        }
+        } 
         if (!model.match(jsonMD5))
-            throw new ModelFormatException("Illegal ModelPack");
+            throw new ModelFormatException("Illegal ModelPack"); 
         return model;
     }
 
@@ -68,21 +68,21 @@ public class EncryptedModel {
             } else {
                 ba = new byte[1][];
                 files = new File[] { file };
-            }
+            } 
         } else {
             ba = new byte[1][];
             files = new File[] { file };
-        }
+        } 
         for (int i = 0; i < ba.length; i++) {
             ByteArrayOutputStream baos = new ByteArrayOutputStream();
             FileInputStream fis = new FileInputStream(files[i]);
             byte[] b = new byte[1];
             while (fis.read(b) > 0)
-                baos.write(b);
+                baos.write(b); 
             fis.close();
             baos.close();
             ba[i] = baos.toByteArray();
-        }
+        } 
         return ba;
     }
 
@@ -95,7 +95,7 @@ public class EncryptedModel {
         BufferedReader br = new BufferedReader(new InputStreamReader(is));
         String string;
         while ((string = br.readLine()) != null)
-            sb.append(string);
+            sb.append(string); 
         br.close();
         String json = sb.toString();
         EncryptedData res = NGTJson.<EncryptedData>getObjectFromJson(json, EncryptedData.class);
@@ -105,15 +105,15 @@ public class EncryptedModel {
     public PolygonModel getModel(String name, VecAccuracy par1, Object... args) {
         InputStream[] isa = new InputStream[this.data.length];
         for (int i = 0; i < isa.length; i++)
-            isa[i] = new ByteArrayInputStream(this.data[i]);
+            isa[i] = new ByteArrayInputStream(this.data[i]); 
         PolygonModel model = ModelLoader.loadModel(isa, this.encData.originalFileName, par1, args);
         for (int j = 0; j < isa.length; j++) {
             try {
                 isa[j].close();
             } catch (IOException e) {
                 e.printStackTrace();
-            }
-        }
+            } 
+        } 
         return model;
     }
 
@@ -125,8 +125,8 @@ public class EncryptedModel {
                 md5[i] = getMD5(s);
             } catch (IOException e) {
                 e.printStackTrace();
-            }
-        }
+            } 
+        } 
         return md5;
     }
 
@@ -145,14 +145,14 @@ public class EncryptedModel {
         } catch (NoSuchAlgorithmException e) {
             e.printStackTrace();
             return null;
-        }
+        } 
     }
 
     private boolean match(byte[] ba) {
         for (int i = 0; i < this.md5.length; i++) {
             if (MessageDigest.isEqual(ba, this.md5[i]))
-                return true;
-        }
+                return true; 
+        } 
         return DEBUG;
     }
 
@@ -166,7 +166,7 @@ public class EncryptedModel {
             baos.close();
             byte[] ret = baos.toByteArray();
             sa[i] = Base64.getEncoder().encodeToString(ret);
-        }
+        } 
         return sa;
     }
 
@@ -180,13 +180,13 @@ public class EncryptedModel {
             byte[] buffer = new byte[1024];
             int len;
             while ((len = gis.read(buffer)) > 0)
-                baos.write(buffer, 0, len);
+                baos.write(buffer, 0, len); 
             gis.close();
             bais.close();
             baos.close();
             byte[] ret = baos.toByteArray();
             ba[i] = ret;
-        }
+        } 
         return ba;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/Face.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/Face.java
index c4efb4a..f986331 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/Face.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/Face.java
@@ -36,7 +36,7 @@ public class Face {
 
     private boolean checkSmoothing(Vertex normal, float angleCos) {
         if (normal == this.faceNormal)
-            return true;
+            return true; 
         double dx = this.faceNormal.getX();
         double dy = this.faceNormal.getY();
         double dz = this.faceNormal.getZ();
@@ -52,11 +52,11 @@ public class Face {
             List<Face> list = map.get(vtx);
             for (Face face : list) {
                 if (checkSmoothing(face.faceNormal, angleCos))
-                    vec = vec.add(face.faceNormal.getX(), face.faceNormal.getY(), face.faceNormal.getZ());
-            }
+                    vec = vec.add(face.faceNormal.getX(), face.faceNormal.getY(), face.faceNormal.getZ()); 
+            } 
             vec = vec.normalize();
             this.vertexNormals[i] = Vertex.create((float)vec.getX(), (float)vec.getY(), (float)vec.getZ(), accuracy);
-        }
+        } 
     }
 
     public void calculateFaceNormal(VecAccuracy accuracy) {
@@ -72,7 +72,7 @@ public class Face {
                     .getY() - this.vertices[idx].getY()), (this.vertices[idx + 2]
                     .getZ() - this.vertices[idx].getZ()));
             vec = vec.add(v1.crossProduct(v2).normalize());
-        }
+        } 
         vec = vec.normalize();
         this.faceNormal = Vertex.create((float)vec.getX(), (float)vec.getY(), (float)vec.getZ(), accuracy);
     }
@@ -96,32 +96,32 @@ public class Face {
                 boolean flag = ((type == 0 && x == 0.0F) || (type == 1 && y == 0.0F) || (type == 2 && z == 0.0F));
                 vtx2 = flag ? vtx : Vertex.create(x, y, z, accuracy);
                 mirrorVertex.put(vtx, vtx2);
-            }
+            } 
             face.addVertex(index, vtx2, this.textureCoordinates[i]);
-        }
+        } 
         return face;
     }
 
     public Face copy() {
         Face face = new Face(this.vertices.length, this.materialId);
         for (int i = 0; i < this.vertices.length; i++)
-            face.addVertex(i, this.vertices[i].copy(VecAccuracy.MEDIUM), this.textureCoordinates[i].copy());
+            face.addVertex(i, this.vertices[i].copy(VecAccuracy.MEDIUM), this.textureCoordinates[i].copy()); 
         return face;
     }
 
     public boolean equals(Object object) {
         if (this == object)
-            return true;
+            return true; 
         if (object instanceof Face) {
             Face face = (Face)object;
             if (this.vertices.length != face.vertices.length)
-                return false;
+                return false; 
             for (int i = 0; i < this.vertices.length; i++) {
                 if (!this.vertices[i].equals(face.vertices[i]))
-                    return false;
-            }
+                    return false; 
+            } 
             return true;
-        }
+        } 
         return false;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/GroupObject.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/GroupObject.java
index b8e49d5..c0744c6 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/GroupObject.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/GroupObject.java
@@ -29,7 +29,7 @@ public final class GroupObject {
         Map<Vertex, List<Face>> faceMap = new HashMap<>(this.faces.size() * 4);
         for (Face face : this.faces) {
             if (face.faceNormal == null)
-                face.calculateFaceNormal(accuracy);
+                face.calculateFaceNormal(accuracy); 
             for (int i = 0; i < face.vertices.length; i++) {
                 if (i == 0 || i == 1 || i % 3 == 2) {
                     Vertex vtx = face.vertices[i];
@@ -37,15 +37,15 @@ public final class GroupObject {
                     if (list == null) {
                         list = new ArrayList<>();
                         faceMap.put(vtx, list);
-                    }
+                    } 
                     if (!list.contains(face))
-                        list.add(face);
-                }
-            }
-        }
+                        list.add(face); 
+                } 
+            } 
+        } 
         float angleCos = NGTMath.cos(this.smoothingAngle);
         for (Face face : this.faces)
-            face.calcVertexNormals(faceMap, angleCos, accuracy);
+            face.calcVertexNormals(faceMap, angleCos, accuracy); 
     }
 
     public void render(boolean smoothing) {
@@ -54,13 +54,13 @@ public final class GroupObject {
             tessellator.startDrawing(this.drawMode);
             render(tessellator, smoothing);
             tessellator.draw();
-        }
+        } 
     }
 
     public void render(IRenderer tessellator, boolean smoothing) {
         if (!this.faces.isEmpty())
             for (Face face : this.faces)
-                face.addFaceForRender(tessellator, smoothing);
+                face.addFaceForRender(tessellator, smoothing);  
     }
 
     public GroupObject copy(String name) {
@@ -68,7 +68,7 @@ public final class GroupObject {
         for (Face origFace : this.faces) {
             Face face = origFace.copy();
             go.faces.add(face);
-        }
+        } 
         return go;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/ModelLoader.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/ModelLoader.java
index d917d22..8ba475b 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/ModelLoader.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/ModelLoader.java
@@ -30,11 +30,11 @@ public final class ModelLoader {
                     is2 = NGTFileLoader.getInputStream(mtlFile);
                 } catch (IOException iOException) {}
                 return loadModel(new InputStream[] { is, is2 }, fileName, par1, args);
-            }
+            } 
             return loadModel(new InputStream[] { is }, fileName, par1, args);
         } catch (IOException e) {
             throw new ModelFormatException("Failed to load model : " + fileName, e);
-        }
+        } 
     }
 
     public static PolygonModel loadModel(File file, VecAccuracy par1, Object... args) {
@@ -48,27 +48,27 @@ public final class ModelLoader {
                     is2 = new BufferedInputStream(new FileInputStream(mtlFile));
                 } catch (IOException iOException) {}
                 return loadModel(new InputStream[] { is, is2 }, file.getName(), par1, args);
-            }
+            } 
             return loadModel(new InputStream[] { is }, file.getName(), par1, args);
         } catch (IOException e) {
             throw new ModelFormatException("Failed to load model : " + file.getName(), e);
-        }
+        } 
     }
 
     public static PolygonModel loadModel(InputStream[] is, String name, VecAccuracy par1, Object... args) {
         if (FileType.OBJ.match(name))
-            return new ObjModel(is, name, par1);
+            return new ObjModel(is, name, par1); 
         if (FileType.MQO.match(name)) {
             if (args.length > 0)
-                return new MqoModel(is, name, ((Integer)args[0]).intValue(), par1);
+                return new MqoModel(is, name, ((Integer)args[0]).intValue(), par1); 
             return new MqoModel(is, name, 4, par1);
-        }
+        } 
         if (FileType.MQOZ.match(name))
-            return new MqozModel(is, name, 4, par1);
+            return new MqozModel(is, name, 4, par1); 
         if (FileType.NPM.match(name)) {
             EncryptedModel em = EncryptedModel.getInstance(is[0], (byte[])args[1]);
             return em.getModel(name, par1, args);
-        }
+        } 
         return null;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/ModelLoaderMMD.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/ModelLoaderMMD.java
index 61933af..f3964bf 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/ModelLoaderMMD.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/ModelLoaderMMD.java
@@ -1,7 +1,5 @@
 package jp.ngt.ngtlib.renderer.model;
 
-import com.na128.mmd.Pmx;
-import com.na128.mmd.Reader;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
@@ -11,7 +9,7 @@ import net.minecraftforge.fml.relauncher.SideOnly;
 @SideOnly(Side.CLIENT)
 public final class ModelLoaderMMD {
     public static PolygonModel loadModel(InputStream[] is, String name, VecAccuracy par1, Object... args) throws IOException {
-        Pmx pmx = Reader.read(new File("path/to/pmx_or_pmd.pmx"));
+        // TODO: implement
         return null;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/MqoModel.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/MqoModel.java
index 268e4c4..ca68fca 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/MqoModel.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/MqoModel.java
@@ -54,33 +54,33 @@ public class MqoModel extends PolygonModel {
 
     protected void parseLine(String currentLine, int lineCount) {
         if (currentLine.isEmpty())
-            return;
+            return; 
         if (this.currentType >= 0) {
             if (currentLine.startsWith("}")) {
                 this.currentType = -1;
             } else if (this.currentType == 2) {
                 if (this.currentGroupObject == null)
-                    this.currentGroupObject = new GroupObject("Default", this.drawMode);
+                    this.currentGroupObject = new GroupObject("Default", this.drawMode); 
                 Face face = parseFace(currentLine, lineCount);
                 if (face != null) {
                     this.currentGroupObject.faces.add(face);
                     if (this.mirrorType >= 0) {
                         Face mirror = face.getMirror(this.mirrorType, this.mirrorVertex, this.accuracy);
                         this.currentGroupObject.faces.add(mirror);
-                    }
-                }
+                    } 
+                } 
             } else if (this.currentType == 1) {
                 Vertex vertex = parseVertex(currentLine, lineCount);
                 if (vertex != null) {
                     this.currentVertices.add(vertex);
                     calcSizeBox(vertex);
-                }
+                } 
             } else {
                 if (this.currentType == 4)
-                    return;
+                    return; 
                 if (this.currentType == 3)
-                    parseMaterial(currentLine, lineCount);
-            }
+                    parseMaterial(currentLine, lineCount); 
+            } 
         } else if (currentLine.startsWith("vertex ")) {
             this.currentType = 1;
             this.vertices.addAll(this.currentVertices);
@@ -93,7 +93,7 @@ public class MqoModel extends PolygonModel {
             GroupObject group = parseGroupObject(currentLine, lineCount);
             if (group != null)
                 if (this.currentGroupObject != null)
-                    this.groupObjects.add(this.currentGroupObject);
+                    this.groupObjects.add(this.currentGroupObject);  
             this.currentGroupObject = group;
             this.mirrorType = -1;
             this.mirrorVertex.clear();
@@ -107,7 +107,7 @@ public class MqoModel extends PolygonModel {
             this.currentGroupObject.smoothingAngle = angle;
         } else if (currentLine.startsWith("Thumbnail ")) {
             this.currentType = 4;
-        }
+        } 
     }
 
     protected void postInit() {
@@ -125,19 +125,19 @@ public class MqoModel extends PolygonModel {
             this.materials.put(matName, material);
         } else {
             throw new ModelFormatException("Error parsing material ('" + line + "', line " + lineCount + ") in file '" + this.fileName + "'");
-        }
+        } 
     }
 
     private Vertex parseVertex(String line, int lineCount) throws ModelFormatException {
         String[] tokens = split(line, ' ');
         try {
             if (tokens.length == 2)
-                return Vertex.create(getCorrectValue(tokens[0]), getCorrectValue(tokens[1]), 0.0F, this.accuracy);
+                return Vertex.create(getCorrectValue(tokens[0]), getCorrectValue(tokens[1]), 0.0F, this.accuracy); 
             if (tokens.length == 3)
-                return Vertex.create(getCorrectValue(tokens[0]), getCorrectValue(tokens[1]), getCorrectValue(tokens[2]), this.accuracy);
+                return Vertex.create(getCorrectValue(tokens[0]), getCorrectValue(tokens[1]), getCorrectValue(tokens[2]), this.accuracy); 
         } catch (NumberFormatException e) {
             throw new ModelFormatException(String.format("Number formatting error at line %d", new Object[] { Integer.valueOf(lineCount) }), e);
-        }
+        } 
         return null;
     }
 
@@ -152,7 +152,7 @@ public class MqoModel extends PolygonModel {
         int matId = (mat.length() == 0) ? 0 : Integer.parseInt(mat);
         int vertexCount = Integer.parseInt(tokens[0]);
         if (vertexCount == 4 && this.drawMode == 7)
-            return parseFaceQuads(line, (byte)matId, lineCount);
+            return parseFaceQuads(line, (byte)matId, lineCount); 
         return (vertexCount < 3) ? null : parsePolygon(line, (byte)matId, lineCount, vertexCount);
     }
 
@@ -168,7 +168,7 @@ public class MqoModel extends PolygonModel {
             float v = (uvs == null) ? 0.0F : getFloat(uvs[i * 2 + 1]);
             TextureCoordinate tex = TextureCoordinate.create(u, v, this.accuracy);
             face.addVertex(3 - i, vertex, tex);
-        }
+        } 
         face.calculateFaceNormal(this.accuracy);
         return face;
     }
@@ -177,7 +177,7 @@ public class MqoModel extends PolygonModel {
         if (this.drawMode != 4) {
             String msg = String.format("Error parsing face ('%s', line %d) in file '%s'", new Object[] { line, Integer.valueOf(lineCount), this.fileName });
             throw new ModelFormatException(msg);
-        }
+        } 
         int size = (vertexCount - 2) * 3;
         Face face = new Face(size, matId);
         String vertexIndex = getVertexIndex(line);
@@ -192,7 +192,7 @@ public class MqoModel extends PolygonModel {
             float v = (uvs == null) ? 0.0F : getFloat(uvs[index * 2 + 1]);
             TextureCoordinate tex = TextureCoordinate.create(u, v, this.accuracy);
             face.addVertex(i, vertex, tex);
-        }
+        } 
         face.calculateFaceNormal(this.accuracy);
         return face;
     }
@@ -200,7 +200,7 @@ public class MqoModel extends PolygonModel {
     private GroupObject parseGroupObject(String line, int lineCount) throws ModelFormatException {
         String s = getGroupObjectName(line);
         if (s != null && s.length() > 0)
-            return new GroupObject(s, this.drawMode);
+            return new GroupObject(s, this.drawMode); 
         throw new ModelFormatException("Error parsing object ('" + line + "', line " + lineCount + ") in file '" + this.fileName + "'");
     }
 
@@ -226,7 +226,7 @@ public class MqoModel extends PolygonModel {
             return matcher.group(1);
         } catch (IllegalStateException e) {
             return "";
-        }
+        } 
     }
 
     public FileType getType() {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/MqozModel.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/MqozModel.java
index c379fc4..6db761c 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/MqozModel.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/MqozModel.java
@@ -22,7 +22,7 @@ public class MqozModel extends MqoModel {
             zis.close();
         } catch (IOException e) {
             throw new ModelFormatException("Exception on reading MQOZ.", e);
-        }
+        } 
     }
 
     public FileType getType() {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/MtlParser.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/MtlParser.java
index 2d38fd3..a6de2b8 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/MtlParser.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/MtlParser.java
@@ -21,7 +21,7 @@ public class MtlParser {
 
     private void loadMaterial(InputStream inputStream) throws ModelFormatException {
         if (inputStream == null)
-            return;
+            return; 
         BufferedReader reader = null;
         String currentLine = null;
         int lineCount = 0;
@@ -32,13 +32,13 @@ public class MtlParser {
                 lineCount++;
                 currentLine = currentLine.replaceAll("\\s+", " ").trim();
                 if (currentLine.length() == 0 || currentLine.startsWith("#"))
-                    continue;
+                    continue; 
                 if (currentLine.startsWith("newmtl ")) {
                     String[] sa = currentLine.split(" ");
                     this.currentMaterial = new Material((byte)this.materials.size(), null);
                     this.materials.put(sa[1], this.currentMaterial);
-                }
-            }
+                } 
+            } 
         } catch (IOException e) {
             throw new ModelFormatException("IO Exception reading model format", e);
         } finally {
@@ -48,7 +48,7 @@ public class MtlParser {
             try {
                 inputStream.close();
             } catch (IOException iOException) {}
-        }
+        } 
     }
 
     public Map<String, Material> getMaterials() {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/NGTOModel.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/NGTOModel.java
index a313fc3..4682f12 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/NGTOModel.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/NGTOModel.java
@@ -43,7 +43,7 @@ public final class NGTOModel implements IModelNGT {
     public NGTOModel(ResourceLocation par1, float par2) {
         this.ngto = loadModel(par1);
         if (this.ngto == null)
-            throw new ModelFormatException("Can't load NGTO");
+            throw new ModelFormatException("Can't load NGTO"); 
         this.materials.put("default", new Material((byte)0, TextureMap.LOCATION_BLOCKS_TEXTURE));
         this.scale = par2;
         calcSizeBox(this.ngto, this.scale, this.sizeBox);
@@ -55,7 +55,7 @@ public final class NGTOModel implements IModelNGT {
             return NGTObject.load(res.getInputStream());
         } catch (IOException e) {
             throw new ModelFormatException("IO Exception reading model", e);
-        }
+        } 
     }
 
     public static final void calcSizeBox(NGTObject ngto, float scale, float[] sizeBox) {
@@ -76,9 +76,9 @@ public final class NGTOModel implements IModelNGT {
     public void renderAll(boolean smoothing) {
         if (this.world == null) {
             if (NGTUtil.getClientWorld() == null)
-                return;
+                return; 
             this.world = new NGTWorld(NGTUtil.getClientWorld(), this.ngto);
-        }
+        } 
         GL11.glPushMatrix();
         GL11.glScalef(this.scale, this.scale, this.scale);
         float x = this.ngto.xSize * 0.5F;
@@ -86,7 +86,7 @@ public final class NGTOModel implements IModelNGT {
         GL11.glTranslatef(-x, 0.0F, -z);
         int pass = MinecraftForgeClient.getRenderPass();
         if (pass == -1)
-            pass = 0;
+            pass = 0; 
         NGTObjectRenderer.INSTANCE.renderTileEntities(this.world, 0.0F, pass);
         NGTObjectRenderer.INSTANCE.renderEntities(this.world, 0.0F, pass);
         renderBlocks(pass);
@@ -95,21 +95,21 @@ public final class NGTOModel implements IModelNGT {
 
     public void renderOnly(boolean smoothing, String... groupNames) {
         if (groupNames.length == 1 && groupNames[0].equals("default"))
-            renderAll(smoothing);
+            renderAll(smoothing); 
     }
 
     public void renderPart(boolean smoothing, String partName) {
         if (partName.equals("default"))
-            renderAll(smoothing);
+            renderAll(smoothing); 
     }
 
     private void renderBlocks(int pass) {
         if (this.glLists == null)
-            this.glLists = new GLObject[2];
+            this.glLists = new GLObject[2]; 
         NGTUtilClient.getMinecraft().getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
         boolean smoothing = ((NGTUtilClient.getMinecraft()).gameSettings.ambientOcclusion != 0);
         if (smoothing)
-            GL11.glShadeModel(7425);
+            GL11.glShadeModel(7425); 
         if (!GLHelper.isValid(this.glLists[pass])) {
             this.glLists[pass] = GLHelper.generateGLList(this.glLists[pass]);
             GLHelper.startCompile(this.glLists[pass]);
@@ -117,9 +117,9 @@ public final class NGTOModel implements IModelNGT {
             GLHelper.endCompile();
         } else {
             GLHelper.callList(this.glLists[pass]);
-        }
+        } 
         if (smoothing)
-            GL11.glShadeModel(7424);
+            GL11.glShadeModel(7424); 
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
         GLHelper.enableLighting();
         (NGTUtilClient.getMinecraft()).entityRenderer.enableLightmap();
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/NGTZModel.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/NGTZModel.java
index 87817ee..1b48d46 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/NGTZModel.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/NGTZModel.java
@@ -39,7 +39,7 @@ public class NGTZModel implements IModelNGT {
             NGTOParts parts = new NGTOParts(set.getKey(), set.getValue());
             this.objects.add(parts);
             NGTOModel.calcSizeBox(parts.ngto, this.scale, this.sizeBox);
-        }
+        } 
         this.materials.put("default", new Material((byte)0, TextureMap.LOCATION_BLOCKS_TEXTURE));
     }
 
@@ -49,23 +49,23 @@ public class NGTZModel implements IModelNGT {
 
     public void renderAll(boolean smoothing) {
         for (NGTOParts obj : this.objects)
-            obj.render(this.scale);
+            obj.render(this.scale); 
     }
 
     public void renderOnly(boolean smoothing, String... groupNames) {
         for (NGTOParts obj : this.objects) {
             for (String s : groupNames) {
                 if (s.equals(obj.name))
-                    obj.render(this.scale);
-            }
-        }
+                    obj.render(this.scale); 
+            } 
+        } 
     }
 
     public void renderPart(boolean smoothing, String partName) {
         for (NGTOParts obj : this.objects) {
             if (partName.equals(obj.name))
-                obj.render(this.scale);
-        }
+                obj.render(this.scale); 
+        } 
     }
 
     public int getDrawMode() {
@@ -101,9 +101,9 @@ public class NGTZModel implements IModelNGT {
         public void render(float scale) {
             if (this.world == null) {
                 if (NGTUtil.getClientWorld() == null)
-                    return;
+                    return; 
                 this.world = new NGTWorld(NGTUtil.getClientWorld(), this.ngto);
-            }
+            } 
             GL11.glPushMatrix();
             GL11.glScalef(scale, scale, scale);
             float x = this.ngto.xSize * 0.5F;
@@ -111,7 +111,7 @@ public class NGTZModel implements IModelNGT {
             GL11.glTranslatef(-x, 0.0F, -z);
             int pass = MinecraftForgeClient.getRenderPass();
             if (pass == -1)
-                pass = 0;
+                pass = 0; 
             NGTObjectRenderer.INSTANCE.renderTileEntities(this.world, 0.0F, pass);
             NGTObjectRenderer.INSTANCE.renderEntities(this.world, 0.0F, pass);
             renderBlocks(pass);
@@ -120,11 +120,11 @@ public class NGTZModel implements IModelNGT {
 
         private void renderBlocks(int pass) {
             if (this.glLists == null)
-                this.glLists = new GLObject[2];
+                this.glLists = new GLObject[2]; 
             NGTUtilClient.getMinecraft().getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
             boolean smoothing = ((NGTUtilClient.getMinecraft()).gameSettings.ambientOcclusion != 0);
             if (smoothing)
-                GL11.glShadeModel(7425);
+                GL11.glShadeModel(7425); 
             if (!GLHelper.isValid(this.glLists[pass])) {
                 this.glLists[pass] = GLHelper.generateGLList(this.glLists[pass]);
                 GLHelper.startCompile(this.glLists[pass]);
@@ -132,9 +132,9 @@ public class NGTZModel implements IModelNGT {
                 GLHelper.endCompile();
             } else {
                 GLHelper.callList(this.glLists[pass]);
-            }
+            } 
             if (smoothing)
-                GL11.glShadeModel(7424);
+                GL11.glShadeModel(7424); 
             GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
             GLHelper.enableLighting();
             (NGTUtilClient.getMinecraft()).entityRenderer.enableLightmap();
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/ObjModel.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/ObjModel.java
index 8d5e70b..f8c26fc 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/ObjModel.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/ObjModel.java
@@ -45,49 +45,49 @@ public final class ObjModel extends PolygonModel {
         this.textureCoordinates = new ArrayList<>();
         InputStream is2 = null;
         if (is.length >= 2)
-            is2 = is[1];
+            is2 = is[1]; 
         this.materials = (new MtlParser(is2)).getMaterials();
         super.init(is);
     }
 
     protected void parseLine(String currentLine, int lineCount) {
         if (currentLine.isEmpty())
-            return;
+            return; 
         if (currentLine.startsWith("f ")) {
             if (this.currentGroupObject == null) {
                 this.currentGroupObject = new GroupObject("Default", 4);
                 this.currentGroupObject.smoothingAngle = 60.0F;
-            }
+            } 
             Face face = parseFace(currentLine, lineCount);
             if (face != null)
-                this.currentGroupObject.faces.add(face);
+                this.currentGroupObject.faces.add(face); 
         } else if (currentLine.startsWith("vt ")) {
             TextureCoordinate textureCoordinate = parseTextureCoordinate(currentLine, lineCount);
             if (textureCoordinate != null)
-                this.textureCoordinates.add(textureCoordinate);
+                this.textureCoordinates.add(textureCoordinate); 
         } else if (currentLine.startsWith("v ")) {
             Vertex vertex = parseVertex(currentLine, lineCount);
             if (vertex != null) {
                 this.vertices.add(vertex);
                 calcSizeBox(vertex);
-            }
+            } 
         } else if (currentLine.startsWith("usemtl ")) {
             String[] sa = split(currentLine, ' ');
             Material mat = this.materials.get(sa[1]);
             if (mat != null)
-                this.currentMaterial = mat.id;
+                this.currentMaterial = mat.id; 
         } else if (currentLine.startsWith("vn ")) {
             Vertex vertex = parseVertexNormal(currentLine, lineCount);
             if (vertex != null)
-                this.vertexNormals.add(vertex);
-        } else if ((currentLine.startsWith("g ") | currentLine.startsWith("o ")) != 0) {
+                this.vertexNormals.add(vertex); 
+        } else if ((currentLine.startsWith("g ") | currentLine.startsWith("o "))) {
             GroupObject group = parseGroupObject(currentLine, lineCount);
             if (group != null)
                 if (this.currentGroupObject != null)
-                    this.groupObjects.add(this.currentGroupObject);
+                    this.groupObjects.add(this.currentGroupObject);  
             this.currentGroupObject = group;
             this.currentGroupObject.smoothingAngle = 60.0F;
-        }
+        } 
     }
 
     protected void postInit() {
@@ -102,15 +102,15 @@ public final class ObjModel extends PolygonModel {
             String[] tokens = split(line, ' ');
             try {
                 if (tokens.length == 2)
-                    return Vertex.create(Float.parseFloat(tokens[0]), Float.parseFloat(tokens[1]), 0.0F, this.accuracy);
+                    return Vertex.create(Float.parseFloat(tokens[0]), Float.parseFloat(tokens[1]), 0.0F, this.accuracy); 
                 if (tokens.length == 3)
-                    return Vertex.create(Float.parseFloat(tokens[0]), Float.parseFloat(tokens[1]), Float.parseFloat(tokens[2]), this.accuracy);
+                    return Vertex.create(Float.parseFloat(tokens[0]), Float.parseFloat(tokens[1]), Float.parseFloat(tokens[2]), this.accuracy); 
             } catch (NumberFormatException e) {
                 throw new ModelFormatException(String.format("Number formatting error at line %d", new Object[] { Integer.valueOf(lineCount) }), e);
-            }
+            } 
         } else {
             throw new ModelFormatException("Error parsing entry ('" + line + "', line " + lineCount + ") in file '" + this.fileName + "' - Incorrect format");
-        }
+        } 
         return null;
     }
 
@@ -120,13 +120,13 @@ public final class ObjModel extends PolygonModel {
             String[] tokens = split(line, ' ');
             try {
                 if (tokens.length == 3)
-                    return Vertex.create(Float.parseFloat(tokens[0]), Float.parseFloat(tokens[1]), Float.parseFloat(tokens[2]), this.accuracy);
+                    return Vertex.create(Float.parseFloat(tokens[0]), Float.parseFloat(tokens[1]), Float.parseFloat(tokens[2]), this.accuracy); 
             } catch (NumberFormatException e) {
                 throw new ModelFormatException(String.format("Number formatting error at line %d", new Object[] { Integer.valueOf(lineCount) }), e);
-            }
+            } 
         } else {
             throw new ModelFormatException("Error parsing entry ('" + line + "', line " + lineCount + ") in file '" + this.fileName + "' - Incorrect format");
-        }
+        } 
         return null;
     }
 
@@ -138,8 +138,8 @@ public final class ObjModel extends PolygonModel {
                 return TextureCoordinate.create(Float.parseFloat(tokens[0]), 1.0F - Float.parseFloat(tokens[1]), this.accuracy);
             } catch (NumberFormatException e) {
                 throw new ModelFormatException(String.format("Number formatting error at line %d", new Object[] { Integer.valueOf(lineCount) }), e);
-            }
-        }
+            } 
+        } 
         throw new ModelFormatException("Error parsing entry ('" + line + "', line " + lineCount + ") in file '" + this.fileName + "' - Incorrect format");
     }
 
@@ -148,10 +148,10 @@ public final class ObjModel extends PolygonModel {
             String trimmedLine = line.substring(line.indexOf(' ') + 1);
             String[] tokens = split(trimmedLine, ' ');
             if (tokens.length > 2)
-                return parsePolygon(line, tokens, lineCount);
+                return parsePolygon(line, tokens, lineCount); 
         } else {
             throw new ModelFormatException("Error parsing entry ('" + line + "', line " + lineCount + ") in file '" + this.fileName + "' - Incorrect format");
-        }
+        } 
         return null;
     }
 
@@ -171,19 +171,19 @@ public final class ObjModel extends PolygonModel {
                         subTokens = split(tokens[index], '/');
                     } else if (type == 2) {
                         subTokens = split(tokens[index], "//");
-                    }
+                    } 
                     vertex = this.vertices.get(Integer.parseInt(subTokens[0]) - 1);
                     if (type == 0 || type == 1)
-                        tex = this.textureCoordinates.get(Integer.parseInt(subTokens[1]) - 1);
+                        tex = this.textureCoordinates.get(Integer.parseInt(subTokens[1]) - 1); 
                     if (type == 0 || type == 2);
                 } else {
                     vertex = this.vertices.get(Integer.parseInt(tokens[index]) - 1);
-                }
+                } 
                 face.addVertex(i, vertex, tex);
-            }
+            } 
             face.calculateFaceNormal(this.accuracy);
             return face;
-        }
+        } 
         throw new ModelFormatException("Error parsing entry ('" + line + "', line " + lineCount + ") in file '" + this.fileName + "' - Incorrect format");
     }
 
@@ -191,10 +191,10 @@ public final class ObjModel extends PolygonModel {
         if (isValidGroupObjectLine(line)) {
             String trimmedLine = line.substring(line.indexOf(' ') + 1);
             if (trimmedLine.length() > 0)
-                return new GroupObject(trimmedLine, 4);
+                return new GroupObject(trimmedLine, 4); 
         } else {
             throw new ModelFormatException("Error parsing entry ('" + line + "', line " + lineCount + ") in file '" + this.fileName + "' - Incorrect format");
-        }
+        } 
         return null;
     }
 
@@ -232,13 +232,13 @@ public final class ObjModel extends PolygonModel {
 
     private static byte getValidType(String line) {
         if (isValidFace_V_VT_VN_Line(line))
-            return 0;
+            return 0; 
         if (isValidFace_V_VT_Line(line))
-            return 1;
+            return 1; 
         if (isValidFace_V_VN_Line(line))
-            return 2;
+            return 2; 
         if (isValidFace_V_Line(line))
-            return 3;
+            return 3; 
         return -1;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/PolygonModel.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/PolygonModel.java
index 1f0ef37..45f92f1 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/PolygonModel.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/PolygonModel.java
@@ -51,7 +51,7 @@ public abstract class PolygonModel implements IModelNGT {
 
     private final void calcVertexNormals() {
         for (GroupObject obj : this.groupObjects)
-            obj.calcVertexNormals(this.accuracy);
+            obj.calcVertexNormals(this.accuracy); 
     }
 
     protected final void calcSizeBox(Vertex vtx) {
@@ -59,17 +59,17 @@ public abstract class PolygonModel implements IModelNGT {
             this.sizeBox[0] = vtx.getX();
         } else if (vtx.getX() > this.sizeBox[3]) {
             this.sizeBox[3] = vtx.getX();
-        }
+        } 
         if (vtx.getY() < this.sizeBox[1]) {
             this.sizeBox[1] = vtx.getY();
         } else if (vtx.getY() > this.sizeBox[4]) {
             this.sizeBox[4] = vtx.getY();
-        }
+        } 
         if (vtx.getZ() < this.sizeBox[2]) {
             this.sizeBox[2] = vtx.getZ();
         } else if (vtx.getZ() > this.sizeBox[5]) {
             this.sizeBox[5] = vtx.getZ();
-        }
+        } 
     }
 
     public final float[] getSize() {
@@ -78,44 +78,44 @@ public abstract class PolygonModel implements IModelNGT {
 
     public void renderAll(boolean smoothing) {
         if (smoothing)
-            GL11.glShadeModel(7425);
+            GL11.glShadeModel(7425); 
         NGTTessellator tessellator = NGTTessellator.instance;
         tessellator.startDrawing(this.drawMode);
         tessellateAll(tessellator, smoothing);
         tessellator.draw();
         if (smoothing)
-            GL11.glShadeModel(7424);
+            GL11.glShadeModel(7424); 
     }
 
     public void tessellateAll(NGTTessellator tessellator, boolean smoothing) {
         for (GroupObject groupObject : this.groupObjects)
-            groupObject.render(tessellator, smoothing);
+            groupObject.render(tessellator, smoothing); 
     }
 
     public void renderOnly(boolean smoothing, String... groupNames) {
         if (smoothing)
-            GL11.glShadeModel(7425);
+            GL11.glShadeModel(7425); 
         for (GroupObject groupObject : this.groupObjects) {
             for (String groupName : groupNames) {
                 if (groupName.equalsIgnoreCase(groupObject.name))
-                    groupObject.render(smoothing);
-            }
-        }
+                    groupObject.render(smoothing); 
+            } 
+        } 
         if (smoothing)
-            GL11.glShadeModel(7424);
+            GL11.glShadeModel(7424); 
     }
 
     public void renderPart(boolean smoothing, String partName) {
         if (smoothing)
-            GL11.glShadeModel(7425);
+            GL11.glShadeModel(7425); 
         for (GroupObject groupObject : this.groupObjects) {
             if (partName.equalsIgnoreCase(groupObject.name)) {
                 groupObject.render(smoothing);
                 return;
-            }
-        }
+            } 
+        } 
         if (smoothing)
-            GL11.glShadeModel(7424);
+            GL11.glShadeModel(7424); 
     }
 
     public int getDrawMode() {
@@ -131,7 +131,7 @@ public abstract class PolygonModel implements IModelNGT {
             return Float.parseFloat(s);
         } catch (NumberFormatException e) {
             return 0.0F;
-        }
+        } 
     }
 
     protected PolygonModel() {
@@ -163,11 +163,11 @@ public abstract class PolygonModel implements IModelNGT {
             if (nextHit < 0) {
                 this.tempList.add(target.substring(index, target.length()));
                 break;
-            }
+            } 
             if (index < nextHit)
-                this.tempList.add(target.substring(index, nextHit));
+                this.tempList.add(target.substring(index, nextHit)); 
             index = nextHit + 1;
-        }
+        } 
         return this.tempList.<String>toArray(new String[this.tempList.size()]);
     }
 
@@ -179,11 +179,11 @@ public abstract class PolygonModel implements IModelNGT {
             if (nextHit < 0) {
                 this.tempList.add(target.substring(index, target.length()));
                 break;
-            }
+            } 
             if (index < nextHit)
-                this.tempList.add(target.substring(index, nextHit));
+                this.tempList.add(target.substring(index, nextHit)); 
             index = nextHit + regex.length();
-        }
+        } 
         return this.tempList.<String>toArray(new String[this.tempList.size()]);
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/TextureCoordinate.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/TextureCoordinate.java
index b02f655..e032796 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/TextureCoordinate.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/TextureCoordinate.java
@@ -11,7 +11,7 @@ public abstract class TextureCoordinate {
                 return new TexCoordinateShort(u, v);
             case MEDIUM:
                 return new TexCoordinateFloat(u, v);
-        }
+        } 
         return new TexCoordinateFloat(u, v);
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/TextureSet.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/TextureSet.java
index bfd0fbe..2c39570 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/TextureSet.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/TextureSet.java
@@ -30,10 +30,10 @@ public class TextureSet {
                 } else {
                     String s = (new StringBuilder(textureName)).insert(index, "_light" + i).toString();
                     this.subTextures[i] = ModelPackManager.INSTANCE.getResource(s);
-                }
-            }
+                } 
+            } 
         } else {
             this.subTextures = null;
-        }
+        } 
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/Vertex.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/Vertex.java
index 520d079..a143207 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/Vertex.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/Vertex.java
@@ -12,16 +12,18 @@ public abstract class Vertex implements Comparable<Vertex> {
                 return new VertexShort(x, y, z);
             case MEDIUM:
                 return new VertexFloat(x, y, z);
-        }
+        } 
         return new VertexFloat(x, y, z);
     }
 
     public Vertex add(Vertex vertex) {
         setVec(getX() + vertex.getX(), getY() + vertex.getY(), getZ() + vertex.getZ());
+        return this;
     }
 
     public Vertex expand(float par1) {
         setVec(getX() * par1, getY() * par1, getZ() * par1);
+        return this;
     }
 
     public void normalize() {
@@ -39,11 +41,11 @@ public abstract class Vertex implements Comparable<Vertex> {
 
     public boolean equals(Object object) {
         if (object == this)
-            return true;
+            return true; 
         if (object instanceof Vertex) {
             Vertex v = (Vertex)object;
             return (getX() == v.getX() && getY() == v.getY() && getZ() == v.getZ());
-        }
+        } 
         return false;
     }
 
@@ -56,7 +58,7 @@ public abstract class Vertex implements Comparable<Vertex> {
 
     public int compareTo(Vertex arg) {
         if (this == arg)
-            return 0;
+            return 0; 
         float myF = 0.0F;
         float argF = 0.0F;
         if (getX() != arg.getX()) {
@@ -70,7 +72,7 @@ public abstract class Vertex implements Comparable<Vertex> {
             argF = arg.getZ();
         } else {
             return 0;
-        }
+        } 
         return (int)(myF * 10.0F - argF * 10.0F);
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/VoxelUtil.java b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/VoxelUtil.java
index 049d4a0..a599083 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/renderer/model/VoxelUtil.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/renderer/model/VoxelUtil.java
@@ -42,7 +42,7 @@ public final class VoxelUtil {
             saveBlockTexture(new File(file.getParentFile(), texName));
         } catch (Exception e) {
             e.printStackTrace();
-        }
+        } 
     }
 
     public static NGTObject importFromPolygon(File file, float scale) {
@@ -61,17 +61,17 @@ public final class VoxelUtil {
                 if (index < 0) {
                     index = vertexes.size();
                     vertexes.add(vtx);
-                }
+                } 
                 face.vtxIndexes[i] = index + 1;
                 TextureCoordinate texCo = face.textureCoordinates[i];
                 index = texCoordinates.indexOf(texCo);
                 if (index < 0) {
                     index = texCoordinates.size();
                     texCoordinates.add(texCo);
-                }
+                } 
                 face.uvIndexes[i] = index + 1;
-            }
-        }
+            } 
+        } 
         StringBuilder sb = new StringBuilder();
         sb.append("#NGTLib v2.4.14 Obj File\n");
         sb.append("mtllib " + mtlFile + "\n");
@@ -85,14 +85,14 @@ public final class VoxelUtil {
             sb.append(" ");
             sb.append(vtx.getZ());
             sb.append("\n");
-        }
+        } 
         for (TextureCoordinate tex : texCoordinates) {
             sb.append("vt ");
             sb.append(tex.getU());
             sb.append(" ");
             sb.append(tex.getV());
             sb.append("\n");
-        }
+        } 
         for (FaceWithIndex face : faces) {
             sb.append("f");
             for (int i = 0; i < face.vertices.length; i++) {
@@ -100,9 +100,9 @@ public final class VoxelUtil {
                 sb.append(face.vtxIndexes[i]);
                 sb.append("/");
                 sb.append(face.uvIndexes[i]);
-            }
+            } 
             sb.append("\n");
-        }
+        } 
         return sb.toString();
     }
 
@@ -126,7 +126,7 @@ public final class VoxelUtil {
             face2.textureCoordinates[1] = oldFace.textureCoordinates[3];
             face2.textureCoordinates[2] = oldFace.textureCoordinates[0];
             faces.add(face2);
-        }
+        } 
         return faces;
     }
 
@@ -134,7 +134,7 @@ public final class VoxelUtil {
         NGTWorld world = new NGTWorld(NGTUtil.getClientWorld(), ngto);
         int bufSize = ngto.blockList.size() * 2621440 >> 12;
         if (bufSize <= 0)
-            bufSize = 4096;
+            bufSize = 4096; 
         DummyVertexBuffer renderer = new DummyVertexBuffer(bufSize);
         renderer.begin(7, DefaultVertexFormats.BLOCK);
         for (int i = 0; i < ngto.xSize; i++) {
@@ -145,10 +145,10 @@ public final class VoxelUtil {
                         BlockRendererDispatcher dispatcher = Minecraft.getMinecraft().getBlockRendererDispatcher();
                         IBlockState state = set.block.getStateFromMeta(set.metadata);
                         dispatcher.renderBlock(state, new BlockPos(i, j, k), world, renderer);
-                    }
-                }
-            }
-        }
+                    } 
+                } 
+            } 
+        } 
         renderer.finishDrawing();
         return renderer;
     }
@@ -177,7 +177,7 @@ public final class VoxelUtil {
         for (int i = 0; i < buffer.capacity(); i++) {
             int color = buffer.get(i);
             image.getRaster().getDataBuffer().setElem(i, color);
-        }
+        } 
         ImageIO.write(image, "png", file);
         NGTLog.debug("Save texture : " + file.getAbsolutePath());
     }
@@ -192,20 +192,20 @@ public final class VoxelUtil {
                 maxFace++;
                 for (Vertex vtx : face.vertices) {
                     if (minX > vtx.getX())
-                        minX = vtx.getX();
+                        minX = vtx.getX(); 
                     if (maxX < vtx.getX())
-                        maxX = vtx.getX();
+                        maxX = vtx.getX(); 
                     if (minY > vtx.getY())
-                        minY = vtx.getY();
+                        minY = vtx.getY(); 
                     if (maxY < vtx.getY())
-                        maxY = vtx.getY();
+                        maxY = vtx.getY(); 
                     if (minZ > vtx.getZ())
-                        minZ = vtx.getZ();
+                        minZ = vtx.getZ(); 
                     if (maxZ < vtx.getZ())
-                        maxZ = vtx.getZ();
-                }
-            }
-        }
+                        maxZ = vtx.getZ(); 
+                } 
+            } 
+        } 
         int xSize = NGTMath.floor((maxX - minX) / scale);
         int ySize = NGTMath.floor((maxY - minY) / scale);
         int zSize = NGTMath.floor((maxZ - minZ) / scale);
@@ -215,29 +215,29 @@ public final class VoxelUtil {
                 genVoxel(face, 1.0D / scale, -minX, -minY, -minZ, posArray);
                 faceCount++;
                 if (faceCount % 1000 == 0)
-                    NGTLog.debug("Convert Face to Voxel " + faceCount + "/" + maxFace);
-            }
-        }
+                    NGTLog.debug("Convert Face to Voxel " + faceCount + "/" + maxFace); 
+            } 
+        } 
         List<BlockSet> list = new ArrayList<>();
         int size = xSize * ySize * zSize;
         for (int i = 0; i < size; i++)
-            list.add(BlockSet.AIR);
+            list.add(BlockSet.AIR); 
         NGTObject ngto = NGTObject.createNGTO(list, xSize, ySize, zSize, 0, 0, 0);
         for (int j = 0; j < xSize; j++) {
             for (int k = 0; k < ySize; k++) {
                 for (int m = 0; m < zSize; m++) {
                     if (posArray[j][k][m] > 0)
-                        ngto.setBlockSet(j, k, m, Blocks.STONE, 0);
-                }
-            }
-        }
+                        ngto.setBlockSet(j, k, m, Blocks.STONE, 0); 
+                } 
+            } 
+        } 
         return ngto;
     }
 
     private static void genVoxel(Face face, double scale, float offsetX, float offsetY, float offsetZ, int[][][] posArray) {
         int vtxCount = face.vertices.length / 3;
         for (int i = 0; i < vtxCount; i++)
-            genVoxel(face.vertices[i * 3], face.vertices[i * 3 + 1], face.vertices[i * 3 + 2], scale, offsetX, offsetY, offsetZ, posArray);
+            genVoxel(face.vertices[i * 3], face.vertices[i * 3 + 1], face.vertices[i * 3 + 2], scale, offsetX, offsetY, offsetZ, posArray); 
     }
 
     private static void genVoxel(Vertex vtx1, Vertex vtx2, Vertex vtx3, double scale, float offsetX, float offsetY, float offsetZ, int[][][] posArray) {
@@ -264,8 +264,8 @@ public final class VoxelUtil {
                 int iy = NGTMath.floor(vecA.getY() + vecAB.getY() * di + vecBC.getY() * dj + offsetY * scale);
                 int iz = NGTMath.floor(vecA.getZ() + vecAB.getZ() * di + vecBC.getZ() * dj + offsetZ * scale);
                 if (ix > 0 && ix < posArray.length && iy > 0 && iy < (posArray[0]).length && iz > 0 && iz < (posArray[0][0]).length)
-                    posArray[ix][iy][iz] = 1;
-            }
-        }
+                    posArray[ix][iy][iz] = 1; 
+            } 
+        } 
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/sound/MovingSoundCustom.java b/src/api/ngtlib/jp/ngt/ngtlib/sound/MovingSoundCustom.java
index 8b8bea8..d3ed17c 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/sound/MovingSoundCustom.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/sound/MovingSoundCustom.java
@@ -40,11 +40,11 @@ public class MovingSoundCustom extends MovingSound {
         if (this.prevVolume >= 0.0F) {
             this.volume = this.prevVolume;
             this.prevVolume = -1.0F;
-        }
+        } 
         if (this.prevPitch >= 0.0F) {
             this.pitch = this.prevPitch;
             this.prevPitch = -1.0F;
-        }
+        } 
     }
 
     public void stop() {
@@ -61,10 +61,10 @@ public class MovingSoundCustom extends MovingSound {
 
     public SoundEventAccessor createAccessor(SoundHandler handler) {
         if (this.isMCSound)
-            return super.createAccessor(handler);
+            return super.createAccessor(handler); 
         this.seAccessor = super.createAccessor(handler);
         if (this.seAccessor == null)
-            this.seAccessor = new SoundEventAccessorCustom(new ResourceLocationCustom(this.soundName));
+            this.seAccessor = new SoundEventAccessorCustom(new ResourceLocationCustom(this.soundName)); 
         this.sound = this.seAccessor.cloneEntry();
         return this.seAccessor;
     }
@@ -72,7 +72,7 @@ public class MovingSoundCustom extends MovingSound {
     private static SoundEvent getSoundEvent(String sound) {
         SoundEvent se = (SoundEvent)SoundEvent.REGISTRY.getObject(new ResourceLocation("minecraft", sound));
         if (se == null)
-            return new SoundEventDummy(sound);
+            return new SoundEventDummy(sound); 
         return se;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/sound/SoundCustom.java b/src/api/ngtlib/jp/ngt/ngtlib/sound/SoundCustom.java
index db55078..a88dfd5 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/sound/SoundCustom.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/sound/SoundCustom.java
@@ -27,7 +27,7 @@ public class SoundCustom extends Sound {
 
     public ResourceLocation getSoundAsOggLocation() {
         if (this.location.getPath().contains("ogg"))
-            return this.location;
+            return this.location; 
         String path = this.location.getPath().replace('.', '/');
         return new ResourceLocationCustom(this.location.getNamespace(), "sounds/" + path + ".ogg");
     }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/ColorUtil.java b/src/api/ngtlib/jp/ngt/ngtlib/util/ColorUtil.java
index 4a604ad..2baaaab 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/ColorUtil.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/util/ColorUtil.java
@@ -23,13 +23,13 @@ public final class ColorUtil {
             s = "0000" + s;
         } else if (color <= 65535) {
             s = "00" + s;
-        }
+        } 
         return s;
     }
 
     public static int toInteger(String color) {
         if (!color.startsWith("0x"))
-            color = "0x" + color;
+            color = "0x" + color; 
         return Integer.decode(color).intValue();
     }
 
@@ -57,9 +57,9 @@ public final class ColorUtil {
 
     public static int[] alphaBlending(int srcColor, int srcAlpha, int dstColor, int dstAlpha) {
         if (srcAlpha == 255 || dstAlpha == 0)
-            return new int[] { srcColor, srcAlpha };
+            return new int[] { srcColor, srcAlpha }; 
         if (srcAlpha == 0)
-            return new int[] { dstColor, dstAlpha };
+            return new int[] { dstColor, dstAlpha }; 
         int dtms = dstAlpha * (255 - srcAlpha);
         int alpha = correct(srcAlpha + dtms / 255);
         int srcR = getR(srcColor);
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/Config.java b/src/api/ngtlib/jp/ngt/ngtlib/util/Config.java
index 1343075..2000207 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/Config.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/util/Config.java
@@ -16,18 +16,18 @@ public class Config {
             String category = "";
             for (String s : list) {
                 if (s.startsWith("#"))
-                    continue;
+                    continue; 
                 if (s.startsWith("@")) {
                     category = s.substring(1);
                     continue;
-                }
+                } 
                 if (s.contains("=")) {
                     String[] sa1 = s.split("=");
                     if (sa1.length == 2 && category.length() > 0)
-                        setProperty(category, sa1[0], sa1[1]);
-                }
-            }
-        }
+                        setProperty(category, sa1[0], sa1[1]); 
+                } 
+            } 
+        } 
     }
 
     public boolean save(File file) {
@@ -40,8 +40,8 @@ public class Config {
                 String key = set1.getKey();
                 String value1 = set1.getValue();
                 sb.append(key).append("=").append(value1).append("\n");
-            }
-        }
+            } 
+        } 
         return NGTText.writeToText(file, new String[] { sb.toString() });
     }
 
@@ -49,8 +49,8 @@ public class Config {
         if (this.itemMap.containsKey(category)) {
             Map<String, String> map = this.itemMap.get(category);
             if (map.containsKey(key))
-                return map.get(key);
-        }
+                return map.get(key); 
+        } 
         return "";
     }
 
@@ -60,7 +60,7 @@ public class Config {
             map = this.itemMap.get(category);
         } else {
             map = new HashMap<>();
-        }
+        } 
         map.put(key, value);
         this.itemMap.put(category, map);
     }
@@ -69,7 +69,7 @@ public class Config {
         if (this.itemMap.containsKey(category)) {
             Map<String, String> map = this.itemMap.get(category);
             return map.containsKey(key);
-        }
+        } 
         return false;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/Locker.java b/src/api/ngtlib/jp/ngt/ngtlib/util/Locker.java
index f57317c..cabc671 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/Locker.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/util/Locker.java
@@ -9,8 +9,8 @@ public class Locker {
                 wait();
             } catch (InterruptedException e) {
                 e.printStackTrace();
-            }
-        }
+            } 
+        } 
         this.locking = true;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/MCWrapper.java b/src/api/ngtlib/jp/ngt/ngtlib/util/MCWrapper.java
index b16364c..996a262 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/MCWrapper.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/util/MCWrapper.java
@@ -45,9 +45,9 @@ public final class MCWrapper {
                     TileEntity tileentity = world.getTileEntity(pos);
                     state.getBlock().dropBlockAsItem(world, pos, state, 0);
                     state.getBlock().removedByPlayer(state, world, pos, player, false);
-                }
-            }
-        }
+                } 
+            } 
+        } 
     }
 
     public static int getPosX(TileEntity entity) {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/NBTUtil.java b/src/api/ngtlib/jp/ngt/ngtlib/util/NBTUtil.java
index eb09414..76338dc 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/NBTUtil.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/util/NBTUtil.java
@@ -24,7 +24,7 @@ public final class NBTUtil {
         } catch (IOException e) {
             e.printStackTrace();
             return null;
-        }
+        } 
     }
 
     public static NBTTagCompound decompress(byte[] data) {
@@ -36,6 +36,6 @@ public final class NBTUtil {
         } catch (IOException e) {
             e.printStackTrace();
             return null;
-        }
+        } 
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/NGTCertificate.java b/src/api/ngtlib/jp/ngt/ngtlib/util/NGTCertificate.java
index 62c4b5e..6c4fba6 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/NGTCertificate.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/util/NGTCertificate.java
@@ -32,19 +32,19 @@ public class NGTCertificate {
             } catch (IOException e) {
                 e.printStackTrace();
                 return false;
-            }
+            } 
             if (list.size() >= 2) {
                 byte[] ba = Base64.decodeBase64(list.get(1));
                 String s = new String(ba);
                 if (player.equals(s) || (list.size() == 3 && list.get(2) != null && ((String)list.get(2)).equals("develop_mode"))) {
                     KEY_REGISTERED = true;
                     return true;
-                }
+                } 
                 NGTLog.debug("not matched player data : " + s);
             } else {
                 NGTLog.debug("illegal file");
-            }
-        }
+            } 
+        } 
         return false;
     }
 
@@ -55,7 +55,7 @@ public class NGTCertificate {
             BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
             String string;
             while ((string = br.readLine()) != null)
-                strings.add(string);
+                strings.add(string); 
             br.close();
         } catch (MalformedURLException e) {
             e.printStackTrace();
@@ -65,22 +65,22 @@ public class NGTCertificate {
             e.printStackTrace();
             NGTLog.sendChatMessage((ICommandSender)player, "message.regKey.1", new Object[0]);
             return false;
-        }
+        } 
         if (strings.size() > 0) {
             String[] sa = strings.<String>toArray(new String[strings.size()]);
             if (sa[0] == null || sa[0].equals("unavailable")) {
                 NGTLog.sendChatMessage((ICommandSender)player, "message.regKey.2", new Object[0]);
                 return false;
-            }
+            } 
             if (sa[0].equals("available")) {
                 NGTLog.sendChatMessage((ICommandSender)player, "message.regKey.3", new Object[0]);
                 return true;
-            }
+            } 
             if (sa[0].equals(key)) {
                 NGTLog.sendChatMessage((ICommandSender)player, "message.regKey.4", new Object[0]);
                 return true;
-            }
-        }
+            } 
+        } 
         NGTLog.sendChatMessage((ICommandSender)player, "message.regKey.5", new Object[0]);
         return false;
     }
@@ -88,7 +88,7 @@ public class NGTCertificate {
     public static void writePlayerData(String player) {
         File keyFile = getKeyFile();
         if (keyFile.exists())
-            keyFile.delete();
+            keyFile.delete(); 
         String s1 = Base64.encodeBase64String(NGTCore.metadata.version.getBytes());
         String s2 = Base64.encodeBase64String(player.getBytes());
         NGTText.writeToText(keyFile, new String[] { s1 + "\n" + s2 });
@@ -100,7 +100,7 @@ public class NGTCertificate {
         File modsDir = NGTFileLoader.getModsDir().get(0);
         File ngtDir = new File(modsDir, "ngt");
         if (!ngtDir.exists())
-            ngtDir.mkdir();
+            ngtDir.mkdir(); 
         return new File(ngtDir, "data.ngt");
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/NGTRegHandler.java b/src/api/ngtlib/jp/ngt/ngtlib/util/NGTRegHandler.java
index 57db5f3..3ff4f0c 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/NGTRegHandler.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/util/NGTRegHandler.java
@@ -22,10 +22,10 @@ public class NGTRegHandler {
 
     private static void checkName(String name) {
         if (name.contains(":"))
-            throw new IllegalArgumentException("Name contains ':' -> " + name);
+            throw new IllegalArgumentException("Name contains ':' -> " + name); 
         String lower = name.toLowerCase();
         if (!lower.equals(name))
-            throw new IllegalArgumentException("Name has upper case letter ':' -> " + name);
+            throw new IllegalArgumentException("Name has upper case letter ':' -> " + name); 
     }
 
     public static <T extends Block> T register(T block, String name, String unlocalizedName, CreativeTabs tab, String modID) {
@@ -38,7 +38,7 @@ public class NGTRegHandler {
         block.setRegistryName(modID, name);
         block.setTranslationKey(unlocalizedName);
         if (tab != null)
-            block.setCreativeTab(tab);
+            block.setCreativeTab(tab); 
         ItemBlock item = null;
         if (itemClass != null) {
             try {
@@ -47,11 +47,11 @@ public class NGTRegHandler {
             } catch (ReflectiveOperationException e) {
                 e.printStackTrace();
                 return block;
-            }
+            } 
         } else {
             item = new ItemBlock((Block)block);
-        }
-        ForgeRegistries.BLOCKS.register((IForgeRegistryEntry)block);
+        } 
+        ForgeRegistries.BLOCKS.register(block);
         register(item, name, unlocalizedName, (CreativeTabs)null, modID);
         return block;
     }
@@ -62,8 +62,8 @@ public class NGTRegHandler {
         item.setRegistryName(modID, name);
         item.setTranslationKey(unlocalizedName);
         if (tab != null)
-            item.setCreativeTab(tab);
-        ForgeRegistries.ITEMS.register((IForgeRegistryEntry)item);
+            item.setCreativeTab(tab); 
+        ForgeRegistries.ITEMS.register(item);
         return item;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/NGTUtil.java b/src/api/ngtlib/jp/ngt/ngtlib/util/NGTUtil.java
index fee6c51..a8faf3a 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/NGTUtil.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/util/NGTUtil.java
@@ -30,7 +30,7 @@ public final class NGTUtil {
 
     public static boolean isSMP() {
         if (isServer())
-            return (getServer() == null) ? false : (!getServer().isSinglePlayer());
+            return (getServer() == null) ? false : (!getServer().isSinglePlayer()); 
         return !NGTUtilClient.getMinecraft().isSingleplayer();
     }
 
@@ -102,7 +102,7 @@ public final class NGTUtil {
             e.printStackTrace();
         } catch (IllegalAccessException e) {
             e.printStackTrace();
-        }
+        } 
     }
 
     public static Object getField(Class<?> clazz, Object instance, String... names) {
@@ -112,7 +112,7 @@ public final class NGTUtil {
         } catch (IllegalAccessException e) {
             e.printStackTrace();
             return null;
-        }
+        } 
     }
 
     public static <E> Object getMethod(Class<? super E> clazz, E instance, String name, String obfName, Class<?>[] types, Object... args) {
@@ -122,12 +122,12 @@ public final class NGTUtil {
         } catch (ReflectiveOperationException e) {
             e.printStackTrace();
             return null;
-        }
+        } 
     }
 
     public static <E> void addArray(List<E> list, E[] array) {
         for (int i = 0; i < array.length; i++)
-            list.add(array[i]);
+            list.add(array[i]); 
     }
 
     public static <E> void reverse(E[] array) {
@@ -137,17 +137,17 @@ public final class NGTUtil {
             int i2 = array.length - i - 1;
             array[i] = array[i2];
             array[i2] = element;
-        }
+        } 
     }
 
     public static <E> boolean contains(E[] array, E obj) {
         for (int i = 0; i < array.length; i++) {
             if (array[i] == obj)
-                return true;
+                return true; 
             if (obj instanceof Object)
                 if (array[i].equals(obj))
-                    return true;
-        }
+                    return true;  
+        } 
         return false;
     }
 
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/NGTUtilClient.java b/src/api/ngtlib/jp/ngt/ngtlib/util/NGTUtilClient.java
index 3fe66a2..5e1b3a4 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/NGTUtilClient.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/util/NGTUtilClient.java
@@ -42,7 +42,7 @@ public final class NGTUtilClient {
             int sky = world.getLightFor(EnumSkyBlock.SKY, pos);
             int block = world.getLightFor(EnumSkyBlock.BLOCK, pos);
             return (sky > block) ? sky : block;
-        }
+        } 
         return 0;
     }
 
@@ -54,9 +54,9 @@ public final class NGTUtilClient {
                 if (name.contains(NGTCore.shaderModName)) {
                     HAS_SHADER = 1;
                     break;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         return (HAS_SHADER == 1);
     }
 
@@ -76,7 +76,7 @@ public final class NGTUtilClient {
     public static void registerBuildinModel(Block block, boolean noItem) {
         ModelLoader.setCustomStateMapper(block, par1 -> new HashMap<>());
         if (noItem)
-            registerNoModelBlockAsItem(block);
+            registerNoModelBlockAsItem(block); 
     }
 
     public static void registerNoModelBlockAsItem(Block block) {
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/PermissionManager.java b/src/api/ngtlib/jp/ngt/ngtlib/util/PermissionManager.java
index 31a91e2..65adb74 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/PermissionManager.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/util/PermissionManager.java
@@ -29,10 +29,10 @@ public final class PermissionManager {
             StringBuilder sb = new StringBuilder();
             sb.append(entry.getKey()).append(":");
             for (String s : entry.getValue())
-                sb.append(s).append(",");
+                sb.append(s).append(","); 
             sa[i] = sb.toString();
             i++;
-        }
+        } 
         NGTText.writeToText(this.saveFile, sa);
     }
 
@@ -45,25 +45,25 @@ public final class PermissionManager {
                 List<String> list = getPlayerList(sa2[0]);
                 String[] sa3 = sa2[1].split(",");
                 for (String s2 : sa3)
-                    list.add(s2);
-            }
-        }
+                    list.add(s2); 
+            } 
+        } 
     }
 
     private void initFile() {
         if (!this.saveDir.exists())
-            this.saveDir.mkdirs();
+            this.saveDir.mkdirs(); 
         if (!this.saveFile.exists())
             try {
                 this.saveFile.createNewFile();
             } catch (IOException e) {
                 e.printStackTrace();
-            }
+            }  
     }
 
     public List<String> getPlayerList(String par1) {
         if (!this.permissionMap.containsKey(par1))
-            this.permissionMap.put(par1, new ArrayList<>());
+            this.permissionMap.put(par1, new ArrayList<>()); 
         return this.permissionMap.get(par1);
     }
 
@@ -72,9 +72,9 @@ public final class PermissionManager {
             StringBuilder sb = new StringBuilder();
             sb.append(entry.getKey()).append(":");
             for (String s : entry.getValue())
-                sb.append(s).append(",");
+                sb.append(s).append(","); 
             NGTLog.sendChatMessage((ICommandSender)player, sb.toString(), new Object[0]);
-        }
+        } 
     }
 
     public void addPermission(EntityPlayer player, String targetPlayerName, String category) {
@@ -84,7 +84,7 @@ public final class PermissionManager {
             save();
         } else {
             NGTLog.sendChatMessage((ICommandSender)player, "Only operator can use this command.", new Object[0]);
-        }
+        } 
     }
 
     public void removePermission(EntityPlayer player, String targetPlayerName, String category) {
@@ -94,28 +94,28 @@ public final class PermissionManager {
             save();
         } else {
             NGTLog.sendChatMessage((ICommandSender)player, "Only operator can use this command.", new Object[0]);
-        }
+        } 
     }
 
     public boolean hasPermission(EntityPlayer player, String category) {
         if (isOp(player))
-            return true;
+            return true; 
         if (getPlayerList(category).contains(player.getName()))
-            return true;
+            return true; 
         NGTLog.sendChatMessageToAll("%s need permission (%s).", new Object[] { player.getName(), category });
         return false;
     }
 
     public boolean isOp(EntityPlayer player) {
         if (!NGTUtil.isSMP())
-            return true;
+            return true; 
         if (player instanceof EntityPlayerMP) {
             String[] names = ((EntityPlayerMP)player).server.getPlayerList().getOppedPlayerNames();
             for (String name : names) {
                 if (player.getName().equals(name))
-                    return true;
-            }
-        }
+                    return true; 
+            } 
+        } 
         return false;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/Stack.java b/src/api/ngtlib/jp/ngt/ngtlib/util/Stack.java
index a7338a5..d355d3a 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/Stack.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/util/Stack.java
@@ -14,7 +14,7 @@ public class Stack<E> {
 
     public void push(E element) {
         while (this.list.size() > this.maxSize)
-            this.list.remove(this.list.size() - 1);
+            this.list.remove(this.list.size() - 1); 
         this.list.add(0, element);
     }
 
@@ -23,7 +23,7 @@ public class Stack<E> {
             E element = this.list.get(0);
             this.list.remove(0);
             return element;
-        }
+        } 
         return null;
     }
 }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/Usage.java b/src/api/ngtlib/jp/ngt/ngtlib/util/Usage.java
index bb083fd..2cf6469 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/Usage.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/util/Usage.java
@@ -22,8 +22,8 @@ public final class Usage {
             if (((UsageEntry)entry.getValue()).pattern.match(player)) {
                 ((UsageEntry)entry.getValue()).sendMessage(player);
                 return;
-            }
-        }
+            } 
+        } 
         NGTLog.sendChatMessage((ICommandSender)player, "usage.none", new Object[0]);
     }
 
@@ -31,7 +31,7 @@ public final class Usage {
         UsageEntry entry = getEntry(par1, par2);
         if (entry != null)
             for (String s : entry.messages)
-                tooltip.add(TextFormatting.YELLOW + NGTUtil.translate(s));
+                tooltip.add(TextFormatting.YELLOW + NGTUtil.translate(s));  
     }
 
     private UsageEntry getEntry(Object par1, int par2) {
@@ -45,7 +45,7 @@ public final class Usage {
                         Item item = Item.getItemFromBlock(block);
                         ItemStack stack = player.getHeldItemMainhand();
                         if (stack != null && stack.getItem() == item && (meta < 0 || meta == stack.getItemDamage()))
-                            return true;
+                            return true; 
                         return false;
                     }
                 },  par2);
@@ -58,7 +58,7 @@ public final class Usage {
                     public boolean match(EntityPlayer player) {
                         ItemStack stack = player.getHeldItemMainhand();
                         if (stack != null && stack.getItem() == item && (meta < 0 || meta == stack.getItemDamage()))
-                            return true;
+                            return true; 
                         return false;
                     }
                 },  par2);
@@ -71,19 +71,19 @@ public final class Usage {
                     public boolean match(EntityPlayer player) {
                         Entity entity = player.getRidingEntity();
                         if (entity != null && Usage.isInstance(entity.getClass(), clazz))
-                            return true;
+                            return true; 
                         return false;
                     }
-                }par2);
+                }, par2);
         this.usages.put(new UsageKey(clazz, 0), entry);
         return entry;
     }
 
     private static boolean isInstance(Class<?> target, Class<?> clazz) {
         if (target == clazz)
-            return true;
+            return true; 
         if (target.getSuperclass() != null)
-            return isInstance(target.getSuperclass(), clazz);
+            return isInstance(target.getSuperclass(), clazz); 
         return false;
     }
 
@@ -99,7 +99,7 @@ public final class Usage {
 
         public void sendMessage(EntityPlayer player) {
             for (String s : this.messages)
-                NGTLog.sendChatMessage((ICommandSender)player, s, new Object[0]);
+                NGTLog.sendChatMessage((ICommandSender)player, s, new Object[0]); 
         }
     }
 
@@ -125,7 +125,7 @@ public final class Usage {
             if (obj instanceof UsageKey) {
                 UsageKey key = (UsageKey)obj;
                 return (key.key1 == this.key1 && (this.key2 < 0 || key.key2 < 0 || key.key2 == this.key2));
-            }
+            } 
             return false;
         }
     }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/VersionChecker.java b/src/api/ngtlib/jp/ngt/ngtlib/util/VersionChecker.java
index 0bce2c5..32ed1da 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/util/VersionChecker.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/util/VersionChecker.java
@@ -30,8 +30,7 @@ public class VersionChecker {
     }
 
     public static void checkVersion() {
-        checker.getClass();
-        Thread thread = new VersionCheckThread();
+        Thread thread = checker.new VersionCheckThread();
         thread.start();
     }
 
@@ -44,9 +43,9 @@ public class VersionChecker {
                     TextComponentTranslation textComponentTranslation1 = new TextComponentTranslation("  §6§nDownload here", new Object[0]);
                     textComponentTranslation1.setStyle((new Style()).setClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL, sa[2])));
                     textComponentTranslation.appendSibling((ITextComponent)textComponentTranslation1);
-                }
+                } 
                 NGTLog.showChatMessage((ITextComponent)textComponentTranslation);
-            }
+            }  
     }
 
     public class VersionCheckThread extends Thread {
@@ -63,11 +62,11 @@ public class VersionChecker {
                     if (!info.version.equals(ver)) {
                         VersionChecker.checker.updateList.add(new String[] { info.name, ver, info.homepage });
                         continue;
-                    }
-                }
+                    } 
+                } 
                 String location = info.updateURL;
                 if (location == null || location.length() == 0)
-                    continue;
+                    continue; 
                 try {
                     URL url = new URL(location);
                     List<String> sList = NGTText.readTextL(url.openStream(), "");
@@ -79,7 +78,7 @@ public class VersionChecker {
                 } catch (IOException e) {
                     e.printStackTrace();
                     return;
-                }
+                } 
                 String[] sa1 = strings.<String>toArray(new String[strings.size()]);
                 strings.clear();
                 for (String s : sa1) {
@@ -87,10 +86,10 @@ public class VersionChecker {
                     if (sa2.length == 2) {
                         latestVerMap.put(sa2[0], sa2[1]);
                         if (info.name.equals(sa2[0]) && !info.version.equals(sa2[1]))
-                            VersionChecker.checker.updateList.add(new String[] { info.name, sa2[1], info.homepage });
-                    }
-                }
-            }
+                            VersionChecker.checker.updateList.add(new String[] { info.name, sa2[1], info.homepage }); 
+                    } 
+                } 
+            } 
             VersionChecker.checker.finished = true;
         }
     }
diff --git a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/world/NGTWorld.java b/src/api/ngtlib/jp/ngt/ngtlib/world/NGTWorld.java
index 41826b8..44a3298 100644
--- a/mods/ngtlib.deobf.jar.src.processed/jp/ngt/ngtlib/world/NGTWorld.java
+++ b/src/api/ngtlib/jp/ngt/ngtlib/world/NGTWorld.java
@@ -93,11 +93,11 @@ public class NGTWorld extends World implements IBlockAccessNGT {
                     if (entity1 != null) {
                         addEntity(entity1);
                         entity.startRiding(entity1);
-                    }
+                    } 
                     entity = entity1;
-                }
-            }
-        }
+                } 
+            } 
+        } 
         for (int pass = 0; pass < 2; pass++) {
             for (int j = 0; j < this.loadedEntityList.size(); j++) {
                 Entity entity = this.loadedEntityList.get(j);
@@ -108,8 +108,8 @@ public class NGTWorld extends World implements IBlockAccessNGT {
                     entity.onUpdate();
                 } catch (Exception exception) {}
                 entity.setLocationAndAngles(x, y, z, entity.rotationYaw, entity.rotationPitch);
-            }
-        }
+            } 
+        } 
     }
 
     private Entity getEntityFromNBT(NBTTagCompound nbt) {
@@ -135,13 +135,13 @@ public class NGTWorld extends World implements IBlockAccessNGT {
             NBTTagCompound nbt = new NBTTagCompound();
             try {
                 if (entity.writeToNBTOptional(nbt))
-                    tagList.appendTag((NBTBase)nbt);
+                    tagList.appendTag((NBTBase)nbt); 
             } catch (Exception e) {
                 FMLLog.log(Level.ERROR, e, "An Entity type %s has thrown an exception trying to write NBT.", new Object[] { entity
 
                             .getClass().getName() });
-            }
-        }
+            } 
+        } 
         return tagList;
     }
 
@@ -164,7 +164,7 @@ public class NGTWorld extends World implements IBlockAccessNGT {
     public boolean setBlockState(BlockPos pos, IBlockState newState, int flags) {
         int meta = newState.getBlock().getMetaFromState(newState);
         if (this.blockObject.setBlockSet(pos.getX(), pos.getY(), pos.getZ(), newState.getBlock(), meta))
-            return true;
+            return true; 
         return false;
     }
 
@@ -206,7 +206,7 @@ public class NGTWorld extends World implements IBlockAccessNGT {
 
     public TileEntity getTileEntity(BlockPos pos) {
         if (this.worldTileEntities.containsKey(pos))
-            return this.worldTileEntities.get(pos);
+            return this.worldTileEntities.get(pos); 
         int x = pos.getX();
         int y = pos.getY();
         int z = pos.getZ();
@@ -217,18 +217,18 @@ public class NGTWorld extends World implements IBlockAccessNGT {
                 tile = set.block.createTileEntity(this, set.toBlockState());
                 tile.setWorld(this);
                 if (set.nbt != null)
-                    tile.readFromNBT(set.nbt.copy());
+                    tile.readFromNBT(set.nbt.copy()); 
             } catch (Exception e) {
                 return null;
-            }
+            } 
             if (tile instanceof TileEntityCustom) {
                 ((TileEntityCustom)tile).setPos(x, y, z, x + this.blockObject.origX, y + this.blockObject.origY, z + this.blockObject.origZ);
             } else {
                 tile.setPos(pos);
-            }
+            } 
             this.worldTileEntities.put(pos, tile);
             return tile;
-        }
+        } 
         return null;
     }
 
@@ -251,15 +251,15 @@ public class NGTWorld extends World implements IBlockAccessNGT {
             int north = getLightValue(pos.up(), type.defaultLightValue, false);
             int res = up;
             if (east > up)
-                res = east;
+                res = east; 
             if (west > res)
-                res = west;
+                res = west; 
             if (south > res)
-                res = south;
+                res = south; 
             if (north > res)
-                res = north;
+                res = north; 
             return res;
-        }
+        } 
         return canSeeSky(pos) ? type.defaultLightValue : getLightValue(pos, type.defaultLightValue, false);
     }
 
@@ -268,7 +268,7 @@ public class NGTWorld extends World implements IBlockAccessNGT {
         int y = pos.getY();
         int z = pos.getZ();
         if (this.blockObject.isValidPos(x, y, z))
-            return (this.blockObject.getBlockSet(x, y, z)).block.getLightValue(getBlockState(pos), this, pos);
+            return (this.blockObject.getBlockSet(x, y, z)).block.getLightValue(getBlockState(pos), this, pos); 
         return type.defaultLightValue;
     }
 
@@ -284,12 +284,12 @@ public class NGTWorld extends World implements IBlockAccessNGT {
         int skyLight = getLightFor(EnumSkyBlock.SKY, pos);
         int blockLight = getLightFor(EnumSkyBlock.BLOCK, pos);
         if (blockLight < defaultValue)
-            blockLight = defaultValue;
+            blockLight = defaultValue; 
         int brightness = NGTUtil.getLightValue(this.world, this.posX, this.posY, this.posZ);
         if (blockLight < brightness)
-            blockLight = brightness;
+            blockLight = brightness; 
         if (this.posY < 0)
-            skyLight = blockLight = 15;
+            skyLight = blockLight = 15; 
         return blend ? (skyLight << 20 | blockLight << 4) : ((skyLight > blockLight) ? skyLight : blockLight);
     }
 
@@ -298,9 +298,9 @@ public class NGTWorld extends World implements IBlockAccessNGT {
         while (y0 < this.blockObject.ySize) {
             IBlockState state = getBlockState(new BlockPos(pos.getX(), y0, pos.getZ()));
             if (state.getBlock() != Blocks.AIR)
-                return false;
+                return false; 
             y0++;
-        }
+        } 
         return true;
     }
 
@@ -327,7 +327,7 @@ public class NGTWorld extends World implements IBlockAccessNGT {
         if (this.blockObject.isValidPos(x, y, z)) {
             BlockSet set = getBlockSet(x, y, z);
             return set.block.isSideSolid(set.toBlockState(), this, pos, side);
-        }
+        } 
         return _default;
     }
 
