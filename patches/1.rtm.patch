diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/ClientProxy.java b/src/main/rtm/jp/ngt/rtm/ClientProxy.java
index 2b0b5cd..ee31a62 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/ClientProxy.java
+++ b/src/main/rtm/jp/ngt/rtm/ClientProxy.java
@@ -179,7 +179,7 @@ public class ClientProxy extends CommonProxy {
         } else {
             MovingSoundCustom ms = MovingSoundMaker.create(entity, sound, false);
             if (ms != null) {
-                playSound(ms, vol, pitch);
+                this.playSound(ms, vol, pitch);
             }
         }
     }
@@ -194,7 +194,7 @@ public class ClientProxy extends CommonProxy {
         } else {
             MovingSoundCustom ms = MovingSoundMaker.create(entity, sound, false);
             if (ms != null) {
-                playSound(ms, vol, pitch);
+                this.playSound(ms, vol, pitch);
             }
         }
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMBlock.java b/src/main/rtm/jp/ngt/rtm/RTMBlock.java
index 04dc2b5..ba8b2a8 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMBlock.java
+++ b/src/main/rtm/jp/ngt/rtm/RTMBlock.java
@@ -354,17 +354,19 @@ public final class RTMBlock {
         colors.registerBlockColorHandler((state, world, pos, tintIndex) -> {
                     int meta = BlockUtil.getMetadata(world, pos);
                     int c0 = meta << 4 & 0xFF;
-                    return 16777215 - (c0 << 8) - c0;
-                }new Block[] { hotStoveBrick });
+                    int result = 16777215 - (c0 << 8) - c0;
+                    return result;
+                }, new Block[] { hotStoveBrick });
         colors.registerBlockColorHandler((state, world, pos, tintIndex) -> {
                     BlockMarker block = (BlockMarker)state.getBlock();
                     return block.markerType.color;
-                }new Block[] { (Block)marker, (Block)markerSwitch });
+                }, new Block[] { (Block)marker, (Block)markerSwitch });
         colors.registerBlockColorHandler((state, world, pos, tintIndex) -> {
                     int meta = BlockUtil.getMetadata(world, pos);
                     int c0 = meta << 4 & 0xFF;
-                    return 16777215 - (c0 << 8) - c0;
-                }new Block[] { steelSlab });
+                    int result = 16777215 - (c0 << 8) - c0;
+                    return result;
+                }, new Block[] { steelSlab });
     }
 
     @SideOnly(Side.CLIENT)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMCore.java b/src/main/rtm/jp/ngt/rtm/RTMCore.java
index 24576cc..9347661 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMCore.java
+++ b/src/main/rtm/jp/ngt/rtm/RTMCore.java
@@ -231,8 +231,7 @@ public final class RTMCore implements IMod {
     }
 
     private static short getNextGuiID() {
-        guiId = (short)(guiId + 1);
-        return guiId;
+        return ++guiId;
     }
 
     public String getId() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMItem.java b/src/main/rtm/jp/ngt/rtm/RTMItem.java
index 07664e4..8f7f54a 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMItem.java
+++ b/src/main/rtm/jp/ngt/rtm/RTMItem.java
@@ -145,13 +145,13 @@ public final class RTMItem {
         razer_gun = NGTRegHandler.register((Item)new ItemGun(ItemGun.GunType.razer_gun), "razer_gun", "rtm:razer_gun", CreativeTabRTM.TOOLS, "rtm");
         camera = NGTRegHandler.register((Item)new ItemCamera(), "camera", "camera", CreativeTabRTM.TOOLS, "rtm");
         decoration_block = NGTRegHandler.register((Item)new ItemDecoration(), "item_decoration", "decoration", CreativeTabRTM.RAILWAY, "rtm");
-        mirror = NGTRegHandler.register((Item)new ItemMirror((SerializableItemType[])MirrorType.values()), "item_mirror", "rtm:item_mirror", null, "rtm");
+        mirror = NGTRegHandler.register((Item)new ItemMirror(MirrorType.values()), "item_mirror", "rtm:item_mirror", null, "rtm");
         bogie = NGTRegHandler.register(new ItemBogie(), "bogie", "rtm:bogie", CreativeTabRTM.RAILWAY, "rtm");
-        material = NGTRegHandler.register((Item)new ItemMultiIcon((SerializableItemType[])MaterialType.values()), "material", "rtm:material", CreativeTabRTM.RAILWAY, "rtm");
+        material = NGTRegHandler.register((Item)new ItemMultiIcon(MaterialType.values()), "material", "rtm:material", CreativeTabRTM.RAILWAY, "rtm");
         ticket = NGTRegHandler.register(new ItemTicket(0), "ticket", "rtm:ticket", CreativeTabRTM.RAILWAY, "rtm");
         ticketBook = NGTRegHandler.register(new ItemTicket(1), "ticketbook", "rtm:ticketbook", CreativeTabRTM.RAILWAY, "rtm");
         icCard = NGTRegHandler.register(new ItemTicket(2), "ic_card", "rtm:ic_card", CreativeTabRTM.RAILWAY, "rtm");
-        money = NGTRegHandler.register((Item)new ItemMultiIcon((SerializableItemType[])MoneyType.values()), "money", "rtm:money", CreativeTabRTM.TOOLS, "rtm");
+        money = NGTRegHandler.register((Item)new ItemMultiIcon(MoneyType.values()), "money", "rtm:money", CreativeTabRTM.TOOLS, "rtm");
         steel_ingot = NGTRegHandler.register(new Item(), "ingot_steel", "rtm:ingot_steel", CreativeTabRTM.INDUSTRY, "rtm");
         coke = NGTRegHandler.register((Item)new ItemCoke(), "coke", "rtm:coke", CreativeTabRTM.INDUSTRY, "rtm");
         magazine_handgun = NGTRegHandler.register(new ItemMagazine(ItemGun.GunType.handgun), "magazine_handgun", "rtm:magazine_handgun", CreativeTabRTM.TOOLS, "rtm");
@@ -167,7 +167,7 @@ public final class RTMItem {
 
     @SideOnly(Side.CLIENT)
     public static void initClient() {
-        registerItemModels(installedObject, "istl_obj_", (SerializableItemType[])ItemInstalledObject.IstlObjType.values());
+        registerItemModels(installedObject, "istl_obj_", ItemInstalledObject.IstlObjType.values());
         registerItemModel(itemtrain, 0, "item_train_0");
         registerItemModel(itemtrain, 1, "item_train_1");
         registerItemModel(itemtrain, 2, "item_train_2");
@@ -200,13 +200,13 @@ public final class RTMItem {
         registerItemModel(razer_gun, 0, "razer_gun");
         registerItemModel(decoration_block, 0, "decoration_block");
         registerItemModel(bogie, 0, "bogie");
-        registerItemModels(material, "material_", (SerializableItemType[])MaterialType.values());
+        registerItemModels(material, "material_", MaterialType.values());
         registerItemModel(ticket, 0, "ticket");
         registerItemModel(ticket, 1, "ticket");
         for (int i = 0; i < 12; i++)
             registerItemModel(ticketBook, i, "ticket_book");
         registerItemModel(icCard, 0, "ic_card");
-        registerItemModels(money, "money_", (SerializableItemType[])MoneyType.values());
+        registerItemModels(money, "money_", MoneyType.values());
         registerItemModel(steel_ingot, 0, "ingot_steel");
         registerItemModel(coke, 0, "coke");
         registerItemModel(magazine_handgun, 0, "magazine_handgun");
@@ -249,7 +249,7 @@ public final class RTMItem {
         colors.registerItemColorHandler((stack, tintIndex) -> {
                     BlockMarker block = (BlockMarker)Block.getBlockFromItem(stack.getItem());
                     return block.markerType.color;
-                }new Block[] { (Block)RTMBlock.marker, (Block)RTMBlock.markerSwitch });
+                }, new Block[] { (Block)RTMBlock.marker, (Block)RTMBlock.markerSwitch });
         colors.registerItemColorHandler((stack, tintIndex) -> 0, new Block[] { RTMBlock.steelSlab });
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMPacket.java b/src/main/rtm/jp/ngt/rtm/RTMPacket.java
index 6ef9fa7..ae5306e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/RTMPacket.java
+++ b/src/main/rtm/jp/ngt/rtm/RTMPacket.java
@@ -23,6 +23,7 @@ import jp.ngt.rtm.network.PacketStationData;
 import jp.ngt.rtm.network.PacketVehicleMovement;
 import jp.ngt.rtm.network.PacketWire;
 import net.minecraftforge.fml.common.network.simpleimpl.IMessageHandler;
+import net.minecraftforge.fml.common.network.simpleimpl.SimpleNetworkWrapper;
 import net.minecraftforge.fml.relauncher.Side;
 
 public final class RTMPacket {
@@ -53,7 +54,6 @@ public final class RTMPacket {
     }
 
     public static <REQ extends net.minecraftforge.fml.common.network.simpleimpl.IMessage, REPLY extends net.minecraftforge.fml.common.network.simpleimpl.IMessage> void registerPacket(Class<? extends IMessageHandler<REQ, REPLY>> messageHandler, Class<REQ> requestMessageType, Side side) {
-        packetId = (short)(packetId + 1);
-        RTMCore.NETWORK_WRAPPER.registerMessage(messageHandler, requestMessageType, packetId, side);
+        RTMCore.NETWORK_WRAPPER.registerMessage(messageHandler, requestMessageType, packetId++, side);
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockConverter.java b/src/main/rtm/jp/ngt/rtm/block/BlockConverter.java
index 17c59f1..ae17ce6 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockConverter.java
+++ b/src/main/rtm/jp/ngt/rtm/block/BlockConverter.java
@@ -80,13 +80,15 @@ public class BlockConverter extends BlockContainerCustom {
     public static byte shouldCreateConverter(World world, int x, int y, int z) {
         if (BlockUtil.getBlock((IBlockAccess)world, x, y + 2, z) != RTMBlock.fireBrick)
             return -1;
-        for (int i = 2; i < 7; i++) {
+        int i;
+        for (i = 2; i < 7; i++) {
             for (int k = 0; k < pos_brick.length; k++) {
                 if (BlockUtil.getBlock((IBlockAccess)world, x + pos_brick[k][0], y + i, z + pos_brick[k][2]) != RTMBlock.fireBrick)
                     return -1;
             }
         }
-        for (int j = 0; j < 4; j++) {
+        int j;
+        for (j = 0; j < 4; j++) {
             boolean flag = true;
             for (int k = 0; k < pos_iron.length; k++) {
                 int[] p0 = BlockUtil.rotateBlockPos((byte)j, pos_iron[k][0], pos_iron[k][1], pos_iron[k][2]);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockFlag.java b/src/main/rtm/jp/ngt/rtm/block/BlockFlag.java
index cc4ccc4..9f69777 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockFlag.java
+++ b/src/main/rtm/jp/ngt/rtm/block/BlockFlag.java
@@ -25,7 +25,7 @@ public class BlockFlag extends BlockContainerCustom {
             int x = holder.getBlockPos().getX();
             int y = holder.getBlockPos().getY();
             int z = holder.getBlockPos().getZ();
-            holder.getPlayer().openGui(RTMCore.instance, RTMCore.guiIdSelectTileEntityTexture, holder.getWorld(), x, y, z);
+            holder.getPlayer().openGui(RTMCore.instance, RTMCore.instance.guiIdSelectTileEntityTexture, holder.getWorld(), x, y, z);
         }
         return true;
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockIronPillar.java b/src/main/rtm/jp/ngt/rtm/block/BlockIronPillar.java
index 65e6a92..c4a46ea 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockIronPillar.java
+++ b/src/main/rtm/jp/ngt/rtm/block/BlockIronPillar.java
@@ -38,6 +38,6 @@ public class BlockIronPillar extends Block {
 
     @SideOnly(Side.CLIENT)
     public boolean shouldSideBeRendered(IBlockState blockState, IBlockAccess access, BlockPos pos, EnumFacing side) {
-        return !(access.getBlockState(pos.offset(side)).getBlock() == this);
+        return access.getBlockState(pos.offset(side)).getBlock() != this;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockPipe.java b/src/main/rtm/jp/ngt/rtm/block/BlockPipe.java
index 9c5006c..c96c0e7 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockPipe.java
+++ b/src/main/rtm/jp/ngt/rtm/block/BlockPipe.java
@@ -39,11 +39,14 @@ public class BlockPipe extends BlockContainerCustomWithMeta {
     public List<BlockSet> setLiquid(World world, int x, int y, int z, int fromX, int fromY, int fromZ, List<BlockSet> list, int count) {
         if (count > 255)
             return list;
+        int x0;
+        int y0;
+        int z0;
         TileEntityPipe tile = (TileEntityPipe)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
         for (int i = 0; i < 6; i++) {
-            int x0 = x + BlockUtil.facing[i][0];
-            int y0 = y + BlockUtil.facing[i][1];
-            int z0 = z + BlockUtil.facing[i][2];
+            x0 = x + BlockUtil.facing[i][0];
+            y0 = y + BlockUtil.facing[i][1];
+            z0 = z + BlockUtil.facing[i][2];
             if (x0 != fromX || y0 != fromY || z0 != fromZ)
                 if (tile.connection[i] == 3) {
                     Block block = BlockUtil.getBlock((IBlockAccess)world, x0, y0, z0);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockRailroadSign.java b/src/main/rtm/jp/ngt/rtm/block/BlockRailroadSign.java
index 2d339a5..d922662 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockRailroadSign.java
+++ b/src/main/rtm/jp/ngt/rtm/block/BlockRailroadSign.java
@@ -39,7 +39,7 @@ public class BlockRailroadSign extends BlockContainerCustomWithMeta {
             int x = holder.getBlockPos().getX();
             int y = holder.getBlockPos().getY();
             int z = holder.getBlockPos().getZ();
-            holder.getPlayer().openGui(RTMCore.instance, RTMCore.guiIdSelectTileEntityTexture, holder.getWorld(), x, y, z);
+            holder.getPlayer().openGui(RTMCore.instance, RTMCore.instance.guiIdSelectTileEntityTexture, holder.getWorld(), x, y, z);
         }
         return true;
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockSignBoard.java b/src/main/rtm/jp/ngt/rtm/block/BlockSignBoard.java
index 98a6c30..8484f09 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockSignBoard.java
+++ b/src/main/rtm/jp/ngt/rtm/block/BlockSignBoard.java
@@ -34,7 +34,7 @@ public class BlockSignBoard extends BlockContainerCustomWithMeta {
             int x = holder.getBlockPos().getX();
             int y = holder.getBlockPos().getY();
             int z = holder.getBlockPos().getZ();
-            holder.getPlayer().openGui(RTMCore.instance, RTMCore.guiIdSignboard, holder.getWorld(), x, y, z);
+            holder.getPlayer().openGui(RTMCore.instance, RTMCore.instance.guiIdSignboard, holder.getWorld(), x, y, z);
         }
         return true;
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockSlot.java b/src/main/rtm/jp/ngt/rtm/block/BlockSlot.java
index a451f8f..6e300c2 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockSlot.java
+++ b/src/main/rtm/jp/ngt/rtm/block/BlockSlot.java
@@ -2,6 +2,7 @@ package jp.ngt.rtm.block;
 
 import com.google.common.collect.UnmodifiableIterator;
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 import jp.ngt.ngtlib.block.BlockContainerCustom;
 import jp.ngt.ngtlib.block.BlockSet;
@@ -100,22 +101,23 @@ public class BlockSlot extends BlockContainerCustom implements IPipeConnectable
         IBlockState iblockstate = getDefaultState();
         switch (meta) {
             case 1:
-                iblockstate = iblockstate.withProperty((IProperty)FACING, (Comparable)EnumFacing.EAST);
-                return iblockstate;
+                iblockstate = iblockstate.withProperty((IProperty) FACING, (Comparable) EnumFacing.EAST);
+                break;
             case 2:
-                iblockstate = iblockstate.withProperty((IProperty)FACING, (Comparable)EnumFacing.WEST);
-                return iblockstate;
+                iblockstate = iblockstate.withProperty((IProperty) FACING, (Comparable) EnumFacing.WEST);
+                break;
             case 3:
-                iblockstate = iblockstate.withProperty((IProperty)FACING, (Comparable)EnumFacing.SOUTH);
-                return iblockstate;
+                iblockstate = iblockstate.withProperty((IProperty) FACING, (Comparable) EnumFacing.SOUTH);
+                break;
             case 4:
-                iblockstate = iblockstate.withProperty((IProperty)FACING, (Comparable)EnumFacing.NORTH);
-                return iblockstate;
+                iblockstate = iblockstate.withProperty((IProperty) FACING, (Comparable) EnumFacing.NORTH);
+                break;
             case 5:
-                iblockstate = iblockstate.withProperty((IProperty)FACING, (Comparable)EnumFacing.DOWN);
-                return iblockstate;
+                iblockstate = iblockstate.withProperty((IProperty) FACING, (Comparable) EnumFacing.DOWN);
+                break;
+            default:
+                iblockstate = iblockstate.withProperty((IProperty) FACING, (Comparable) EnumFacing.UP);
         }
-        iblockstate = iblockstate.withProperty((IProperty)FACING, (Comparable)EnumFacing.UP);
         return iblockstate;
     }
 
@@ -137,7 +139,7 @@ public class BlockSlot extends BlockContainerCustom implements IPipeConnectable
 
     public boolean rotateBlock(World world, BlockPos pos, EnumFacing axis) {
         IBlockState state = world.getBlockState(pos);
-        for (UnmodifiableIterator<IProperty> unmodifiableIterator = state.getProperties().keySet().iterator(); unmodifiableIterator.hasNext(); ) {
+        for (Iterator<? extends IProperty> unmodifiableIterator = state.getProperties().keySet().iterator(); unmodifiableIterator.hasNext(); ) {
             IProperty<?> prop = unmodifiableIterator.next();
             if (prop.getName().equals("facing")) {
                 world.setBlockState(pos, state.cycleProperty(prop));
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockTrainWorkBench.java b/src/main/rtm/jp/ngt/rtm/block/BlockTrainWorkBench.java
index 3df27e2..b25e744 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockTrainWorkBench.java
+++ b/src/main/rtm/jp/ngt/rtm/block/BlockTrainWorkBench.java
@@ -39,7 +39,7 @@ public class BlockTrainWorkBench extends BlockContainerCustomWithMeta {
             int x = holder.getBlockPos().getX();
             int y = holder.getBlockPos().getY();
             int z = holder.getBlockPos().getZ();
-            holder.getPlayer().openGui(RTMCore.instance, RTMCore.guiIdTrainWorkBench, holder.getWorld(), x, y, z);
+            holder.getPlayer().openGui(RTMCore.instance, RTMCore.instance.guiIdTrainWorkBench, holder.getWorld(), x, y, z);
         }
         return true;
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockTurnstile.java b/src/main/rtm/jp/ngt/rtm/block/BlockTurnstile.java
index 480c508..055ca30 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/BlockTurnstile.java
+++ b/src/main/rtm/jp/ngt/rtm/block/BlockTurnstile.java
@@ -106,6 +106,6 @@ public class BlockTurnstile extends BlockMachineBase {
     }
 
     public PathNodeType getAiPathNodeType(IBlockState state, IBlockAccess world, BlockPos pos) {
-        return canThrough(world, pos) ? PathNodeType.OPEN : PathNodeType.BLOCKED;
+        return this.canThrough(world, pos) ? PathNodeType.OPEN : PathNodeType.BLOCKED;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/decoration/DecorationModel.java b/src/main/rtm/jp/ngt/rtm/block/decoration/DecorationModel.java
index cbe36ca..f106a3c 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/decoration/DecorationModel.java
+++ b/src/main/rtm/jp/ngt/rtm/block/decoration/DecorationModel.java
@@ -15,7 +15,7 @@ public class DecorationModel implements Cloneable {
         model.elements = new Element[this.elements.length];
         for (int i = 0; i < model.elements.length; i++)
             model.elements[i] = this.elements[i].clone();
-        this.name += "_copy";
+        this.name = this.name + "_copy";
         return model;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/decoration/DecorationStore.java b/src/main/rtm/jp/ngt/rtm/block/decoration/DecorationStore.java
index d2c0c2b..bf34ac0 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/decoration/DecorationStore.java
+++ b/src/main/rtm/jp/ngt/rtm/block/decoration/DecorationStore.java
@@ -41,6 +41,9 @@ public final class DecorationStore {
 
     private boolean needReloadTexture;
 
+    private DecorationStore() {
+    }
+
     @SideOnly(Side.CLIENT)
     public void registerModelOnClient(DecorationModel model) {
         String json = model.toJson();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/decoration/Face.java b/src/main/rtm/jp/ngt/rtm/block/decoration/Face.java
index 700ae6b..fc359ac 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/decoration/Face.java
+++ b/src/main/rtm/jp/ngt/rtm/block/decoration/Face.java
@@ -59,19 +59,15 @@ public class Face implements Cloneable {
     }
 
     public enum FaceType {
-        TOP, BOTTOM, LEFT, RIGHT, FRONT, BACK;
+        TOP((x, y, z) -> new float[] { 1.0F - z, x }),
+        BOTTOM((x, y, z) -> new float[] { z, x }),
+        LEFT((x, y, z) -> new float[] { 1.0F - z, 1.0F - y }),
+        RIGHT((x, y, z) -> new float[] { z, 1.0F - y }),
+        FRONT((x, y, z) -> new float[] { x, 1.0F - y }),
+        BACK((x, y, z) -> new float[] { 1.0F - x, 1.0F - y });
 
         public final Face.UVFunc func;
 
-        static {
-            TOP = new FaceType("TOP", 0, (x, y, z) -> new float[] { 1.0F - z, x });
-            BOTTOM = new FaceType("BOTTOM", 1, (x, y, z) -> new float[] { z, x });
-            LEFT = new FaceType("LEFT", 2, (x, y, z) -> new float[] { 1.0F - z, 1.0F - y });
-            RIGHT = new FaceType("RIGHT", 3, (x, y, z) -> new float[] { z, 1.0F - y });
-            FRONT = new FaceType("FRONT", 4, (x, y, z) -> new float[] { x, 1.0F - y });
-            BACK = new FaceType("BACK", 5, (x, y, z) -> new float[] { 1.0F - x, 1.0F - y });
-        }
-
         FaceType(Face.UVFunc par1) {
             this.func = par1;
         }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderFlag.java b/src/main/rtm/jp/ngt/rtm/block/tileentity/RenderFlag.java
index 400900f..ec32f52 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderFlag.java
+++ b/src/main/rtm/jp/ngt/rtm/block/tileentity/RenderFlag.java
@@ -45,11 +45,11 @@ public class RenderFlag extends TileEntitySpecialRenderer<TileEntityFlag> {
         int resV = (set.getConfig()).resolutionV;
         int resU = (set.getConfig()).resolutionU;
         for (int i = 0; i < resV; i++) {
-            float v0 = i / resV;
-            float v1 = (i + 1) / resV;
+            float v0 = (float) i / resV;
+            float v1 = (float)(i + 1) / resV;
             for (int j = 0; j < resU; j++) {
-                float u0 = j / resU;
-                float u1 = (j + 1) / resU;
+                float u0 = (float)j / resU;
+                float u1 = (float)(j + 1) / resU;
                 float u0w = u0 * w;
                 float u1w = u1 * w;
                 float r0 = getR(tileEntity.wave, u1, v0);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderMachine.java b/src/main/rtm/jp/ngt/rtm/block/tileentity/RenderMachine.java
index 4a3e2a2..402acfd 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderMachine.java
+++ b/src/main/rtm/jp/ngt/rtm/block/tileentity/RenderMachine.java
@@ -13,6 +13,9 @@ import org.lwjgl.opengl.GL11;
 public final class RenderMachine extends TileEntitySpecialRenderer<TileEntityMachineBase> {
     public static final RenderMachine INSTANCE = new RenderMachine();
 
+    private RenderMachine() {
+    }
+
     private void renderMachine(TileEntityMachineBase par1, double par2, double par4, double par6, float par8) {
         GL11.glPushMatrix();
         GL11.glEnable(32826);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderPaint.java b/src/main/rtm/jp/ngt/rtm/block/tileentity/RenderPaint.java
index 8a4a780..3ce565d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderPaint.java
+++ b/src/main/rtm/jp/ngt/rtm/block/tileentity/RenderPaint.java
@@ -35,61 +35,64 @@ public class RenderPaint extends TileEntitySpecialRenderer<TileEntityPaint> {
         float d2 = 0.015625F;
         float d3 = 1.0F - d2;
         for (int i = 0; i < 6; i++) {
-            if (tileEntity.hasColor(i))
-                for (int j = 0; j < 16; j++) {
-                    float d0 = j * 0.0625F;
-                    for (int k = 0; k < 16; k++) {
-                        int alpha = tileEntity.getAlpha(j, k, i);
-                        if (alpha != 0) {
-                            int color = tileEntity.getColor(j, k, i);
-                            float d1 = k * 0.0625F;
-                            switch (i) {
-                                case 0:
-                                    tessellator.setColorRGBA_I(ColorUtil.multiplicating(8421504, color), alpha);
-                                    tessellator.addVertex(d0, d3, d1 + 0.0625F);
-                                    tessellator.addVertex(d0, d3, d1);
-                                    tessellator.addVertex(d0 + 0.0625F, d3, d1);
-                                    tessellator.addVertex(d0 + 0.0625F, d3, d1 + 0.0625F);
-                                    break;
-                                case 1:
-                                    tessellator.setColorRGBA_I(color, alpha);
-                                    tessellator.addVertex(d0 + 0.0625F, d2, d1 + 0.0625F);
-                                    tessellator.addVertex(d0 + 0.0625F, d2, d1);
-                                    tessellator.addVertex(d0, d2, d1);
-                                    tessellator.addVertex(d0, d2, d1 + 0.0625F);
-                                    break;
-                                case 2:
-                                    tessellator.setColorRGBA_I(ColorUtil.multiplicating(13421772, color), alpha);
-                                    tessellator.addVertex(d0 + 0.0625F, d1 + 0.0625F, d3);
-                                    tessellator.addVertex(d0 + 0.0625F, d1, d3);
-                                    tessellator.addVertex(d0, d1, d3);
-                                    tessellator.addVertex(d0, d1 + 0.0625F, d3);
-                                    break;
-                                case 3:
-                                    tessellator.setColorRGBA_I(ColorUtil.multiplicating(13421772, color), alpha);
-                                    tessellator.addVertex(d0, d1 + 0.0625F, d2);
-                                    tessellator.addVertex(d0, d1, d2);
-                                    tessellator.addVertex(d0 + 0.0625F, d1, d2);
-                                    tessellator.addVertex(d0 + 0.0625F, d1 + 0.0625F, d2);
-                                    break;
-                                case 4:
-                                    tessellator.setColorRGBA_I(ColorUtil.multiplicating(10066329, color), alpha);
-                                    tessellator.addVertex(d3, d0 + 0.0625F, d1 + 0.0625F);
-                                    tessellator.addVertex(d3, d0 + 0.0625F, d1);
-                                    tessellator.addVertex(d3, d0, d1);
-                                    tessellator.addVertex(d3, d0, d1 + 0.0625F);
-                                    break;
-                                case 5:
-                                    tessellator.setColorRGBA_I(ColorUtil.multiplicating(10066329, color), alpha);
-                                    tessellator.addVertex(d2, d0, d1 + 0.0625F);
-                                    tessellator.addVertex(d2, d0, d1);
-                                    tessellator.addVertex(d2, d0 + 0.0625F, d1);
-                                    tessellator.addVertex(d2, d0 + 0.0625F, d1 + 0.0625F);
-                                    break;
-                            }
-                        }
+            if (!tileEntity.hasColor(i)) {
+                continue;
+            }
+            for (int j = 0; j < 16; j++) {
+                float d0 = j * 0.0625F;
+                for (int k = 0; k < 16; k++) {
+                    int alpha = tileEntity.getAlpha(j, k, i);
+                    if (alpha == 0) {
+                        continue;
+                    }
+                    int color = tileEntity.getColor(j, k, i);
+                    float d1 = k * 0.0625F;
+                    switch (i) {
+                        case 0:
+                            tessellator.setColorRGBA_I(ColorUtil.multiplicating(8421504, color), alpha);
+                            tessellator.addVertex(d0, d3, d1 + 0.0625F);
+                            tessellator.addVertex(d0, d3, d1);
+                            tessellator.addVertex(d0 + 0.0625F, d3, d1);
+                            tessellator.addVertex(d0 + 0.0625F, d3, d1 + 0.0625F);
+                            break;
+                        case 1:
+                            tessellator.setColorRGBA_I(color, alpha);
+                            tessellator.addVertex(d0 + 0.0625F, d2, d1 + 0.0625F);
+                            tessellator.addVertex(d0 + 0.0625F, d2, d1);
+                            tessellator.addVertex(d0, d2, d1);
+                            tessellator.addVertex(d0, d2, d1 + 0.0625F);
+                            break;
+                        case 2:
+                            tessellator.setColorRGBA_I(ColorUtil.multiplicating(13421772, color), alpha);
+                            tessellator.addVertex(d0 + 0.0625F, d1 + 0.0625F, d3);
+                            tessellator.addVertex(d0 + 0.0625F, d1, d3);
+                            tessellator.addVertex(d0, d1, d3);
+                            tessellator.addVertex(d0, d1 + 0.0625F, d3);
+                            break;
+                        case 3:
+                            tessellator.setColorRGBA_I(ColorUtil.multiplicating(13421772, color), alpha);
+                            tessellator.addVertex(d0, d1 + 0.0625F, d2);
+                            tessellator.addVertex(d0, d1, d2);
+                            tessellator.addVertex(d0 + 0.0625F, d1, d2);
+                            tessellator.addVertex(d0 + 0.0625F, d1 + 0.0625F, d2);
+                            break;
+                        case 4:
+                            tessellator.setColorRGBA_I(ColorUtil.multiplicating(10066329, color), alpha);
+                            tessellator.addVertex(d3, d0 + 0.0625F, d1 + 0.0625F);
+                            tessellator.addVertex(d3, d0 + 0.0625F, d1);
+                            tessellator.addVertex(d3, d0, d1);
+                            tessellator.addVertex(d3, d0, d1 + 0.0625F);
+                            break;
+                        case 5:
+                            tessellator.setColorRGBA_I(ColorUtil.multiplicating(10066329, color), alpha);
+                            tessellator.addVertex(d2, d0, d1 + 0.0625F);
+                            tessellator.addVertex(d2, d0, d1);
+                            tessellator.addVertex(d2, d0 + 0.0625F, d1);
+                            tessellator.addVertex(d2, d0 + 0.0625F, d1 + 0.0625F);
+                            break;
                     }
                 }
+            }
         }
         tessellator.draw();
         GL11.glDepthMask(true);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderSignBoard.java b/src/main/rtm/jp/ngt/rtm/block/tileentity/RenderSignBoard.java
index c26dd4c..b7b03df 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/RenderSignBoard.java
+++ b/src/main/rtm/jp/ngt/rtm/block/tileentity/RenderSignBoard.java
@@ -26,8 +26,8 @@ public class RenderSignBoard extends TileEntitySpecialRenderer<TileEntitySignBoa
         float minV = 0.0F;
         float maxV = 1.0F;
         if (cfg.frame > 1) {
-            minV = (tileEntity.counter / cfg.animationCycle) / cfg.frame;
-            maxV = (tileEntity.counter / cfg.animationCycle + 1) / cfg.frame;
+            minV = (float)(tileEntity.counter / cfg.animationCycle) / cfg.frame;
+            maxV = (float)(tileEntity.counter / cfg.animationCycle + 1) / cfg.frame;
         }
         GL11.glRotatef(dir * -90.0F, 0.0F, 1.0F, 0.0F);
         if (meta == 0) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityConverter.java b/src/main/rtm/jp/ngt/rtm/block/tileentity/TileEntityConverter.java
index 864b7ef..4bd6fdc 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityConverter.java
+++ b/src/main/rtm/jp/ngt/rtm/block/tileentity/TileEntityConverter.java
@@ -44,8 +44,8 @@ public class TileEntityConverter extends TileEntityCustom implements ITickable {
 
     public void setPos(int x, int y, int z, int prevX, int prevY, int prevZ) {
         super.setPos(x, y, z, prevX, prevY, prevZ);
-        this.corePos[0] = this.corePos[0] + prevX - x;
-        this.corePos[1] = this.corePos[1] + prevY - y;
-        this.corePos[2] = this.corePos[2] + prevZ - z;
+        this.corePos[0] += + prevX - x;
+        this.corePos[1] += + prevY - y;
+        this.corePos[2] += + prevZ - z;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityEffect.java b/src/main/rtm/jp/ngt/rtm/block/tileentity/TileEntityEffect.java
index 309bb37..b61b17e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityEffect.java
+++ b/src/main/rtm/jp/ngt/rtm/block/tileentity/TileEntityEffect.java
@@ -111,20 +111,21 @@ public class TileEntityEffect extends TileEntityCustom implements ITickable {
                             if (isChunksExist(x1, y1, z1)) {
                                 IBlockState state = BlockUtil.getBlockState((IBlockAccess)getWorld(), x1, y1, z1);
                                 Block block = state.getBlock();
-                                if (block != Blocks.AIR) {
-                                    float hardness = state.getBlockHardness(this.world, getPos());
-                                    if (flag == 1) {
-                                        if (hardness >= 0.0F && hardness < 500.0F)
-                                            setBlock(x1, y1, z1, Blocks.AIR);
-                                    } else if (hardness >= 0.0F && hardness < 0.5F) {
-                                        if (block != Blocks.FIRE) {
-                                            setBlock(x1, y1, z1, Blocks.AIR);
-                                            if (state.getMaterial() == Material.PLANTS || state.getMaterial() == Material.LEAVES)
-                                                setBlock(x1, y1, z1, (Block)Blocks.FIRE);
-                                        }
-                                    } else if (block == Blocks.GRASS || block == Blocks.FARMLAND || block == Blocks.MYCELIUM) {
-                                        setBlock(x1, y1, z1, Blocks.DIRT);
+                                if (block == Blocks.AIR) {
+                                    continue;
+                                }
+                                float hardness = state.getBlockHardness(this.world, getPos());
+                                if (flag == 1) {
+                                    if (hardness >= 0.0F && hardness < 500.0F)
+                                        setBlock(x1, y1, z1, Blocks.AIR);
+                                } else if (hardness >= 0.0F && hardness < 0.5F) {
+                                    if (block != Blocks.FIRE) {
+                                        setBlock(x1, y1, z1, Blocks.AIR);
+                                        if (state.getMaterial() == Material.PLANTS || state.getMaterial() == Material.LEAVES)
+                                            setBlock(x1, y1, z1, (Block)Blocks.FIRE);
                                     }
+                                } else if (block == Blocks.GRASS || block == Blocks.FARMLAND || block == Blocks.MYCELIUM) {
+                                    setBlock(x1, y1, z1, Blocks.DIRT);
                                 }
                             }
                         }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityMovingMachine.java b/src/main/rtm/jp/ngt/rtm/block/tileentity/TileEntityMovingMachine.java
index 023637f..20459e9 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityMovingMachine.java
+++ b/src/main/rtm/jp/ngt/rtm/block/tileentity/TileEntityMovingMachine.java
@@ -245,17 +245,20 @@ public class TileEntityMovingMachine extends TileEntityCustom implements ITickab
 
     public void setMovement(byte par1) {
         this.moveDir = par1;
-        this.motionX = this.motionY = this.motionZ = 0.0D;
-        this.prevPosX = this.posX;
-        this.prevPosY = this.posY;
-        this.prevPosZ = this.posZ;
-        editBlock(1);
-        Vec3 vec = PooledVec3.create(this.pairBlockX, this.pairBlockY, this.pairBlockZ).normalize();
-        double d0 = (par1 == 1) ? 1.0D : -1.0D;
-        this.motionX = vec.getX() * this.speed * d0;
-        this.motionY = vec.getY() * this.speed * d0;
-        this.motionZ = vec.getZ() * this.speed * d0;
-        editBlock(0);
+        if (par1 == 0) {
+            this.motionX = this.motionY = this.motionZ = 0.0D;
+            this.prevPosX = this.posX;
+            this.prevPosY = this.posY;
+            this.prevPosZ = this.posZ;
+            editBlock(1);
+        } else {
+            Vec3 vec = PooledVec3.create(this.pairBlockX, this.pairBlockY, this.pairBlockZ).normalize();
+            double d0 = (par1 == 1) ? 1.0D : -1.0D;
+            this.motionX = vec.getX() * this.speed * d0;
+            this.motionY = vec.getY() * this.speed * d0;
+            this.motionZ = vec.getZ() * this.speed * d0;
+            editBlock(0);
+        }
         if (!this.world.isRemote) {
             sendPacket();
             markDirty();
@@ -419,16 +422,17 @@ public class TileEntityMovingMachine extends TileEntityCustom implements ITickab
         for (int i = -range; i < range; i++) {
             for (int j = 0; j < 256; j++) {
                 for (int k = -range; k < range; k++) {
-                    if (i != 0 || j != y || k != 0) {
-                        BlockPos pos = new BlockPos(x + i, j, z + k);
-                        if (this.world.getBlockState(pos).getBlock() == RTMBlock.movingMachine) {
-                            TileEntityMovingMachine tile = (TileEntityMovingMachine)this.world.getTileEntity(pos);
-                            if (!tile.hasPair()) {
-                                this.isCore = true;
-                                setPair(tile);
-                                tile.setPair(this);
-                                return;
-                            }
+                    if (i == 0 && j == y && k == 0) {
+                        continue;
+                    }
+                    BlockPos pos = new BlockPos(x + i, j, z + k);
+                    if (this.world.getBlockState(pos).getBlock() == RTMBlock.movingMachine) {
+                        TileEntityMovingMachine tile = (TileEntityMovingMachine)this.world.getTileEntity(pos);
+                        if (!tile.hasPair()) {
+                            this.isCore = true;
+                            setPair(tile);
+                            tile.setPair(this);
+                            return;
                         }
                     }
                 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityTrainWorkBench.java b/src/main/rtm/jp/ngt/rtm/block/tileentity/TileEntityTrainWorkBench.java
index 0c96ebb..12ad0a8 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tileentity/TileEntityTrainWorkBench.java
+++ b/src/main/rtm/jp/ngt/rtm/block/tileentity/TileEntityTrainWorkBench.java
@@ -28,7 +28,7 @@ public class TileEntityTrainWorkBench extends TileEntityCustom implements ITicka
     public void readFromNBT(NBTTagCompound nbt) {
         super.readFromNBT(nbt);
         NBTTagList nbttaglist = nbt.getTagList("Items", 10);
-        Arrays.fill((Object[])this.craftSlots, ItemStack.EMPTY);
+        Arrays.fill(this.craftSlots, ItemStack.EMPTY);
         for (int i = 0; i < nbttaglist.tagCount(); i++) {
             NBTTagCompound nbt1 = nbttaglist.getCompoundTagAt(i);
             int j = nbt1.getByte("Slot") & 0xFF;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tt/SignboardText.java b/src/main/rtm/jp/ngt/rtm/block/tt/SignboardText.java
index 9f7c9a5..3c76634 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tt/SignboardText.java
+++ b/src/main/rtm/jp/ngt/rtm/block/tt/SignboardText.java
@@ -173,7 +173,7 @@ public class SignboardText {
                     this.prevTime = time;
                 }
             int tw = (int)(48.0F * this.width / this.size);
-            maxU = tw / getText().getWidth();
+            maxU = (float) tw / getText().getWidth();
             if (maxU > 1.0F) {
                 maxU = 1.0F;
                 w2 = this.size * getText().getWidth() / getText().getHeight();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tt/TimeTable.java b/src/main/rtm/jp/ngt/rtm/block/tt/TimeTable.java
index d328f8c..a8412ad 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tt/TimeTable.java
+++ b/src/main/rtm/jp/ngt/rtm/block/tt/TimeTable.java
@@ -40,56 +40,59 @@ public class TimeTable {
         List<List<String>> idListTemp = new ArrayList<>();
         Map<String, TTEntry> entryMapTemp = new HashMap<>();
         for (String[] sa : csv) {
-            if (sa != null && sa.length != 0) {
-                String firstStr = sa[0];
-                if (!firstStr.startsWith("#"))
-                    if (firstStr.startsWith("<")) {
-                        TTSection section = TTSection.get(firstStr);
-                        if (section != null) {
-                            currentSection = section;
-                            sectionCount = 0;
-                        }
-                    } else if (currentSection == TTSection.Config) {
-                        if (firstStr.startsWith("name")) {
-                            this.name = parseString(firstStr);
-                        } else if (firstStr.startsWith("description")) {
-                            this.description = parseString(firstStr);
-                        } else if (firstStr.startsWith("useRealTime")) {
-                            this.useRealTime = Boolean.valueOf(parseString(firstStr)).booleanValue();
-                        }
-                    } else if (currentSection == TTSection.Color) {
-                        String[] sa2 = firstStr.split("=");
-                        String key = sa2[0];
-                        int color = Integer.decode(sa2[1]).intValue();
-                        this.textColorMap.put(Pattern.compile(key), Integer.valueOf(color));
-                    } else if (currentSection == TTSection.TimeTable) {
-                        if (sectionCount == 1) {
-                            for (int i = 1; i < sa.length; i++) {
-                                this.trainAxis.put(sa[i], Integer.valueOf(i - 1));
-                                TimeTableManager.INSTANCE.addTTAndTrain(sa[i], this);
-                            }
-                        } else if (sectionCount == 2) {
-                            this.trainName = new String[sa.length - 1];
-                            for (int i = 1; i < sa.length; i++)
-                                this.trainName[i - 1] = sa[i];
-                        } else {
-                            int row = sectionCount - 3;
-                            this.stationAxis.put(sa[0], Integer.valueOf(row));
-                            List<String> list = new ArrayList<>();
-                            idListTemp.add(list);
-                            for (int i = 1; i < sa.length; i++)
-                                list.add(sa[i]);
-                        }
-                    } else if (currentSection == TTSection.Entry) {
-                        if (sectionCount == 1) {
-                            for (String s : sa)
-                                this.colNames.add(s);
-                        } else {
-                            entryMapTemp.put(sa[0], new TTEntry(sa));
+            if (sa == null || sa.length == 0) {
+                continue;
+            }
+            String firstStr = sa[0];
+            if (firstStr.startsWith("#")) {
+            } else {
+                if (firstStr.startsWith("<")) {
+                    TTSection section = TTSection.get(firstStr);
+                    if (section != null) {
+                        currentSection = section;
+                        sectionCount = 0;
+                    }
+                } else if (currentSection == TTSection.Config) {
+                    if (firstStr.startsWith("name")) {
+                        this.name = parseString(firstStr);
+                    } else if (firstStr.startsWith("description")) {
+                        this.description = parseString(firstStr);
+                    } else if (firstStr.startsWith("useRealTime")) {
+                        this.useRealTime = Boolean.valueOf(parseString(firstStr)).booleanValue();
+                    }
+                } else if (currentSection == TTSection.Color) {
+                    String[] sa2 = firstStr.split("=");
+                    String key = sa2[0];
+                    int color = Integer.decode(sa2[1]).intValue();
+                    this.textColorMap.put(Pattern.compile(key), Integer.valueOf(color));
+                } else if (currentSection == TTSection.TimeTable) {
+                    if (sectionCount == 1) {
+                        for (int i = 1; i < sa.length; i++) {
+                            this.trainAxis.put(sa[i], Integer.valueOf(i - 1));
+                            TimeTableManager.INSTANCE.addTTAndTrain(sa[i], this);
                         }
+                    } else if (sectionCount == 2) {
+                        this.trainName = new String[sa.length - 1];
+                        for (int i = 1; i < sa.length; i++)
+                            this.trainName[i - 1] = sa[i];
+                    } else {
+                        int row = sectionCount - 3;
+                        this.stationAxis.put(sa[0], Integer.valueOf(row));
+                        List<String> list = new ArrayList<>();
+                        idListTemp.add(list);
+                        for (int i = 1; i < sa.length; i++)
+                            list.add(sa[i]);
+                    }
+                } else if (currentSection == TTSection.Entry) {
+                    if (sectionCount == 1) {
+                        for (String s : sa)
+                            this.colNames.add(s);
+                    } else {
+                        entryMapTemp.put(sa[0], new TTEntry(sa));
                     }
-                sectionCount++;
+                }
             }
+            sectionCount++;
         }
         convertData(idListTemp, entryMapTemp);
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tt/TimeTableManager.java b/src/main/rtm/jp/ngt/rtm/block/tt/TimeTableManager.java
index f5d8c73..d9d23c1 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/block/tt/TimeTableManager.java
+++ b/src/main/rtm/jp/ngt/rtm/block/tt/TimeTableManager.java
@@ -20,6 +20,9 @@ public class TimeTableManager {
 
     private final Map<String, TimeTable> trainToTT = new HashMap<>();
 
+    private TimeTableManager() {
+    }
+
     public void load() {
         List<File> fileList = NGTFileLoader.findFile(file ->
                 (file.getName().startsWith("tt_") && file.getName().endsWith(".csv")));
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/CommandNPC.java b/src/main/rtm/jp/ngt/rtm/command/CommandNPC.java
index f7d218f..e1a4ddf 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/CommandNPC.java
+++ b/src/main/rtm/jp/ngt/rtm/command/CommandNPC.java
@@ -17,8 +17,9 @@ public class CommandNPC extends CommandBase {
     }
 
     public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException {
+        EntityPlayerMP entityPlayerMP;
         try {
-            EntityPlayerMP entityPlayerMP = getCommandSenderAsPlayer(sender);
+            entityPlayerMP = getCommandSenderAsPlayer(sender);
         } catch (PlayerNotFoundException e) {
             e.printStackTrace();
             return;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/CommandRTM.java b/src/main/rtm/jp/ngt/rtm/command/CommandRTM.java
index b012649..1f5f193 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/CommandRTM.java
+++ b/src/main/rtm/jp/ngt/rtm/command/CommandRTM.java
@@ -23,7 +23,7 @@ public class CommandRTM extends CommandBase {
     }
 
     public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException {
-        EntityPlayerMP entityPlayerMP;
+        EntityPlayer entityPlayerMP;
         try {
             entityPlayerMP = getCommandSenderAsPlayer(sender);
         } catch (PlayerNotFoundException e) {
@@ -37,7 +37,7 @@ public class CommandRTM extends CommandBase {
                 for (Object object : list) {
                     Entity entity = null;
                     if (object instanceof EntityTrainBase) {
-                        EntityTrainBase entityTrainBase = (EntityTrainBase)object;
+                        entity = (EntityTrainBase)object;
                         count++;
                     } else if (object instanceof EntityBogie) {
                         entity = (EntityBogie)object;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/ModelCtrl.java b/src/main/rtm/jp/ngt/rtm/command/ModelCtrl.java
index 8b96477..2731efb 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/command/ModelCtrl.java
+++ b/src/main/rtm/jp/ngt/rtm/command/ModelCtrl.java
@@ -12,43 +12,25 @@ import jp.ngt.rtm.modelpack.modelset.ModelSetFirearm;
 import net.minecraft.command.ICommandSender;
 
 public enum ModelCtrl {
-    NO_FUNC(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    FIRE(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    V_ADD_PITCH(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    V_ADD_YAW(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    V_MOV_DIST(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    VEHICLE_STATE(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    DATA_MAP(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    DIR(s -> false, obj -> false, (target, player, order, value) -> false, ""),
-    NOTCH(s -> false, obj -> false, (target, player, order, value) -> false, "");
-
-    public final String discription;
-
-    public final CommandExecutor executor;
-
-    public final TargetFilter filter;
-
-    public final CommandMatcher matcher;
-
-    static {
-        NOTCH = new ModelCtrl("NOTCH", 0, s -> s.equals("notch"), obj -> obj instanceof EntityTrainBase, (target, player, order, value) -> {
+    //@formatter:off
+        NOTCH(s -> s.equals("notch"), obj -> obj instanceof EntityTrainBase, (target, player, order, value) -> {
                     int notch = Integer.valueOf(value).intValue();
                     return ((EntityTrainBase)target).setNotch(notch);
-                }"mctrl <train> notch <-8 ~ 5>");
-        DIR = new ModelCtrl("DIR", 1, s -> s.equals("dir"), obj -> obj instanceof EntityTrainBase, (target, player, order, value) -> {
+                }, "mctrl <train> notch <-8 ~ 5>"),
+        DIR(s -> s.equals("dir"), obj -> obj instanceof EntityTrainBase, (target, player, order, value) -> {
                     int dir = Integer.valueOf(value).intValue();
                     ((EntityTrainBase)target).setTrainDirection(dir);
                     return true;
-                }"mctrl <train> dir <0 or 1>");
-        DATA_MAP = new ModelCtrl("DATA_MAP", 2, s -> s.startsWith("dm:"), obj -> obj instanceof IResourceSelector, (target, player, order, value) -> {
+                }, "mctrl <train> dir <0 or 1>"),
+        DATA_MAP(s -> s.startsWith("dm:"), obj -> obj instanceof IResourceSelector, (target, player, order, value) -> {
                     String dataName = order.replace("dm:", "");
                     if (!((IResourceSelector)target).getResourceState().getDataMap().set(dataName, value, 3)) {
                         NGTLog.sendChatMessage(player, "[" + dataName + "] is not key.", new Object[0]);
                         return false;
                     }
                     return true;
-                }"mctrl <?> dm:<data name> <(type)value>");
-        VEHICLE_STATE = new ModelCtrl("VEHICLE_STATE", 3, s -> s.startsWith("state:"), obj -> obj instanceof EntityVehicleBase, (target, player, order, value) -> {
+                }, "mctrl <?> dm:<data name> <(type)value>"),
+        VEHICLE_STATE(s -> s.startsWith("state:"), obj -> obj instanceof EntityVehicleBase, (target, player, order, value) -> {
                     String dataName = order.replace("state:", "");
                     try {
                         TrainState state = TrainState.valueOf(value);
@@ -60,14 +42,14 @@ public enum ModelCtrl {
                         NGTLog.sendChatMessage(player, "Illegal argument.", new Object[0]);
                         return false;
                     }
-                }"mctrl <vehicle> state:<data name> <value>");
-        V_MOV_DIST = new ModelCtrl("V_MOV_DIST", 4, s -> s.equals("move"), obj -> obj instanceof EntityVehicle, (target, player, order, value) -> {
+                }, "mctrl <vehicle> state:<data name> <value>"),
+        V_MOV_DIST(s -> s.equals("move"), obj -> obj instanceof EntityVehicle, (target, player, order, value) -> {
                     EntityVehicle vehicle = (EntityVehicle)target;
                     double dist = Double.valueOf(value).doubleValue();
                     vehicle.controller.setMoveDistance(vehicle, dist);
                     return true;
-                }"mctrl <vehicle> move <distance>");
-        V_ADD_YAW = new ModelCtrl("V_ADD_YAW", 5, s -> s.equals("addYaw"), obj -> (obj instanceof EntityVehicle || obj instanceof EntityArtillery), (target, player, order, value) -> {
+                }, "mctrl <vehicle> move <distance>"),
+        V_ADD_YAW(s -> s.equals("addYaw"), obj -> (obj instanceof EntityVehicle || obj instanceof EntityArtillery), (target, player, order, value) -> {
                     if (target instanceof EntityArtillery) {
                         EntityArtillery firearm = (EntityArtillery)target;
                         float yaw = Float.valueOf(value).floatValue();
@@ -78,23 +60,33 @@ public enum ModelCtrl {
                         vehicle.controller.addYaw(vehicle, yaw);
                     }
                     return true;
-                }"mctrl <vehicle or artillery> addYaw <value>");
-        V_ADD_PITCH = new ModelCtrl("V_ADD_PITCH", 6, s -> s.equals("addPitch"), obj -> (obj instanceof EntityVehicle || obj instanceof EntityArtillery), (target, player, order, value) -> {
+                }, "mctrl <vehicle or artillery> addYaw <value>"),
+        V_ADD_PITCH(s -> s.equals("addPitch"), obj -> (obj instanceof EntityVehicle || obj instanceof EntityArtillery), (target, player, order, value) -> {
                     if (target instanceof EntityArtillery) {
                         EntityArtillery firearm = (EntityArtillery)target;
                         float yaw = Float.valueOf(value).floatValue();
                         firearm.controller.addPitch(firearm, -yaw);
                     }
                     return true;
-                }"mctrl <artillery> addPitch <value>");
-        FIRE = new ModelCtrl("FIRE", 7, s -> s.equals("fire"), obj -> obj instanceof EntityArtillery, (target, player, order, value) -> {
+                }, "mctrl <artillery> addPitch <value>"),
+        FIRE(s -> s.equals("fire"), obj -> obj instanceof EntityArtillery, (target, player, order, value) -> {
                     EntityArtillery firearm = (EntityArtillery)target;
                     ItemAmmunition.BulletType type = ItemAmmunition.BulletType.getBulletType((((ModelSetFirearm)firearm.getResourceState().getResourceSet()).getConfig()).ammoType);
                     int count = Integer.valueOf(value).intValue();
                     firearm.fire(null, type, count);
                     return true;
-                }"mctrl <artillery> fire <number of bullet>");
-    }
+                }, "mctrl <artillery> fire <number of bullet>"),
+    //@formatter:on
+
+    NO_FUNC(s -> false, obj -> false, (target, player, order, value) -> false, "");
+
+    public final String discription;
+
+    public final CommandExecutor executor;
+
+    public final TargetFilter filter;
+
+    public final CommandMatcher matcher;
 
     ModelCtrl(CommandMatcher par1, TargetFilter par2, CommandExecutor par3, String par4) {
         this.matcher = par1;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockSignalConverter.java b/src/main/rtm/jp/ngt/rtm/electric/BlockSignalConverter.java
index 5a52a75..5a54057 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockSignalConverter.java
+++ b/src/main/rtm/jp/ngt/rtm/electric/BlockSignalConverter.java
@@ -52,7 +52,7 @@ public class BlockSignalConverter extends BlockContainerCustomWithMeta implement
         if (meta == SignalConverterType.Increment.id || meta == SignalConverterType.Decrement.id)
             return true;
         if (world.isRemote)
-            holder.getPlayer().openGui(RTMCore.instance, RTMCore.guiIdSignalConverter, world, x, y, z);
+            holder.getPlayer().openGui(RTMCore.instance, RTMCore.instance.guiIdSignalConverter, world, x, y, z);
         return true;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockSpeaker.java b/src/main/rtm/jp/ngt/rtm/electric/BlockSpeaker.java
index aefb251..48bd8da 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockSpeaker.java
+++ b/src/main/rtm/jp/ngt/rtm/electric/BlockSpeaker.java
@@ -35,7 +35,7 @@ public class BlockSpeaker extends BlockMachineBase implements IBlockConnective {
         if (holder.getPlayer().isSneaking()) {
             super.onBlockActivated(holder, hitX, hitY, hitZ);
         } else if (world.isRemote) {
-            holder.getPlayer().openGui(RTMCore.instance, RTMCore.guiIdSpeaker, world, x, y, z);
+            holder.getPlayer().openGui(RTMCore.instance, RTMCore.instance.guiIdSpeaker, world, x, y, z);
         }
         return true;
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockTicketVendor.java b/src/main/rtm/jp/ngt/rtm/electric/BlockTicketVendor.java
index 2b3b449..b954f3d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/BlockTicketVendor.java
+++ b/src/main/rtm/jp/ngt/rtm/electric/BlockTicketVendor.java
@@ -34,7 +34,7 @@ public class BlockTicketVendor extends BlockMachineBase {
             int x = pos.getX();
             int y = pos.getY();
             int z = pos.getZ();
-            player.openGui(RTMCore.instance, RTMCore.guiIdTicketVendor, world, x, y, z);
+            player.openGui(RTMCore.instance, RTMCore.instance.guiIdTicketVendor, world, x, y, z);
         }
         return true;
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/Connection.java b/src/main/rtm/jp/ngt/rtm/electric/Connection.java
index dc8eff1..b6c4f18 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/Connection.java
+++ b/src/main/rtm/jp/ngt/rtm/electric/Connection.java
@@ -121,7 +121,7 @@ public class Connection {
             }
             TileEntity te = BlockUtil.getTileEntity((IBlockAccess)world, this.x, this.y, this.z);
             if (te instanceof TileEntityElectricalWiring) {
-                this.connectedObject = te;
+                this.connectedObject = (TileEntityElectricalWiring)te;
                 return (TileEntityElectricalWiring)this.connectedObject;
             }
         }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/RenderElectricalWiring.java b/src/main/rtm/jp/ngt/rtm/electric/RenderElectricalWiring.java
index e7b1c2e..a21092d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/RenderElectricalWiring.java
+++ b/src/main/rtm/jp/ngt/rtm/electric/RenderElectricalWiring.java
@@ -25,6 +25,9 @@ import org.lwjgl.opengl.GL11;
 public class RenderElectricalWiring extends TileEntitySpecialRenderer<TileEntityConnectorBase> {
     public static final RenderElectricalWiring INSTANCE = new RenderElectricalWiring();
 
+    private RenderElectricalWiring() {
+    }
+
     protected void renderElectricalWiring(TileEntityConnectorBase tileEntity, double par2, double par4, double par6, float par8) {
         GL11.glPushMatrix();
         GL11.glEnable(32826);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntityElectricalWiring.java b/src/main/rtm/jp/ngt/rtm/electric/TileEntityElectricalWiring.java
index 2e47ff1..2f3710e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntityElectricalWiring.java
+++ b/src/main/rtm/jp/ngt/rtm/electric/TileEntityElectricalWiring.java
@@ -80,7 +80,7 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
                 this.connections.remove(c0);
                 TileEntityElectricalWiring tile = getWireTileEntity(x, y, z, c0.type);
                 if (tile != null)
-                    tile.setConnectionFrom(getX(), getY(), getZ(), Connection.ConnectionType.NONE, (ResourceState)null);
+                    tile.setConnectionFrom(getX(), getY(), getZ(), Connection.ConnectionType.NONE, null);
                 flag = true;
             }
         } else if (type == Connection.ConnectionType.TO_PLAYER) {
@@ -161,7 +161,7 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
             List<Connection> list = new ArrayList<>(this.connections);
             for (Connection connection : list) {
                 if (!connection.isAvailable(this.world) || connection.type == Connection.ConnectionType.NONE)
-                    setConnectionTo(connection.x, connection.y, connection.z, Connection.ConnectionType.NONE, (ResourceState)null);
+                    setConnectionTo(connection.x, connection.y, connection.z, Connection.ConnectionType.NONE, null);
             }
             if (this.prevSignal >= 0 && this.prevSignal != this.signal) {
                 this.signal = this.prevSignal;
@@ -182,7 +182,7 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
         boolean flag = false;
         if (this.isActivated) {
             this.isActivated = false;
-            setConnectionTo(player.getEntityId(), -1, 0, Connection.ConnectionType.NONE, (ResourceState)null);
+            setConnectionTo(player.getEntityId(), -1, 0, Connection.ConnectionType.NONE, null);
             flag = true;
         } else {
             ResourceState wireType = getWireType(player);
@@ -213,7 +213,7 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
             Connection c0 = getConnection(tile.getX(), tile.getY(), tile.getZ());
             if (c0 != null) {
                 tile.isActivated = false;
-                setConnectionTo(tile.getX(), tile.getY(), tile.getZ(), Connection.ConnectionType.NONE, (ResourceState)null);
+                setConnectionTo(tile.getX(), tile.getY(), tile.getZ(), Connection.ConnectionType.NONE, null);
                 return true;
             }
         }
@@ -236,7 +236,7 @@ public abstract class TileEntityElectricalWiring extends TileEntityCustom implem
                     flag = setConnectionTo(tile.getX(), tile.getY(), tile.getZ(), type, state);
                 }
                 if (type != Connection.ConnectionType.NONE && flag) {
-                    tile.setConnectionTo(player.getEntityId(), -1, 0, Connection.ConnectionType.NONE, (ResourceState)null);
+                    tile.setConnectionTo(player.getEntityId(), -1, 0, Connection.ConnectionType.NONE, null);
                     return true;
                 }
             }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntitySignalConverter.java b/src/main/rtm/jp/ngt/rtm/electric/TileEntitySignalConverter.java
index d1cee01..8bdf998 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/TileEntitySignalConverter.java
+++ b/src/main/rtm/jp/ngt/rtm/electric/TileEntitySignalConverter.java
@@ -76,15 +76,15 @@ public abstract class TileEntitySignalConverter extends TileEntityCustom impleme
 
     public static TileEntitySignalConverter createTileEntity(int par1) {
         switch (SignalConverterType.getType(par1)) {
-            case EQUAL:
+            case RSIn:
                 return new TileEntitySC_RSIn();
-            case GREATER_EQUAL:
+            case RSOut:
                 return new TileEntitySC_RSOut();
-            case GREATER_THAN:
+            case Increment:
                 return new TileEntitySC_Increment();
-            case LESS_EQUAL:
+            case Decrement:
                 return new TileEntitySC_Decrement();
-            case LESS_THAN:
+            case Wireless:
                 return new TileEntitySC_Wireless();
         }
         return new TileEntitySC_RSIn();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/WireManager.java b/src/main/rtm/jp/ngt/rtm/electric/WireManager.java
index 0a92ab4..ac998fd 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/electric/WireManager.java
+++ b/src/main/rtm/jp/ngt/rtm/electric/WireManager.java
@@ -23,6 +23,9 @@ public final class WireManager {
 
     private final Map<WireChunk, List<WireEntry>> loadedWires = new HashMap<>();
 
+    private WireManager() {
+    }
+
     public void addWire(TileEntityElectricalWiring tileEntity, Connection connection) {
         editWire(tileEntity, connection, true);
     }
@@ -78,7 +81,7 @@ public final class WireManager {
             for (WireEntry entry : list) {
                 if (entry.inRange(x, y, z)) {
                     int index = entry.lineXZ.getNearlestPoint(512, x, z);
-                    double resY = entry.minY + (entry.maxY - entry.minY) * index / 512.0D;
+                    double resY = entry.minY + (entry.maxY - entry.minY) * (index / 512.0D);
                     return resY;
                 }
             }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityBullet.java b/src/main/rtm/jp/ngt/rtm/entity/EntityBullet.java
index c564098..129396f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityBullet.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/EntityBullet.java
@@ -66,7 +66,7 @@ public class EntityBullet extends EntityArrow {
         super(world);
         setBulletSize();
         if (world.isRemote) {
-            setRenderDistanceWeight(10.0D);
+            this.setRenderDistanceWeight(10.0D);
         }
     }
 
@@ -303,8 +303,8 @@ public class EntityBullet extends EntityArrow {
                 double len = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
                 double accXZ = 0.125D * (1.0D - len / 10.0D);
                 double accY = -0.01D;
-                this.motionX += accXZ * ((this.motionX >= 0.0D) ? 1.0D : -1.0D) * Math.abs(this.motionX) / len;
-                this.motionZ += accXZ * ((this.motionZ >= 0.0D) ? 1.0D : -1.0D) * Math.abs(this.motionZ) / len;
+                this.motionX += accXZ * ((this.motionX >= 0.0D) ? 1.0D : -1.0D) * (Math.abs(this.motionX) / len);
+                this.motionZ += accXZ * ((this.motionZ >= 0.0D) ? 1.0D : -1.0D) * (Math.abs(this.motionZ) / len);
                 this.motionY += accY;
             } else {
                 this.motionX *= d3;
@@ -332,9 +332,9 @@ public class EntityBullet extends EntityArrow {
                 double d2 = this.posZ + random.nextDouble() * -this.motionZ;
                 double dece = 0.5D;
                 double vari = 0.01D;
-                double vx = -this.motionX * (random.nextDouble() * 0.5D + 0.5D) * dece + random.nextGaussian() * vari;
-                double vy = -this.motionY * (random.nextDouble() * 0.5D + 0.5D) * dece + random.nextGaussian() * vari;
-                double vz = -this.motionZ * (random.nextDouble() * 0.5D + 0.5D) * dece + random.nextGaussian() * vari;
+                double vx = -this.motionX * ((random.nextDouble() * 0.5D + 0.5D) * dece) + random.nextGaussian() * vari;
+                double vy = -this.motionY * ((random.nextDouble() * 0.5D + 0.5D) * dece) + random.nextGaussian() * vari;
+                double vz = -this.motionZ * ((random.nextDouble() * 0.5D + 0.5D) * dece) + random.nextGaussian() * vari;
                 getEntityWorld().spawnParticle(EnumParticleTypes.EXPLOSION_NORMAL, d0, d1, d2, vx, vy, vz, new int[0]);
             }
         }
@@ -403,7 +403,8 @@ public class EntityBullet extends EntityArrow {
         } else if (type == ItemAmmunition.BulletType.cannon_Atomic) {
             if (!this.world.isRemote) {
                 float hardness = state.getBlockHardness(this.world, pos);
-                if (block == Blocks.AIR || hardness <= 0.0F || hardness < 500.0F);
+                if (block != Blocks.AIR && hardness > 0.0F && hardness < 500.0F){
+                }
                 BlockUtil.setBlock(getEntityWorld(), x, y, z, RTMBlock.effect, 0, 3);
                 getEntityWorld().playSound(this.posX, this.posY, this.posZ, SoundEvents.ENTITY_GENERIC_EXPLODE, SoundCategory.PLAYERS, 10.0F, 1.0F, false);
                 setDead();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityMMBoundingBox.java b/src/main/rtm/jp/ngt/rtm/entity/EntityMMBoundingBox.java
index 34085c5..65393ce 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityMMBoundingBox.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/EntityMMBoundingBox.java
@@ -108,7 +108,7 @@ public class EntityMMBoundingBox extends Entity {
         if (inY(entity, dy)) {
             if (onY(entity, dy)) {
                 if (inXAndZ(entity)) {
-                    double y1 = myBB.maxY - entityBB.minY + dy;
+                    double y1 = myBB.maxY - (entityBB.minY + dy);
                     if (y1 != 0.0D)
                         dy += y1;
                     entity.fallDistance = 0.0F;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityMeltedMetalFX.java b/src/main/rtm/jp/ngt/rtm/entity/EntityMeltedMetalFX.java
index 7cb9c55..b558f4f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/EntityMeltedMetalFX.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/EntityMeltedMetalFX.java
@@ -17,7 +17,7 @@ public class EntityMeltedMetalFX extends Particle {
     }
 
     public int getBrightnessForRender(float p_70070_1_) {
-        int i = (int)(255.0F * (1.0F - this.particleAge / this.particleMaxAge));
+        int i = (int)(255.0F * (1.0F - (float)this.particleAge / (float)this.particleMaxAge));
         return (i << 16) + (i << 8) + i;
     }
 
@@ -29,7 +29,7 @@ public class EntityMeltedMetalFX extends Particle {
             setExpired();
         this.motionY -= 0.05D;
         if (this.onGround) {
-            this.motionY *= -(10.0D + Math.random() * 4.0D * (1.0F - this.particleAge / this.particleMaxAge));
+            this.motionY *= -(10.0D + Math.random() * 4.0D * (1.0F - (float)this.particleAge / (float)this.particleMaxAge));
             this.motionX += Math.random() * 0.08D - 0.04D;
             this.motionZ += Math.random() * 0.08D - 0.04D;
         }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/RenderBullet.java b/src/main/rtm/jp/ngt/rtm/entity/RenderBullet.java
index 3bab73a..bf81b59 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/RenderBullet.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/RenderBullet.java
@@ -122,7 +122,7 @@ public class RenderBullet extends Render<EntityBullet> {
         if (shouldRenderMuzzleFlash(stack, useCount)) {
             ItemGun.GunType gunType = ((ItemGun)stack.getItem()).gunType;
             if (gunType == ItemGun.GunType.razer_gun) {
-                float size = useCount / gunType.useDuration;
+                float size = (float)useCount / gunType.useDuration;
                 renderRazer(entity, x, y, z, size);
             } else {
                 renderMuzzleFlash(entity, x, y, z, firstPersonView);
@@ -189,7 +189,7 @@ public class RenderBullet extends Render<EntityBullet> {
         NGTTessellator tessellator = NGTTessellator.instance;
         int i0 = 25;
         for (int i = 0; i < i0; i++) {
-            float f0 = (i + 1) / i0;
+            float f0 = (float)(i + 1) / i0;
             float f1 = 1.0F - (1.0F - f0) * 0.1F;
             GL11.glScalef(f1 * size, f1 * size, 1.0F);
             tessellator.startDrawing(4);
@@ -226,15 +226,15 @@ public class RenderBullet extends Render<EntityBullet> {
 
     @Deprecated
     private static void setupPosAndRotation2(EntityLivingBase entity) {
-        double d4, d5, d6, d7;
         RenderManager renMg = NGTUtilClient.getMinecraft().getRenderManager();
         float partialTicks = 0.0F;
         GlStateManager.rotate(-entity.rotationYaw, 0.0F, 1.0F, 0.0F);
-        GlStateManager.rotate(((renMg.options.thirdPersonView == 2) ? -1 : true) * -entity.rotationPitch, 1.0F, 0.0F, 0.0F);
+        GlStateManager.rotate(((renMg.options.thirdPersonView == 2) ? -1 : 1) * -entity.rotationPitch, 1.0F, 0.0F, 0.0F);
         int k = (entity.getPrimaryHand() == EnumHandSide.RIGHT) ? 1 : -1;
         float f7 = entity.getSwingProgress(partialTicks);
         float f8 = MathHelper.sin((float)NGTMath.firstSqrt(f7) * 3.1415927F);
         float f9 = (entity.prevRenderYawOffset + (entity.renderYawOffset - entity.prevRenderYawOffset) * partialTicks) * 0.017453292F;
+        double d4, d5, d6, d7;
         double d0 = MathHelper.sin(f9);
         double d1 = MathHelper.cos(f9);
         double d2 = k * 0.35D;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/ai/EntityAIDrivingWithDiagram.java b/src/main/rtm/jp/ngt/rtm/entity/ai/EntityAIDrivingWithDiagram.java
index 2607773..4af7ca3 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/ai/EntityAIDrivingWithDiagram.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/ai/EntityAIDrivingWithDiagram.java
@@ -103,7 +103,7 @@ public class EntityAIDrivingWithDiagram extends EntityAIDrivingWithSignal {
             ac1 = (speed - prevSpeed) / margin;
             notch = (EnumNotch.getSuitableNotchFromAcceleration(ac1)).id;
         } else if (td.command.equals("pass")) {
-            ac1 = 2.0F * (distance - prevSpeed * margin) / margin * margin;
+            ac1 = 2.0F * (distance - prevSpeed * margin) / (margin * margin);
             if (ac1 > 0.0F) {
                 float sp0 = prevSpeed + ac1 * margin;
                 notch = (EnumNotch.getSuitableNotchFromSpeed(sp0)).id;
@@ -119,7 +119,7 @@ public class EntityAIDrivingWithDiagram extends EntityAIDrivingWithSignal {
             } else {
                 distance -= 360.0F;
                 margin -= 600.0F;
-                ac1 = 2.0F * (distance - prevSpeed * margin) / margin * margin;
+                ac1 = 2.0F * (distance - prevSpeed * margin) / (margin * margin);
                 if (ac1 >= 0.0F) {
                     if (ac1 < EnumNotch.accelerate_1.acceleration && prevSpeed >= EnumNotch.accelerate_4.max_speed) {
                         notch = EnumNotch.inertia.id;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/fluid/EntityFluid.java b/src/main/rtm/jp/ngt/rtm/entity/fluid/EntityFluid.java
index 94bbfc7..7d74dcd 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/fluid/EntityFluid.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/fluid/EntityFluid.java
@@ -374,7 +374,7 @@ public class EntityFluid extends Entity {
 
     public float getNormalizedLife() {
         int max = (getFluidType()).life;
-        return (max > 0) ? ((max - this.counter) / max) : 1.0F;
+        return (max > 0) ? ((float)(max - this.counter) / max) : 1.0F;
     }
 
     public FluidType getFluidType() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/fluid/FluidVertexHolder.java b/src/main/rtm/jp/ngt/rtm/entity/fluid/FluidVertexHolder.java
index 6d1b540..532e066 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/fluid/FluidVertexHolder.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/fluid/FluidVertexHolder.java
@@ -16,7 +16,7 @@ public final class FluidVertexHolder {
         for (int i = 0; i < 4; i++) {
             for (int j = 0; j < splitW; j++) {
                 int i2 = (i + 1) * 2;
-                int j3 = j * 16 / splitW;
+                int j3 = j * (16 / splitW);
                 addVertex(fluid, (i + 1) * 8 + j, ModelSolid.SPHERE[i2 * 16 + j3]);
                 i2 = i * 2;
                 addVertex(fluid, i * 8 + j, ModelSolid.SPHERE[i2 * 16 + j3]);
@@ -37,9 +37,9 @@ public final class FluidVertexHolder {
         if ((entity.getFluidType()).type != FluidType.Type.SOLID) {
             for (int i = 0; i < entity.nearFluids.size(); i++) {
                 EntityFluid target = entity.nearFluids.get(i);
-                double dx = target.posX - entity.posX + orgX;
-                double dy = target.posY - entity.posY + orgY;
-                double dz = target.posZ - entity.posZ + orgZ;
+                double dx = target.posX - (entity.posX + orgX);
+                double dy = target.posY - (entity.posY + orgY);
+                double dz = target.posZ - (entity.posZ + orgZ);
                 double distanceSq = dx * dx + dy * dy + dz * dz;
                 if (distanceSq < thresholdSq) {
                     double d0 = metaballCoef / distanceSq;
@@ -50,9 +50,9 @@ public final class FluidVertexHolder {
             }
             double len = NGTMath.firstSqrt((x * x + y * y + z * z));
             if (len > 0.25D) {
-                x = (float)(x * 0.25D / len);
-                y = (float)(y * 0.25D / len);
-                z = (float)(z * 0.25D / len);
+                x = (float)(x * (0.25D / len));
+                y = (float)(y * (0.25D / len));
+                z = (float)(z * (0.25D / len));
                 len = 0.25D;
             }
         }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/RenderNPC.java b/src/main/rtm/jp/ngt/rtm/entity/npc/RenderNPC.java
index fac20ad..e50b8ed 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/RenderNPC.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/npc/RenderNPC.java
@@ -47,7 +47,7 @@ public class RenderNPC extends RenderBiped<EntityNPC> {
             boolean usingGun = (hasGun && entity.isUsingItem());
             if (usingGun)
                 ((ModelBiped)this.mainModel).rightArmPose = ModelBiped.ArmPose.BOW_AND_ARROW;
-            super.doRender((EntityLiving)entity, x, y, z, par8, partialTick);
+            super.doRender(entity, x, y, z, par8, partialTick);
         } else {
             renderCustomModel(entity, x, y, z, par8, partialTick);
         }
@@ -101,7 +101,7 @@ public class RenderNPC extends RenderBiped<EntityNPC> {
             GlStateManager.enableLighting();
             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
             this.parentRenderer.getMainModel().render((Entity)entity, par2, par3, par5, par6, par7, scale);
-            this.parentRenderer.setLightmap((EntityLiving)entity);
+            this.parentRenderer.setLightmap(entity);
             GlStateManager.depthMask(true);
             GlStateManager.disableBlend();
             GlStateManager.enableAlpha();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/macro/MacroRecorder.java b/src/main/rtm/jp/ngt/rtm/entity/npc/macro/MacroRecorder.java
index 06ec6c6..3ca0bf2 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/npc/macro/MacroRecorder.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/npc/macro/MacroRecorder.java
@@ -29,6 +29,9 @@ public class MacroRecorder {
 
     private long startTime;
 
+    private MacroRecorder() {
+    }
+
     public boolean start(World world) {
         if (this.recording)
             return false;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/EntityBogie.java b/src/main/rtm/jp/ngt/rtm/entity/train/EntityBogie.java
index b164c1d..cf34e6b 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/EntityBogie.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/train/EntityBogie.java
@@ -151,9 +151,9 @@ public final class EntityBogie extends Entity implements Lockable {
         if (updateCollision())
             return BogieController.MotionState.STOP;
         this.movingYaw = NGTMath.wrapAngle(this.rotationYaw + (isFront() ? 0.0F : 180.0F));
-        double px = this.posX + NGTMath.sin(this.movingYaw) * speed;
+        double px = this.posX + NGTMath.sin(this.movingYaw) * (double)speed;
         double py = this.posY;
-        double pz = this.posZ + NGTMath.cos(this.movingYaw) * speed;
+        double pz = this.posZ + NGTMath.cos(this.movingYaw) * (double)speed;
         if (!resetRailObj(px, py, pz))
             return BogieController.MotionState.FLY;
         RailMap rm = this.currentRailMap;
@@ -183,8 +183,8 @@ public final class EntityBogie extends Entity implements Lockable {
         double[] posZX = rm.getRailPos(this.split, pIndex);
         py = rm.getRailHeight(this.split, pIndex) + getYOffset();
         float railYaw = NGTMath.wrapAngle(rm.getRailRotation(this.split, pIndex));
-        float movYaw = fixBogieYaw(this.movingYaw, railYaw);
-        float yaw = fixBogieYaw(this.rotationYaw, movYaw);
+        float movYaw = this.fixBogieYaw(this.movingYaw, railYaw);
+        float yaw = this.fixBogieYaw(this.rotationYaw, movYaw);
         float pitch = fixBogiePitch(rm.getRailPitch(this.split, pIndex), railYaw, yaw);
         float cant = rm.getCant(this.split, pIndex);
         if (Math.abs(NGTMath.wrapAngle(railYaw - yaw)) > 90.0F)
@@ -217,7 +217,7 @@ public final class EntityBogie extends Entity implements Lockable {
         TileEntityLargeRailCore coreObj = getRail(px, py, pz);
         if (coreObj == null)
             return false;
-        if (this.currentRailObj != coreObj) {
+        if (!(this.currentRailObj == coreObj)) {
             this.currentRailObj = coreObj;
             if (coreObj instanceof TileEntityLargeRailSwitchCore) {
                 TileEntityLargeRailSwitchCore switchObj = (TileEntityLargeRailSwitchCore)coreObj;
@@ -290,11 +290,13 @@ public final class EntityBogie extends Entity implements Lockable {
                 this.rotationRoll = this.rotationBuf[3];
                 break;
             case YAW:
-                movYaw = fixBogieYaw(this.movingYaw, train.rotationYaw);
-                yaw = fixBogieYaw(this.rotationYaw, movYaw);
+                movYaw = this.fixBogieYaw(this.movingYaw, train.rotationYaw);
+                yaw = this.fixBogieYaw(this.rotationYaw, movYaw);
                 this.rotationYaw = yaw % 360.0F;
                 this.movingYaw = movYaw;
                 break;
+            case NONE:
+                break;
         }
     }
 
@@ -345,9 +347,9 @@ public final class EntityBogie extends Entity implements Lockable {
         }
         if (this.carPosRotationInc > 0) {
             float d0 = 1.0F / this.carPosRotationInc;
-            this.rotationYaw += NGTMath.wrapAngle((float)(this.carYaw - this.rotationYaw)) * d0;
-            this.rotationPitch = (float)(this.rotationPitch + (this.carPitch - this.rotationPitch) * d0);
-            this.rotationRoll = (float)(this.rotationRoll + (this.carRoll - this.rotationRoll) * d0);
+            this.rotationYaw += NGTMath.wrapAngle((float)((double)this.carYaw - this.rotationYaw)) * d0;
+            this.rotationPitch += (float)(((double)this.carPitch - this.rotationPitch) * d0);
+            this.rotationRoll += (float)(((double)this.carRoll - this.rotationRoll) * d0);
             this.carPosRotationInc--;
         }
         setRotation(this.rotationYaw, this.rotationPitch);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/EntityFreightCar.java b/src/main/rtm/jp/ngt/rtm/entity/train/EntityFreightCar.java
index 6db97cb..7e59375 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/EntityFreightCar.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/train/EntityFreightCar.java
@@ -103,7 +103,7 @@ public final class EntityFreightCar extends EntityTrainBase implements IInventor
         if (super.processInitialInteract(player, hand))
             return true;
         if (!this.world.isRemote)
-            player.openGui(RTMCore.instance, RTMCore.guiIdFreightCar, player.world, getEntityId(), 0, 0);
+            player.openGui(RTMCore.instance, RTMCore.instance.guiIdFreightCar, player.world, getEntityId(), 0, 0);
         return true;
     }
 
@@ -115,8 +115,8 @@ public final class EntityFreightCar extends EntityTrainBase implements IInventor
     private EntityCargo createCargoEntity(byte slot) {
         EntityCargo cargo = null;
         int damage = this.cargoSlots[slot].getItemDamage();
-        float[] pos = (float[])CARGO_POS[slot].clone();
-        pos[1] = pos[1] + getVehicleYOffset();
+        float[] pos = CARGO_POS[slot].clone();
+        pos[1] += getVehicleYOffset();
         switch (damage) {
             case 0:
                 cargo = new EntityContainer(this.world, this, this.cargoSlots[slot], pos, slot);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/EntityTrainBase.java b/src/main/rtm/jp/ngt/rtm/entity/train/EntityTrainBase.java
index 0344c6d..8b882eb 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/EntityTrainBase.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/train/EntityTrainBase.java
@@ -376,7 +376,7 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
         if (conTrain == null)
             return 0.0F;
         float dif = NGTMath.getAngleD(this.posZ, this.posX, conTrain.posZ, conTrain.posX);
-        float angle = NGTMath.wrapAngle(dif - this.rotationYaw + ((dir == 0) ? 0.0F : 180.0F));
+        float angle = NGTMath.wrapAngle(dif - (this.rotationYaw + ((dir == 0) ? 0.0F : 180.0F)));
         return angle + ((Math.abs(angle) > 90.0F) ? 180.0F : 0.0F);
     }
 
@@ -478,7 +478,7 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
     }
 
     public double getMountedYOffset() {
-        return (this.height + 1.1875F - 0.93F);
+        return (this.height + this.TRAIN_HEIGHT - 0.93F);
     }
 
     public boolean attackEntityFrom(DamageSource par1, float par2) {
@@ -556,10 +556,10 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
     }
 
     protected void removePassengerFromVehicle(Entity passenger) {
-        EntityTrainBase entityTrainBase;
         Entity riding = getBogie(getTrainDirection());
         if (riding == null || getDistanceSq(riding) > 225.0D)
-        fixRiderPosOnDismount(passenger, (Entity)entityTrainBase);
+            riding = this;
+        fixRiderPosOnDismount(passenger, riding);
     }
 
     public boolean processInitialInteract(EntityPlayer player, EnumHand hand) {
@@ -843,7 +843,8 @@ public abstract class EntityTrainBase extends EntityVehicleBase<ModelSetTrain> i
     }
 
     public void forceChunkLoading(int x, int z) {
-        if (!this.world.isRemote) {
+        if (this.world.isRemote) {
+        } else {
             if (this.ticket == null && !requestTicket())
                 return;
             if (x != this.prevChunkCoordX || z != this.prevChunkCoordZ)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityArtillery.java b/src/main/rtm/jp/ngt/rtm/entity/train/parts/EntityArtillery.java
index 1c49b57..6ec1eae 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityArtillery.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/train/parts/EntityArtillery.java
@@ -267,7 +267,7 @@ public class EntityArtillery extends EntityCargoWithModel<ModelSetFirearm> {
     }
 
     public float getRecoil() {
-        return this.recoilCount / (((ModelSetFirearm)getResourceState().getResourceSet()).getConfig()).rateOfFire;
+        return (float)this.recoilCount / (((ModelSetFirearm)getResourceState().getResourceSet()).getConfig()).rateOfFire;
     }
 
     public float getBarrelYaw() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityContainer.java b/src/main/rtm/jp/ngt/rtm/entity/train/parts/EntityContainer.java
index 0e883fa..3caf4fc 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityContainer.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/train/parts/EntityContainer.java
@@ -100,6 +100,7 @@ public class EntityContainer extends EntityCargoWithModel<ModelSetContainer> imp
                 double d0 = 1.5D;
                 double d1 = 256.0D;
                 List<Entity> list = getEntityWorld().getEntitiesWithinAABBExcludingEntity((Entity)player, new AxisAlignedBB(this.posX - d0, this.posY, this.posZ - d0, this.posX + d0, this.posY + d1, this.posZ + d0));
+                EntityContainer topEntity = this;
                 for (Entity entity : list) {
                     if (entity instanceof EntityContainer && entity.posY > topEntity.posY)
                         topEntity = (EntityContainer)entity;
@@ -110,7 +111,7 @@ public class EntityContainer extends EntityCargoWithModel<ModelSetContainer> imp
                 cargo.readCargoFromItem();
                 if (!this.world.isRemote) {
                     this.world.spawnEntity((Entity)cargo);
-                    ResourceState<T> st2 = ((ItemCargo)itemstack.getItem()).getModelState(itemstack);
+                    ResourceState st2 = ((ItemCargo)itemstack.getItem()).getModelState(itemstack);
                     cargo.getResourceState().readFromNBT(st2.writeToNBT());
                     cargo.updateResourceState();
                 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityTie.java b/src/main/rtm/jp/ngt/rtm/entity/train/parts/EntityTie.java
index 965bc74..d8678c6 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/EntityTie.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/train/parts/EntityTie.java
@@ -79,19 +79,23 @@ public class EntityTie extends EntityCargo {
             if (this.world.isRemote)
                 return true;
             double d0 = 1.5D;
-            List<Entity> list = this.world.getEntitiesWithinAABB(Entity.class, new AxisAlignedBB(this.posX - d0, this.posY - 0.5D, this.posZ - d0, this.posX + d0, this.posY + 4.5D, this.posZ + d0), entity ->
-
-                    (entity instanceof EntityVehiclePart || entity instanceof jp.ngt.rtm.entity.train.EntityBogie || entity instanceof jp.ngt.rtm.entity.EntityInstalledObject) ? false : ((entity instanceof EntityVehicleBase) ? ((getVehicle() != entity)) : true));
+            List<Entity> list = this.world.getEntitiesWithinAABB(Entity.class, new AxisAlignedBB(this.posX - d0, this.posY - 0.5D, this.posZ - d0, this.posX + d0, this.posY + 4.5D, this.posZ + d0), entity -> {
+                if (entity instanceof EntityVehiclePart || entity instanceof jp.ngt.rtm.entity.train.EntityBogie || entity instanceof jp.ngt.rtm.entity.EntityInstalledObject)
+                    return false;
+                if (entity instanceof EntityVehicleBase)
+                    return getVehicle() != entity;
+                return true;
+            });
             if (!list.isEmpty()) {
                 Iterator<Entity> iterator = list.iterator();
                 if (iterator.hasNext()) {
                     Entity entity1 = iterator.next();
-                    entity1.startRiding((Entity)this);
-                    NGTLog.sendChatMessage((ICommandSender)player, entity1.toString() + " was fixed.", new Object[0]);
+                    entity1.startRiding((Entity) this);
+                    NGTLog.sendChatMessage((ICommandSender) player, entity1.toString() + " was fixed.", new Object[0]);
                     return true;
                 }
             }
-            NGTLog.sendChatMessage((ICommandSender)player, "Fixable entity not found.", new Object[0]);
+            NGTLog.sendChatMessage((ICommandSender) player, "Fixable entity not found.", new Object[0]);
             return false;
         }
         Entity entity = getFirstPassenger();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/ModelCrossSeat.java b/src/main/rtm/jp/ngt/rtm/entity/train/parts/ModelCrossSeat.java
index 1f03b6a..6e6bf4e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/ModelCrossSeat.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/train/parts/ModelCrossSeat.java
@@ -52,6 +52,6 @@ public class ModelCrossSeat extends ModelBase {
     }
 
     public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5) {
-        setRotationAngles(f, f1, f2, f3, f4, f5, null);
+        super.setRotationAngles(f, f1, f2, f3, f4, f5, null);
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/RenderSeat.java b/src/main/rtm/jp/ngt/rtm/entity/train/parts/RenderSeat.java
index 27df6bb..d657102 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/RenderSeat.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/train/parts/RenderSeat.java
@@ -52,6 +52,6 @@ public class RenderSeat extends Render<EntityFloor> {
     }
 
     protected ResourceLocation getEntityTexture(EntityFloor entity) {
-        return texture;
+        return this.texture;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/RenderTie.java b/src/main/rtm/jp/ngt/rtm/entity/train/parts/RenderTie.java
index bccb3b4..cbbf0bf 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/parts/RenderTie.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/train/parts/RenderTie.java
@@ -67,7 +67,7 @@ public class RenderTie extends Render<EntityTie> {
         }
 
         public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5) {
-            setRotationAngles(f, f1, f2, f3, f4, f5, null);
+            super.setRotationAngles(f, f1, f2, f3, f4, f5, null);
         }
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/BogieController.java b/src/main/rtm/jp/ngt/rtm/entity/train/util/BogieController.java
index 0896770..1142bbf 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/BogieController.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/train/util/BogieController.java
@@ -84,7 +84,7 @@ public final class BogieController {
         MotionState updateFlagFront = MotionState.NULL;
         MotionState updateFlagBack = MotionState.NULL;
         if (prevTrain == null) {
-            updateFlagFront = frontBogie.updateBogiePos(speed, 0.0F, (EntityBogie)null);
+            updateFlagFront = frontBogie.updateBogiePos(speed, 0.0F, null);
         } else {
             double disTrain = train.getDefaultDistanceToConnectedTrain(prevTrain);
             double lenBF = Math.abs(((ModelSetTrain)prevTrain.getResourceState().getResourceSet()).getConfig().getBogiePos()[1 - prevTrain.getTrainDirection()][2]);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/Formation.java b/src/main/rtm/jp/ngt/rtm/entity/train/util/Formation.java
index d82ae47..666d023 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/train/util/Formation.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/train/util/Formation.java
@@ -111,15 +111,15 @@ public final class Formation {
     }
 
     private void reverse() {
-        NGTUtil.reverse((Object[])this.entries);
+        NGTUtil.reverse(this.entries);
         for (FormationEntry entry : this.entries)
-            entry.dir = (byte)(entry.dir ^ 0x1);
+            entry.dir ^= 0x1;
     }
 
     private void addAll(FormationEntry[] par1) {
         List<FormationEntry> list = new ArrayList<>();
-        NGTUtil.addArray(list, (Object[])this.entries);
-        NGTUtil.addArray(list, (Object[])par1);
+        NGTUtil.addArray(list, this.entries);
+        NGTUtil.addArray(list, par1);
         this.entries = list.<FormationEntry>toArray(new FormationEntry[list.size()]);
     }
 
@@ -277,7 +277,7 @@ public final class Formation {
         EntityTrainBase prevTrain = null;
         for (int i = 0; i < this.entries.length; i++) {
             int index = (this.direction == 0) ? i : (this.entries.length - i - 1);
-            if (this.entries[index] != null) {
+            if (!(this.entries[index] == null)) {
                 EntityTrainBase train = (this.entries[index]).train;
                 BogieController.MotionState state = BogieController.MotionState.STOP;
                 if (train.existBogies())
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/util/CollisionHelper.java b/src/main/rtm/jp/ngt/rtm/entity/util/CollisionHelper.java
index d679452..df6e6b2 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/util/CollisionHelper.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/util/CollisionHelper.java
@@ -12,6 +12,9 @@ import net.minecraftforge.event.world.GetCollisionBoxesEvent;
 public final class CollisionHelper {
     public static final CollisionHelper INSTANCE = new CollisionHelper();
 
+    private CollisionHelper() {
+    }
+
     public void syncCollisionObj(final ResourceType type, final ModelSetBase modelSet) {
         if (modelSet.getCollisionObj() != null) {
             Thread thread = new Thread() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/util/CollisionObj.java b/src/main/rtm/jp/ngt/rtm/entity/util/CollisionObj.java
index b593f4e..02e8502 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/util/CollisionObj.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/util/CollisionObj.java
@@ -50,7 +50,7 @@ public final class CollisionObj {
                 RTMCore.NETWORK_WRAPPER.sendToServer(new PacketCollisionObj(type, modelSet
                             .getConfig().getName(), parts.name, face, status));
                 try {
-                    Thread.sleep(100L);
+                    thread.sleep(100L);
                 } catch (InterruptedException e) {
                     e.printStackTrace();
                 }
@@ -78,7 +78,7 @@ public final class CollisionObj {
         boolean addAll = false;
         List<String> nameList = new ArrayList<>();
         if (names != null) {
-            NGTUtil.addArray(nameList, (Object[])names);
+            NGTUtil.addArray(nameList, names);
             addAll = names[0].equals("-all");
         }
         for (GroupObject go : model.getGroupObjects()) {
@@ -123,12 +123,12 @@ public final class CollisionObj {
         double py = target.posY;
         double pz = target.posZ;
         double offsetY = (myself instanceof EntityVehicleBase) ? ((EntityVehicleBase)myself).getVehicleYOffset() : 0.0D;
-        Vec3 vt = PooledVec3.create(px - myself.posX, py + 0.5D - myself.posY + offsetY, pz - myself.posZ);
+        Vec3 vt = PooledVec3.create(px - myself.posX, py + 0.5D - (myself.posY + offsetY), pz - myself.posZ);
         HitResult[] hitResults = getCollisionPoints(vt, myself, exclusionParts);
         this.hit = hitResults;
         boolean hitted = false;
         for (HitResult result : hitResults) {
-            if (result != null) {
+            if (!(result == null)) {
                 AxisAlignedBB hitAABB = result.face.toBox(myself);
                 if (hitAABB.intersects(playerAABB)) {
                     boxList.add(hitAABB);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/EntityPlane.java b/src/main/rtm/jp/ngt/rtm/entity/vehicle/EntityPlane.java
index 7829b29..055c5ea 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/EntityPlane.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/vehicle/EntityPlane.java
@@ -42,7 +42,7 @@ public class EntityPlane extends EntityVehicle {
         float maxSpeed = cfg.getMaxSpeed(this.onGround);
         float f0 = moveStrafe * cfg.getYawCoefficient(this.onGround);
         if (!cfg.changeYawOnStopping)
-            f0 = (float)(f0 * this.speed / maxSpeed);
+            f0 = (float)(f0 * (this.speed / maxSpeed));
         float maxYaw = cfg.getMaxYaw(this.onGround);
         if (f0 > maxYaw) {
             f0 = maxYaw;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/EntityVehicle.java b/src/main/rtm/jp/ngt/rtm/entity/vehicle/EntityVehicle.java
index abc9b52..a5abec8 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/EntityVehicle.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/vehicle/EntityVehicle.java
@@ -122,7 +122,7 @@ public abstract class EntityVehicle extends EntityVehicleBase<ModelSetVehicle> {
 
     protected void updateMovement() {
         if (this.accelerationDecCount > 0) {
-            float f0 = (this.accelerationDecCount - 1) / this.accelerationDecCount;
+            float f0 = (float)(this.accelerationDecCount - 1) / this.accelerationDecCount;
             this.accelerationForward *= f0;
             this.accelerationStrafe *= f0;
         }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/EntityVehicleBase.java b/src/main/rtm/jp/ngt/rtm/entity/vehicle/EntityVehicleBase.java
index 04f131a..43aa61f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/EntityVehicleBase.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/vehicle/EntityVehicleBase.java
@@ -182,7 +182,7 @@ public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends E
     public final void onUpdate() {
         if (!this.world.isRemote || this.ignoreUpdate)
             onVehicleUpdate();
-        this.ignoreUpdate ^= 0x1;
+        this.ignoreUpdate ^= true;
     }
 
     protected void onVehicleUpdate() {
@@ -239,8 +239,8 @@ public abstract class EntityVehicleBase<T extends ModelSetVehicleBase> extends E
             this.posX += (this.vehicleX - this.posX) * d0;
             this.posY += (this.vehicleY - this.posY) * d0;
             this.posZ += (this.vehicleZ - this.posZ) * d0;
-            this.rotationYaw += NGTMath.wrapAngle((float)(this.vehicleYaw - this.rotationYaw)) * d0;
-            this.rotationPitch = (float)(this.rotationPitch + (this.vehiclePitch - this.rotationPitch) * d0);
+            this.rotationYaw += NGTMath.wrapAngle((float)((double)this.vehicleYaw - this.rotationYaw)) * d0;
+            this.rotationPitch += ((double) this.vehiclePitch - this.rotationPitch) * d0;
             float roll = getRoll() + (this.vehicleRoll - getRoll()) * d0;
             this.rotationRoll = roll;
             this.vehiclePosRotationInc--;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/RenderVehicleBase.java b/src/main/rtm/jp/ngt/rtm/entity/vehicle/RenderVehicleBase.java
index 5b9a8ef..47af161 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/RenderVehicleBase.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/vehicle/RenderVehicleBase.java
@@ -47,7 +47,7 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
         super(renderManager);
     }
 
-    protected void renderVehicleBase(EntityVehicleBase<ModelSetVehicleBase> vehicle, double par2, double par4, double par6, float par8, float par9) {
+    protected void renderVehicleBase(EntityVehicleBase vehicle, double par2, double par4, double par6, float par8, float par9) {
         GL11.glPushMatrix();
         GL11.glEnable(32826);
         double x = par2;
@@ -66,7 +66,7 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
         if (vngto != null) {
             renderVehicleNGTO((EntityVehicle)vehicle, vngto, par9);
         } else {
-            ModelSetVehicleBase modelSet = vehicle.getResourceState().getResourceSet();
+            ModelSetVehicleBase modelSet = (ModelSetVehicleBase) vehicle.getResourceState().getResourceSet();
             if (modelSet != null) {
                 float[] fa = ((VehicleBaseConfig)modelSet.getConfig()).offset;
                 GL11.glTranslated(fa[0], fa[1], fa[2]);
@@ -324,13 +324,13 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
         this.lightVecF.set((float)vec.getX(), (float)vec.getY(), (float)vec.getZ());
         if (renderModeHead >= 0)
             for (VehicleBaseConfig.Light light : ((VehicleBaseConfig)modelset.getConfig()).headLights) {
-                if (light.type != 1 || value <= 7)
-                    renderLightEffect(vehicle, this.lightVecF, light, renderModeHead);
+                if (light.type == 1 && value > 7) continue;
+                renderLightEffect(vehicle, this.lightVecF, light, renderModeHead);
             }
         if (renderModeTail >= 0)
             for (VehicleBaseConfig.Light light : ((VehicleBaseConfig)modelset.getConfig()).tailLights) {
-                if (light.type != 1 || value <= 7)
-                    renderLightEffect(vehicle, this.lightVecF, light, renderModeTail);
+                if (light.type == 1 && value > 7) continue;
+                renderLightEffect(vehicle, this.lightVecF, light, renderModeTail);
             }
         GL11.glDepthMask(true);
         GL11.glDisable(3042);
@@ -408,9 +408,9 @@ public final class RenderVehicleBase extends Render<EntityVehicleBase> {
         return false;
     }
 
-    private void debugCollision(EntityVehicleBase<ModelSetVehicleBase> vehicle) {
+    private void debugCollision(EntityVehicleBase vehicle) {
         if (MinecraftForgeClient.getRenderPass() == 1) {
-            ModelSetVehicleBase modelSet = vehicle.getResourceState().getResourceSet();
+            ModelSetVehicleBase modelSet = (ModelSetVehicleBase) vehicle.getResourceState().getResourceSet();
             if (modelSet != null)
                 if (modelSet.getCollisionObj() != null)
                     modelSet.getCollisionObj().checkAndRenderCollision(
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/VehicleController.java b/src/main/rtm/jp/ngt/rtm/entity/vehicle/VehicleController.java
index c68ab42..cb5e2ac 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/VehicleController.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/vehicle/VehicleController.java
@@ -34,7 +34,7 @@ public final class VehicleController {
                 this.rotation = 0.0F;
             }
         }
-        vehicle.updateMotion((EntityLivingBase)null, moveStrafe, moveForward);
+        vehicle.updateMotion(null, moveStrafe, moveForward);
     }
 
     public void setMoveDistance(EntityVehicle vehicle, double par1) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/VehicleTrackerEntry.java b/src/main/rtm/jp/ngt/rtm/entity/vehicle/VehicleTrackerEntry.java
index 8a72d61..d5bcfff 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/entity/vehicle/VehicleTrackerEntry.java
+++ b/src/main/rtm/jp/ngt/rtm/entity/vehicle/VehicleTrackerEntry.java
@@ -161,7 +161,7 @@ public final class VehicleTrackerEntry extends EntityTrackerEntry {
             if (trackedEntities != null) {
                 VehicleTrackerEntry tte = new VehicleTrackerEntry(par1);
                 EntityTrackerEntry trackerEntry = null;
-                Iterator<EntityTrackerEntry> iterator = trackedEntities.iterator();
+                Iterator<? extends EntityTrackerEntry> iterator = trackedEntities.iterator();
                 while (iterator.hasNext()) {
                     EntityTrackerEntry entry = iterator.next();
                     if (entry != null && entry.equals(tte)) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/event/RTMKeyHandlerClient.java b/src/main/rtm/jp/ngt/rtm/event/RTMKeyHandlerClient.java
index 61ac721..10b08c4 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/event/RTMKeyHandlerClient.java
+++ b/src/main/rtm/jp/ngt/rtm/event/RTMKeyHandlerClient.java
@@ -37,6 +37,9 @@ public final class RTMKeyHandlerClient {
 
     private boolean sneaking;
 
+    private RTMKeyHandlerClient() {
+    }
+
     public static void init() {
         ClientRegistry.registerKeyBinding(KEY_HORN);
         ClientRegistry.registerKeyBinding(KEY_CHIME);
@@ -46,7 +49,7 @@ public final class RTMKeyHandlerClient {
 
     public void onTickStart() {
         Minecraft mc = NGTUtilClient.getMinecraft();
-        EntityPlayerSP entityPlayerSP = mc.player;
+        EntityPlayer entityPlayerSP = mc.player;
         if (Keyboard.isKeyDown(mc.gameSettings.keyBindJump.getKeyCode())) {
             if (entityPlayerSP.isRiding() && entityPlayerSP.getRidingEntity() instanceof jp.ngt.rtm.entity.vehicle.EntityVehicle)
                 sendKeyToServer((byte)9, "");
@@ -62,7 +65,7 @@ public final class RTMKeyHandlerClient {
     @SubscribeEvent
     public void keyDown(InputEvent.KeyInputEvent event) {
         Minecraft mc = NGTUtilClient.getMinecraft();
-        EntityPlayerSP entityPlayerSP = mc.player;
+        EntityPlayer entityPlayerSP = mc.player;
         Entity riding = entityPlayerSP.getRidingEntity();
         if (mc.gameSettings.keyBindBack.isPressed()) {
             if (entityPlayerSP.isRiding() && riding instanceof EntityTrainBase)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/event/RTMKeyHandlerServer.java b/src/main/rtm/jp/ngt/rtm/event/RTMKeyHandlerServer.java
index 4b928eb..4630afb 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/event/RTMKeyHandlerServer.java
+++ b/src/main/rtm/jp/ngt/rtm/event/RTMKeyHandlerServer.java
@@ -10,6 +10,9 @@ import net.minecraft.entity.player.EntityPlayer;
 public final class RTMKeyHandlerServer {
     public static final RTMKeyHandlerServer INSTANCE = new RTMKeyHandlerServer();
 
+    private RTMKeyHandlerServer() {
+    }
+
     public void onKeyDown(EntityPlayer player, byte keyCode, String sound) {
         switch (keyCode) {
             case 9:
@@ -25,7 +28,7 @@ public final class RTMKeyHandlerServer {
                 playSound(player, sound, 1.0F);
                 break;
             case 4:
-                player.openGui(RTMCore.instance, RTMCore.guiIdTrainControlPanel, player.world, player.getRidingEntity().getEntityId(), 0, 0);
+                player.openGui(RTMCore.instance, RTMCore.instance.guiIdTrainControlPanel, player.world, player.getRidingEntity().getEntityId(), 0, 0);
                 break;
             case 5:
                 if (player.isRiding() && player.getRidingEntity() instanceof EntityArtillery)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/event/RTMTickHandlerClient.java b/src/main/rtm/jp/ngt/rtm/event/RTMTickHandlerClient.java
index 4289746..11e7abb 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/event/RTMTickHandlerClient.java
+++ b/src/main/rtm/jp/ngt/rtm/event/RTMTickHandlerClient.java
@@ -17,7 +17,7 @@ public final class RTMTickHandlerClient {
     public void onRenderTick(TickEvent.RenderTickEvent event) {
         if (event.phase == TickEvent.Phase.END)
             if ((NGTUtilClient.getMinecraft()).inGameHasFocus && Display.isActive()) {
-                EntityPlayerSP entityPlayerSP = (NGTUtilClient.getMinecraft()).player;
+                EntityPlayer entityPlayerSP = (NGTUtilClient.getMinecraft()).player;
                 if (entityPlayerSP.isRiding() && entityPlayerSP.getRidingEntity() instanceof EntityArtillery)
                     ((EntityArtillery)entityPlayerSP.getRidingEntity()).updateYawAndPitch((EntityPlayer)entityPlayerSP);
             }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerItemContainer.java b/src/main/rtm/jp/ngt/rtm/gui/ContainerItemContainer.java
index c6750f9..d1b730f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerItemContainer.java
+++ b/src/main/rtm/jp/ngt/rtm/gui/ContainerItemContainer.java
@@ -78,6 +78,7 @@ public class ContainerItemContainer extends Container {
         ItemStack itemstack = ItemStack.EMPTY;
         InventoryPlayer invPlayer = player.inventory;
         if (clickTypeIn == ClickType.QUICK_CRAFT) {
+            ItemStack itemstack3;
             int l = this.dragEvent;
             this.dragEvent = getDragEvent(dragType);
             if ((l != 1 || this.dragEvent != 2) && l != this.dragEvent) {
@@ -98,7 +99,7 @@ public class ContainerItemContainer extends Container {
                     this.slots.add(slot);
             } else if (this.dragEvent == 2) {
                 if (!this.slots.isEmpty()) {
-                    ItemStack itemstack3 = invPlayer.getItemStack().copy();
+                    itemstack3 = invPlayer.getItemStack().copy();
                     int i1 = invPlayer.getItemStack().getCount();
                     for (Slot slot1 : this.slots) {
                         if (slot1 != null && canAddItemToSlot(slot1, invPlayer.getItemStack(), true) && slot1.isItemValid(invPlayer.getItemStack()) && invPlayer.getItemStack().getCount() >= this.slots.size() && canDragIntoSlot(slot1)) {
@@ -210,15 +211,14 @@ public class ContainerItemContainer extends Container {
         } else if (clickTypeIn == ClickType.SWAP && dragType >= 0 && dragType < 9) {
             Slot slot2 = this.inventorySlots.get(slotId);
             if (slot2.canTakeStack(player)) {
-                int i;
                 ItemStack itemstack3 = invPlayer.getStackInSlot(dragType);
                 boolean flag = (itemstack3 == ItemStack.EMPTY || (slot2.inventory == invPlayer && slot2.isItemValid(itemstack3)));
                 int l1 = -1;
                 if (!flag) {
                     l1 = invPlayer.getFirstEmptyStack();
-                    i = flag | ((l1 > -1) ? 1 : 0);
+                    flag |= (l1 > -1);
                 }
-                if (slot2.getHasStack() && i != 0) {
+                if (slot2.getHasStack() && flag) {
                     ItemStack itemstack5 = slot2.getStack();
                     invPlayer.setInventorySlotContents(dragType, itemstack5.copy());
                     if ((slot2.inventory != invPlayer || !slot2.isItemValid(itemstack3)) && itemstack3 != ItemStack.EMPTY) {
@@ -279,17 +279,16 @@ public class ContainerItemContainer extends Container {
     }
 
     public static boolean canAddItemToSlot(Slot slot, ItemStack itemStack, boolean par2) {
-        int i;
         boolean flag1 = (slot == null || !slot.getHasStack());
         if (slot != null && slot.getHasStack() && itemStack != null && itemStack.isItemEqual(slot.getStack()) && ItemStack.areItemStackTagsEqual(slot.getStack(), itemStack)) {
             int j = par2 ? 0 : itemStack.getCount();
             if (slot.slotNumber <= 53) {
-                i = flag1 | ((slot.getStack().getCount() + j <= slot.getSlotStackLimit()) ? 1 : 0);
+                flag1 |= slot.getStack().getCount() + j <= slot.getSlotStackLimit();
             } else {
-                i |= (slot.getStack().getCount() + j <= itemStack.getMaxStackSize()) ? 1 : 0;
+                flag1 |= slot.getStack().getCount() + j <= itemStack.getMaxStackSize();
             }
         }
-        return i;
+        return flag1;
     }
 
     protected boolean mergeItemStack(ItemStack itemStack, int par2, int par3, boolean par4) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerNPC.java b/src/main/rtm/jp/ngt/rtm/gui/ContainerNPC.java
index 9dc329b..e0dc9e4 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/ContainerNPC.java
+++ b/src/main/rtm/jp/ngt/rtm/gui/ContainerNPC.java
@@ -90,21 +90,24 @@ public final class ContainerNPC extends Container {
         public boolean isItemValid(ItemStack item) {
             if (item == null)
                 return false;
+            EntityEquipmentSlot slot;
             switch (this.index) {
                 case 0:
                     slot = EntityEquipmentSlot.FEET;
-                    return item.getItem().isValidArmor(item, slot, (Entity)ContainerNPC.this.npc);
+                    break;
                 case 1:
                     slot = EntityEquipmentSlot.LEGS;
-                    return item.getItem().isValidArmor(item, slot, (Entity)ContainerNPC.this.npc);
+                    break;
                 case 2:
                     slot = EntityEquipmentSlot.CHEST;
-                    return item.getItem().isValidArmor(item, slot, (Entity)ContainerNPC.this.npc);
+                    break;
                 case 3:
                     slot = EntityEquipmentSlot.HEAD;
-                    return item.getItem().isValidArmor(item, slot, (Entity)ContainerNPC.this.npc);
+                    break;
+                default:
+                    slot = EntityEquipmentSlot.HEAD;
+                    break;
             }
-            EntityEquipmentSlot slot = EntityEquipmentSlot.HEAD;
             return item.getItem().isValidArmor(item, slot, (Entity)ContainerNPC.this.npc);
         }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/DataMapEditor.java b/src/main/rtm/jp/ngt/rtm/gui/DataMapEditor.java
index 05ccbdd..15af47a 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/DataMapEditor.java
+++ b/src/main/rtm/jp/ngt/rtm/gui/DataMapEditor.java
@@ -50,10 +50,7 @@ public class DataMapEditor extends JFrame {
         String[][] rowData = new String[map.size()][3];
         int i = 0;
         for (Map.Entry<String, DataEntry> entry : map.entrySet()) {
-            (new String[3])[0] = entry.getKey();
-            (new String[3])[1] = (((DataEntry)entry.getValue()).getType()).key;
-            (new String[3])[2] = ((DataEntry)entry.getValue()).toString();
-            rowData[i++] = new String[3];
+            rowData[i++] = new String[]{(String)entry.getKey(), ((DataEntry)entry.getValue()).getType().key, ((DataEntry)entry.getValue()).toString()};
             IDataFilter filter = ((ResourceSet)state.getResourceSet()).dataFormatter.getFilter(entry.getKey());
             if (filter != null)
                 this.filterMap.put(entry.getKey(), filter);
@@ -69,7 +66,7 @@ public class DataMapEditor extends JFrame {
         buttonOK.addActionListener(event -> {
                     for (int j = 0; j < rowData.length; j++) {
                         String key = (String)table.getModel().getValueAt(j, 0);
-                        String value = String.format("(%s)%s", new Object[] { table.getModel().getValueAt(j, 1), table.getModel().getValueAt(j, 2) });
+                        String value = String.format("(%s)%s", new Object[] { (String)table.getModel().getValueAt(j, 1), (String)table.getModel().getValueAt(j, 2) });
                         state.dataMap.set(key, value, 3);
                     }
                     this.parentGui.argField.setText(state.getArg());
@@ -86,7 +83,7 @@ public class DataMapEditor extends JFrame {
 
     public class DMEditorTable extends JTable {
         public DMEditorTable(Font font, int fontSize, String[][] rowData, String[] columnNames) {
-            super(new DefaultTableModel((Object[][])rowData, (Object[])columnNames, DataMapEditor.this, rowData) {
+            super(new DefaultTableModel(rowData, columnNames) {
                         public boolean isCellEditable(int row, int column) {
                             return (column == 2);
                         }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiButtonSelectModel.java b/src/main/rtm/jp/ngt/rtm/gui/GuiButtonSelectModel.java
index 305441b..2612364 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiButtonSelectModel.java
+++ b/src/main/rtm/jp/ngt/rtm/gui/GuiButtonSelectModel.java
@@ -30,7 +30,7 @@ public class GuiButtonSelectModel extends GuiButton {
     }
 
     public GuiButtonSelectModel(int par1, int par2, int par3, ModelSetBase par4, String name) {
-        this(par1, par2, par3, par4, name, (GuiSelectModel)null);
+        this(par1, par2, par3, par4, name, null);
         this.notCheckPos = true;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiDecorationBlock.java b/src/main/rtm/jp/ngt/rtm/gui/GuiDecorationBlock.java
index fd807e4..893fd73 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiDecorationBlock.java
+++ b/src/main/rtm/jp/ngt/rtm/gui/GuiDecorationBlock.java
@@ -258,9 +258,9 @@ public class GuiDecorationBlock extends GuiScreenCustom {
     private void editElement(int par1) {
         saveFieldToModel();
         if (par1 == 0 || par1 == 1) {
-            Element newElement;
             List<Element> list = new ArrayList<>();
-            NGTUtil.addArray(list, (Object[])this.model.elements);
+            Element newElement;
+            NGTUtil.addArray(list, this.model.elements);
             if (par1 == 0) {
                 newElement = Element.getDefaultElement();
             } else {
@@ -271,7 +271,7 @@ public class GuiDecorationBlock extends GuiScreenCustom {
             this.model.elements = list.<Element>toArray(new Element[list.size()]);
         } else if (this.model.elements.length >= 2) {
             List<Element> list = new ArrayList<>();
-            NGTUtil.addArray(list, (Object[])this.model.elements);
+            NGTUtil.addArray(list, this.model.elements);
             list.remove(this.selectedElemnt);
             this.model.elements = list.<Element>toArray(new Element[list.size()]);
         }
@@ -281,9 +281,9 @@ public class GuiDecorationBlock extends GuiScreenCustom {
     private void editFace(int par1) {
         saveFieldToModel();
         if (par1 == 0 || par1 == 1) {
-            Face newFace;
             List<Face> list = new ArrayList<>();
-            NGTUtil.addArray(list, (Object[])this.selectedElemnt.faces);
+            Face newFace;
+            NGTUtil.addArray(list, this.selectedElemnt.faces);
             if (par1 == 0) {
                 newFace = Face.getDefaultFace();
             } else {
@@ -294,7 +294,7 @@ public class GuiDecorationBlock extends GuiScreenCustom {
             this.selectedElemnt.faces = list.<Face>toArray(new Face[list.size()]);
         } else if (this.selectedElemnt.faces.length >= 2) {
             List<Face> list = new ArrayList<>();
-            NGTUtil.addArray(list, (Object[])this.selectedElemnt.faces);
+            NGTUtil.addArray(list, this.selectedElemnt.faces);
             list.remove(this.selectedFace);
             this.selectedElemnt.faces = list.<Face>toArray(new Face[list.size()]);
         }
@@ -354,7 +354,7 @@ public class GuiDecorationBlock extends GuiScreenCustom {
             moveObject();
             initGui();
         } else if (button.id == 211) {
-            this.lockUV ^= 0x1;
+            this.lockUV ^= true;
             button.displayString = "lock UV : " + this.lockUV;
         }
     }
@@ -434,7 +434,7 @@ public class GuiDecorationBlock extends GuiScreenCustom {
         GL11.glMatrixMode(5889);
         GL11.glPushMatrix();
         GL11.glLoadIdentity();
-        Project.gluPerspective(80.0F, this.width / this.height, 5.0F, 1000.0F);
+        Project.gluPerspective(80.0F, (float)this.width / this.height, 5.0F, 1000.0F);
         GL11.glMatrixMode(5888);
         GL11.glLoadIdentity();
         GLHelper.enableLighting();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiIngameCustom.java b/src/main/rtm/jp/ngt/rtm/gui/GuiIngameCustom.java
index 812061d..a6f3150 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiIngameCustom.java
+++ b/src/main/rtm/jp/ngt/rtm/gui/GuiIngameCustom.java
@@ -69,8 +69,8 @@ public class GuiIngameCustom extends GuiScreen {
         }
     }
 
-    private void renderVehicleGui(EntityVehicleBase<ModelSetVehicleBase> vehicle) {
-        ModelSetVehicleBase modelSet = vehicle.getResourceState().getResourceSet();
+    private void renderVehicleGui(EntityVehicleBase vehicle) {
+        ModelSetVehicleBase modelSet = (ModelSetVehicleBase)vehicle.getResourceState().getResourceSet();
         if (modelSet != null && !((VehicleBaseConfig)modelSet.getConfig()).notDisplayCab) {
             NGTUtilClient.bindTexture((modelSet.guiTexture != null) ? modelSet.guiTexture : TEX_CAB);
             if (modelSet.guiSE != null) {
@@ -320,7 +320,7 @@ public class GuiIngameCustom extends GuiScreen {
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
         NGTUtilClient.bindTexture(TEX_NVD);
         tessellator.startDrawingQuads();
-        float f0 = h / w * 0.5F;
+        float f0 = (float)h / w * 0.5F;
         tessellator.addVertexWithUV(0.0F, h, d1, 0.0F, 0.5F + f0);
         tessellator.addVertexWithUV(w, h, d1, 1.0F, 0.5F + f0);
         tessellator.addVertexWithUV(w, 0.0F, d1, 1.0F, 0.5F - f0);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiMotorman.java b/src/main/rtm/jp/ngt/rtm/gui/GuiMotorman.java
index a2244a9..f587e27 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiMotorman.java
+++ b/src/main/rtm/jp/ngt/rtm/gui/GuiMotorman.java
@@ -35,7 +35,7 @@ public class GuiMotorman extends GuiSelect {
                         } catch (IOException e) {
                             e.printStackTrace();
                         }
-                    }file, file.getName(), icon);
+                    }, file, file.getName(), icon);
         }
         return new GuiMotorman(entity, elements);
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiMovingMachine.java b/src/main/rtm/jp/ngt/rtm/gui/GuiMovingMachine.java
index 9d99bde..002928d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiMovingMachine.java
+++ b/src/main/rtm/jp/ngt/rtm/gui/GuiMovingMachine.java
@@ -96,7 +96,7 @@ public class GuiMovingMachine extends GuiScreenCustom {
         } else if (button.id == 1) {
             this.mc.displayGuiScreen(null);
         } else if (button.id == 100) {
-            this.guideVisibility ^= 0x1;
+            this.guideVisibility ^= true;
             this.buttonV.displayString = "GuideVisibility : " + this.guideVisibility;
         } else if (button.id == 101) {
             this.type = (this.type + 1) % VEHICLE_TYPE.length;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiRTMWorkBench.java b/src/main/rtm/jp/ngt/rtm/gui/GuiRTMWorkBench.java
index db2eeeb..6c5794f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiRTMWorkBench.java
+++ b/src/main/rtm/jp/ngt/rtm/gui/GuiRTMWorkBench.java
@@ -153,7 +153,7 @@ public class GuiRTMWorkBench extends GuiContainerCustom implements IResourceSele
         this.mc.getTextureManager().bindTexture(tex_0);
         if (this.pageIndex == 0)
             if (this.workBench.getCraftingTime() > 0) {
-                int i1 = (int)(22.0F * this.workBench.getCraftingTime() / 64.0F);
+                int i1 = (int)(22.0F * (this.workBench.getCraftingTime() / this.workBench.Max_CraftingTime));
                 drawTexturedModalRect(k + 104, l + 38, 176, 0, i1, 15);
             }
         if (this.workbenchType == 1 && this.pageIndex == 0)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSelectModel.java b/src/main/rtm/jp/ngt/rtm/gui/GuiSelectModel.java
index b18d63b..df9e836 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSelectModel.java
+++ b/src/main/rtm/jp/ngt/rtm/gui/GuiSelectModel.java
@@ -69,7 +69,7 @@ public class GuiSelectModel extends GuiScreenCustom {
             String subType = state.type.subType;
             List<ResourceSet> list = ModelPackManager.INSTANCE.getModelList(state.type);
             this.modelListAll = new ArrayList<>();
-            for (ResourceSet<IConfigWithType> modelSet : list) {
+            for (ResourceSet<? extends IConfigWithType> modelSet : list) {
                 if (((IConfigWithType)modelSet.getConfig()).getSubType().equals(subType))
                     this.modelListAll.add(modelSet);
             }
@@ -93,7 +93,7 @@ public class GuiSelectModel extends GuiScreenCustom {
 
     private void resetModelList() {
         if (this.selectButtons != null)
-            this.buttonList.removeAll(Arrays.asList((Object[])this.selectButtons));
+            this.buttonList.removeAll(Arrays.asList(this.selectButtons));
         this.modelListSelect.clear();
         this.currentScroll = 0;
         String keyword = this.searchField.getText();
@@ -153,7 +153,7 @@ public class GuiSelectModel extends GuiScreenCustom {
         boolean clickIsAvailable = (par1 < this.width && par1 >= this.width - 16);
         if (this.wasClicking && clickIsAvailable) {
             int mouseY = (par2 < 8) ? 8 : ((par2 >= this.height) ? this.height : par2);
-            int i1 = NGTMath.floor(mouseY * (this.modelListSelect.size() + 1) / (this.height - 16));
+            int i1 = NGTMath.floor(mouseY * (float)(this.modelListSelect.size() + 1) / (this.height - 16));
             scroll(i1);
         }
         float z = this.zLevel;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSignboard.java b/src/main/rtm/jp/ngt/rtm/gui/GuiSignboard.java
index 6f28121..7978a19 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSignboard.java
+++ b/src/main/rtm/jp/ngt/rtm/gui/GuiSignboard.java
@@ -91,7 +91,7 @@ public class GuiSignboard extends GuiScreenCustom {
 
     private int prevDragY;
 
-    public GuiSignboard(IResourceSelector<TextureSetSignboard> par1) {
+    public GuiSignboard(IResourceSelector par1) {
         this.selector = par1;
         this.resetState = true;
     }
@@ -113,7 +113,7 @@ public class GuiSignboard extends GuiScreenCustom {
         if ((set.getConfig()).backTexture == 1)
             sbw *= 2.0F;
         float ratioTex = (set.getConfig()).height / sbw;
-        float ratioGui = h2 / ba1;
+        float ratioGui = (float)h2 / ba1;
         int sizeX = 0;
         int sizeY = 0;
         if (ratioTex > ratioGui) {
@@ -441,6 +441,7 @@ public class GuiSignboard extends GuiScreenCustom {
                 setForeground(Color.black);
                 setBackground(Color.white);
             }
+            return this;
         }
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSpeaker.java b/src/main/rtm/jp/ngt/rtm/gui/GuiSpeaker.java
index a8bb364..4a01bc6 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiSpeaker.java
+++ b/src/main/rtm/jp/ngt/rtm/gui/GuiSpeaker.java
@@ -63,7 +63,7 @@ public class GuiSpeaker extends GuiScreenCustom {
             for (String fileName : RTMSound.ALL_OGG_FILES) {
                 if (fileName.contains(searchWrd)) {
                     int y = (i - this.currentScrollSub) * 20;
-                    int x = this.width - selWidth + sndWidth;
+                    int x = this.width - (selWidth + sndWidth);
                     GuiButton button = new GuiButton(500 + i, x, y, sndWidth, 20, fileName);
                     this.buttonList.add(button);
                     this.soundButtons.add(button);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiVehicleControlPanel.java b/src/main/rtm/jp/ngt/rtm/gui/GuiVehicleControlPanel.java
index e81591b..8416323 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/GuiVehicleControlPanel.java
+++ b/src/main/rtm/jp/ngt/rtm/gui/GuiVehicleControlPanel.java
@@ -79,7 +79,7 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
         super((Container)par1);
         this.vehicle = par1.vehicle;
         this.player = par1.player;
-        this.modelset = par1.vehicle.getResourceState().getResourceSet();
+        this.modelset = (ModelSetVehicleBase)par1.vehicle.getResourceState().getResourceSet();
         this.player.openContainer = this.inventorySlots;
         this.allowUserInput = true;
     }
@@ -180,7 +180,7 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
             if (formation != null)
                 for (int j = 0; j < formation.size(); j++) {
                     FormationEntry entry = formation.get(j);
-                    if (entry != null) {
+                    if (!(entry == null)) {
                         int v = (j == 0) ? 0 : ((j == formation.size() - 1) ? 2 : 1);
                         int x = this.guiLeft + 8 + j % 5 * 32;
                         int y = this.guiTop + 25 + j / 5 * 32;
@@ -264,7 +264,7 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
         if (i != 0 && needsScrollBars()) {
             int j = 0;
             i = (i > 0) ? 1 : ((i < 0) ? -1 : i);
-            float scroll = (float)(this.currentScroll - i / j);
+            float scroll = (float)((double)this.currentScroll - i / j);
             this.currentScroll = (scroll < 0.0F) ? 0.0F : ((scroll > 1.0F) ? 1.0F : scroll);
         }
     }
@@ -293,7 +293,7 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
         boolean rendered = false;
         for (int j2 = start; j2 < i2; j2++) {
             TabTrainControlPanel TabTrainControlPanel = tabs[j2];
-            if (TabTrainControlPanel != null)
+            if (!(TabTrainControlPanel == null))
                 if (renderCreativeInventoryHoveringText(TabTrainControlPanel, par1, par2)) {
                     rendered = true;
                     break;
@@ -342,7 +342,7 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
         drawTexturedModalRect(this.guiLeft - 1, this.guiTop - 1, 0, 0, this.xSize, this.ySize);
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
         this.mc.getTextureManager().bindTexture(tabTexture);
-        if (tab == null || tab.getTabPage() != tabPage)
+        if (!(tab != null) || tab.getTabPage() != tabPage)
             if (tab != TabTrainControlPanel.TAB_Inventory)
                 return;
         renderTabItem(tab);
@@ -494,7 +494,7 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
             }
         }
         if (button.id == 300 || button.id == 301) {
-            ((GuiButtonDoor)button).opened ^= 0x1;
+            ((GuiButtonDoor)button).opened ^= true;
             int r = (this.buttonDoor[0]).opened ? 1 : 0;
             int l = (this.buttonDoor[1]).opened ? 1 : 0;
             int state = r << 1 | l;
@@ -603,8 +603,8 @@ public class GuiVehicleControlPanel extends InventoryEffectRenderer {
 
         public boolean mousePressed(Minecraft mx, int x, int y) {
             if (super.mousePressed(GuiVehicleControlPanel.this.mc, x, y)) {
-                if (y - this.y >= 12)
-                    if (x - this.x < 12);
+                if (y - this.y >= 12 && x - this.x < 12) {
+                }
                 return true;
             }
             return false;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/InternalButton.java b/src/main/rtm/jp/ngt/rtm/gui/InternalButton.java
index dc145b9..7c175d2 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/InternalButton.java
+++ b/src/main/rtm/jp/ngt/rtm/gui/InternalButton.java
@@ -42,14 +42,17 @@ public class InternalButton {
         this.text = text;
         this.textColor = color;
         this.textScale = scale;
+        return this;
     }
 
     public InternalButton setColor(int par1) {
         this.color = par1;
+        return this;
     }
 
     public InternalButton setListner(ButtonListner par1) {
         this.listner = par1;
+        return this;
     }
 
     public ButtonListner getListner() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/InternalGUI.java b/src/main/rtm/jp/ngt/rtm/gui/InternalGUI.java
index fcaa35f..79a5476 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/InternalGUI.java
+++ b/src/main/rtm/jp/ngt/rtm/gui/InternalGUI.java
@@ -37,6 +37,7 @@ public class InternalGUI {
 
     public InternalGUI setColor(int par1) {
         this.color = par1;
+        return this;
     }
 
     public InternalButton addButton(InternalButton button) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/TabTrainControlPanel.java b/src/main/rtm/jp/ngt/rtm/gui/TabTrainControlPanel.java
index fde5c23..e7313e8 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/gui/TabTrainControlPanel.java
+++ b/src/main/rtm/jp/ngt/rtm/gui/TabTrainControlPanel.java
@@ -43,6 +43,8 @@ public class TabTrainControlPanel {
                 a0[i] = tabArray[i];
             tabArray = a0;
         }
+
+        tabArray[this.tabIndex] = this;
     }
 
     @SideOnly(Side.CLIENT)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemAmmunition.java b/src/main/rtm/jp/ngt/rtm/item/ItemAmmunition.java
index 8b7a49a..0b59080 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemAmmunition.java
+++ b/src/main/rtm/jp/ngt/rtm/item/ItemAmmunition.java
@@ -15,7 +15,7 @@ public class ItemAmmunition extends Item {
 
     public String getTranslationKey(ItemStack par1) {
         int i = par1.getItemDamage() / 4;
-        return getTranslationKey() + "." + i;
+        return super.getTranslationKey() + "." + i;
     }
 
     public String getItemStackDisplayName(ItemStack par1) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemBogie.java b/src/main/rtm/jp/ngt/rtm/item/ItemBogie.java
index 3410171..072864e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemBogie.java
+++ b/src/main/rtm/jp/ngt/rtm/item/ItemBogie.java
@@ -12,6 +12,6 @@ public class ItemBogie extends Item {
 
     public String getTranslationKey(ItemStack itemStack) {
         int i = MathHelper.clamp(itemStack.getItemDamage(), 0, 1);
-        return getTranslationKey() + "." + itemStack.getItemDamage();
+        return super.getTranslationKey() + "." + itemStack.getItemDamage();
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemBucketLiquid.java b/src/main/rtm/jp/ngt/rtm/item/ItemBucketLiquid.java
index 14171b0..5df93fe 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemBucketLiquid.java
+++ b/src/main/rtm/jp/ngt/rtm/item/ItemBucketLiquid.java
@@ -79,7 +79,7 @@ public class ItemBucketLiquid extends ItemCustom {
         if (!world.isRemote) {
             double fluc = 0.75D;
             for (int i = 0; i < amount; i++) {
-                double d0 = (i + 1) / amount;
+                double d0 = (double)(i + 1) / amount;
                 EntityFluid fluid = new EntityFluid(world);
                 fluid.setPosition(x + (world.rand
                         .nextDouble() - 0.5D) * fluc * d0, y, z + (world.rand
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemCargo.java b/src/main/rtm/jp/ngt/rtm/item/ItemCargo.java
index 947c458..75a8798 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemCargo.java
+++ b/src/main/rtm/jp/ngt/rtm/item/ItemCargo.java
@@ -76,7 +76,7 @@ public class ItemCargo extends ItemWithModel {
 
     public String getTranslationKey(ItemStack itemStack) {
         int i = MathHelper.clamp(itemStack.getItemDamage(), 0, 2);
-        return getTranslationKey() + "." + itemStack.getItemDamage();
+        return super.getTranslationKey() + "." + itemStack.getItemDamage();
     }
 
     @SideOnly(Side.CLIENT)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemGun.java b/src/main/rtm/jp/ngt/rtm/item/ItemGun.java
index 2f87f4b..87a2e3c 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemGun.java
+++ b/src/main/rtm/jp/ngt/rtm/item/ItemGun.java
@@ -145,13 +145,13 @@ public class ItemGun extends ItemCustom {
     }
 
     public enum GunType {
-        handgun((String)ItemAmmunition.BulletType.handgun_9mm, 10, 16, 4.5F, false),
-        rifle((String)ItemAmmunition.BulletType.rifle_7_62mm, 5, 16, 7.5F, false),
-        autoloading_rifle((String)ItemAmmunition.BulletType.rifle_7_62mm, 30, 6, 7.5F, true),
-        sniper_rifle((String)ItemAmmunition.BulletType.rifle_7_62mm, 10, 20, 7.5F, false),
-        smg((String)ItemAmmunition.BulletType.handgun_9mm, 30, 6, 4.5F, true),
-        amr((String)ItemAmmunition.BulletType.rifle_12_7mm, 10, 24, 9.0F, false),
-        razer_gun((String)ItemAmmunition.BulletType.rifle_12_7mm, 10, 60, 150.0F, false);
+        handgun(ItemAmmunition.BulletType.handgun_9mm, 10, 16, 4.5F, false),
+        rifle(ItemAmmunition.BulletType.rifle_7_62mm, 5, 16, 7.5F, false),
+        autoloading_rifle(ItemAmmunition.BulletType.rifle_7_62mm, 30, 6, 7.5F, true),
+        sniper_rifle(ItemAmmunition.BulletType.rifle_7_62mm, 10, 20, 7.5F, false),
+        smg(ItemAmmunition.BulletType.handgun_9mm, 30, 6, 4.5F, true),
+        amr(ItemAmmunition.BulletType.rifle_12_7mm, 10, 24, 9.0F, false),
+        razer_gun(ItemAmmunition.BulletType.rifle_12_7mm, 10, 60, 150.0F, false);
 
         public final ItemAmmunition.BulletType bulletType;
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemInstalledObject.java b/src/main/rtm/jp/ngt/rtm/item/ItemInstalledObject.java
index 36f6e83..9eb9ca2 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemInstalledObject.java
+++ b/src/main/rtm/jp/ngt/rtm/item/ItemInstalledObject.java
@@ -164,9 +164,9 @@ public class ItemInstalledObject extends ItemWithModel {
                     }
                 }
             } else if (type == IstlObjType.TURNSTILE) {
-                BlockTurnstile blockTurnstile = RTMBlock.turnstile;
+                block = RTMBlock.turnstile;
                 int dir = NGTMath.floor(NGTMath.normalizeAngle(player.rotationYaw + 180.0D) / 90.0D + 0.5D) & 0x3;
-                BlockUtil.setBlock(world, x, y, z, (Block)blockTurnstile, dir, 3);
+                BlockUtil.setBlock(world, x, y, z, (Block)block, dir, 3);
                 TileEntityTurnstile tile = (TileEntityTurnstile)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
                 tile.setRotation(player, 90.0F, true);
                 updateResource(tile, itemStack);
@@ -307,7 +307,7 @@ public class ItemInstalledObject extends ItemWithModel {
     }
 
     public String getTranslationKey(ItemStack itemStack) {
-        return getTranslationKey() + "." + itemStack.getItemDamage();
+        return super.getTranslationKey() + "." + itemStack.getItemDamage();
     }
 
     @SideOnly(Side.CLIENT)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemMirror.java b/src/main/rtm/jp/ngt/rtm/item/ItemMirror.java
index dcccd16..8e8cbba 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemMirror.java
+++ b/src/main/rtm/jp/ngt/rtm/item/ItemMirror.java
@@ -25,9 +25,9 @@ public class ItemMirror extends ItemMultiIcon {
         int meta = par1.getItemDamage();
         switch (meta) {
             case 0:
-                return getTranslationKey() + ".plate";
+                return super.getTranslationKey() + ".plate";
         }
-        return getTranslationKey() + ".block." + (meta - 20);
+        return super.getTranslationKey() + ".block." + (meta - 20);
     }
 
     protected ActionResult<ItemStack> onItemUse(ItemArgHolderBase.ItemArgHolder holder, float hitX, float hitY, float hitZ) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemNPC.java b/src/main/rtm/jp/ngt/rtm/item/ItemNPC.java
index a3d524d..29d5ecc 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemNPC.java
+++ b/src/main/rtm/jp/ngt/rtm/item/ItemNPC.java
@@ -51,7 +51,7 @@ public class ItemNPC extends ItemWithModel {
 
     public String getTranslationKey(ItemStack itemStack) {
         int i = MathHelper.clamp(itemStack.getItemDamage(), 0, 1);
-        return getTranslationKey() + "." + itemStack.getItemDamage();
+        return super.getTranslationKey() + "." + itemStack.getItemDamage();
     }
 
     @SideOnly(Side.CLIENT)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemRail.java b/src/main/rtm/jp/ngt/rtm/item/ItemRail.java
index d63634e..5f7bac1 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemRail.java
+++ b/src/main/rtm/jp/ngt/rtm/item/ItemRail.java
@@ -13,6 +13,7 @@ import jp.ngt.rtm.RTMResource;
 import jp.ngt.rtm.modelpack.ModelPackManager;
 import jp.ngt.rtm.modelpack.ResourceType;
 import jp.ngt.rtm.modelpack.cfg.RailConfig;
+import jp.ngt.rtm.modelpack.modelset.ModelSetRail;
 import jp.ngt.rtm.modelpack.modelset.ResourceSet;
 import jp.ngt.rtm.modelpack.state.ResourceState;
 import jp.ngt.rtm.modelpack.state.ResourceStateRail;
@@ -118,7 +119,7 @@ public class ItemRail extends ItemWithModel {
         return s + "(" + state.getResourceSet().getConfig().getName() + localizedName + ")";
     }
 
-    protected void addInformation(ItemArgHolderBase.ItemArgHolder holder, List<String> list, ITooltipFlag flag) {
+    protected void addInformation(ItemArgHolderBase.ItemArgHolder holder, List list, ITooltipFlag flag) {
         super.addInformation(holder, list, flag);
         ResourceStateRail state = getModelState(holder.getItemStack());
         if (state == null)
@@ -193,9 +194,9 @@ public class ItemRail extends ItemWithModel {
             int origY = topRP.blockY;
             int origZ = topRP.blockZ;
             for (RailPosition rp : rps) {
-                double dif2X = rp.blockX + 0.5D - origX + 0.5D;
-                double dif2Y = rp.blockY + 0.5D - origY + 0.5D;
-                double dif2Z = rp.blockZ + 0.5D - origZ + 0.5D;
+                double dif2X = rp.blockX + 0.5D - (origX + 0.5D);
+                double dif2Y = rp.blockY + 0.5D - (origY + 0.5D);
+                double dif2Z = rp.blockZ + 0.5D - (origZ + 0.5D);
                 Vec3 vec = PooledVec3.create(dif2X, dif2Y, dif2Z);
                 vec = vec.rotateAroundY(difDir * 45.0F);
                 rp.blockX = NGTMath.floor(pos.getX() + 0.5D + vec.getX());
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemTrain.java b/src/main/rtm/jp/ngt/rtm/item/ItemTrain.java
index f60184b..1e0e9a9 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemTrain.java
+++ b/src/main/rtm/jp/ngt/rtm/item/ItemTrain.java
@@ -175,7 +175,7 @@ public final class ItemTrain extends ItemWithModel {
         return new ResourceState<>(type, null);
     }
 
-    protected void addInformation(ItemArgHolderBase.ItemArgHolder holder, List<String> list, ITooltipFlag flag) {
+    protected void addInformation(ItemArgHolderBase.ItemArgHolder holder, List list, ITooltipFlag flag) {
         List<TrainSet> trainSets = getFormationFromItem(holder.getItemStack());
         if (trainSets.isEmpty()) {
             super.addInformation(holder, list, flag);
@@ -190,7 +190,7 @@ public final class ItemTrain extends ItemWithModel {
         }
     }
 
-    private static ItemStack getItem(ResourceType<TrainConfig, ModelSetTrain> type) {
+    private static ItemStack getItem(ResourceType type) {
         if (type == RTMResource.TRAIN_DC)
             return new ItemStack(RTMItem.itemtrain, 1, 0);
         if (type == RTMResource.TRAIN_EC)
@@ -205,7 +205,7 @@ public final class ItemTrain extends ItemWithModel {
     }
 
     public static ItemStack convertFormationAsItem(EntityTrainBase train) {
-        ItemStack stack = getItem((train.getResourceState()).type);
+        ItemStack stack = getItem((ResourceType<TrainConfig, ModelSetTrain>) (train.getResourceState()).type);
         NBTTagList tagList = new NBTTagList();
         for (FormationEntry entry : (train.getFormation()).entries) {
             if (entry != null) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemWithModel.java b/src/main/rtm/jp/ngt/rtm/item/ItemWithModel.java
index fcd837d..fb4031f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/item/ItemWithModel.java
+++ b/src/main/rtm/jp/ngt/rtm/item/ItemWithModel.java
@@ -89,7 +89,7 @@ public abstract class ItemWithModel<T extends ResourceSet> extends ItemCustom im
         return new int[3];
     }
 
-    public boolean closeGui(ResourceState<T> par1) {
+    public boolean closeGui(ResourceState par1) {
         setModelState(this.selectedItem, par1);
         return true;
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ModelPackManager.java b/src/main/rtm/jp/ngt/rtm/modelpack/ModelPackManager.java
index 5bb1855..3357693 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ModelPackManager.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/ModelPackManager.java
@@ -73,6 +73,9 @@ public final class ModelPackManager {
 
     private static final String DEFAULT_DOMAIN = "minecraft";
 
+    private ModelPackManager() {
+    }
+
     public void load(ModelPackLoadThread par1) {
         List<File> fileListTemp = NGTFileLoader.findFile(file -> {
                     String path = file.getAbsolutePath();
@@ -178,7 +181,7 @@ public final class ModelPackManager {
     public void sendModelSetsToClient(EntityPlayerMP player) {
         int count = 0;
         for (Map.Entry<ResourceType, Map<String, ResourceSet>> entry : this.allModelSetMap.entrySet()) {
-            for (ResourceSet<ResourceConfig> modelSet : (Iterable<ResourceSet<ResourceConfig>>)((Map)entry.getValue()).values()) {
+            for (ResourceSet<ResourceConfig> modelSet : (entry.getValue()).values()) {
                 ResourceConfig cfg = modelSet.getConfig();
                 RTMCore.NETWORK_WRAPPER.sendTo(new PacketModelSet(count, ((ResourceType)entry.getKey()).name, cfg.getName()), player);
                 NGTLog.debug("[RTM] Send model to client : " + cfg.getName());
@@ -241,7 +244,6 @@ public final class ModelPackManager {
 
     @SideOnly(Side.CLIENT)
     public IModelNGT loadModel(String modelName, int drawMode, boolean addModelMap, ModelConfig cfg, byte[] md5) {
-        PolygonModel polygonModel;
         if (addModelMap && this.modelCache.containsKey(modelName))
             return this.modelCache.get(modelName);
         VecAccuracy accuracy = (cfg.accuracy == null || cfg.accuracy.equals(VecAccuracy.MEDIUM.toString())) ? VecAccuracy.MEDIUM : VecAccuracy.LOW;
@@ -249,22 +251,22 @@ public final class ModelPackManager {
         IModelNGT model = null;
         try {
             if (FileType.CLASS.match(modelName)) {
-                MCModel mCModel = RTMClassModels.getModel(modelName);
+                model = RTMClassModels.getModel(modelName);
             } else if (FileType.NGTO.match(modelName)) {
-                NGTOModel nGTOModel = new NGTOModel((ResourceLocation)new ResourceLocationCustom("minecraft", resource), cfg.scale);
+                model = new NGTOModel((ResourceLocation)new ResourceLocationCustom("minecraft", resource), cfg.scale);
             } else if (FileType.NGTZ.match(modelName)) {
-                NGTZModel nGTZModel = new NGTZModel((ResourceLocation)new ResourceLocationCustom("minecraft", resource), cfg.scale);
+                model = new NGTZModel((ResourceLocation)new ResourceLocationCustom("minecraft", resource), cfg.scale);
             } else {
-                polygonModel = ModelLoader.loadModel(resource, accuracy, new Object[] { Integer.valueOf(drawMode), md5 });
+                model = ModelLoader.loadModel(resource, accuracy, new Object[] { Integer.valueOf(drawMode), md5 });
             }
         } catch (ModelFormatException e) {
             throw new ModelFormatException("Can't load model : " + modelName, e);
         }
-        if (polygonModel == null)
+        if (model == null)
             throw new ModelPackException("Can't find model file", cfg.getName());
         if (addModelMap)
-            this.modelCache.put(modelName, polygonModel);
-        return (IModelNGT)polygonModel;
+            this.modelCache.put(modelName, model);
+        return (IModelNGT)model;
     }
 
     public ResourceLocation getResource(String path) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/RTMResourceManager.java b/src/main/rtm/jp/ngt/rtm/modelpack/RTMResourceManager.java
index 3c913b9..f52c056 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/RTMResourceManager.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/RTMResourceManager.java
@@ -79,7 +79,7 @@ public final class RTMResourceManager implements IResourceManager {
     }
 
     public List getAllResources(ResourceLocation par1) throws IOException {
-        List<?> list = Lists.newArrayList();
+        List list = Lists.newArrayList();
         list.add(getResource(par1));
         if (!list.isEmpty())
             return list;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ResourceType.java b/src/main/rtm/jp/ngt/rtm/modelpack/ResourceType.java
index e02115f..652589e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ResourceType.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/ResourceType.java
@@ -30,14 +30,17 @@ public class ResourceType<C extends ResourceConfig, S extends ResourceSet> imple
 
     public ResourceType<C, S> setDefault(String s) {
         this.defaultName = s;
+        return this;
     }
 
     public ResourceType<C, S> setCustomLoading(boolean par1) {
         this.useCustomLoading = par1;
+        return this;
     }
 
     public ResourceType<C, S> getSubType(String s) {
         ResourceType<C, S> newObj = clone();
+        newObj.parent = this;
         newObj.subType = s;
         ModelPackManager.INSTANCE.registerType(newObj);
         return newObj;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ScriptExecuter.java b/src/main/rtm/jp/ngt/rtm/modelpack/ScriptExecuter.java
index 23a127e..36e62c0 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/ScriptExecuter.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/ScriptExecuter.java
@@ -22,8 +22,8 @@ public class ScriptExecuter implements ICommandSender {
 
     public long count;
 
-    protected Object callMethod(IResourceSelector<ModelSetBase> selector, String name, Object... args) {
-        ModelSetBase set = selector.getResourceState().getResourceSet();
+    protected Object callMethod(IResourceSelector selector, String name, Object... args) {
+        ModelSetBase set = (ModelSetBase)selector.getResourceState().getResourceSet();
         if (set.serverSE != null)
             return ScriptUtil.doScriptIgnoreError(set.serverSE, name, args);
         return null;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/ContainerConfig.java b/src/main/rtm/jp/ngt/rtm/modelpack/cfg/ContainerConfig.java
index 96ade8a..bda5693 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/ContainerConfig.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/cfg/ContainerConfig.java
@@ -20,7 +20,7 @@ public class ContainerConfig extends ModelConfig {
     public void init() {
         super.init();
         if (this.model == null) {
-            this.model = new ModelConfig.ModelSource(this);
+            this.model = new ModelConfig.ModelSource();
             this.model.modelFile = this.containerModel;
             this.model.textures = new String[][] { { "default", this.containerTexture } };
             this.model.rendererPath = null;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/FirearmConfig.java b/src/main/rtm/jp/ngt/rtm/modelpack/cfg/FirearmConfig.java
index bb9bc77..4779020 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/FirearmConfig.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/cfg/FirearmConfig.java
@@ -46,20 +46,20 @@ public class FirearmConfig extends ModelConfig {
     public void init() {
         super.init();
         if (this.model == null) {
-            this.model = new ModelConfig.ModelSource(this);
+            this.model = new ModelConfig.ModelSource();
             this.model.modelFile = this.firearmModel;
             this.model.textures = new String[][] { { "default", this.firearmTexture } };
             this.model.rendererPath = null;
             this.useOldSystem = true;
         }
         if (this.modelPartsN == null)
-            this.modelPartsN = new ModelConfig.Parts(this);
+            this.modelPartsN = new ModelConfig.Parts();
         if (this.modelPartsY == null)
-            this.modelPartsY = new ModelConfig.Parts(this);
+            this.modelPartsY = new ModelConfig.Parts();
         if (this.modelPartsX == null)
-            this.modelPartsX = new ModelConfig.Parts(this);
+            this.modelPartsX = new ModelConfig.Parts();
         if (this.modelPartsBarrel == null)
-            this.modelPartsBarrel = new ModelConfig.Parts(this);
+            this.modelPartsBarrel = new ModelConfig.Parts();
         this.modelPartsN.initParts();
         this.modelPartsY.initParts();
         this.modelPartsX.initParts();
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/RailConfig.java b/src/main/rtm/jp/ngt/rtm/modelpack/cfg/RailConfig.java
index 243247c..84dab9e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/RailConfig.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/cfg/RailConfig.java
@@ -20,7 +20,7 @@ public class RailConfig extends ModelConfig {
     public void init() {
         super.init();
         if (this.model == null) {
-            this.model = new ModelConfig.ModelSource(this);
+            this.model = new ModelConfig.ModelSource();
             this.model.modelFile = this.railModel;
             this.model.textures = new String[][] { { "default", this.railTexture } };
             this.model.rendererPath = null;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/SignalConfig.java b/src/main/rtm/jp/ngt/rtm/modelpack/cfg/SignalConfig.java
index a70f8b0..d74f9e6 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/SignalConfig.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/cfg/SignalConfig.java
@@ -32,14 +32,14 @@ public class SignalConfig extends ModelConfig {
     public void init() {
         super.init();
         if (this.model == null) {
-            this.model = new ModelConfig.ModelSource(this);
+            this.model = new ModelConfig.ModelSource();
             this.model.modelFile = this.signalModel;
             this.model.textures = new String[][] { { "default", this.signalTexture, "Light", this.lightTexture } };
         }
         if (this.modelPartsFixture == null)
-            this.modelPartsFixture = new ModelConfig.Parts(this);
+            this.modelPartsFixture = new ModelConfig.Parts();
         if (this.modelPartsBody == null)
-            this.modelPartsBody = new ModelConfig.Parts(this);
+            this.modelPartsBody = new ModelConfig.Parts();
         this.modelPartsFixture.initParts();
         this.modelPartsBody.initParts();
         if (this.maxSignalLevel == 0 && this.lights != null) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/TrainConfig.java b/src/main/rtm/jp/ngt/rtm/modelpack/cfg/TrainConfig.java
index d75c2a4..18014c3 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/TrainConfig.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/cfg/TrainConfig.java
@@ -55,21 +55,19 @@ public class TrainConfig extends VehicleBaseConfig implements IConfigWithType {
     public void init() {
         super.init();
         if (this.trainModel2 == null) {
-            this.trainModel2 = new ModelConfig.ModelSource(this);
+            this.trainModel2 = new ModelConfig.ModelSource();
             this.trainModel2.modelFile = this.trainModel;
             this.trainModel2.textures = new String[][] { { "default", this.trainTexture } };
         }
         if (this.bogieModel3 == null) {
             this.bogieModel3 = new ModelConfig.ModelSource[2];
             if (this.bogieModel2 != null) {
-                this.bogieModel3[1] = this.bogieModel2;
-                this.bogieModel3[0] = this.bogieModel2;
+                this.bogieModel3[0] = this.bogieModel3[1] = this.bogieModel2;
             } else {
-                ModelConfig.ModelSource model = new ModelConfig.ModelSource(this);
+                ModelConfig.ModelSource model = new ModelConfig.ModelSource();
                 model.modelFile = this.bogieModel;
                 model.textures = new String[][] { { "default", this.bogieTexture } };
-                this.bogieModel3[1] = model;
-                this.bogieModel3[0] = model;
+                this.bogieModel3[0] = this.bogieModel3[1] = model;
             }
         }
         this.sound_BrakeRelease = fixSoundPath(this.sound_BrakeRelease);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/VehicleBaseConfig.java b/src/main/rtm/jp/ngt/rtm/modelpack/cfg/VehicleBaseConfig.java
index d43d25a..3803942 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/cfg/VehicleBaseConfig.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/cfg/VehicleBaseConfig.java
@@ -83,11 +83,7 @@ public abstract class VehicleBaseConfig extends ModelConfig {
                     float y = this.seatPos[i][1] * 0.0625F;
                     float z = this.seatPos[i][2] * 0.0625F;
                     float type = this.seatPos[i][3];
-                    (new float[4])[0] = x;
-                    (new float[4])[1] = y;
-                    (new float[4])[2] = z;
-                    (new float[4])[3] = type;
-                    this.seatPosF[i] = new float[4];
+                    this.seatPosF[i] = new float[]{x, y, z, type};
                 }
             } else {
                 this.seatPosF = new float[0][];
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/MPLAdButton.java b/src/main/rtm/jp/ngt/rtm/modelpack/init/MPLAdButton.java
index 7155768..109e2a4 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/MPLAdButton.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/init/MPLAdButton.java
@@ -67,7 +67,7 @@ public final class MPLAdButton extends JButton {
         try {
             URL url = new URL("https://dl.dropboxusercontent.com/s/7rpcd4ycxjfnwrr/advertisement.json");
             String json = NGTText.append(NGTText.readTextL(url.openStream(), ""), true);
-            return (Advertisement[])NGTJson.getObjectFromJson(json, Advertisement[].class);
+            return NGTJson.getObjectFromJson(json, Advertisement[].class);
         } catch (MalformedURLException e) {
             e.printStackTrace();
         } catch (IOException e) {
@@ -78,7 +78,7 @@ public final class MPLAdButton extends JButton {
 
     private void shuffleAds() {
         List<Advertisement> list = new ArrayList<>();
-        NGTUtil.addArray(list, (Object[])this.ads);
+        NGTUtil.addArray(list, this.ads);
         Collections.shuffle(list);
         this.ads = list.<Advertisement>toArray(new Advertisement[list.size()]);
     }
@@ -88,7 +88,6 @@ public final class MPLAdButton extends JButton {
         for (int i = 0; i < this.ads.length; i++) {
             BufferedImage image;
             try {
-                BufferedImage bi;
                 URLConnection urlc = (new URL((this.ads[i]).picture)).openConnection();
                 if (urlc instanceof HttpsURLConnection) {
                     X509TrustManager x509mng = new X509TrustManager() {
@@ -106,6 +105,7 @@ public final class MPLAdButton extends JButton {
                 }
                 InputStream istream = urlc.getInputStream();
                 ImageInputStream stream = ImageIO.createImageInputStream(istream);
+                BufferedImage bi;
                 try {
                     bi = ImageIO.read(stream);
                     if (bi == null)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/ModelPackDownloadThread.java b/src/main/rtm/jp/ngt/rtm/modelpack/init/ModelPackDownloadThread.java
index 51ea5aa..cd547ad 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/ModelPackDownloadThread.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/init/ModelPackDownloadThread.java
@@ -34,7 +34,7 @@ public class ModelPackDownloadThread extends Thread {
                     this.channel = (new FileOutputStream(new File(modsDir, this.fileName))).getChannel();
                     setState(2);
                     while (this.writingStatus == 2) {
-                        sleep(50L);
+                        this.sleep(50L);
                     }
                     this.channel.close();
                 } catch (FileNotFoundException e) {
@@ -46,7 +46,7 @@ public class ModelPackDownloadThread extends Thread {
                 }
             }
             try {
-                sleep(50L);
+                this.sleep(50L);
             } catch (InterruptedException e) {
                 e.printStackTrace();
             }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/ModelPackLoadThread.java b/src/main/rtm/jp/ngt/rtm/modelpack/init/ModelPackLoadThread.java
index 7617124..dc17756 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/ModelPackLoadThread.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/init/ModelPackLoadThread.java
@@ -165,7 +165,7 @@ public final class ModelPackLoadThread extends Thread {
         if (!this.displayWindow)
             return;
         int max = this.maxValue[barId];
-        int i = (int)(value / max * 100.0F);
+        int i = (int)((float)value / (float)max * 100.0F);
         this.bars[barId].setValue(i);
         this.bars[barId].setStringPainted(true);
         this.bars[barId].setString(String.format("%d/%d", new Object[] { Integer.valueOf(value), Integer.valueOf(max) }));
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/ModelPackUploadThread.java b/src/main/rtm/jp/ngt/rtm/modelpack/init/ModelPackUploadThread.java
index 2998049..882ae34 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/init/ModelPackUploadThread.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/init/ModelPackUploadThread.java
@@ -38,7 +38,7 @@ public class ModelPackUploadThread extends Thread {
                     this.buffer.flip();
                     RTMCore.NETWORK_WRAPPER.sendToAll(new PacketModelPack(file.getName(), size, this.buffer));
                     this.buffer.clear();
-                    sleep(100L);
+                    this.sleep(100L);
                 }
                 channel.close();
             } catch (IOException e) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/model/ModelBogie.java b/src/main/rtm/jp/ngt/rtm/modelpack/model/ModelBogie.java
index 84761fd..df8ec12 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/model/ModelBogie.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/model/ModelBogie.java
@@ -429,6 +429,6 @@ public final class ModelBogie extends ModelBogieBase {
     }
 
     public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5) {
-        setRotationAngles(f, f1, f2, f3, f4, f5, null);
+        super.setRotationAngles(f, f1, f2, f3, f4, f5, null);
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/model/ModelMissing.java b/src/main/rtm/jp/ngt/rtm/modelpack/model/ModelMissing.java
index 82acc55..1fc772f 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/model/ModelMissing.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/model/ModelMissing.java
@@ -31,6 +31,6 @@ public final class ModelMissing extends ModelBase {
     }
 
     public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5) {
-        setRotationAngles(f, f1, f2, f3, f4, f5, null);
+        super.setRotationAngles(f, f1, f2, f3, f4, f5, null);
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetTrain.java b/src/main/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetTrain.java
index 3bec245..ce0dabf 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/modelset/ModelSetTrain.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/modelset/ModelSetTrain.java
@@ -27,8 +27,7 @@ public class ModelSetTrain extends ModelSetVehicleBase<TrainConfig> {
         super.constructOnClient();
         if (isDummy()) {
             this.bogieModels = new ModelObject[2];
-            this.bogieModels[1] = ModelObject.getDummy();
-            this.bogieModels[0] = ModelObject.getDummy();
+            this.bogieModels[0] = this.bogieModels[1] = ModelObject.getDummy();
         } else {
             this.bogieModels = registerBogieModel();
         }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/DataMap.java b/src/main/rtm/jp/ngt/rtm/modelpack/state/DataMap.java
index bd6a06d..2b1cb22 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/DataMap.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/state/DataMap.java
@@ -206,10 +206,7 @@ public final class DataMap {
                 String key = s.substring(0, idxEq);
                 String type = s.substring(idxEq + 2, idxBr);
                 String value = s.substring(idxBr + 1);
-                (new String[3])[0] = key;
-                (new String[3])[1] = type;
-                (new String[3])[2] = value;
-                array[i] = new String[3];
+                array[i] = new String[]{key, type, value};
             } else {
                 NGTLog.debug("Invalid data : %s", new Object[] { s });
                 return new String[0][0];
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/ResourceStateSignboard.java b/src/main/rtm/jp/ngt/rtm/modelpack/state/ResourceStateSignboard.java
index 501e24b..4fd71d9 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/modelpack/state/ResourceStateSignboard.java
+++ b/src/main/rtm/jp/ngt/rtm/modelpack/state/ResourceStateSignboard.java
@@ -25,9 +25,10 @@ public class ResourceStateSignboard extends ResourceState<TextureSetSignboard> {
         if (nbt.hasKey("TimeTableSetting"))
             setTTSetting(nbt.getString("TimeTableSetting"));
         this.texts.clear();
+        NBTTagCompound nbt2;
         NBTTagList list = nbt.getTagList("Texts", 10);
         for (int i = 0; i < list.tagCount(); i++) {
-            NBTTagCompound nbt2 = list.getCompoundTagAt(i);
+            nbt2 = list.getCompoundTagAt(i);
             this.texts.add(SignboardText.readFromNBT(nbt2, this.timeTable));
         }
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketLargeRailBase.java b/src/main/rtm/jp/ngt/rtm/network/PacketLargeRailBase.java
index bce2e3e..9c8d045 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketLargeRailBase.java
+++ b/src/main/rtm/jp/ngt/rtm/network/PacketLargeRailBase.java
@@ -61,6 +61,6 @@ public class PacketLargeRailBase extends PacketCustom implements IMessageHandler
                         }
                         return false;
                     }
-                }50, 5);
+                }, 50, 5);
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketLargeRailCore.java b/src/main/rtm/jp/ngt/rtm/network/PacketLargeRailCore.java
index 40f8126..6cb7aa2 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketLargeRailCore.java
+++ b/src/main/rtm/jp/ngt/rtm/network/PacketLargeRailCore.java
@@ -55,6 +55,8 @@ public class PacketLargeRailCore extends PacketCustom implements IMessageHandler
                 st = tile1.getSwitch();
                 this.type = (st != null) ? st.id : -1;
                 break;
+            case 0:
+            default:
         }
     }
 
@@ -107,8 +109,9 @@ public class PacketLargeRailCore extends PacketCustom implements IMessageHandler
             tile0.getResourceState().readFromNBT(message.property);
             tile0.setRailPositions(message.railPositions);
             if (message.dataType != 0 || !(tile instanceof jp.ngt.rtm.rail.TileEntityLargeRailNormalCore))
-                if (message.dataType == 2 && tile instanceof TileEntityLargeRailSwitchCore)
-                    TileEntityLargeRailSwitchCore tileEntityLargeRailSwitchCore = (TileEntityLargeRailSwitchCore)tile;
+                if (message.dataType == 2 && tile instanceof TileEntityLargeRailSwitchCore) {
+                    TileEntityLargeRailSwitchCore tileEntityLargeRailSwitchCore = (TileEntityLargeRailSwitchCore) tile;
+                }
             tile0.updateResourceState();
             return true;
         }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketNoticeHandlerServer.java b/src/main/rtm/jp/ngt/rtm/network/PacketNoticeHandlerServer.java
index 1d52d93..1d28d5a 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/network/PacketNoticeHandlerServer.java
+++ b/src/main/rtm/jp/ngt/rtm/network/PacketNoticeHandlerServer.java
@@ -25,7 +25,7 @@ import net.minecraftforge.fml.common.network.simpleimpl.MessageContext;
 
 public class PacketNoticeHandlerServer implements IMessageHandler<PacketNotice, IMessage> {
     public IMessage onMessage(PacketNotice message, MessageContext ctx) {
-        EntityPlayerMP entityPlayerMP = (ctx.getServerHandler()).player;
+        EntityPlayer entityPlayerMP = (ctx.getServerHandler()).player;
         World world = ((EntityPlayer)entityPlayerMP).world;
         String msg = message.notice;
         if ((message.type & 0x1) == 0)
@@ -66,8 +66,8 @@ public class PacketNoticeHandlerServer implements IMessageHandler<PacketNotice,
             } else if (msg.startsWith("DM")) {
                 DataMap.receivePacket(msg, message, world, false);
             } else if (msg.startsWith("vendor")) {
-                ItemStack stack;
                 String type = msg.split(":")[1];
+                ItemStack stack;
                 if (type.equals("ticketbook")) {
                     stack = new ItemStack(RTMItem.ticketBook, 1, 11);
                 } else {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/BlockLargeRailBase.java b/src/main/rtm/jp/ngt/rtm/rail/BlockLargeRailBase.java
index 5c470e1..40913d4 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/BlockLargeRailBase.java
+++ b/src/main/rtm/jp/ngt/rtm/rail/BlockLargeRailBase.java
@@ -76,7 +76,7 @@ public class BlockLargeRailBase extends BlockContainerCustomWithMeta {
     }
 
     public boolean preventMobMovement(IBlockAccess world, BlockPos pos) {
-        TileEntityLargeRailCore core = getCore(world, pos);
+        TileEntityLargeRailCore core = this.getCore(world, pos);
         if (core != null) {
             ModelSetRail set = core.getResourceState().getResourceSet();
             return !(set.getConfig()).allowCrossing;
@@ -115,7 +115,7 @@ public class BlockLargeRailBase extends BlockContainerCustomWithMeta {
                 int x = pos.getX();
                 int y = pos.getY();
                 int z = pos.getZ();
-                TileEntityLargeRailCore tile1 = getCore((IBlockAccess)world, pos);
+                TileEntityLargeRailCore tile1 = this.getCore((IBlockAccess)world, pos);
                 if (tile1 != null)
                     dropRail(world, x, y, z, tile1.getResourceState());
             }
@@ -130,7 +130,7 @@ public class BlockLargeRailBase extends BlockContainerCustomWithMeta {
     }
 
     public void breakBlock(World world, BlockPos pos, IBlockState state) {
-        TileEntityLargeRailCore core = getCore((IBlockAccess)world, pos);
+        TileEntityLargeRailCore core = this.getCore((IBlockAccess)world, pos);
         if (!world.isRemote && core != null) {
             RailMap[] railmaps = core.getAllRailMaps();
             for (RailMap rm : railmaps)
@@ -141,7 +141,7 @@ public class BlockLargeRailBase extends BlockContainerCustomWithMeta {
 
     public void onEntityCollision(World world, BlockPos pos, IBlockState state, Entity entity) {
         if (world.isRemote) {
-            TileEntityLargeRailCore rail = getCore((IBlockAccess)world, pos);
+            TileEntityLargeRailCore rail = this.getCore((IBlockAccess)world, pos);
             if (rail == null || rail.getResourceState() == null)
                 return;
             Block base = (rail.getResourceState()).block;
@@ -151,9 +151,9 @@ public class BlockLargeRailBase extends BlockContainerCustomWithMeta {
                 if (train != null && train.getSpeed() > 0.0F) {
                     double speed = train.getSpeed() * 0.125D;
                     for (int i = 0; i < 5; i++) {
-                        double d0 = pos.getX() + world.rand.nextFloat();
-                        double d1 = pos.getY() + world.rand.nextFloat() * 0.25D;
-                        double d2 = pos.getZ() + world.rand.nextFloat();
+                        double d0 = (double)pos.getX() + world.rand.nextFloat();
+                        double d1 = (double)pos.getY() + world.rand.nextFloat() * 0.25D;
+                        double d2 = (double)pos.getZ() + world.rand.nextFloat();
                         double vx = (d0 - entity.posX) * speed;
                         double vz = (d2 - entity.posZ) * speed;
                         world.spawnParticle(EnumParticleTypes.SNOW_SHOVEL, d0, d1, d2, vx, 0.125D, vz, new int[0]);
@@ -179,7 +179,7 @@ public class BlockLargeRailBase extends BlockContainerCustomWithMeta {
     }
 
     public ItemStack getPickBlock(IBlockState state, RayTraceResult target, World world, BlockPos pos, EntityPlayer player) {
-        TileEntityLargeRailCore core = getCore((IBlockAccess)world, pos);
+        TileEntityLargeRailCore core = this.getCore((IBlockAccess)world, pos);
         if (core != null)
             return ItemRail.copyItemFromRail(core);
         return null;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/BlockMarker.java b/src/main/rtm/jp/ngt/rtm/rail/BlockMarker.java
index 8b32c39..6b1e609 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/BlockMarker.java
+++ b/src/main/rtm/jp/ngt/rtm/rail/BlockMarker.java
@@ -158,7 +158,11 @@ public class BlockMarker extends BlockContainerCustomWithMeta {
                 }
             }
         }
-        list.sort((arg0, arg1) -> (arg0.switchType != arg1.switchType) ? (arg1.switchType - arg0.switchType) : ((arg0.blockY != arg1.blockY) ? (arg0.blockY - arg1.blockY) : (arg0.hashCode() - arg1.hashCode())));
+        list.sort((arg0, arg1) -> {
+                    if (arg0.switchType != arg1.switchType) return arg1.switchType - arg0.switchType;
+                    else return (arg0.blockY != arg1.blockY) ? (arg0.blockY - arg1.blockY) : (arg0.hashCode() - arg1.hashCode());
+                }
+        );
         return list;
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/RenderLargeRail.java b/src/main/rtm/jp/ngt/rtm/rail/RenderLargeRail.java
index da4c193..615d31e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/RenderLargeRail.java
+++ b/src/main/rtm/jp/ngt/rtm/rail/RenderLargeRail.java
@@ -20,6 +20,9 @@ public class RenderLargeRail extends TileEntitySpecialRenderer<TileEntityLargeRa
 
     public static final RenderRailBlock BLOCK_RENDERER = new RenderRailBlock();
 
+    protected RenderLargeRail() {
+    }
+
     public void render(TileEntityLargeRailCore tileEntity, double d0, double d1, double d2, float f, int i, float alpha) {
         renderTileEntityLargeRail(tileEntity, d0, d1, d2, f);
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/RenderMarkerBlock.java b/src/main/rtm/jp/ngt/rtm/rail/RenderMarkerBlock.java
index 62c9477..ae13ed8 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/RenderMarkerBlock.java
+++ b/src/main/rtm/jp/ngt/rtm/rail/RenderMarkerBlock.java
@@ -84,7 +84,7 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
             marker.gui.addButton(new InternalButton(-2.4F, startY, 4.8F, 0.5F))
                 .setColor(buttonColor).setText("Anchor mode 2-1 : " + marker.displayLine, 16777215, 0.05F)
                 .setListner(button -> {
-                        marker.anchor21 ^= 0x1;
+                        marker.anchor21 ^= true;
                         if (marker.getCoreMarker() != null)
                             (marker.getCoreMarker()).anchor21 = marker.anchor21;
                         button.setText("Anchor mode 2-1 : " + marker.anchor21, 16777215, 0.05F);
@@ -93,7 +93,7 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
             marker.gui.addButton(new InternalButton(-2.4F, startY, 4.8F, 0.5F))
                 .setColor(buttonColor).setText("Display line : " + marker.displayLine, 16777215, 0.05F)
                 .setListner(button -> {
-                        marker.displayLine ^= 0x1;
+                        marker.displayLine ^= true;
                         if (marker.getCoreMarker() != null)
                             (marker.getCoreMarker()).displayLine = marker.displayLine;
                         button.setText("Display line : " + marker.displayLine, 16777215, 0.05F);
@@ -104,7 +104,7 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
             marker.gui.addButton(new InternalButton(-2.4F, startY, 4.8F, 0.5F))
                 .setColor(buttonColor).setText("Display grid : " + marker.displayGrid, 16777215, 0.05F)
                 .setListner(button -> {
-                        marker.displayGrid ^= 0x1;
+                        marker.displayGrid ^= true;
                         if (marker.getCoreMarker() != null)
                             (marker.getCoreMarker()).displayGrid = marker.displayGrid;
                         button.setText("Display grid : " + marker.displayGrid, 16777215, 0.05F);
@@ -115,7 +115,7 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
             marker.gui.addButton(new InternalButton(-2.4F, startY, 4.8F, 0.5F))
                 .setColor(buttonColor).setText("Display distance : " + marker.displayDistance, 16777215, 0.05F)
                 .setListner(button -> {
-                        marker.displayDistance ^= 0x1;
+                        marker.displayDistance ^= true;
                         button.setText("Display distance : " + marker.displayDistance, 16777215, 0.05F);
                     });
         }
@@ -196,10 +196,7 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
                     marker.linePos[j] = new float[max + 1][];
                     for (int k = 0; k < (marker.linePos[j]).length; k++) {
                         double[] p1 = rm.getRailPos(max, k);
-                        (new float[3])[0] = (float)(p1[1] - p2[1]);
-                        (new float[3])[1] = (float)(rm.getRailHeight(max, k) - h2);
-                        (new float[3])[2] = (float)(p1[0] - p2[0]);
-                        marker.linePos[j][k] = new float[3];
+                        marker.linePos[j][k] = new float[]{(float)(p1[1] - p2[1]), (float)(rm.getRailHeight(max, j) - h2), (float)(p1[0] - p2[0])};
                     }
                 }
             }
@@ -228,7 +225,7 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
 
     private void renderAnchor(TileEntityMarker marker, float x, float y, float z) {
         if (changeAnchor(marker))
-            marker.linePos = (float[][][])null;
+            marker.linePos = null;
         GL11.glPushMatrix();
         GL11.glTranslatef(x, y, z);
         MarkerElement hoveredElement = MarkerElement.values()[marker.editMode];
@@ -355,7 +352,7 @@ public final class RenderMarkerBlock extends TileEntitySpecialRenderer<TileEntit
             rp.cantEdge = cant;
             RailMap map = marker.getRailMaps()[0];
             float cantAve = ((map.getStartRP()).cantEdge + (map.getEndRP()).cantEdge) * 0.5F;
-            (map.getEndRP()).cantCenter = cantAve;
+            map.getStartRP().cantCenter = map.getEndRP().cantCenter = cantAve;
             marker.getCoreMarker().updateRailMap();
             return true;
         }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/RenderRailBlock.java b/src/main/rtm/jp/ngt/rtm/rail/RenderRailBlock.java
index 35c2b7d..129942b 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/RenderRailBlock.java
+++ b/src/main/rtm/jp/ngt/rtm/rail/RenderRailBlock.java
@@ -82,13 +82,19 @@ public final class RenderRailBlock {
             y2 += 0.125F;
             y3 += 0.125F;
         }
+        float f1;
+        float f2;
+        float f3;
+        float f4;
+        //
+        //
         IBlockState sideBlock = BlockUtil.getBlockState(world, x, y, z + 1);
         if (!sideBlock.isOpaqueCube() && !(sideBlock.getBlock() instanceof BlockLargeRailBase)) {
             TextureAtlasSprite textureAtlasSprite = getIcon(prop.block, prop.meta, 3);
-            float f1 = textureAtlasSprite.getMinU();
-            float f2 = textureAtlasSprite.getMaxU();
-            float f3 = textureAtlasSprite.getMaxV();
-            float f4 = f3 - textureAtlasSprite.getMinV();
+            f1 = textureAtlasSprite.getMinU();
+            f2 = textureAtlasSprite.getMaxU();
+            f3 = textureAtlasSprite.getMaxV();
+            f4 = f3 - textureAtlasSprite.getMinV();
             renderer.setColor(204, 204, 204, 255);
             renderer.addVertexWithUV(x + 0.0F, y + y0, z + 1.0F, f1, f3 - f4 * getV(y0));
             renderer.addVertexWithUV(x + 0.0F, y + 0.0F, z + 1.0F, f1, f3);
@@ -98,10 +104,10 @@ public final class RenderRailBlock {
         sideBlock = BlockUtil.getBlockState(world, x + 1, y, z);
         if (!sideBlock.isOpaqueCube() && !(sideBlock.getBlock() instanceof BlockLargeRailBase)) {
             TextureAtlasSprite textureAtlasSprite = getIcon(prop.block, prop.meta, 5);
-            float f1 = textureAtlasSprite.getMinU();
-            float f2 = textureAtlasSprite.getMaxU();
-            float f3 = textureAtlasSprite.getMaxV();
-            float f4 = f3 - textureAtlasSprite.getMinV();
+            f1 = textureAtlasSprite.getMinU();
+            f2 = textureAtlasSprite.getMaxU();
+            f3 = textureAtlasSprite.getMaxV();
+            f4 = f3 - textureAtlasSprite.getMinV();
             renderer.setColor(153, 153, 153, 255);
             renderer.addVertexWithUV(x + 1.0F, y + y1, z + 1.0F, f1, f3 - f4 * getV(y1));
             renderer.addVertexWithUV(x + 1.0F, y + 0.0F, z + 1.0F, f1, f3);
@@ -111,10 +117,10 @@ public final class RenderRailBlock {
         sideBlock = BlockUtil.getBlockState(world, x, y, z - 1);
         if (!sideBlock.isOpaqueCube() && !(sideBlock.getBlock() instanceof BlockLargeRailBase)) {
             TextureAtlasSprite textureAtlasSprite = getIcon(prop.block, prop.meta, 2);
-            float f1 = textureAtlasSprite.getMinU();
-            float f2 = textureAtlasSprite.getMaxU();
-            float f3 = textureAtlasSprite.getMaxV();
-            float f4 = f3 - textureAtlasSprite.getMinV();
+            f1 = textureAtlasSprite.getMinU();
+            f2 = textureAtlasSprite.getMaxU();
+            f3 = textureAtlasSprite.getMaxV();
+            f4 = f3 - textureAtlasSprite.getMinV();
             renderer.setColor(204, 204, 204, 255);
             renderer.addVertexWithUV(x + 1.0F, y + y2, z + 0.0F, f1, f3 - f4 * getV(y2));
             renderer.addVertexWithUV(x + 1.0F, y + 0.0F, z + 0.0F, f1, f3);
@@ -124,10 +130,10 @@ public final class RenderRailBlock {
         sideBlock = BlockUtil.getBlockState(world, x - 1, y, z);
         if (!sideBlock.isOpaqueCube() && !(sideBlock.getBlock() instanceof BlockLargeRailBase)) {
             TextureAtlasSprite textureAtlasSprite = getIcon(prop.block, prop.meta, 4);
-            float f1 = textureAtlasSprite.getMinU();
-            float f2 = textureAtlasSprite.getMaxU();
-            float f3 = textureAtlasSprite.getMaxV();
-            float f4 = f3 - textureAtlasSprite.getMinV();
+            f1 = textureAtlasSprite.getMinU();
+            f2 = textureAtlasSprite.getMaxU();
+            f3 = textureAtlasSprite.getMaxV();
+            f4 = f3 - textureAtlasSprite.getMinV();
             renderer.setColor(153, 153, 153, 255);
             renderer.addVertexWithUV(x + 0.0F, y + y3, z + 0.0F, f1, f3 - f4 * getV(y3));
             renderer.addVertexWithUV(x + 0.0F, y + 0.0F, z + 0.0F, f1, f3);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityLargeRailBase.java b/src/main/rtm/jp/ngt/rtm/rail/TileEntityLargeRailBase.java
index 01fa44a..29e4053 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityLargeRailBase.java
+++ b/src/main/rtm/jp/ngt/rtm/rail/TileEntityLargeRailBase.java
@@ -78,7 +78,7 @@ public class TileEntityLargeRailBase extends TileEntityCustom implements ILargeR
     }
 
     public RailMap getRailMap(Entity entity) {
-        TileEntityLargeRailCore tile = getRailCore();
+        ILargeRail tile = getRailCore();
         if (tile != null)
             return tile.getRailMap(entity);
         return null;
@@ -192,9 +192,9 @@ public class TileEntityLargeRailBase extends TileEntityCustom implements ILargeR
         int difX = x - prevX;
         int difY = y - prevY;
         int difZ = z - prevZ;
-        this.startPoint[0] = this.startPoint[0] + difX;
-        this.startPoint[1] = this.startPoint[1] + difY;
-        this.startPoint[2] = this.startPoint[2] + difZ;
+        this.startPoint[0] += difX;
+        this.startPoint[1] += difY;
+        this.startPoint[2] += difZ;
         super.setPos(x, y, z, prevX, prevY, prevZ);
     }
 
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityLargeRailCore.java b/src/main/rtm/jp/ngt/rtm/rail/TileEntityLargeRailCore.java
index c28a0d3..ad21f29 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityLargeRailCore.java
+++ b/src/main/rtm/jp/ngt/rtm/rail/TileEntityLargeRailCore.java
@@ -114,6 +114,7 @@ public abstract class TileEntityLargeRailCore extends TileEntityLargeRailBase im
     }
 
     public TileEntityLargeRailCore getRailCore() {
+        return this;
     }
 
     public void sendPacket() {
@@ -170,9 +171,8 @@ public abstract class TileEntityLargeRailCore extends TileEntityLargeRailBase im
 
     @Nullable
     public RailMap[] getAllRailMaps() {
-        RailMap rm = getRailMap((Entity)null);
-        (new RailMap[1])[0] = rm;
-        return (rm != null) ? new RailMap[1] : null;
+        RailMap rm = getRailMap(null);
+        return (rm != null) ? new RailMap[]{ rm } : null;
     }
 
     @SideOnly(Side.CLIENT)
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityMarker.java b/src/main/rtm/jp/ngt/rtm/rail/TileEntityMarker.java
index dc0fd9d..158e3b8 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityMarker.java
+++ b/src/main/rtm/jp/ngt/rtm/rail/TileEntityMarker.java
@@ -111,8 +111,8 @@ public class TileEntityMarker extends TileEntityCustom implements ITickable {
     public void setMarkersPos(List<int[]> list, boolean isClient) {
         if (list.size() == 2) {
             if (list.get(0) != null && list.get(1) != null) {
-                RailPosition rp0 = getMarkerRP(((int[])list.get(0))[0], ((int[])list.get(0))[1], ((int[])list.get(0))[2]);
-                RailPosition rp1 = getMarkerRP(((int[])list.get(1))[0], ((int[])list.get(1))[1], ((int[])list.get(1))[2]);
+                RailPosition rp0 = getMarkerRP(list.get(0)[0], list.get(0)[1], list.get(0)[2]);
+                RailPosition rp1 = getMarkerRP(list.get(1)[0], list.get(1)[1], list.get(1)[2]);
                 if (rp0 != null && rp1 != null) {
                     RailMap rm = new RailMap(rp0, rp1);
                     this.railMaps = new RailMap[] { rm };
@@ -125,7 +125,7 @@ public class TileEntityMarker extends TileEntityCustom implements ITickable {
                 if (rp0 != null)
                     list2.add(rp0);
             }
-            this.railMaps = (RailMap[])(new RailMaker(getWorld(), list2)).getSwitch().getAllRailMap();
+            this.railMaps = (new RailMaker(getWorld(), list2)).getSwitch().getAllRailMap();
         }
         if (this.railMaps == null)
             return;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityTurnTableCore.java b/src/main/rtm/jp/ngt/rtm/rail/TileEntityTurnTableCore.java
index 817a996..de674f6 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/TileEntityTurnTableCore.java
+++ b/src/main/rtm/jp/ngt/rtm/rail/TileEntityTurnTableCore.java
@@ -49,7 +49,7 @@ public class TileEntityTurnTableCore extends TileEntityLargeRailCore {
                 if (this.rotation >= 360.0F)
                     this.rotation = 0.0F;
                 RTMCore.NETWORK_WRAPPER.sendToAll((IMessage)new PacketNotice((byte)1, "TT:" + getRotation(), (TileEntity)this));
-                ((RailMapTurntable)getRailMap((Entity)null)).setRotation(this.rotation);
+                ((RailMapTurntable)getRailMap(null)).setRotation(this.rotation);
                 updateTrainYaw();
             }
         }
@@ -59,7 +59,7 @@ public class TileEntityTurnTableCore extends TileEntityLargeRailCore {
         List<EntityTrainBase> list = getWorld().getEntitiesWithinAABB(EntityTrainBase.class, new AxisAlignedBB((
                     getX() - 5), getY(), (getZ() - 5), (getX() + 5), (getY() + 3), (getZ() + 5)));
         for (EntityTrainBase train : list) {
-            Vec3 vec = PooledVec3.create(train.posX - getX() + 0.5D, 0.0D, train.posZ - getZ() + 0.5D);
+            Vec3 vec = PooledVec3.create(train.posX - (getX() + 0.5D), 0.0D, train.posZ - (getZ() + 0.5D));
             vec = vec.rotateAroundY(0.5F);
             train.setPositionAndRotation(getX() + 0.5D + vec.getX(), train.posY, getZ() + 0.5D + vec.getZ(), train.rotationYaw + 0.5F, train.rotationPitch);
             train.bogieController.updateBogiePos(train, 0, BogieController.UpdateFlag.YAW);
@@ -110,7 +110,7 @@ public class TileEntityTurnTableCore extends TileEntityLargeRailCore {
     }
 
     public String getRailShapeName() {
-        RailMap map = getRailMap((Entity)null);
+        RailMap map = getRailMap(null);
         StringBuilder sb = new StringBuilder();
         sb.append("Type:TurnTable, ");
         sb.append("X:").append((map.getEndRP()).blockX - (map.getStartRP()).blockX).append(", ");
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/Point.java b/src/main/rtm/jp/ngt/rtm/rail/util/Point.java
index 2268165..3c6fdfc 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/Point.java
+++ b/src/main/rtm/jp/ngt/rtm/rail/util/Point.java
@@ -102,8 +102,8 @@ public final class Point {
                 float yawB = this.rmBranch.getRailRotation(splitB, j);
                 Vec3 vecB = PooledVec3.create(vxB, 0.0D, 0.0D);
                 vecB = vecB.rotateAroundY(yawB);
-                double difX = posM[1] + vecM.getX() - posB[1] + vecB.getX();
-                double difZ = posM[0] + vecM.getZ() - posB[0] + vecB.getZ();
+                double difX = posM[1] + vecM.getX() - (posB[1] + vecB.getX());
+                double difZ = posM[0] + vecM.getZ() - (posB[0] + vecB.getZ());
                 double d0 = difX * difX + difZ * difZ;
                 if (d0 < distanceSq) {
                     this.crossAngle = MathHelper.wrapDegrees(yawM - yawB) % 90.0F;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/RailMap.java b/src/main/rtm/jp/ngt/rtm/rail/util/RailMap.java
index 78db43b..86ec6fb 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/RailMap.java
+++ b/src/main/rtm/jp/ngt/rtm/rail/util/RailMap.java
@@ -137,9 +137,9 @@ public class RailMap {
     public void setRail(World world, Block block, int x0, int y0, int z0, ResourceStateRail prop) {
         createRailList(prop);
         for (int i = 0; i < this.rails.size(); i++) {
-            int x = ((int[])this.rails.get(i))[0];
-            int y = ((int[])this.rails.get(i))[1];
-            int z = ((int[])this.rails.get(i))[2];
+            int x = this.rails.get(i)[0];
+            int y = this.rails.get(i)[1];
+            int z = this.rails.get(i)[2];
             Block block2 = BlockUtil.getBlock((IBlockAccess)world, x, y, z);
             if (!(block2 instanceof BlockLargeRailBase) || block2 == block) {
                 BlockUtil.setBlock(world, x, y, z, block, 0, 2);
@@ -153,9 +153,9 @@ public class RailMap {
     public void breakRail(World world, ResourceStateRail prop, TileEntityLargeRailCore core) {
         createRailList(prop);
         for (int i = 0; i < this.rails.size(); i++) {
-            int x = ((int[])this.rails.get(i))[0];
-            int y = ((int[])this.rails.get(i))[1];
-            int z = ((int[])this.rails.get(i))[2];
+            int x = this.rails.get(i)[0];
+            int y = this.rails.get(i)[1];
+            int z = this.rails.get(i)[2];
             if (BlockUtil.getBlock((IBlockAccess)world, x, y, z) instanceof BlockLargeRailBase) {
                 TileEntityLargeRailBase rail = (TileEntityLargeRailBase)BlockUtil.getTileEntity((IBlockAccess)world, x, y, z);
                 if (rail != core) {
@@ -173,9 +173,9 @@ public class RailMap {
         createRailList(prop);
         boolean flag = true;
         for (int i = 0; i < this.rails.size(); i++) {
-            int x = ((int[])this.rails.get(i))[0];
-            int y = ((int[])this.rails.get(i))[1];
-            int z = ((int[])this.rails.get(i))[2];
+            int x = this.rails.get(i)[0];
+            int y = this.rails.get(i)[1];
+            int z = this.rails.get(i)[2];
             IBlockState state = world.getBlockState(new BlockPos(x, y, z));
             Block block = state.getBlock();
             boolean b0 = (block.getMaterial(state) == Material.AIR || block == RTMBlock.marker || block == RTMBlock.markerSwitch || (block instanceof BlockLargeRailBase && !((BlockLargeRailBase)block).isCore()));
@@ -227,7 +227,7 @@ public class RailMap {
         float cunt = c1 + c2;
         float rand = 0.0F;
         if (this.startRP.cantRandom > 0.0F) {
-            float x = (float)(getLength() * t / split) * this.startRP.cantRandom;
+            float x = (float)(getLength() * (double)(float)t / split) * this.startRP.cantRandom;
             float scale = 3.0F;
             rand = NGTMath.getSin(x) + NGTMath.getSin(x * 0.51F) + NGTMath.getSin(x * 0.252F) + NGTMath.getSin(x * 0.1253F) * 0.25F * scale;
         }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/RailMapSwitch.java b/src/main/rtm/jp/ngt/rtm/rail/util/RailMapSwitch.java
index 7e5bc38..3e944e3 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/RailMapSwitch.java
+++ b/src/main/rtm/jp/ngt/rtm/rail/util/RailMapSwitch.java
@@ -16,5 +16,6 @@ public final class RailMapSwitch extends RailMap {
     @Deprecated
     public RailMapSwitch setState(boolean par1) {
         this.isOpen = par1;
+        return this;
     }
 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/SwitchType.java b/src/main/rtm/jp/ngt/rtm/rail/util/SwitchType.java
index 00a005e..a34842b 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/rail/util/SwitchType.java
+++ b/src/main/rtm/jp/ngt/rtm/rail/util/SwitchType.java
@@ -179,9 +179,7 @@ public abstract class SwitchType {
                     if (dirDif > 4)
                         dirDif = 8 - dirDif;
                     if (dirDif > 2 && rpsCount < 4) {
-                        (new RailPosition[2])[0] = switchList.get(i);
-                        (new RailPosition[2])[1] = switchList.get(j);
-                        rps[rpsCount] = new RailPosition[2];
+                        rps[rpsCount] = new RailPosition[]{(RailPosition)switchList.get(i), (RailPosition)switchList.get(j)};
                         rpsCount++;
                     }
                 }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/BasicVehiclePartsRenderer.java b/src/main/rtm/jp/ngt/rtm/render/BasicVehiclePartsRenderer.java
index ccc0dac..6460159 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/BasicVehiclePartsRenderer.java
+++ b/src/main/rtm/jp/ngt/rtm/render/BasicVehiclePartsRenderer.java
@@ -29,7 +29,7 @@ public class BasicVehiclePartsRenderer extends VehiclePartsRenderer {
         super(par1);
     }
 
-    public void init(ModelSetVehicleBase<VehicleBaseConfig> par1, ModelObject par2) {
+    public void init(ModelSetVehicleBase par1, ModelObject par2) {
         VehicleBaseConfig cfg = par1.getConfig();
         List<String> list = new ArrayList<>();
         this.doorLeft = (cfg.door_left != null) ? getParts(list, cfg.door_left) : new PartsWithChildren[0];
@@ -45,10 +45,10 @@ public class BasicVehiclePartsRenderer extends VehiclePartsRenderer {
         if (bodyParts.isEmpty() && par2.model instanceof jp.ngt.ngtlib.renderer.model.NGTOModel)
             bodyParts.add("default");
         this.body = new Parts(bodyParts.<String>toArray(new String[list.size()]));
-        this.partsList.addAll(Arrays.asList((Parts[])this.doorLeft));
-        this.partsList.addAll(Arrays.asList((Parts[])this.doorRight));
-        this.partsList.addAll(Arrays.asList((Parts[])this.pantographFront));
-        this.partsList.addAll(Arrays.asList((Parts[])this.pantographBack));
+        this.partsList.addAll(Arrays.asList(this.doorLeft));
+        this.partsList.addAll(Arrays.asList(this.doorRight));
+        this.partsList.addAll(Arrays.asList(this.pantographFront));
+        this.partsList.addAll(Arrays.asList(this.pantographBack));
         this.partsList.add(this.body);
         super.init(par1, par2);
     }
@@ -57,9 +57,9 @@ public class BasicVehiclePartsRenderer extends VehiclePartsRenderer {
         PartsWithChildren[] array = new PartsWithChildren[parts.length];
         for (int i = 0; i < parts.length; i++) {
             array[i] = new PartsWithChildren((parts[i]).objects);
-            NGTUtil.addArray(list, (Object[])(parts[i]).objects);
+            NGTUtil.addArray(list, (parts[i]).objects);
             if ((parts[i]).childParts != null)
-                NGTUtil.addArray((array[i]).childParts, (Object[])getParts(list, (parts[i]).childParts));
+                NGTUtil.addArray((array[i]).childParts, getParts(list, (parts[i]).childParts));
         }
         return array;
     }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/ModelObject.java b/src/main/rtm/jp/ngt/rtm/render/ModelObject.java
index 2fa2c34..0eef90d 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/ModelObject.java
+++ b/src/main/rtm/jp/ngt/rtm/render/ModelObject.java
@@ -48,7 +48,7 @@ public class ModelObject {
 
     private int program;
 
-    public ModelObject(ModelConfig.ModelSource par1, ModelSetBase<ModelConfig> par2, PartsRenderer par3, Object... args) {
+    public ModelObject(ModelConfig.ModelSource par1, ModelSetBase par2, PartsRenderer par3, Object... args) {
         String filePath = par1.modelFile;
         this.model = ModelPackManager.INSTANCE.loadModel(filePath, 4, true, par2.getConfig(), par2.md5);
         Material[] materials = getMaterials(getTextureMap(par1.textures));
@@ -213,8 +213,8 @@ public class ModelObject {
     }
 
     public Material[] getMaterials(Map<String, String> map) {
-        Material[] materials;
         Map<String, Material> matMap = this.model.getMaterials();
+        Material[] materials;
         if (matMap.isEmpty()) {
             materials = new Material[] { new Material((byte)0, ModelPackManager.INSTANCE.getResource(map.get("default"))) };
         } else {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/NPCPartsRenderer.java b/src/main/rtm/jp/ngt/rtm/render/NPCPartsRenderer.java
index b98aa09..3e2feb6 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/NPCPartsRenderer.java
+++ b/src/main/rtm/jp/ngt/rtm/render/NPCPartsRenderer.java
@@ -108,6 +108,8 @@ public class NPCPartsRenderer extends EntityPartsRenderer<ModelSetNPC> {
                 this.rightArmAngleX = this.rightArmAngleX * 0.5F - radPIdiv10 * heldItemRight;
                 this.rightArmAngleY = -0.5235988F;
                 break;
+            case 0:
+            default:
         }
         this.leftArmAngleY = 0.0F;
         float swingProgress = getSwingProgress(entity, partialTicks);
@@ -121,7 +123,7 @@ public class NPCPartsRenderer extends EntityPartsRenderer<ModelSetNPC> {
             f = 1.0F - f;
             float f1 = NGTMath.getSin(f * NGTMath.PI);
             float f2 = NGTMath.getSin(swingProgress * NGTMath.PI) * -(this.headAngleX - 0.7F) * 0.75F;
-            this.rightArmAngleX = (float)(this.rightArmAngleX - f1 * 1.2D + f2);
+            this.rightArmAngleX = (float)(this.rightArmAngleX - (f1 * 1.2D + f2));
             this.rightArmAngleY += this.bodyAngleY * 2.0F;
             this.rightArmAngleZ += NGTMath.getSin(swingProgress * NGTMath.PI) * -0.4F;
         }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/Parts.java b/src/main/rtm/jp/ngt/rtm/render/Parts.java
index bc61807..7b120ee 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/Parts.java
+++ b/src/main/rtm/jp/ngt/rtm/render/Parts.java
@@ -45,7 +45,7 @@ public class Parts {
     }
 
     public boolean containsName(String name) {
-        return NGTUtil.contains((Object[])this.objNames, name);
+        return NGTUtil.contains(this.objNames, name);
     }
 
     public void render(PartsRenderer renderer) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/PartsRenderer.java b/src/main/rtm/jp/ngt/rtm/render/PartsRenderer.java
index eaadcc3..030a2bf 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/PartsRenderer.java
+++ b/src/main/rtm/jp/ngt/rtm/render/PartsRenderer.java
@@ -185,7 +185,7 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
         if (par1 == 1.0F || par1 == 0.0F)
             return par1;
         float f0 = (par1 - 0.5F) * 5.0F;
-        float f1 = (float)(f0 / Math.sqrt(1.0D + f0 * f0));
+        float f1 = (float)(f0 / Math.sqrt(1.0D + (double)f0 * f0));
         return (f1 + 1.0F) * 0.5F;
     }
 
@@ -365,7 +365,7 @@ public abstract class PartsRenderer<T, MS extends ModelSetBase> {
         if (ray == null || ray.typeOfHit != RayTraceResult.Type.BLOCK)
             return;
         float centerZ = (float)(ray.hitVec.length() - vecOrig.length());
-        float size = rS + (rL - rS) * centerZ / length;
+        float size = rS + (rL - rS) * (centerZ / length);
         GL11.glEnable(3553);
         NGTUtilClient.bindTexture(TEX_LIGHT);
         NGTTessellator tessellator = NGTTessellator.instance;
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/RailPartsRendererBase.java b/src/main/rtm/jp/ngt/rtm/render/RailPartsRendererBase.java
index fd492a2..08a5cda 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/RailPartsRendererBase.java
+++ b/src/main/rtm/jp/ngt/rtm/render/RailPartsRendererBase.java
@@ -96,17 +96,17 @@ public class RailPartsRendererBase extends TileEntityPartsRenderer<ModelSetRail>
                 int max = (int)((float)rm.getLength() * 2.0F);
                 double[] stPoint = rm.getRailPos(max, 0);
                 double startH = (rm.getStartRP()).posY;
-                float moveX = (float)(stPoint[1] - par1.getStartPoint()[0] + 0.5D + rev[0]);
-                float moveZ = (float)(stPoint[0] - par1.getStartPoint()[2] + 0.5D + rev[1]);
+                float moveX = (float)(stPoint[1] - (par1.getStartPoint()[0] + 0.5D + rev[0]));
+                float moveZ = (float)(stPoint[0] - (par1.getStartPoint()[2] + 0.5D + rev[1]));
                 for (int i = 0; i < max + 1; i++) {
                     double[] curPoint = rm.getRailPos(max, i);
                     float[] array = { moveX + (float)(curPoint[1] - stPoint[1]), (float)(rm.getRailHeight(max, i) - startH), moveZ + (float)(curPoint[0] - stPoint[0]), rm.getRailRotation(max, i), -rm.getRailPitch(max, i), rm.getCant(max, i) };
                     list.add(array);
                 }
             }
-            return list.<float[]>toArray(new float[list.size()][5]);
+            return list.toArray(new float[list.size()][5]);
         }
-        return (float[][])null;
+        return null;
     }
 
     protected final FloatBuffer createMatrix(float[][] rp) {
@@ -148,7 +148,7 @@ public class RailPartsRendererBase extends TileEntityPartsRenderer<ModelSetRail>
     }
 
     private final void tessellateParts(TileEntityLargeRailCore tileEntity, FloatBuffer matrix, int[] brightness, List<GroupObject> gObjList) {
-        PolygonRenderer polygonRenderer = PolygonRenderer.INSTANCE;
+        IRenderer polygonRenderer = PolygonRenderer.INSTANCE;
         polygonRenderer.startDrawing(4);
         int capacity = matrix.capacity() >> 4;
         for (int i = 0; i < capacity; i++) {
@@ -183,8 +183,8 @@ public class RailPartsRendererBase extends TileEntityPartsRenderer<ModelSetRail>
         double origHeight = rm.getRailHeight(max, 0);
         int[] startPos = tileEntity.getStartPoint();
         float[] revXZ = RailPosition.REVISION[(tileEntity.getRailPositions()[0]).direction];
-        float moveX = (float)(origPos[1] - startPos[0] + 0.5D + revXZ[0]);
-        float moveZ = (float)(origPos[0] - startPos[2] + 0.5D + revXZ[1]);
+        float moveX = (float)(origPos[1] - (startPos[0] + 0.5D + revXZ[0]));
+        float moveZ = (float)(origPos[0] - (startPos[2] + 0.5D + revXZ[1]));
         for (int i = startIndex; i <= endIndex; i++) {
             double[] p1 = rm.getRailPos(max, i);
             double h = rm.getRailHeight(max, i);
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/WirePartsRenderer.java b/src/main/rtm/jp/ngt/rtm/render/WirePartsRenderer.java
index 3b52215..88bae5a 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/render/WirePartsRenderer.java
+++ b/src/main/rtm/jp/ngt/rtm/render/WirePartsRenderer.java
@@ -47,9 +47,9 @@ public class WirePartsRenderer extends TileEntityPartsRenderer<ModelSetWire> {
             if (canUseColor)
                 GLHelper.setColor((connection.getResourceState()).color, 255);
             if (cfg.deflectionCoefficient > 0.0F) {
-                renderWireDeflection(tileEntity, connection, target, par8, pass, (Parts)null);
+                renderWireDeflection(tileEntity, connection, target, par8, pass, null);
             } else {
-                renderWireStraight(tileEntity, connection, target, par8, pass, (Parts)null);
+                renderWireStraight(tileEntity, connection, target, par8, pass, null);
             }
             if (canUseColor)
                 GLHelper.setColor(16777215, 255);
@@ -94,7 +94,7 @@ public class WirePartsRenderer extends TileEntityPartsRenderer<ModelSetWire> {
         double alpha = (cfg.deflectionCoefficient * NGTMath.cos(pitch)) / Math.pow(lc, lx);
         double a = 0.0D;
         if (lx > 0.0D)
-            a = (lx - ly / alpha * lx) / 2.0D;
+            a = (lx - ly / (alpha * lx)) / 2.0D;
         double x = 0.0D;
         int i = 0;
         while (x < lx) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/MovingSoundMaker.java b/src/main/rtm/jp/ngt/rtm/sound/MovingSoundMaker.java
index 8d9356a..0dffa78 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/MovingSoundMaker.java
+++ b/src/main/rtm/jp/ngt/rtm/sound/MovingSoundMaker.java
@@ -49,6 +49,7 @@ public final class MovingSoundMaker {
         String domain;
         if (sound.contains("ogg"))
             return sound;
+        String path;
         if (sound.contains(":")) {
             String[] sa = sound.split(":");
             domain = sa[0];
@@ -62,7 +63,7 @@ public final class MovingSoundMaker {
         Map<String, String> map = NAME_COMPATIBLE_MAP.get(domain);
         if (map.containsKey(sound))
             return map.get(sound);
-        String path = path.replace('.', '/');
+        path = path.replace('.', '/');
         return domain + ":sounds/" + path + ".ogg";
     }
 
@@ -73,8 +74,8 @@ public final class MovingSoundMaker {
             Map<String, SoundListDummy> map = (Map<String, SoundListDummy>)NGTJson.getGson().fromJson(json, TYPE);
             for (Map.Entry<String, SoundListDummy> entry : map.entrySet()) {
                 if (!((SoundListDummy)entry.getValue()).sounds.isEmpty()) {
-                    String path;
                     Object obj = ((SoundListDummy)entry.getValue()).sounds.get(0);
+                    String path;
                     if (obj instanceof Map) {
                         path = (String)((Map)obj).get("name");
                     } else {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SoundObj.java b/src/main/rtm/jp/ngt/rtm/sound/SoundObj.java
index 13a39e6..d58f64e 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SoundObj.java
+++ b/src/main/rtm/jp/ngt/rtm/sound/SoundObj.java
@@ -17,13 +17,13 @@ public class SoundObj {
     public SoundObj(String par1) {
         this.name = par1;
         String[] sa = par1.split(":");
-        this.location = (ResourceLocation)new ResourceLocationCustom(sa[0], sa[1]);
+        this.location = new ResourceLocationCustom(sa[0], sa[1]);
         this.sound = new SoundEvent(this.location);
     }
 
     public void init() {
         this.sound.setRegistryName(this.location);
-        ForgeRegistries.SOUND_EVENTS.register((IForgeRegistryEntry)this.sound);
+        ForgeRegistries.SOUND_EVENTS.register(this.sound);
     }
 
     public SoundEvent getSound() {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SoundUpdaterVehicle.java b/src/main/rtm/jp/ngt/rtm/sound/SoundUpdaterVehicle.java
index 89e2c6a..eabca9c 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SoundUpdaterVehicle.java
+++ b/src/main/rtm/jp/ngt/rtm/sound/SoundUpdaterVehicle.java
@@ -38,7 +38,7 @@ public class SoundUpdaterVehicle<T extends EntityVehicleBase> implements IUpdate
     }
 
     public void update() {
-        ModelSetVehicleBase modelset = this.vehicle.getResourceState().getResourceSet();
+        ModelSetVehicleBase modelset = (ModelSetVehicleBase) this.vehicle.getResourceState().getResourceSet();
         if (modelset.soundSE != null) {
             ScriptUtil.doScriptIgnoreError(modelset.soundSE, "onUpdate", new Object[] { this });
         } else if (((EntityVehicleBase)this.vehicle).isDead) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SpeakerSounds.java b/src/main/rtm/jp/ngt/rtm/sound/SpeakerSounds.java
index 0b46f6f..5d67fcb 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/sound/SpeakerSounds.java
+++ b/src/main/rtm/jp/ngt/rtm/sound/SpeakerSounds.java
@@ -37,7 +37,7 @@ public class SpeakerSounds {
         File file = new File(NGTFileLoader.getModsDir().get(0), "rtm/speaker_sounds.json");
         if (file.exists())
             try {
-                this.sounds = (String[])NGTJson.getObjectFromJson(NGTText.readText(file, false, ""), String[].class);
+                this.sounds = NGTJson.getObjectFromJson(NGTText.readText(file, false, ""), String[].class);
             } catch (IOException e) {
                 e.printStackTrace();
             }
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/world/RTMChunkManager.java b/src/main/rtm/jp/ngt/rtm/world/RTMChunkManager.java
index 28de039..1acffec 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/world/RTMChunkManager.java
+++ b/src/main/rtm/jp/ngt/rtm/world/RTMChunkManager.java
@@ -22,6 +22,9 @@ import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 public final class RTMChunkManager implements ForgeChunkManager.LoadingCallback, ForgeChunkManager.OrderedLoadingCallback, ForgeChunkManager.PlayerOrderedLoadingCallback {
     public static final RTMChunkManager INSTANCE = new RTMChunkManager();
 
+    private RTMChunkManager() {
+    }
+
     @SubscribeEvent
     public void entityEnteredChunk(EntityEvent.EnteringChunk event) {
         if (event.getEntity() instanceof IChunkLoader) {
diff --git a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/world/station/StationManager.java b/src/main/rtm/jp/ngt/rtm/world/station/StationManager.java
index 18b6d6c..04caa80 100644
--- a/mods/rtm.deobf.jar.src.processed/jp/ngt/rtm/world/station/StationManager.java
+++ b/src/main/rtm/jp/ngt/rtm/world/station/StationManager.java
@@ -9,6 +9,9 @@ public final class StationManager {
 
     public StationCollection stationCollection;
 
+    private StationManager() {
+    }
+
     public void loadData(World world) {
         this.stationCollection = (StationCollection)world.loadData(StationCollection.class, "rtm_stations");
         if (this.stationCollection == null) {
